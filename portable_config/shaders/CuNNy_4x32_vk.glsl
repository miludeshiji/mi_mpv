// CuNNy 4x32 (dp4a)
// Copyright (c) 2024 funnyplanter

// This program is free software; you can redistribute it and/or
// modify it under the terms of the GNU Lesser General Public
// License as published by the Free Software Foundation; either
// version 3.0 of the License, or (at your option) any later version.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
// Lesser General Public License for more details.
//
// You should have received a copy of the GNU Lesser General Public
// License along with this program.  If not, see <https://www.gnu.org/licenses/>.
/* ------------------------------------------------------------------- */


//!DESC CuNNy-4x32-in
//!HOOK LUMA
//!COMPUTE 32 16 8 8
//!BIND LUMA
//!SAVE in
//!WIDTH LUMA.w 4 *
//!HEIGHT LUMA.h 2 *
//!COMPONENTS 4
//!WHEN OUTPUT.w LUMA.w / 1.3 > OUTPUT.h LUMA.h / 1.3 > *
#extension GL_EXT_shader_explicit_arithmetic_types_float16 : enable
#ifdef GL_EXT_shader_explicit_arithmetic_types_float16
#	define V4 f16vec4
#	define M4 f16mat4
#	define F float16_t
#else
#	define V4 vec4
#	define M4 mat4
#	define F float
#endif
#define l0(x, y) F((LUMA_mul * texelFetch(LUMA_raw, clamp(pos + ivec2(x, y), ivec2(0), sz) * ivec2(1, 1) + ivec2(0, 0), 0)).r)
shared F G[1][10][10];
void hook() {
	ivec2 xy = ivec2(gl_LocalInvocationID.xy);
	ivec2 pos = ivec2(gl_WorkGroupID.xy) * ivec2(8, 8) + xy;
	ivec2 opos = pos * ivec2(4, 2);
	ivec2 sz = ivec2(LUMA_size) - ivec2(1);
	for (int y = 0; y < 10; y += 8) {
		int ay = xy.y + y;
		if (ay >= 10) break;
		for (int x = 0; x < 10; x += 8) {
			int ax = xy.x + x;
			if (ax >= 10) break;
			G[0][ay][ax] = l0(x - 1, y - 1);
		}
	}
	barrier();
	F s0_0_0, s0_0_1, s0_0_2, s0_1_0, s0_1_1, s0_1_2, s0_2_0, s0_2_1, s0_2_2;
	V4 r0, r1, r2, r3, r4, r5, r6, r7;
	r0 = V4(0.0); r1 = V4(0.0); r2 = V4(0.0); r3 = V4(0.0); r4 = V4(0.0); r5 = V4(0.0); r6 = V4(0.0); r7 = V4(0.0);
	s0_0_0 = G[0][xy.y+0][xy.x+0]; s0_0_1 = G[0][xy.y+0][xy.x+1];
	s0_0_2 = G[0][xy.y+0][xy.x+2]; s0_1_0 = G[0][xy.y+1][xy.x+0];
	s0_1_1 = G[0][xy.y+1][xy.x+1]; s0_1_2 = G[0][xy.y+1][xy.x+2];
	s0_2_0 = G[0][xy.y+2][xy.x+0]; s0_2_1 = G[0][xy.y+2][xy.x+1];
	s0_2_2 = G[0][xy.y+2][xy.x+2];
	r0 += V4(-2.804e-03, 2.655e-02, -3.886e-01, -2.406e-02) * s0_0_0;
	r1 += V4(-1.390e-02, -4.357e-04, -7.454e-02, -1.840e-01) * s0_0_0;
	r2 += V4(-6.802e-04, 1.320e-02, -5.923e-03, 9.524e-03) * s0_0_0;
	r3 += V4(1.702e-03, -4.742e-02, 2.524e-03, 2.867e-02) * s0_0_0;
	r4 += V4(3.881e-03, -2.595e-02, -5.667e-02, -1.401e-02) * s0_0_0;
	r5 += V4(-1.087e-02, 4.619e-02, -2.867e-02, -8.524e-02) * s0_0_0;
	r6 += V4(-4.074e-02, -2.220e-01, -1.880e-02, 6.352e-02) * s0_0_0;
	r7 += V4(2.096e-02, -1.338e-01, -7.094e-03, -1.376e-01) * s0_0_0;
	r0 += V4(6.611e-04, -4.067e-02, 4.974e-01, 4.843e-01) * s0_0_1;
	r1 += V4(3.659e-01, -1.727e-02, 2.377e-02, 4.334e-01) * s0_0_1;
	r2 += V4(-1.029e-02, 2.322e-02, 7.876e-03, -1.595e-02) * s0_0_1;
	r3 += V4(-7.971e-03, -2.824e-01, -4.593e-03, -3.454e-02) * s0_0_1;
	r4 += V4(-6.532e-03, 3.392e-02, -2.242e-01, 1.880e-01) * s0_0_1;
	r5 += V4(1.067e-02, 2.816e-01, -1.203e-01, 8.374e-02) * s0_0_1;
	r6 += V4(8.849e-03, 1.950e-01, -1.325e-02, 8.636e-03) * s0_0_1;
	r7 += V4(-2.653e-03, -8.813e-02, -3.880e-01, -1.303e-01) * s0_0_1;
	r0 += V4(1.277e-04, 1.313e-02, -9.991e-02, 5.738e-03) * s0_0_2;
	r1 += V4(-3.564e-01, 1.698e-02, -6.235e-03, -2.629e-01) * s0_0_2;
	r2 += V4(3.483e-03, 1.779e-02, -8.447e-04, -4.506e-05) * s0_0_2;
	r3 += V4(-3.420e-05, 1.406e-02, 1.446e-03, 1.202e-02) * s0_0_2;
	r4 += V4(1.879e-03, 1.720e-02, -2.064e-01, 2.251e-01) * s0_0_2;
	r5 += V4(2.592e-01, 2.476e-01, 1.265e-01, 3.881e-02) * s0_0_2;
	r6 += V4(-5.862e-03, 9.202e-02, 8.769e-03, -7.107e-02) * s0_0_2;
	r7 += V4(-3.598e-02, -5.496e-02, -1.210e-01, 7.839e-03) * s0_0_2;
	r0 += V4(-3.348e-03, 4.527e-01, 3.954e-01, 2.439e-03) * s0_1_0;
	r1 += V4(-3.358e-01, -3.105e-02, -1.145e-01, -7.219e-02) * s0_1_0;
	r2 += V4(1.004e-01, 5.385e-02, 5.698e-01, -5.475e-03) * s0_1_0;
	r3 += V4(-6.756e-03, -2.342e-01, -1.017e-03, -3.239e-01) * s0_1_0;
	r4 += V4(2.509e-04, 2.607e-02, 1.036e-02, 1.649e-03) * s0_1_0;
	r5 += V4(2.787e-03, -1.242e-02, 4.113e-02, -1.560e-01) * s0_1_0;
	r6 += V4(4.346e-01, -1.197e-01, 2.333e-01, -7.101e-02) * s0_1_0;
	r7 += V4(7.158e-02, -1.548e-01, 5.446e-03, -7.351e-02) * s0_1_0;
	r0 += V4(-7.168e-01, -3.695e-01, -2.979e-01, -4.902e-01) * s0_1_1;
	r1 += V4(-1.075e-02, 2.612e-01, 5.440e-01, 1.167e-02) * s0_1_1;
	r2 += V4(-9.127e-02, 1.541e-03, -1.332e-02, 6.448e-01) * s0_1_1;
	r3 += V4(-2.464e-03, 1.922e-01, 2.119e-03, 1.925e-01) * s0_1_1;
	r4 += V4(-5.449e-01, -5.186e-01, -1.751e-01, -3.617e-01) * s0_1_1;
	r5 += V4(-6.426e-01, -2.016e-01, -5.351e-01, -8.610e-02) * s0_1_1;
	r6 += V4(-4.142e-01, -2.345e-01, -4.393e-01, -4.799e-01) * s0_1_1;
	r7 += V4(3.930e-01, 4.549e-01, 6.218e-01, 5.215e-01) * s0_1_1;
	r0 += V4(-1.664e-02, -8.627e-02, -8.395e-02, 9.947e-03) * s0_1_2;
	r1 += V4(3.506e-01, -1.214e-02, -3.799e-01, 6.954e-02) * s0_1_2;
	r2 += V4(-8.318e-05, 3.798e-02, -4.090e-03, 2.308e-02) * s0_1_2;
	r3 += V4(-1.053e-02, 2.007e-01, -6.781e-04, 6.445e-02) * s0_1_2;
	r4 += V4(-1.325e-02, 2.103e-02, -6.772e-02, -4.507e-01) * s0_1_2;
	r5 += V4(3.816e-01, 7.383e-02, 5.149e-01, 4.335e-01) * s0_1_2;
	r6 += V4(8.390e-03, 2.568e-01, 2.596e-01, 5.603e-01) * s0_1_2;
	r7 += V4(-1.654e-01, -2.007e-01, -1.091e-01, -1.543e-02) * s0_1_2;
	r0 += V4(4.702e-03, -4.689e-01, 4.399e-04, -1.126e-02) * s0_2_0;
	r1 += V4(3.380e-01, 2.051e-02, -6.583e-02, -3.057e-02) * s0_2_0;
	r2 += V4(5.187e-01, 4.963e-02, 3.549e-03, -4.613e-03) * s0_2_0;
	r3 += V4(-4.176e-03, -3.739e-03, -6.781e-01, -8.707e-02) * s0_2_0;
	r4 += V4(-4.997e-03, 1.865e-02, 4.820e-02, 1.167e-02) * s0_2_0;
	r5 += V4(7.499e-03, -4.162e-02, -1.742e-02, -5.911e-02) * s0_2_0;
	r6 += V4(-4.274e-01, 3.810e-01, 6.714e-02, -1.699e-02) * s0_2_0;
	r7 += V4(-5.583e-02, -1.462e-02, 5.749e-03, -7.397e-02) * s0_2_0;
	r0 += V4(7.185e-01, 3.972e-01, -9.665e-02, 3.377e-02) * s0_2_1;
	r1 += V4(-3.477e-01, -2.021e-02, -2.744e-01, 5.021e-02) * s0_2_1;
	r2 += V4(-5.013e-01, -6.306e+00, -5.605e-01, -6.198e-01) * s0_2_1;
	r3 += V4(1.005e+00, 2.384e-01, 6.816e-01, 1.062e-01) * s0_2_1;
	r4 += V4(1.426e-02, 3.808e-01, 4.196e-01, 1.736e-01) * s0_2_1;
	r5 += V4(-5.002e-03, -1.798e-01, -1.060e-01, -1.698e-01) * s0_2_1;
	r6 += V4(4.475e-01, -8.765e-02, -4.533e-02, -4.223e-03) * s0_2_1;
	r7 += V4(-2.667e-01, 2.726e-02, -1.720e-02, -3.071e-01) * s0_2_1;
	r0 += V4(1.577e-02, 7.145e-02, 7.399e-02, -9.228e-03) * s0_2_2;
	r1 += V4(6.257e-03, 3.954e-03, 8.468e-02, -1.741e-02) * s0_2_2;
	r2 += V4(-2.139e-02, 7.620e-02, 4.881e-03, -2.866e-02) * s0_2_2;
	r3 += V4(-6.856e-03, -7.788e-02, -1.485e-03, 1.886e-02) * s0_2_2;
	r4 += V4(5.502e-01, -1.140e-03, 2.536e-01, 2.261e-01) * s0_2_2;
	r5 += V4(-5.133e-03, -2.105e-01, 1.242e-01, -2.132e-03) * s0_2_2;
	r6 += V4(-1.116e-02, -2.654e-01, -3.879e-02, 1.677e-02) * s0_2_2;
	r7 += V4(1.935e-03, 2.643e-03, 9.843e-03, 3.886e-02) * s0_2_2;
	r0 += V4(3.651e-03, -6.938e-03, 4.177e-03, 1.617e-02);
	r0 = clamp(r0, V4(0.0), V4(1.0));
	imageStore(out_image, opos + ivec2(0, 0), vec4(r0));
	r1 += V4(-3.965e-04, -1.320e-01, 6.239e-03, 1.093e-02);
	r1 = clamp(r1, V4(0.0), V4(1.0));
	imageStore(out_image, opos + ivec2(1, 0), vec4(r1));
	r2 += V4(4.827e-03, 3.759e-02, 1.771e-04, 3.736e-03);
	r2 = clamp(r2, V4(0.0), V4(1.0));
	imageStore(out_image, opos + ivec2(0, 1), vec4(r2));
	r3 += V4(-9.512e-01, 9.696e-03, 3.357e-04, -1.695e-02);
	r3 = clamp(r3, V4(0.0), V4(1.0));
	imageStore(out_image, opos + ivec2(1, 1), vec4(r3));
	r4 += V4(3.198e-04, -1.828e-02, 8.858e-03, -1.012e-03);
	r4 = clamp(r4, V4(0.0), V4(1.0));
	imageStore(out_image, opos + ivec2(2, 0), vec4(r4));
	r5 += V4(2.479e-03, 8.268e-03, 8.386e-03, 8.443e-03);
	r5 = clamp(r5, V4(0.0), V4(1.0));
	imageStore(out_image, opos + ivec2(3, 0), vec4(r5));
	r6 += V4(8.471e-03, -4.357e-03, 6.112e-03, 4.776e-03);
	r6 = clamp(r6, V4(0.0), V4(1.0));
	imageStore(out_image, opos + ivec2(2, 1), vec4(r6));
	r7 += V4(-1.272e-02, -1.360e-03, 1.035e-02, 2.630e-03);
	r7 = clamp(r7, V4(0.0), V4(1.0));
	imageStore(out_image, opos + ivec2(3, 1), vec4(r7));
}

//!DESC CuNNy-4x32-conv1
//!HOOK LUMA
//!COMPUTE 32 16 8 8
//!BIND in
//!BIND LUMA
//!SAVE conv1
//!WIDTH LUMA.w 4 *
//!HEIGHT LUMA.h 2 *
//!COMPONENTS 4
//!WHEN OUTPUT.w LUMA.w / 1.3 > OUTPUT.h LUMA.h / 1.3 > *
#extension GL_EXT_spirv_intrinsics : require
spirv_instruction (extensions = ["SPV_KHR_integer_dot_product"], capabilities = [6019, 6018], id = 4450)
int dp4(int a, int b, spirv_literal int fmt);
#define D(r, s, a, b, c, d) r + ivec4(dp4(s, a, 0), dp4(s, b, 0), dp4(s, c, 0), dp4(s, d, 0))
shared int G[8][10][10];
void hook() {
	ivec2 xy = ivec2(gl_LocalInvocationID.xy);
	ivec2 pos = ivec2(gl_WorkGroupID.xy) * ivec2(8, 8) + xy;
	ivec2 opos = pos * ivec2(4, 2);
	ivec2 sz = ivec2(LUMA_size) - ivec2(1);
	for (int y = 0; y < 10; y += 8) {
		int ay = xy.y + y;
		if (ay >= 10) break;
		for (int x = 0; x < 10; x += 8) {
			int ax = xy.x + x;
			if (ax >= 10) break;
			vec2 p;
			vec4 r, g, b, a;
			p = vec2(clamp(pos + ivec2(x - 1, y - 1), ivec2(0), sz) * ivec2(4, 2) + ivec2(1, 1)) * in_pt;
			r = in_gather(p, 0);
			g = in_gather(p, 1);
			b = in_gather(p, 2);
			a = in_gather(p, 3);
			vec4 v0 = vec4(r.w, g.w, b.w, a.w) * 1.0000000e+00;
			vec4 v1 = vec4(r.z, g.z, b.z, a.z) * 1.0000000e+00;
			vec4 v2 = vec4(r.x, g.x, b.x, a.x) * 1.0000000e+00;
			vec4 v3 = vec4(r.y, g.y, b.y, a.y) * 1.0000000e+00;
			p = vec2(clamp(pos + ivec2(x - 1, y - 1), ivec2(0), sz) * ivec2(4, 2) + ivec2(3, 1)) * in_pt;
			r = in_gather(p, 0);
			g = in_gather(p, 1);
			b = in_gather(p, 2);
			a = in_gather(p, 3);
			vec4 v4 = vec4(r.w, g.w, b.w, a.w) * 1.0000000e+00;
			vec4 v5 = vec4(r.z, g.z, b.z, a.z) * 1.0000000e+00;
			vec4 v6 = vec4(r.x, g.x, b.x, a.x) * 1.0000000e+00;
			vec4 v7 = vec4(r.y, g.y, b.y, a.y) * 1.0000000e+00;
			G[0][ay][ax] = int(packSnorm4x8(v0));
			G[1][ay][ax] = int(packSnorm4x8(v1));
			G[2][ay][ax] = int(packSnorm4x8(v2));
			G[3][ay][ax] = int(packSnorm4x8(v3));
			G[4][ay][ax] = int(packSnorm4x8(v4));
			G[5][ay][ax] = int(packSnorm4x8(v5));
			G[6][ay][ax] = int(packSnorm4x8(v6));
			G[7][ay][ax] = int(packSnorm4x8(v7));
		}
	}
	barrier();
	int s0_0_0, s0_0_1, s0_0_2, s0_1_0, s0_1_1, s0_1_2, s0_2_0, s0_2_1, s0_2_2, s1_0_0, s1_0_1, s1_0_2, s1_1_0, s1_1_1, s1_1_2, s1_2_0, s1_2_1, s1_2_2;
	ivec4 r0, r1, r2, r3, r4, r5, r6, r7;
	vec4 f0, f1, f2, f3, f4, f5, f6, f7;
	r0 = ivec4(0); r1 = ivec4(0); r2 = ivec4(0); r3 = ivec4(0); r4 = ivec4(0); r5 = ivec4(0); r6 = ivec4(0); r7 = ivec4(0);
	s0_0_0 = G[0][xy.y+0][xy.x+0]; s0_0_1 = G[0][xy.y+0][xy.x+1];
	s0_0_2 = G[0][xy.y+0][xy.x+2]; s0_1_0 = G[0][xy.y+1][xy.x+0];
	s0_1_1 = G[0][xy.y+1][xy.x+1]; s0_1_2 = G[0][xy.y+1][xy.x+2];
	s0_2_0 = G[0][xy.y+2][xy.x+0]; s0_2_1 = G[0][xy.y+2][xy.x+1];
	s0_2_2 = G[0][xy.y+2][xy.x+2]; s1_0_0 = G[1][xy.y+0][xy.x+0];
	s1_0_1 = G[1][xy.y+0][xy.x+1]; s1_0_2 = G[1][xy.y+0][xy.x+2];
	s1_1_0 = G[1][xy.y+1][xy.x+0]; s1_1_1 = G[1][xy.y+1][xy.x+1];
	s1_1_2 = G[1][xy.y+1][xy.x+2]; s1_2_0 = G[1][xy.y+2][xy.x+0];
	s1_2_1 = G[1][xy.y+2][xy.x+1]; s1_2_2 = G[1][xy.y+2][xy.x+2];
	r0 = D(r0, s0_0_0, 0x4C0F1BB1, 0xFB051116, 0xE7130A02, 0x0000FF0A);
	r1 = D(r1, s0_0_0, 0xE3FBE926, 0xF702F2F4, 0xEE080DF1, 0x120314D9);
	r2 = D(r2, s0_0_0, 0x20F21EB3, 0xDCFE02EF, 0xF90608B7, 0xD7080C81);
	r3 = D(r3, s0_0_0, 0x0D01FCF4, 0x05FB07F1, 0x0AF90FF5, 0x050C28DD);
	r4 = D(r4, s0_0_0, 0xF507EFFC, 0x04011506, 0x01FF0214, 0x07FB0806);
	r5 = D(r5, s0_0_0, 0xEC0A0F29, 0x0F0E1CED, 0x000427C4, 0xE9FA12D7);
	r6 = D(r6, s0_0_0, 0x16063615, 0x0C0F1311, 0xF7F518FC, 0xFD0B0116);
	r7 = D(r7, s0_0_0, 0xF912EEF7, 0xF80CE6FA, 0x0302F80A, 0xFB1106EB);
	r0 = D(r0, s0_0_1, 0x0A32C22C, 0xF60D0D03, 0xF412040B, 0x09FC0024);
	r1 = D(r1, s0_0_1, 0x00E7E9AA, 0x0A102A27, 0x0AF4ED81, 0xD9EDE002);
	r2 = D(r2, s0_0_1, 0xFA0EEA0E, 0xB8E310E9, 0xE4F837B2, 0x041AE922);
	r3 = D(r3, s0_0_1, 0xF10BE856, 0xFE01FFFB, 0xEC28250A, 0x140F27EE);
	r4 = D(r4, s0_0_1, 0xF8FFCED0, 0xFF07F981, 0xFF0707E1, 0x040406ED);
	r5 = D(r5, s0_0_1, 0xEC140924, 0x08FDF303, 0x120845EB, 0xD8113EFC);
	r6 = D(r6, s0_0_1, 0x03EA20DC, 0xE7110689, 0xF1170FF6, 0x091109F2);
	r7 = D(r7, s0_0_1, 0x0206F009, 0x10F9DD48, 0x0B04F71D, 0xFE0AF225);
	r0 = D(r0, s0_0_2, 0x0F2A48C7, 0x1FFDF82B, 0xEF03F402, 0x0B0802FF);
	r1 = D(r1, s0_0_2, 0x0CF2CBF5, 0xFE0109E1, 0xF1EFE9CC, 0xFDF4EED6);
	r2 = D(r2, s0_0_2, 0xED09F119, 0x24D10CCD, 0xE10AFDD5, 0x061118F6);
	r3 = D(r3, s0_0_2, 0xD8F657BD, 0xFF06FA05, 0xF5210017, 0x07121404);
	r4 = D(r4, s0_0_2, 0xEEFA14E1, 0x01081D09, 0x04FBF806, 0x01F4F316);
	r5 = D(r5, s0_0_2, 0xF2FCE2FE, 0x15FD59DD, 0x0902E31D, 0xF0FA3409);
	r6 = D(r6, s0_0_2, 0xDFF128F7, 0xE1FE01F8, 0x13FC00F7, 0x1401F010);
	r7 = D(r7, s0_0_2, 0xF8071602, 0xF6FC0AE0, 0x08FFFEF3, 0x0A081319);
	r0 = D(r0, s0_1_0, 0x081E19DB, 0x01040005, 0x140EF8F6, 0xF8F4F809);
	r1 = D(r1, s0_1_0, 0x0818290D, 0x011905FC, 0x31F70C0F, 0x1B100BFF);
	r2 = D(r2, s0_1_0, 0x3997EDCD, 0xF71DEC09, 0x01F9FEF3, 0xCCF02A98);
	r3 = D(r3, s0_1_0, 0x1E1811E5, 0xFFFEFD08, 0x0CD21AD7, 0x090802E4);
	r4 = D(r4, s0_1_0, 0x2814FA1B, 0xF4F70D10, 0xFF06FFFE, 0x081201EF);
	r5 = D(r5, s0_1_0, 0xFA02050F, 0xF0F001FE, 0x20B41EEE, 0xEDE155FE);
	r6 = D(r6, s0_1_0, 0xF326F00D, 0xEC140621, 0x12050709, 0xF414E91E);
	r7 = D(r7, s0_1_0, 0xFE080CEE, 0xFD0400EE, 0xFDFDFDFF, 0x0A0AF50B);
	r0 = D(r0, s0_1_1, 0x870FD77F, 0x24E20518, 0x06E7FF81, 0xF40402F4);
	r1 = D(r1, s0_1_1, 0x0A193CE7, 0xFD0DF336, 0xD3E0E133, 0x1718DF13);
	r2 = D(r2, s0_1_1, 0x060BECF2, 0x3F2C292E, 0x43E9FF0B, 0x0603D769);
	r3 = D(r3, s0_1_1, 0xE911CC59, 0x03150159, 0x021CFE18, 0x1331E928);
	r4 = D(r4, s0_1_1, 0xFF0B0681, 0x09F01EE6, 0xE3012F81, 0x0C082581);
	r5 = D(r5, s0_1_1, 0xDA21DC98, 0xF20DE108, 0x06CABB0F, 0x2B10260D);
	r6 = D(r6, s0_1_1, 0x0DE6E32A, 0x380017E0, 0xFA0B0F0A, 0x04FBEBB1);
	r7 = D(r7, s0_1_1, 0x1FFCF23B, 0x110FCD10, 0x0DF3121D, 0xFDDCF260);
	r0 = D(r0, s0_1_2, 0x25DAB081, 0xB2E50CF3, 0xFC0E19FF, 0xF309FB12);
	r1 = D(r1, s0_1_2, 0x23420AFC, 0xFC1D07FA, 0x03FDE1EA, 0x01FBFAF2);
	r2 = D(r2, s0_1_2, 0xFC02CF0D, 0x27F70007, 0x1C01D814, 0x151E010B);
	r3 = D(r3, s0_1_2, 0x41EA40AA, 0x000BF302, 0x2C13F31B, 0x08E90210);
	r4 = D(r4, s0_1_2, 0x11EFEAC6, 0x09220005, 0xF2FDE8FE, 0xF7EDDA21);
	r5 = D(r5, s0_1_2, 0x18EF07EE, 0x0EF4F5E0, 0x061213E3, 0x1EFEDC12);
	r6 = D(r6, s0_1_2, 0x3A0D1816, 0xD40BF5D0, 0x19430E0B, 0x0CD20D8D);
	r7 = D(r7, s0_1_2, 0x1BDE27F1, 0x18120E0F, 0x10F12CFB, 0xE6F119E9);
	r0 = D(r0, s0_2_0, 0x3D0EEA09, 0x0A07190A, 0xFC000E0E, 0x09F103F3);
	r1 = D(r1, s0_2_0, 0x2F23281A, 0xF3BAD8BC, 0x27F00511, 0x1A110204);
	r2 = D(r2, s0_2_0, 0x141100FF, 0xF033ED1A, 0xD6FA0401, 0x12D8F6E7);
	r3 = D(r3, s0_2_0, 0xE8131709, 0x020104F6, 0xFED611E7, 0x13E70B0C);
	r4 = D(r4, s0_2_0, 0xE912F003, 0x08F5F802, 0x06FDFA0F, 0xE0FDFBF8);
	r5 = D(r5, s0_2_0, 0x0AE50BEB, 0x22071113, 0xE9EA060C, 0x0C210BF5);
	r6 = D(r6, s0_2_0, 0xFAECE8FB, 0x1A090A24, 0xFBFE06FA, 0xEC0B0402);
	r7 = D(r7, s0_2_0, 0xE1FB03E6, 0x05042226, 0x080301F9, 0x10070AE4);
	r0 = D(r0, s0_2_1, 0xCB35EB0A, 0xDFFEE1E7, 0x0D01FEF5, 0x28FA0303);
	r1 = D(r1, s0_2_1, 0x81F5F7B4, 0xF100D118, 0xF40EF81F, 0xB6FAF1CB);
	r2 = D(r2, s0_2_1, 0x0E25F90A, 0x05071C0E, 0xEBFDFCF7, 0xF8F7E602);
	r3 = D(r3, s0_2_1, 0xFFE1C2E4, 0xE7E604F0, 0xE2E407F8, 0xE6FB1D22);
	r4 = D(r4, s0_2_1, 0x3AF20EFA, 0xE5200A07, 0x6719030B, 0xEEFB02D1);
	r5 = D(r5, s0_2_1, 0x2B0DF7E1, 0x03FA001E, 0x0B3B1519, 0x3533E9FF);
	r6 = D(r6, s0_2_1, 0x03E9041C, 0x19062602, 0x06CBFEFF, 0x2AF01508);
	r7 = D(r7, s0_2_1, 0xE2C9F4ED, 0xE30B2A8E, 0xEAF8F8F0, 0xACE3FCD9);
	r0 = D(r0, s0_2_2, 0x12DC5908, 0x01F8DD23, 0xF0E212F3, 0x030008FF);
	r1 = D(r1, s0_2_2, 0x5F091DAE, 0x1714EFE8, 0x29FE2604, 0x16F4F820);
	r2 = D(r2, s0_2_2, 0xE016FC04, 0xEFDFF0FD, 0xFAF503F8, 0x0D1107E3);
	r3 = D(r3, s0_2_2, 0x07F917E3, 0x02FD07FA, 0xFFF800F3, 0xF1F42902);
	r4 = D(r4, s0_2_2, 0x0A1C06FA, 0x061A04F7, 0xFCF6031C, 0x0A08FB21);
	r5 = D(r5, s0_2_2, 0x05E31109, 0xF4F80707, 0x1D0FFDF6, 0xFD0ECD13);
	r6 = D(r6, s0_2_2, 0x09FE1507, 0x0B0AF70B, 0x24DAC1F2, 0xF9FA05F9);
	r7 = D(r7, s0_2_2, 0xFCFD13FB, 0x02390B88, 0xE110F9F7, 0x161417CC);
	r0 = D(r0, s1_0_0, 0x0C1CFADC, 0x00E91AFE, 0xFDFBFC03, 0xFF0E0D04);
	r1 = D(r1, s1_0_0, 0xCD10ED0C, 0x02EBF90F, 0xFAEAFBF4, 0xF31D0CEF);
	r2 = D(r2, s1_0_0, 0x1318CDA2, 0xFB04E911, 0x1216F9E1, 0x1FF1FCD5);
	r3 = D(r3, s1_0_0, 0x1EF2FAFE, 0xFDFCFDFB, 0x06F609F3, 0x04EB0D07);
	r4 = D(r4, s1_0_0, 0x02DBFB0F, 0xFAF6FC15, 0xFFFDFDFE, 0x02F6FD03);
	r5 = D(r5, s1_0_0, 0xF2FB0517, 0x0505F508, 0x10F4DEE7, 0x113E0404);
	r6 = D(r6, s1_0_0, 0x171719EB, 0xFF1F0303, 0x0E0909F1, 0x05050A12);
	r7 = D(r7, s1_0_0, 0xFCFAF913, 0x1216151B, 0xFA01FE01, 0x07150C0C);
	r0 = D(r0, s1_0_1, 0x0AF0FF35, 0xF5C1001A, 0xF50DDC0A, 0xFCFEFC04);
	r1 = D(r1, s1_0_1, 0x06C81011, 0xF8E52616, 0x1BD11211, 0x0705ED02);
	r2 = D(r2, s1_0_1, 0x14C409D2, 0xCFAF0904, 0x271109E9, 0xF2021521);
	r3 = D(r3, s1_0_1, 0xEBF02F28, 0xFF00FFFC, 0xF114E608, 0xFFE2FF12);
	r4 = D(r4, s1_0_1, 0x1CE70C12, 0xFD43F31B, 0x05F9FB01, 0x12F2EFF1);
	r5 = D(r5, s1_0_1, 0xFD223510, 0x0AA3FD06, 0x19E2ED0B, 0x0903F2DD);
	r6 = D(r6, s1_0_1, 0x16ECDAE2, 0xFD23FAE0, 0x02FAE4F5, 0x09F2F110);
	r7 = D(r7, s1_0_1, 0x06F90422, 0xFEE9E733, 0xFF02FB06, 0x0515020C);
	r0 = D(r0, s1_0_2, 0xF4F2E905, 0x0EFA1214, 0x0100EF00, 0xF6080004);
	r1 = D(r1, s1_0_2, 0xFBC8B821, 0x1107F602, 0x02F90622, 0xFBF7090F);
	r2 = D(r2, s1_0_2, 0xFCF3FF08, 0x2101F6E1, 0x01150900, 0x01050709);
	r3 = D(r3, s1_0_2, 0x1AFAD7F7, 0xFCFFFCFF, 0xF8032408, 0xFCFE0B11);
	r4 = D(r4, s1_0_2, 0x0D01F0F9, 0x0AFC01F5, 0x01FF0107, 0xF6E5FA11);
	r5 = D(r5, s1_0_2, 0x0C151307, 0x14E0EBF6, 0xFBFF171F, 0x0B0CF3EE);
	r6 = D(r6, s1_0_2, 0x27F11FF6, 0xFEE8F9E1, 0x10D80CDB, 0xF60C0E21);
	r7 = D(r7, s1_0_2, 0x0F190D1B, 0x0EF6F804, 0x081B0808, 0xFB070210);
	r0 = D(r0, s1_1_0, 0x19B1F704, 0xECFDEFF8, 0x02FCFF02, 0x0D0F000D);
	r1 = D(r1, s1_1_0, 0xF038000E, 0x13EEFAF9, 0xEE06EB08, 0xE901E9F4);
	r2 = D(r2, s1_1_0, 0x09CE54C7, 0x15DD0F23, 0xD922D2E8, 0x11F2E9CB);
	r3 = D(r3, s1_1_0, 0xF3C9180B, 0x0807FEFF, 0x1FF63BE4, 0x0D11E00C);
	r4 = D(r4, s1_1_0, 0x0CFD1BE9, 0x2D23EE08, 0xFF1306FF, 0xDD2112FA);
	r5 = D(r5, s1_1_0, 0x1118FE00, 0x09060BF5, 0x09D7EED1, 0xEBD9F8E3);
	r6 = D(r6, s1_1_0, 0x05270817, 0xEE2C05F6, 0xFB1D0BFD, 0x0B1A0811);
	r7 = D(r7, s1_1_0, 0xFDF30A13, 0x18FBFC02, 0x06F4080A, 0xF6FC02FD);
	r0 = D(r0, s1_1_1, 0xFB1FFD34, 0x1396EF08, 0x19F97AFC, 0xFAF9F30F);
	r1 = D(r1, s1_1_1, 0x0D3A0139, 0x16B4F724, 0x044CF40C, 0xEA030B2B);
	r2 = D(r2, s1_1_1, 0xC123DE08, 0x3AFC002B, 0x18F00D16, 0x0B3BB534);
	r3 = D(r3, s1_1_1, 0x070EF024, 0xEEECFBF6, 0xEB24CED4, 0xE82FF70B);
	r4 = D(r4, s1_1_1, 0xFF271BEC, 0x08197FD5, 0x00F90B0D, 0xF117421D);
	r5 = D(r5, s1_1_1, 0xF5E9811B, 0x1ADC3004, 0xF801F906, 0x00F41DEE);
	r6 = D(r6, s1_1_1, 0xEAE40E05, 0x0202F7D4, 0x1505F1FF, 0xFCBC1B04);
	r7 = D(r7, s1_1_1, 0x0696F8F1, 0x2281FF0D, 0x14D4E7FB, 0x120DFEF5);
	r0 = D(r0, s1_1_2, 0x242924C0, 0xF01BDC0B, 0x09FB0A05, 0x000403FF);
	r1 = D(r1, s1_1_2, 0x2D1726E2, 0xEF061410, 0x20030208, 0xFB08FAFC);
	r2 = D(r2, s1_1_2, 0x00F4F41B, 0xFEF6F8D8, 0xF40EFD0E, 0x0318FBF7);
	r3 = D(r3, s1_1_2, 0x1A1A06EE, 0x01FA0704, 0xE809EB03, 0x1D09FCF5);
	r4 = D(r4, s1_1_2, 0x0500091D, 0x0023EB0F, 0xFF080609, 0xF6042918);
	r5 = D(r5, s1_1_2, 0xEE00CFFF, 0xD726FD03, 0x0C010A10, 0xF2091F14);
	r6 = D(r6, s1_1_2, 0xD103DC02, 0x060EFBF6, 0xBCEC3F1D, 0x2BFAFDF8);
	r7 = D(r7, s1_1_2, 0x16EDEE05, 0x050836F8, 0x0A0A0AFD, 0x030A0503);
	r0 = D(r0, s1_2_0, 0x95EA0E28, 0x2A0818F2, 0x05EEF5F9, 0xF5F70108);
	r1 = D(r1, s1_2_0, 0xD790FCDA, 0x0E27060A, 0xE415170C, 0x1CFCFB1B);
	r2 = D(r2, s1_2_0, 0x02F1FC20, 0xFA11ED20, 0x14EC0C06, 0xEE261410);
	r3 = D(r3, s1_2_0, 0xED12DFFF, 0x12F804FF, 0x1BEE04CF, 0x09FF11F2);
	r4 = D(r4, s1_2_0, 0xD30FFC15, 0xF3FED9F2, 0xF3F3000F, 0x06FDDF11);
	r5 = D(r5, s1_2_0, 0xF6F120E5, 0xE40B0DF7, 0xDA0B07F6, 0xE4FEE611);
	r6 = D(r6, s1_2_0, 0x17290E15, 0xFB0609FC, 0xF1150B08, 0xFB0B12F8);
	r7 = D(r7, s1_2_0, 0x0A20060A, 0x0216F808, 0xF9F60103, 0xEA0CF9FB);
	r0 = D(r0, s1_2_1, 0xD9EC16CE, 0xE806081D, 0xE912E3F2, 0x0C0B0305);
	r1 = D(r1, s1_2_1, 0xFF2339D0, 0xFFD8EFFD, 0x161AF907, 0x0E14120B);
	r2 = D(r2, s1_2_1, 0x02DAFE15, 0xBA0910E6, 0xEC090904, 0xEA2F2B38);
	r3 = D(r3, s1_2_1, 0x23FC2A51, 0xF7FF0304, 0xDFE5ECEE, 0xB53807FF);
	r4 = D(r4, s1_2_1, 0x2622C7EC, 0xEAE1FF0C, 0x1800F6FD, 0x2511DAEC);
	r5 = D(r5, s1_2_1, 0x25EA210E, 0x1D1AF9F6, 0xE8F42023, 0xFA31FAF9);
	r6 = D(r6, s1_2_1, 0xFEF9E40C, 0xF9090301, 0xF013E112, 0xEEEFE50C);
	r7 = D(r7, s1_2_1, 0xDAE5F2DA, 0xDDFCDCE1, 0xDF0E02FC, 0x0814FAF1);
	r0 = D(r0, s1_2_2, 0x4FEDE1EB, 0xCD10FD16, 0x0309E5FC, 0xF2FEFD02);
	r1 = D(r1, s1_2_2, 0x04D8EAC9, 0x0502F4FC, 0xF1F1FB04, 0x38FC060A);
	r2 = D(r2, s1_2_2, 0x1D03060A, 0x0D170EE0, 0x12F801F9, 0xF011110C);
	r3 = D(r3, s1_2_2, 0xF0E5D716, 0xFAFDFD05, 0x02FA0903, 0x1B040000);
	r4 = D(r4, s1_2_2, 0xFF080509, 0xE6EAE705, 0xFDFDFC02, 0x0E0CE709);
	r5 = D(r5, s1_2_2, 0x18FA1F07, 0xD7EFE9FE, 0x061F0B02, 0xF5FF05F9);
	r6 = D(r6, s1_2_2, 0xCF1603F1, 0x1C030600, 0x2710E40A, 0xDEEEE508);
	r7 = D(r7, s1_2_2, 0xDDE813E0, 0x0EFA1500, 0x020603FC, 0x14FDF800);
	s0_0_0 = G[2][xy.y+0][xy.x+0]; s0_0_1 = G[2][xy.y+0][xy.x+1];
	s0_0_2 = G[2][xy.y+0][xy.x+2]; s0_1_0 = G[2][xy.y+1][xy.x+0];
	s0_1_1 = G[2][xy.y+1][xy.x+1]; s0_1_2 = G[2][xy.y+1][xy.x+2];
	s0_2_0 = G[2][xy.y+2][xy.x+0]; s0_2_1 = G[2][xy.y+2][xy.x+1];
	s0_2_2 = G[2][xy.y+2][xy.x+2]; s1_0_0 = G[3][xy.y+0][xy.x+0];
	s1_0_1 = G[3][xy.y+0][xy.x+1]; s1_0_2 = G[3][xy.y+0][xy.x+2];
	s1_1_0 = G[3][xy.y+1][xy.x+0]; s1_1_1 = G[3][xy.y+1][xy.x+1];
	s1_1_2 = G[3][xy.y+1][xy.x+2]; s1_2_0 = G[3][xy.y+2][xy.x+0];
	s1_2_1 = G[3][xy.y+2][xy.x+1]; s1_2_2 = G[3][xy.y+2][xy.x+2];
	r0 = D(r0, s0_0_0, 0xFBD8EF2D, 0x10058107, 0x22F9FE05, 0x1BFE151A);
	r1 = D(r1, s0_0_0, 0xF00C7FD0, 0xE30BDFD1, 0x3AFE0AF5, 0x0A021406);
	r2 = D(r2, s0_0_0, 0x17BC81F2, 0xEC171803, 0xF104DFFA, 0x96FDD311);
	r3 = D(r3, s0_0_0, 0x27D5D0F9, 0x18F9FB03, 0xFBF4C6A9, 0x1E06BFEC);
	r4 = D(r4, s0_0_0, 0xDB1FE2E3, 0x2AFEE600, 0xD90118FB, 0xF6123BFC);
	r5 = D(r5, s0_0_0, 0xFE01E6EF, 0x2903F200, 0xE2B7B9D9, 0xF9FEEEDF);
	r6 = D(r6, s0_0_0, 0xF60E6114, 0x140B1905, 0xFA081A01, 0xDB02F206);
	r7 = D(r7, s0_0_0, 0x1B0A1ADF, 0xE6223DEC, 0xFA01FCFD, 0x1006F10A);
	r0 = D(r0, s0_0_1, 0x26F16730, 0xFF038108, 0x81810781, 0xF2F7A9FB);
	r1 = D(r1, s0_0_1, 0x26072D10, 0x343644FD, 0x0D8121EC, 0xFF1F313A);
	r2 = D(r2, s0_0_1, 0x11DBBE47, 0x3912AEEC, 0x23157F1A, 0x076BF2AE);
	r3 = D(r3, s0_0_1, 0x04FF7F40, 0xFEF10A36, 0x05F42E4D, 0x1DC6E934);
	r4 = D(r4, s0_0_1, 0xDBC97F36, 0xDEE97F13, 0x021802EC, 0xA0D9DA14);
	r5 = D(r5, s0_0_1, 0x135281EE, 0x99073AF9, 0xC881D6E3, 0x20F927FD);
	r6 = D(r6, s0_0_1, 0x04FA8106, 0x0A3432E0, 0xE80FE708, 0x2BED2201);
	r7 = D(r7, s0_0_1, 0x03DD1105, 0x0B33D718, 0xE70B48DF, 0xDDFA0C04);
	r0 = D(r0, s0_0_2, 0x813A9B81, 0xB7ED81B9, 0xF0FF0803, 0x0805FEED);
	r1 = D(r1, s0_0_2, 0x290AD5EC, 0x1CF71020, 0xD281EF81, 0x14020718);
	r2 = D(r2, s0_0_2, 0xEBCF0F21, 0xF7E281EA, 0x13001FEE, 0xFF27F6E9);
	r3 = D(r3, s0_0_2, 0xE300E9CF, 0x0103070A, 0xFD2AF000, 0x00EF0381);
	r4 = D(r4, s0_0_2, 0xEFDBE923, 0x0007EE81, 0x0BFE03F8, 0x0BF60D09);
	r5 = D(r5, s0_0_2, 0x1C1B3BDD, 0xE7960107, 0x00FB1B2F, 0x43F201F3);
	r6 = D(r6, s0_0_2, 0x16B88195, 0xF230E8BD, 0x480A81B3, 0xFEF5CAFD);
	r7 = D(r7, s0_0_2, 0xC1FEC381, 0xE9F2DE47, 0xF20122D0, 0xFB20FFF7);
	r0 = D(r0, s0_1_0, 0x3EEB40FF, 0x0C0002F7, 0x030607F2, 0x03050400);
	r1 = D(r1, s0_1_0, 0xFC2CE1A0, 0xABF0A8F5, 0xE80E04F3, 0xEBF2FF12);
	r2 = D(r2, s0_1_0, 0x08D9FA1B, 0x08EC42EC, 0xF903E9FB, 0xEBEB1F1E);
	r3 = D(r3, s0_1_0, 0x2C0B0603, 0xFA030610, 0x1318D4EB, 0x2A0C2B00);
	r4 = D(r4, s0_1_0, 0xE1E9DDFD, 0xFBFDF913, 0xE9F3EF04, 0xFBEEDD0C);
	r5 = D(r5, s0_1_0, 0xEFECEE28, 0x2404FBEE, 0x2305FCF5, 0x060BFC11);
	r6 = D(r6, s0_1_0, 0x09F819E4, 0x05FDEAED, 0x03FA1A06, 0xF01019F4);
	r7 = D(r7, s0_1_0, 0x0F190D26, 0x32FD2C01, 0xF6FC11F2, 0x0FF6EEFB);
	r0 = D(r0, s0_1_1, 0x030281EB, 0xFEF6140A, 0x17F11DF2, 0x020603FB);
	r1 = D(r1, s0_1_1, 0xEF59FA97, 0xD40C81C9, 0xDE290723, 0xA108CF05);
	r2 = D(r2, s0_1_1, 0x114C2AE3, 0xFFEE17F1, 0xF0080CF8, 0xE4E016FB);
	r3 = D(r3, s0_1_1, 0xC9F120C1, 0xC57FF825, 0xE6A4F33C, 0xDBD8EE21);
	r4 = D(r4, s0_1_1, 0x7FDEFAE9, 0x81EFEA19, 0x7FF1FB24, 0xFCED2532);
	r5 = D(r5, s0_1_1, 0x16F214E8, 0x33E1060A, 0x16E3FCE7, 0xF10E0404);
	r6 = D(r6, s0_1_1, 0x29F9FAC6, 0x11080FF6, 0xDE04160D, 0x20EAD23E);
	r7 = D(r7, s0_1_1, 0xF02BDCEB, 0xF5EDF6DD, 0xEEFADA06, 0x81D3D91F);
	r0 = D(r0, s0_1_2, 0xEB44DAFD, 0x1115193D, 0x2AB70621, 0xF30AFAFF);
	r1 = D(r1, s0_1_2, 0xF3280AFE, 0x07050E01, 0x08E1F0EB, 0xF807F501);
	r2 = D(r2, s0_1_2, 0xEDEE16C9, 0xF81EF92A, 0x00F00B05, 0x25EA1E15);
	r3 = D(r3, s0_1_2, 0x09342013, 0x02ED030A, 0xFB3F0D0B, 0x31CA01C6);
	r4 = D(r4, s0_1_2, 0x05FADBF4, 0x2581F6F8, 0xEFEEDAFA, 0x11EEFD2B);
	r5 = D(r5, s0_1_2, 0xE606091E, 0xFB2B1029, 0xFE141B15, 0x022715F5);
	r6 = D(r6, s0_1_2, 0x1EBB26B4, 0x15F70FFC, 0x20FDF388, 0xE8F6D42D);
	r7 = D(r7, s0_1_2, 0xF681FBEA, 0xC31909C2, 0x30D80DD8, 0xF622DDFA);
	r0 = D(r0, s0_2_0, 0x28070D01, 0xFFF6070A, 0xF4050506, 0x03050EF6);
	r1 = D(r1, s0_2_0, 0xC0EE0E3F, 0xEC081BF8, 0xF613F304, 0x040BF2EE);
	r2 = D(r2, s0_2_0, 0x03F1ECF9, 0xFE0AECFA, 0xF8F8F5F2, 0x0D080F04);
	r3 = D(r3, s0_2_0, 0xF306DE02, 0x0B02FB00, 0x1A00DB04, 0xE009F8FE);
	r4 = D(r4, s0_2_0, 0xEE0F06F9, 0x11EFFC0F, 0xE306FFFF, 0xEB00F5FA);
	r5 = D(r5, s0_2_0, 0xF7EC0613, 0xF708ED07, 0x020CE4EC, 0x28FC02FC);
	r6 = D(r6, s0_2_0, 0xF10B0710, 0xE310F002, 0xFF01FFF9, 0xF509F2FB);
	r7 = D(r7, s0_2_0, 0x24F60CFD, 0xE1FBF0FB, 0x0103FD07, 0xE0FF0709);
	r0 = D(r0, s0_2_1, 0xC727D9DC, 0x1A0401F3, 0x09EF040D, 0xE900FC0E);
	r1 = D(r1, s0_2_1, 0x1D17E7EF, 0xE5DFD903, 0x06FD09F9, 0x0300E90B);
	r2 = D(r2, s0_2_1, 0xF715FFE9, 0x2818F70C, 0x000B11ED, 0xF00EEBE5);
	r3 = D(r3, s0_2_1, 0xED1318F2, 0x0EFE04F9, 0x25EA09F8, 0xE618E1F2);
	r4 = D(r4, s0_2_1, 0xFE07D6FF, 0xC70C1303, 0xFDEC1108, 0x14F01314);
	r5 = D(r5, s0_2_1, 0xE60A08DE, 0xEE120B07, 0x0011FEE2, 0xF31C101B);
	r6 = D(r6, s0_2_1, 0xFB130309, 0xF610EC05, 0xF31901F7, 0x13F002F9);
	r7 = D(r7, s0_2_1, 0x09EC1920, 0x28ECD4F8, 0xFAFDFC0D, 0xF2FFF804);
	r0 = D(r0, s0_2_2, 0xFC3814DB, 0xE018F3EC, 0xFB0CF506, 0x0BF9FDFD);
	r1 = D(r1, s0_2_2, 0x232011F5, 0x17F30AEB, 0x1009E7EC, 0xF7030508);
	r2 = D(r2, s0_2_2, 0xF131F4EE, 0x04ECE809, 0xFC0303FF, 0x26FCFCFA);
	r3 = D(r3, s0_2_2, 0x05FD0CF3, 0x08F2FFFF, 0x02011605, 0x111EFFFA);
	r4 = D(r4, s0_2_2, 0xFF0A090C, 0xFCFB0004, 0xDA1A0707, 0xF511F101);
	r5 = D(r5, s0_2_2, 0xD9FA150E, 0x08FFFDFA, 0x17EF0A04, 0x071BFE02);
	r6 = D(r6, s0_2_2, 0xF6EFEE0E, 0x0B05FD0A, 0xEB0AF715, 0xFEE31503);
	r7 = D(r7, s0_2_2, 0xF7F9D200, 0x3BD8200B, 0x0E07FCF0, 0x2FE21903);
	r0 = D(r0, s1_0_0, 0x2EE70E36, 0x0804FB0A, 0xFE0BF4FC, 0xFAFA0934);
	r1 = D(r1, s1_0_0, 0x381EDE01, 0xE50E13BA, 0xFE0C15A3, 0x0108016B);
	r2 = D(r2, s1_0_0, 0x1ACC2974, 0xF40A0850, 0xF20011C4, 0x0DFA1081);
	r3 = D(r3, s1_0_0, 0x0718FC7F, 0x0100F833, 0x0CD80C7F, 0xEAFF204F);
	r4 = D(r4, s1_0_0, 0xE20C064B, 0x05EFF7D7, 0x0904FDF3, 0x1114FFBF);
	r5 = D(r5, s1_0_0, 0xF1021031, 0xFFFC0C57, 0x5CC4F681, 0x00F5377F);
	r6 = D(r6, s1_0_0, 0xFEEE0A21, 0xF7091781, 0x08FB02E8, 0xEA040B6E);
	r7 = D(r7, s1_0_0, 0x0B1FF1D5, 0x09E2037F, 0x08FEF7EC, 0x05031713);
	r0 = D(r0, s1_0_1, 0xF20A4781, 0x22EFE181, 0x16EEFF7F, 0xFE13FFC2);
	r1 = D(r1, s1_0_1, 0x0C30121F, 0xF869F5A9, 0x10E93081, 0xDF0AF781);
	r2 = D(r2, s1_0_1, 0x1E81FD81, 0x02070B81, 0x2ACAF0DE, 0xD006F481);
	r3 = D(r3, s1_0_1, 0x2CF6007F, 0x0328F3AE, 0x150CDB81, 0xEE0C0881);
	r4 = D(r4, s1_0_1, 0x20052B7F, 0xDE81F481, 0x0B0BFC7F, 0x10FF0C7F);
	r5 = D(r5, s1_0_1, 0xF40DF881, 0x3518117F, 0x5481DE81, 0x244F1525);
	r6 = D(r6, s1_0_1, 0xD309EB7F, 0x13E10681, 0x00F8FE92, 0x04F60AD7);
	r7 = D(r7, s1_0_1, 0xDEF80781, 0xDFE1063F, 0x0101EC81, 0x1ED51101);
	r0 = D(r0, s1_0_2, 0x0B0CFA7F, 0xF0C5FE81, 0x0C81FD18, 0x15FCFEDA);
	r1 = D(r1, s1_0_2, 0x63320D01, 0xEA26FD2E, 0xE3CA1F56, 0x1137F61F);
	r2 = D(r2, s1_0_2, 0x1CFCF8EF, 0x14211D24, 0x28FAE9D3, 0xFAF2067F);
	r3 = D(r3, s1_0_2, 0xC90915D9, 0xFD0E06F5, 0x18F40181, 0x13D0F406);
	r4 = D(r4, s1_0_2, 0x4ADE1518, 0x06E404E6, 0x07EF0501, 0x1BF5F3F2);
	r5 = D(r5, s1_0_2, 0x42F0FD81, 0x5681E083, 0xD4EF00F2, 0x527F0B81);
	r6 = D(r6, s1_0_2, 0x29C8E081, 0x20BD0081, 0xF0C40524, 0x0D8108DB);
	r7 = D(r7, s1_0_2, 0xF7BD064A, 0x160B0270, 0xFCD0FA7F, 0xF509F5EC);
	r0 = D(r0, s1_1_0, 0x12F324D9, 0xFA08EFE6, 0xFC070BF5, 0x020BF9F5);
	r1 = D(r1, s1_1_0, 0x0122326B, 0xEAD5FAED, 0xFAFEE36D, 0x03FB0C1F);
	r2 = D(r2, s1_1_0, 0x22EADDE1, 0x0F1CF22B, 0xECFDFDE7, 0x06F8FA44);
	r3 = D(r3, s1_1_0, 0x3CFBF0CB, 0x0CFEF700, 0x28F11C56, 0x1E0DF32A);
	r4 = D(r4, s1_1_0, 0xF4021FE1, 0x01E60DE9, 0x02FF1602, 0xF60909CC);
	r5 = D(r5, s1_1_0, 0xF5D709CF, 0x0A0C18E7, 0x35F1FBDC, 0x33FF1AEC);
	r6 = D(r6, s1_1_0, 0x061A0643, 0x00172C81, 0x0A0F0D4B, 0xFF0AEE15);
	r7 = D(r7, s1_1_0, 0xEEE7D8E8, 0x17F3ECD5, 0xFA0702EB, 0xF51B0481);
	r0 = D(r0, s1_1_1, 0x1B34FD7F, 0xF7FB2E26, 0xE50904CD, 0xF3030DB5);
	r1 = D(r1, s1_1_1, 0xDE9C077F, 0xC481DD3B, 0xE9EED33B, 0x1EFFEBF1);
	r2 = D(r2, s1_1_1, 0x08392B7F, 0xE5F2FF43, 0xCF0E0E42, 0x0B061C7F);
	r3 = D(r3, s1_1_1, 0x28D40D7F, 0xFEECE203, 0x7FB2A5E5, 0x4D04062B);
	r4 = D(r4, s1_1_1, 0x22F0E281, 0xF401E681, 0x12EEEEB1, 0xF719FAD0);
	r5 = D(r5, s1_1_1, 0xE1FEE981, 0x31EC022B, 0xCA46D6FD, 0xC20DCE81);
	r6 = D(r6, s1_1_1, 0x380F3AF3, 0x04162481, 0xFF1408BF, 0x21010BE3);
	r7 = D(r7, s1_1_1, 0xDD06FFF0, 0xFFF1087F, 0x0000FD22, 0x081618F0);
	r0 = D(r0, s1_1_2, 0xE702F881, 0xC030E781, 0x81E7FE43, 0xEA1A00F6);
	r1 = D(r1, s1_1_2, 0xB6B80AA2, 0x9FD2E156, 0x02FA0081, 0xD905032C);
	r2 = D(r2, s1_1_2, 0xC548EC36, 0xDDF107DA, 0xEFE0F3FB, 0xC2FEF90A);
	r3 = D(r3, s1_1_2, 0xAF06FD81, 0xF6F9FF09, 0x1BF6F5C5, 0x07211321);
	r4 = D(r4, s1_1_2, 0x810313DD, 0x20FD0E05, 0x1C0A0404, 0x08E10436);
	r5 = D(r5, s1_1_2, 0xE0EBF281, 0xFED9C1BD, 0xF9110C04, 0xE2ECFCF5);
	r6 = D(r6, s1_1_2, 0x3AE9DCA0, 0x07231E2C, 0xC7E52539, 0x7FA2E0D5);
	r7 = D(r7, s1_1_2, 0x04C811FE, 0x05D0137F, 0xDE231536, 0x13BE0B05);
	r0 = D(r0, s1_2_0, 0xEF0D3B81, 0x1CFBF838, 0x04F2FBF6, 0xFE04FB2C);
	r1 = D(r1, s1_2_0, 0x03CF02C7, 0x09FD03C1, 0x19FEE42D, 0x0807FBF2);
	r2 = D(r2, s1_2_0, 0x16F61CE9, 0xE419DE16, 0xFB021C1D, 0x1301EEB7);
	r3 = D(r3, s1_2_0, 0x06F4FAFB, 0xFAFF070B, 0xFCF7F3C3, 0xECFCE9E3);
	r4 = D(r4, s1_2_0, 0x140AE195, 0xECF91F2C, 0xF902F10B, 0xED0DEF15);
	r5 = D(r5, s1_2_0, 0x27F21ADF, 0xFFFCF424, 0x06F8082B, 0xD60D1D90);
	r6 = D(r6, s1_2_0, 0xF1000129, 0xFAFAED06, 0xE413FC2D, 0xF303FD18);
	r7 = D(r7, s1_2_0, 0x1610FD1A, 0x0B040217, 0x04F9FEFD, 0xF2FAE52F);
	r0 = D(r0, s1_2_1, 0xCBDF0CB7, 0xE2280A95, 0x08F01AD2, 0x06F1FA1C);
	r1 = D(r1, s1_2_1, 0x300D1E31, 0x7FFA0C88, 0x0308140F, 0x1100ED04);
	r2 = D(r2, s1_2_1, 0xDAFE0D81, 0x050CDFF8, 0xD20E140D, 0x290CDA0A);
	r3 = D(r3, s1_2_1, 0x23F40517, 0x060D160B, 0x30F90DE1, 0xF301F1DA);
	r4 = D(r4, s1_2_1, 0xEF1B8FE7, 0xF9EA1934, 0x06FFE49F, 0x0B14B4D0);
	r5 = D(r5, s1_2_1, 0x2800FBC9, 0xECFB082D, 0xEFF11749, 0x13F8F9C6);
	r6 = D(r6, s1_2_1, 0x010AF346, 0xF4FDEE49, 0xEF16EB1B, 0x1E06EFD5);
	r7 = D(r7, s1_2_1, 0xE7F30215, 0x460C07CA, 0x09F319F4, 0x0402FB19);
	r0 = D(r0, s1_2_2, 0x03E9236A, 0x0426E517, 0x0BF103E7, 0x0C01FDFD);
	r1 = D(r1, s1_2_2, 0x2D1E2381, 0x7F08FAAD, 0xEB0C0425, 0x0B0A09D4);
	r2 = D(r2, s1_2_2, 0xF302EC11, 0x1E020CB9, 0x2D02FC14, 0x21F7F4FD);
	r3 = D(r3, s1_2_2, 0x55EDF0D5, 0xF804FEF9, 0x1404205C, 0x10F3FFF2);
	r4 = D(r4, s1_2_2, 0xDEFC08FC, 0xEAF409FE, 0xFEF2FF12, 0xF612F63B);
	r5 = D(r5, s1_2_2, 0x20F3F281, 0x190930DE, 0xFE101576, 0xF803277F);
	r6 = D(r6, s1_2_2, 0x17DFE1F0, 0xEB041C3A, 0xE7F8E12C, 0x6CF01C15);
	r7 = D(r7, s1_2_2, 0x1FEA0F05, 0xF4F619DA, 0x130E0F00, 0xFDF91A09);
	s0_0_0 = G[4][xy.y+0][xy.x+0]; s0_0_1 = G[4][xy.y+0][xy.x+1];
	s0_0_2 = G[4][xy.y+0][xy.x+2]; s0_1_0 = G[4][xy.y+1][xy.x+0];
	s0_1_1 = G[4][xy.y+1][xy.x+1]; s0_1_2 = G[4][xy.y+1][xy.x+2];
	s0_2_0 = G[4][xy.y+2][xy.x+0]; s0_2_1 = G[4][xy.y+2][xy.x+1];
	s0_2_2 = G[4][xy.y+2][xy.x+2]; s1_0_0 = G[5][xy.y+0][xy.x+0];
	s1_0_1 = G[5][xy.y+0][xy.x+1]; s1_0_2 = G[5][xy.y+0][xy.x+2];
	s1_1_0 = G[5][xy.y+1][xy.x+0]; s1_1_1 = G[5][xy.y+1][xy.x+1];
	s1_1_2 = G[5][xy.y+1][xy.x+2]; s1_2_0 = G[5][xy.y+2][xy.x+0];
	s1_2_1 = G[5][xy.y+2][xy.x+1]; s1_2_2 = G[5][xy.y+2][xy.x+2];
	r0 = D(r0, s0_0_0, 0xB90C5207, 0xFEFDF602, 0x00F506FC, 0x17FFFD14);
	r1 = D(r1, s0_0_0, 0xFF04FC09, 0xFCF00FFB, 0xE1DC1319, 0xC702F8CC);
	r2 = D(r2, s0_0_0, 0xDDEB52ED, 0x3208FD24, 0x2205200B, 0x00175A09);
	r3 = D(r3, s0_0_0, 0xDDFD07C8, 0x04050505, 0x0416E8E4, 0x04F5EF38);
	r4 = D(r4, s0_0_0, 0x2000FBC3, 0xED11FF81, 0xFD0405F2, 0xFCF603F1);
	r5 = D(r5, s0_0_0, 0x13EDE6E1, 0x14FB07F7, 0xDF2B20EB, 0x27EA021F);
	r6 = D(r6, s0_0_0, 0x180AEA09, 0x0F0BED05, 0x1606FBFB, 0xFAF8FCFE);
	r7 = D(r7, s0_0_0, 0xF9FEFC1B, 0x0AEBFE00, 0x000103FE, 0xF1EDFF16);
	r0 = D(r0, s0_0_1, 0xC10002E7, 0xF509EA21, 0x1507F7FD, 0x080C09F9);
	r1 = D(r1, s0_0_1, 0xB3C5FDEA, 0x0408EF0D, 0xD097FFD6, 0xD5EAD9FB);
	r2 = D(r2, s0_0_1, 0xFEF6200C, 0x2CF602F1, 0x26FA0A34, 0x000BFCF3);
	r3 = D(r3, s0_0_1, 0x12EEE513, 0x050A03F5, 0x10ED0E05, 0x00174001);
	r4 = D(r4, s0_0_1, 0x1ADE21EF, 0x18F981F9, 0xFDFD0707, 0xE0EC170C);
	r5 = D(r5, s0_0_1, 0x080E02F0, 0xC730F910, 0x04E52036, 0x0DDCFF3D);
	r6 = D(r6, s0_0_1, 0x1F072623, 0x000F0028, 0xFCE9FB21, 0xDCF610F3);
	r7 = D(r7, s0_0_1, 0x1519E905, 0xFB1CFEF6, 0xF71809E9, 0xE4FD06EF);
	r0 = D(r0, s0_0_2, 0xE0E824F9, 0xF4F7EEF9, 0xFE030401, 0xFC03F8FD);
	r1 = D(r1, s0_0_2, 0x090A180A, 0x07FA2211, 0x05EE7F09, 0x04012EFF);
	r2 = D(r2, s0_0_2, 0xFDF90409, 0x09160009, 0x17F9080A, 0x0AFB1BFA);
	r3 = D(r3, s0_0_2, 0xFDF856F2, 0xFB0106FD, 0xFCF4F804, 0x06F6E4F9);
	r4 = D(r4, s0_0_2, 0xFB041C18, 0x0205EEF6, 0xFCFE0202, 0x15030DF7);
	r5 = D(r5, s0_0_2, 0x0EFDF102, 0x0EEE1016, 0x1101EFF9, 0x0AEFBA11);
	r6 = D(r6, s0_0_2, 0x1DFBBF0B, 0xF603E2FD, 0x031625CA, 0x0BF8150B);
	r7 = D(r7, s0_0_2, 0x0AE6F209, 0x20FB0C0D, 0xFEF5E606, 0x04FC09F8);
	r0 = D(r0, s0_1_0, 0x95AD352E, 0x100FFC01, 0x20FB04F4, 0xE603FEFE);
	r1 = D(r1, s0_1_0, 0x151EFA00, 0xD22606F2, 0x13FEE600, 0xBA1C17EE);
	r2 = D(r2, s0_1_0, 0x0A17281B, 0xE2D320FC, 0xD9120606, 0x81C87FFC);
	r3 = D(r3, s0_1_0, 0xBF2D1BF6, 0x001105DC, 0x0F0F6ED2, 0x130A0EEA);
	r4 = D(r4, s0_1_0, 0x45D12FC7, 0xFBFDEC02, 0x12EB08F3, 0xD7F212F9);
	r5 = D(r5, s0_1_0, 0xE8FD100B, 0xE3F70B07, 0x2F2CF6C9, 0xBFF8184C);
	r6 = D(r6, s0_1_0, 0x13F0020A, 0xE007F101, 0x1F00FF05, 0x1618E0EA);
	r7 = D(r7, s0_1_0, 0xE40AF406, 0xF624DAD8, 0xF1000B0D, 0xF41B0807);
	r0 = D(r0, s0_1_1, 0xAE12DB0D, 0xE311051F, 0x2A076881, 0xFC0A12F0);
	r1 = D(r1, s0_1_1, 0xECFBC70E, 0x0C0FE52C, 0xFDFDFEE8, 0xDB0E1B06);
	r2 = D(r2, s0_1_1, 0x15F6E8FF, 0xF9DB19FE, 0x02100E0B, 0xC2E4D21F);
	r3 = D(r3, s0_1_1, 0xFE12A83F, 0xF803F30D, 0xC9EBFFFE, 0xF9E417FC);
	r4 = D(r4, s0_1_1, 0x18818B40, 0x02F4500E, 0xF9A389EA, 0xE7C8F3F5);
	r5 = D(r5, s0_1_1, 0xC30FD312, 0x321D20E1, 0x1716B8D1, 0xE6E8F0F9);
	r6 = D(r6, s0_1_1, 0x050FEEF6, 0xED0F1B2E, 0xB6E902F2, 0x12C0CB94);
	r7 = D(r7, s0_1_1, 0x2FEAF9A9, 0xE10EED1A, 0x0F04FA17, 0x0A1BE001);
	r0 = D(r0, s0_1_2, 0xF404327F, 0x1AEB1FC0, 0xFBF6EE03, 0x02FC0104);
	r1 = D(r1, s0_1_2, 0xD4ED20F2, 0xECFAF5F1, 0x25FEFC09, 0xFF0221F3);
	r2 = D(r2, s0_1_2, 0x07FB06FE, 0x04FF0C07, 0x0705E903, 0x0AF11DED);
	r3 = D(r3, s0_1_2, 0xC4051AF6, 0xFDFE0001, 0x0B0BFB02, 0x31FA08FC);
	r4 = D(r4, s0_1_2, 0x02FD26F2, 0x11F2D609, 0xFF0B1602, 0x1A0CF3EE);
	r5 = D(r5, s0_1_2, 0x1A0D14FE, 0xF20BEDEF, 0xF2F4F8F8, 0x021BD2E7);
	r6 = D(r6, s0_1_2, 0xF104D813, 0xE1F7FC1F, 0x2B07D108, 0xE414E5FF);
	r7 = D(r7, s0_1_2, 0xE31907EE, 0x07E0DAF8, 0x03F303FF, 0xF2F8FDF5);
	r0 = D(r0, s0_2_0, 0xF6911810, 0x0B01F3FB, 0xEEFAFD19, 0x05FFFC02);
	r1 = D(r1, s0_2_0, 0xFB2324EC, 0x3E144BBB, 0xDDFF050A, 0xD2F515F4);
	r2 = D(r2, s0_2_0, 0x30FF0AFA, 0x0805D8DD, 0x060407E9, 0x142F05FC);
	r3 = D(r3, s0_2_0, 0x4414CBED, 0x1A060BFC, 0xC7290409, 0x1200FFFC);
	r4 = D(r4, s0_2_0, 0x34EA0116, 0xF5EBF006, 0xFBF40C10, 0x1F000C11);
	r5 = D(r5, s0_2_0, 0x01041911, 0xF4F4FFFD, 0x19F001FE, 0xE0011622);
	r6 = D(r6, s0_2_0, 0x090503E5, 0xE5F9F700, 0x0D0317EC, 0x22F014FC);
	r7 = D(r7, s0_2_0, 0x101BF500, 0x03FDFF00, 0xFEF9FF07, 0x1B0A1700);
	r0 = D(r0, s0_2_1, 0xE12703E5, 0x050507F8, 0x1AED0804, 0x020B0DFE);
	r1 = D(r1, s0_2_1, 0xD503145F, 0xFB0CEDE5, 0xD5FAD506, 0xB9F86EE5);
	r2 = D(r2, s0_2_1, 0x0009E5D3, 0x10FFEEFE, 0x1BFA13FB, 0x20FFD822);
	r3 = D(r3, s0_2_1, 0x28FB03FD, 0x0604F607, 0x1C07F800, 0x11FFD0F5);
	r4 = D(r4, s0_2_1, 0x0EE4C1FD, 0x18F61A11, 0x01E6E9E9, 0xE3200FE5);
	r5 = D(r5, s0_2_1, 0x11FE1C02, 0xEEF1F9FE, 0xD50CCB0C, 0x1AEDF8DC);
	r6 = D(r6, s0_2_1, 0x19F7E6FE, 0x00F11C02, 0xEF1BF209, 0xBEE3F8F6);
	r7 = D(r7, s0_2_1, 0xE11315F3, 0xFE1E6C10, 0x1B0C0DF1, 0xE8201523);
	r0 = D(r0, s0_2_2, 0x17E60316, 0x0AFEDF05, 0x00070E00, 0x00FFF200);
	r1 = D(r1, s0_2_2, 0xE2E1041A, 0x0B091CFC, 0x10FCF908, 0x15F01709);
	r2 = D(r2, s0_2_2, 0x02F71807, 0x0E18EDED, 0x1607F100, 0x1FFEF5F7);
	r3 = D(r3, s0_2_2, 0x030F24FF, 0xFB00FFFE, 0x13FC03FE, 0x05FDEDFB);
	r4 = D(r4, s0_2_2, 0xF1F02212, 0xF1FE0406, 0xFD010BFD, 0xF9F2F803);
	r5 = D(r5, s0_2_2, 0x06FF08FE, 0x03FFE911, 0x08F3090F, 0x0700E709);
	r6 = D(r6, s0_2_2, 0x080D02FB, 0xF6FCE90E, 0x1AFB20FB, 0xFC1D2B0C);
	r7 = D(r7, s0_2_2, 0xD825FFFB, 0x250B7FEC, 0x0AFDF40B, 0xEB042606);
	r0 = D(r0, s1_0_0, 0xF5E6EB19, 0xF8FE0F09, 0xF2E51108, 0xFD00FF09);
	r1 = D(r1, s1_0_0, 0x1DC810E0, 0xF1E70012, 0x16061CCF, 0xF71DF2F7);
	r2 = D(r2, s1_0_0, 0x10E51FE5, 0x07EB000B, 0xF9E2FCDC, 0xF2E01BF1);
	r3 = D(r3, s1_0_0, 0xEEF6DC3E, 0x090AFCFC, 0x06F106F5, 0xECE3FFFA);
	r4 = D(r4, s1_0_0, 0xE820E807, 0xFAF6FD13, 0xFBF80004, 0xEAFFF90B);
	r5 = D(r5, s1_0_0, 0x08031EF6, 0xEE00E200, 0xEEF71AF0, 0x03FF0FF4);
	r6 = D(r6, s1_0_0, 0x0606F40A, 0xFDE009F6, 0xFB020508, 0xF6FDFE1B);
	r7 = D(r7, s1_0_0, 0xF6F70600, 0xF411F302, 0x07F90303, 0xF100FC17);
	r0 = D(r0, s1_0_1, 0xE02AD902, 0x17FFF513, 0x0A10FCF2, 0x00FAF904);
	r1 = D(r1, s1_0_1, 0xF2812A38, 0xFA21FADE, 0x24F23AE9, 0x020B1D01);
	r2 = D(r2, s1_0_1, 0xF61507D0, 0x1BFD0CF1, 0x1CF110DF, 0xF41101F7);
	r3 = D(r3, s1_0_1, 0x07211001, 0xF904FC08, 0x0A240CFE, 0xF9E8ECF3);
	r4 = D(r4, s1_0_1, 0xF4E1E747, 0x02F7020F, 0x0203F8FF, 0x0D02F707);
	r5 = D(r5, s1_0_1, 0x060CF803, 0xDDD4E905, 0x0E0BECE1, 0xFF0B11DC);
	r6 = D(r6, s1_0_1, 0xF1D915B7, 0x24FB17D8, 0xF60B14FD, 0xE30FFCE4);
	r7 = D(r7, s1_0_1, 0xFBDCEBF7, 0x2004FE0C, 0xFEF0F3F1, 0xF90A00FB);
	r0 = D(r0, s1_0_2, 0xE430F908, 0x06FD0809, 0xFC020A0A, 0x02FDFB01);
	r1 = D(r1, s1_0_2, 0xF5F0F022, 0x1602070D, 0xF2FE050C, 0xFCF9F019);
	r2 = D(r2, s1_0_2, 0x09FFFF00, 0x2911EAC8, 0x0B0907EB, 0x011501EF);
	r3 = D(r3, s1_0_2, 0x070335EA, 0xFC00FF02, 0x0A0CFF04, 0xF8EA0B11);
	r4 = D(r4, s1_0_2, 0xF2ECFD0D, 0xFA0DFDFE, 0xFCFD0703, 0xF4FAFF05);
	r5 = D(r5, s1_0_2, 0x09060F0D, 0xE8001F04, 0x221BF9FC, 0x0DE809EF);
	r6 = D(r6, s1_0_2, 0xFD0B19E0, 0xFBFB1AF7, 0x1CDDDE01, 0xFAD30D1B);
	r7 = D(r7, s1_0_2, 0x14EA2008, 0x00F7FE02, 0x04FC0701, 0xFAF90C07);
	r0 = D(r0, s1_1_0, 0xCCF20D09, 0x0E02F120, 0x1133E6EC, 0xFF1A023D);
	r1 = D(r1, s1_1_0, 0xD316D8EE, 0x1093F539, 0x05F1E9E8, 0x0718D816);
	r2 = D(r2, s1_1_0, 0xFBF4E416, 0xE416FD1A, 0x24FB06CB, 0x0B2EE628);
	r3 = D(r3, s1_1_0, 0x9E81E833, 0xF5F6F521, 0xB3811FBC, 0xECBEED03);
	r4 = D(r4, s1_1_0, 0x19F71DE3, 0x08FC0400, 0xF60E0CFD, 0xFC06140A);
	r5 = D(r5, s1_1_0, 0xF715EAF8, 0x0906FBE8, 0x2CAD00A5, 0xECDF0BCC);
	r6 = D(r6, s1_1_0, 0xFEE70E17, 0xD630ECF0, 0x031DF8FE, 0xFD08F70B);
	r7 = D(r7, s1_1_0, 0x1BE71823, 0x27E10327, 0xF70A01FB, 0xEB08ECE9);
	r0 = D(r0, s1_1_1, 0xF724DA08, 0x040FDB1A, 0xEC45F081, 0x06F9FA12);
	r1 = D(r1, s1_1_1, 0xFE15CEF1, 0xF8EAEFEE, 0x4F002A0D, 0x1B06FE02);
	r2 = D(r2, s1_1_1, 0xFD17F70E, 0x1F2EF0F5, 0xFE170BE5, 0xCE002014);
	r3 = D(r3, s1_1_1, 0xE8EEE925, 0xF8F1F303, 0x3507FBC9, 0x023215D2);
	r4 = D(r4, s1_1_1, 0xF8F721BE, 0xEA02001F, 0x0A0D21DC, 0xEAFA26FE);
	r5 = D(r5, s1_1_1, 0x0A2BF1D4, 0x9381A281, 0xFF11D863, 0xE6DFD1B6);
	r6 = D(r6, s1_1_1, 0xC21E0DE7, 0xF22007D2, 0xFE31FFD2, 0xFCD840DA);
	r7 = D(r7, s1_1_1, 0x5D451119, 0x0CF805D1, 0x227FFC0B, 0xEBFB1019);
	r0 = D(r0, s1_1_2, 0x32FCFF81, 0x11CC2C1A, 0xFEF3070A, 0x04FE0302);
	r1 = D(r1, s1_1_2, 0xCF20D4D3, 0xF5E8FC06, 0xF311F606, 0xF5EEF80E);
	r2 = D(r2, s1_1_2, 0xE7110A02, 0x021FF4B0, 0x030D01FA, 0x0E07FFFB);
	r3 = D(r3, s1_1_2, 0x161DFFE2, 0x02FAFA01, 0xE80304F8, 0x000209FA);
	r4 = D(r4, s1_1_2, 0xFA030B01, 0x0D05F608, 0x0102FC01, 0xF60AEF12);
	r5 = D(r5, s1_1_2, 0xEA08E201, 0xFD1A1E0A, 0xE809FDF7, 0xE61903EF);
	r6 = D(r6, s1_1_2, 0x1AEFFD09, 0xF10E0106, 0x2081FA81, 0xF41901FC);
	r7 = D(r7, s1_1_2, 0x07F80BF1, 0xFFFD0720, 0x12EF0E03, 0xFA0A06FF);
	r0 = D(r0, s1_2_0, 0xDFECFC0C, 0xE7E90E08, 0x03FC1AE8, 0x02FAFF15);
	r1 = D(r1, s1_2_0, 0xFB47CDC5, 0x43E4223E, 0x02E1FF1F, 0xF0190321);
	r2 = D(r2, s1_2_0, 0xEF07FE2F, 0xE2F8F9F7, 0xF829F11A, 0xFACFF03A);
	r3 = D(r3, s1_2_0, 0x2604F701, 0xF0F0EA14, 0x05E10381, 0x0AE81BDC);
	r4 = D(r4, s1_2_0, 0x08E3153C, 0x13130581, 0x07EB2212, 0x0EFD07EB);
	r5 = D(r5, s1_2_0, 0x06091D06, 0xF5120DE0, 0xF60829E8, 0xC2E1F00A);
	r6 = D(r6, s1_2_0, 0xFD03FE17, 0x071912DC, 0xF6FEEF06, 0x1C02F805);
	r7 = D(r7, s1_2_0, 0xF9FDED19, 0x16131BBE, 0x02F4FF17, 0x2B0B00B5);
	r0 = D(r0, s1_2_1, 0xEAF8BEBD, 0xF5E4F00D, 0x120D0203, 0x0A010001);
	r1 = D(r1, s1_2_1, 0xF220CC81, 0xF4E7D43D, 0xFF001300, 0xE8030B18);
	r2 = D(r2, s1_2_1, 0xF0FD0B29, 0x05DBF6E4, 0xFCE5052C, 0x12E40D0D);
	r3 = D(r3, s1_2_1, 0xEAF6F025, 0xF90E0AFD, 0xD31DEE04, 0x21080AE2);
	r4 = D(r4, s1_2_1, 0xFC142FF6, 0x0119130E, 0x0016200F, 0xEB17FF36);
	r5 = D(r5, s1_2_1, 0xFCF1090E, 0x07000CDE, 0xEFD8DFE4, 0xD31DE204);
	r6 = D(r6, s1_2_1, 0xEC0E17F7, 0xF5020ED7, 0x052E0FEC, 0xE10C3381);
	r7 = D(r7, s1_2_1, 0x4538E2C3, 0xF82FCDE3, 0xEFF7F9F7, 0xFE38CED8);
	r0 = D(r0, s1_2_2, 0xE4C72C28, 0x07240A0B, 0xFEEAF908, 0xFFED010D);
	r1 = D(r1, s1_2_2, 0x062315E7, 0x000D0421, 0xEF06F9FA, 0xF20907FF);
	r2 = D(r2, s1_2_2, 0xFDE5F702, 0x150004E3, 0xF3DB030F, 0x0D03EB0D);
	r3 = D(r3, s1_2_2, 0x08E80E07, 0x0207FCFD, 0xE1F40716, 0xF6F4F809);
	r4 = D(r4, s1_2_2, 0x1106EDFA, 0xFC0D02F5, 0x0300FFF2, 0x050A03F4);
	r5 = D(r5, s1_2_2, 0x03001309, 0xEFF7FCE4, 0x07FB10F4, 0xEF0316DF);
	r6 = D(r6, s1_2_2, 0x1CBD0AE8, 0xFBED06F0, 0x20F2F5CF, 0xFA01FC2A);
	r7 = D(r7, s1_2_2, 0x16FEEFFC, 0xF611FBF7, 0x00EB0111, 0xFB1300FF);
	s0_0_0 = G[6][xy.y+0][xy.x+0]; s0_0_1 = G[6][xy.y+0][xy.x+1];
	s0_0_2 = G[6][xy.y+0][xy.x+2]; s0_1_0 = G[6][xy.y+1][xy.x+0];
	s0_1_1 = G[6][xy.y+1][xy.x+1]; s0_1_2 = G[6][xy.y+1][xy.x+2];
	s0_2_0 = G[6][xy.y+2][xy.x+0]; s0_2_1 = G[6][xy.y+2][xy.x+1];
	s0_2_2 = G[6][xy.y+2][xy.x+2]; s1_0_0 = G[7][xy.y+0][xy.x+0];
	s1_0_1 = G[7][xy.y+0][xy.x+1]; s1_0_2 = G[7][xy.y+0][xy.x+2];
	s1_1_0 = G[7][xy.y+1][xy.x+0]; s1_1_1 = G[7][xy.y+1][xy.x+1];
	s1_1_2 = G[7][xy.y+1][xy.x+2]; s1_2_0 = G[7][xy.y+2][xy.x+0];
	s1_2_1 = G[7][xy.y+2][xy.x+1]; s1_2_2 = G[7][xy.y+2][xy.x+2];
	r0 = D(r0, s0_0_0, 0x0FD9C3FC, 0xF10FFAE8, 0x190806EA, 0xF204FB00);
	r1 = D(r1, s0_0_0, 0xBF190A1A, 0x181D020C, 0x12F009FE, 0xFC1612EF);
	r2 = D(r2, s0_0_0, 0x10EE12DE, 0xD700F5FC, 0x1C18FEE3, 0x07E3ECF4);
	r3 = D(r3, s0_0_0, 0xF425F20D, 0xF50209F9, 0x04001F0B, 0x01F603E4);
	r4 = D(r4, s0_0_0, 0x030BF401, 0x08EE0305, 0xFB0301FD, 0x031111E5);
	r5 = D(r5, s0_0_0, 0x161D00EF, 0xFFFAFAE9, 0x041918EA, 0x02F6E6ED);
	r6 = D(r6, s0_0_0, 0x44F2E9CC, 0xF81DFEF5, 0x111306E1, 0x0604E708);
	r7 = D(r7, s0_0_0, 0x23F8F50E, 0xDF0AF02C, 0x05F90009, 0x1915EFFC);
	r0 = D(r0, s0_0_1, 0x26E8C260, 0x0BF3EAE9, 0xF1FD0D0A, 0xFEF1FE01);
	r1 = D(r1, s0_0_1, 0xC8E3FD17, 0x13DFEE12, 0xD94102EC, 0xE8070112);
	r2 = D(r2, s0_0_1, 0xFBF811DB, 0xE0E60A0C, 0xD41802DC, 0xE4F7F305);
	r3 = D(r3, s0_0_1, 0xD9F3E905, 0xFD00FDE9, 0x05EFE1D9, 0x0CF5FAEF);
	r4 = D(r4, s0_0_1, 0x0DE1F322, 0xF8DAE923, 0x00F7FF04, 0xE4FFEFE2);
	r5 = D(r5, s0_0_1, 0xE900F9EC, 0xC90E0803, 0xF20F03D1, 0xDA03D6AC);
	r6 = D(r6, s0_0_1, 0xFAF00BDD, 0xDEE007E6, 0xEFF5D706, 0x2F1303FA);
	r7 = D(r7, s0_0_1, 0x1A1E02F3, 0xDBEEEF10, 0xFBEC0310, 0x23FBF80B);
	r0 = D(r0, s0_0_2, 0xEA05E90E, 0xEF23EA1C, 0xF4F3FE01, 0xFE0400FE);
	r1 = D(r1, s0_0_2, 0x0AECF318, 0xF1FDF3EF, 0xF910093F, 0xF50504FF);
	r2 = D(r2, s0_0_2, 0xF40D0C17, 0x092B0CFE, 0x04040A0C, 0xE907F8D5);
	r3 = D(r3, s0_0_2, 0x17F0E1F1, 0x01FE03FE, 0x04F4F4F2, 0x07FFF403);
	r4 = D(r4, s0_0_2, 0x0E10E7DB, 0xFEF100F5, 0x0005FFFB, 0x09FC0CFF);
	r5 = D(r5, s0_0_2, 0xE6ECECF5, 0x14E8E6E6, 0xE4E20606, 0x34F5FC0F);
	r6 = D(r6, s0_0_2, 0x12E810C6, 0x1BB2EAF3, 0x123BE5D7, 0x1A12F5F0);
	r7 = D(r7, s0_0_2, 0x030FF906, 0xEA13FFFB, 0xEE0C0CFF, 0x03F9F5F2);
	r0 = D(r0, s0_1_0, 0xF42BCCD7, 0xD6D507E4, 0x09EE0409, 0x300D0F03);
	r1 = D(r1, s0_1_0, 0x5E1EADED, 0xF90FEC16, 0x1C010209, 0xD9EC0403);
	r2 = D(r2, s0_1_0, 0xBAEF1517, 0x0E02E602, 0xFF0B1CF7, 0xFBB4EDC9);
	r3 = D(r3, s0_1_0, 0x07C6EEE9, 0x07E6F90F, 0x8118F4F8, 0xE8EDFC00);
	r4 = D(r4, s0_1_0, 0x0C3BF005, 0xFB02E905, 0x09FDF908, 0x0DF2FE0A);
	r5 = D(r5, s0_1_0, 0xFDF6DB15, 0xFF1B0605, 0xDA302314, 0xF116E1B4);
	r6 = D(r6, s0_1_0, 0xC11B090A, 0x2DEB08FD, 0x050204FF, 0xFA05021C);
	r7 = D(r7, s0_1_0, 0x10FD01FC, 0xD6130315, 0xFF02FFFD, 0x06FD0405);
	r0 = D(r0, s0_1_1, 0xF633D5D3, 0x211EEE03, 0x14EF1B06, 0x0C0A0003);
	r1 = D(r1, s0_1_1, 0x2EBFE6E9, 0xFE14EE0E, 0xE410E6F8, 0x02F6E008);
	r2 = D(r2, s0_1_1, 0x09040EC0, 0x03180223, 0xF507EF03, 0x2DF3EF21);
	r3 = D(r3, s0_1_1, 0xE1031B0E, 0xEF161B1F, 0x1621FC1E, 0x2441FF3B);
	r4 = D(r4, s0_1_1, 0x0B02D3FC, 0xFCE415FC, 0xF4FB02D0, 0xE01FF6FB);
	r5 = D(r5, s0_1_1, 0x1F0519EC, 0x8111ED13, 0xE59E08E7, 0xB600C1FB);
	r6 = D(r6, s0_1_1, 0xE4F4000E, 0x1F3408F2, 0x46E41A08, 0xF90DE120);
	r7 = D(r7, s0_1_1, 0xE025D216, 0xE6F21EF9, 0x6312EFFE, 0xFD05FE1F);
	r0 = D(r0, s0_1_2, 0x2EE9DAE0, 0xE4B20137, 0x120605FE, 0x0BF903FA);
	r1 = D(r1, s0_1_2, 0x20D2D193, 0x01E10213, 0x02060FEC, 0x0FFAFF08);
	r2 = D(r2, s0_1_2, 0xFCFA0D10, 0xEFC61632, 0xFAE8EF0C, 0xEF0E0CFA);
	r3 = D(r3, s0_1_2, 0xF61EE9F0, 0xFD1001FB, 0x0EECE7FF, 0x18E30A0A);
	r4 = D(r4, s0_1_2, 0xEB022035, 0xE9240AE7, 0x02F90627, 0x0AE11C38);
	r5 = D(r5, s0_1_2, 0x190DFA1F, 0xDEE6FA29, 0x1FFBF60C, 0xFE07E442);
	r6 = D(r6, s0_1_2, 0xAEEA011D, 0xEEE3FAF1, 0x8181E9EB, 0xC9E90EE4);
	r7 = D(r7, s0_1_2, 0x0D0708D5, 0xF2BCFDFE, 0xFFEC04CF, 0x08E40AF4);
	r0 = D(r0, s0_2_0, 0x191AC916, 0x1CFA00FB, 0x070B0808, 0xFF0905FE);
	r1 = D(r1, s0_2_0, 0x431ABC20, 0xEEFC0DF2, 0xFBEA020D, 0xFB0DFEF5);
	r2 = D(r2, s0_2_0, 0x26FFE9FF, 0x1D23E909, 0xD10A0FF8, 0xFF34ED12);
	r3 = D(r3, s0_2_0, 0x3B1FE1F9, 0x14FEF602, 0x2F213101, 0xF0FC0F03);
	r4 = D(r4, s0_2_0, 0xEAEB05FC, 0x110B061C, 0xF00CFB05, 0xD1140600);
	r5 = D(r5, s0_2_0, 0xE6F8FE05, 0x22F706FE, 0x24141E14, 0x0AEBDFF7);
	r6 = D(r6, s0_2_0, 0x0D0EE321, 0x03010005, 0xE90A02EC, 0xF4FE0D08);
	r7 = D(r7, s0_2_0, 0xEBD107E9, 0xFB0213F1, 0xF1FBF508, 0xE3F20CFB);
	r0 = D(r0, s0_2_1, 0x1EEEF851, 0xCB0BF8F7, 0x12FD021E, 0xD9F407FE);
	r1 = D(r1, s0_2_1, 0xEE0DA04D, 0xEE050E06, 0x2AFA0409, 0x1621EB03);
	r2 = D(r2, s0_2_1, 0xFD11FC1A, 0xF2F303F8, 0x14EB090A, 0x0EF70037);
	r3 = D(r3, s0_2_1, 0xF4DEE616, 0x02F301F4, 0xD0EA1AED, 0xEBF1F6FD);
	r4 = D(r4, s0_2_1, 0x0215EBE4, 0xFBF4FFFD, 0x13FBF401, 0xFC15F801);
	r5 = D(r5, s0_2_1, 0x05190B00, 0x101B080B, 0x29FE1919, 0x1CF8E127);
	r6 = D(r6, s0_2_1, 0x08F50905, 0x0BF8FAF7, 0x1D06F0F5, 0x1FFE05ED);
	r7 = D(r7, s0_2_1, 0xEBFC260F, 0x341DE1D2, 0xEEF50312, 0xFC25F6ED);
	r0 = D(r0, s0_2_2, 0xDB04CCA6, 0xFAEB061C, 0x0914F803, 0x08F9FFFE);
	r1 = D(r1, s0_2_2, 0xEC14DCFC, 0xFBDDFBF5, 0x05E418D9, 0x13FD06E7);
	r2 = D(r2, s0_2_2, 0x132E0B2E, 0x0917F8EC, 0x29FDFC06, 0x09180C1F);
	r3 = D(r3, s0_2_2, 0x0125FC0E, 0x000302FE, 0x15D5F003, 0x0CFF11F3);
	r4 = D(r4, s0_2_2, 0xF1EB0CF0, 0xE9FEFA0F, 0x05020805, 0x12D914F7);
	r5 = D(r5, s0_2_2, 0xECF4F7E4, 0x27F205EE, 0xFF08FC0D, 0x35E1D923);
	r6 = D(r6, s0_2_2, 0x380A141A, 0x1110FB10, 0xFA2F094C, 0xCBE30D00);
	r7 = D(r7, s0_2_2, 0x04F711E0, 0x1624F6E3, 0x0F0D0207, 0xFFF2F8EC);
	r0 = D(r0, s1_0_0, 0x28DAFFEB, 0xFF0EFE04, 0xEF0E01F1, 0x0BFBF2F7);
	r1 = D(r1, s1_0_0, 0x2640FCBA, 0xFC15DED8, 0x060509EB, 0x05EDF9E5);
	r2 = D(r2, s1_0_0, 0xF8D71139, 0xF706E608, 0xFDEB0812, 0x08E61640);
	r3 = D(r3, s1_0_0, 0x160DD2DF, 0x03FE0209, 0x2DE700F5, 0x19FBEFF1);
	r4 = D(r4, s1_0_0, 0xFCFC1724, 0x0208F6F8, 0xFBFE0303, 0x000EED10);
	r5 = D(r5, s1_0_0, 0x1D12E6ED, 0xFEFB06E9, 0x1DE7F6F5, 0x25F9F122);
	r6 = D(r6, s1_0_0, 0xECF9EBF8, 0x22E3D8FC, 0x0AFCE0CE, 0x03FEE124);
	r7 = D(r7, s1_0_0, 0xF717ED09, 0xF21DE0F0, 0xFF0002FD, 0x020AE313);
	r0 = D(r0, s1_0_1, 0x06F21419, 0x021506DE, 0xE81006EA, 0x06F6FAF9);
	r1 = D(r1, s1_0_1, 0x20D8FD31, 0x0D0001EA, 0xC5490707, 0xFF2A0404);
	r2 = D(r2, s1_0_1, 0xFA3AFD19, 0x15BE34D0, 0xFF2001F2, 0x3EF7F812);
	r3 = D(r3, s1_0_1, 0xD3150DE0, 0xF8FF0806, 0xD82FE40C, 0x02FE0316);
	r4 = D(r4, s1_0_1, 0x2502F32F, 0x33F6D91D, 0x0009050E, 0xEC0F061A);
	r5 = D(r5, s1_0_1, 0xF9FDD7FC, 0xF8FCF5FC, 0xE1360BFB, 0xC10911D9);
	r6 = D(r6, s1_0_1, 0x190FF2DD, 0x24FBDE0B, 0x1601EB14, 0x161DF7EF);
	r7 = D(r7, s1_0_1, 0x13FAEACA, 0xF3E51506, 0xF1031510, 0xF00FF300);
	r0 = D(r0, s1_0_2, 0x16FCEF0D, 0xF1FAFF33, 0xFDF6FD04, 0xFF02FFFE);
	r1 = D(r1, s1_0_2, 0x2B08FEF0, 0x13F700FC, 0x08061C03, 0x0FFFF40D);
	r2 = D(r2, s1_0_2, 0xFF0204F2, 0x06F322E4, 0x0009F801, 0xFCF6FD19);
	r3 = D(r3, s1_0_2, 0x19FAFA00, 0x03FA07FD, 0xFA0DFDE5, 0x0100F3EC);
	r4 = D(r4, s1_0_2, 0xF5E40EF0, 0x07F9EBFC, 0x04F90109, 0xED0BFE1A);
	r5 = D(r5, s1_0_2, 0xF80AF0F7, 0xC90DE302, 0x00F9EFF9, 0x0F0F0AEE);
	r6 = D(r6, s1_0_2, 0xEF1A1313, 0x1501FA11, 0xE4FE28E7, 0xE7FBE6F9);
	r7 = D(r7, s1_0_2, 0x0AFDFEF6, 0xF9F51107, 0x140300EA, 0xF700F40B);
	r0 = D(r0, s1_1_0, 0x161040DE, 0x0D01EDD7, 0x00F607EB, 0xF4F4F2F0);
	r1 = D(r1, s1_1_0, 0xCEC716CF, 0x034C0B10, 0xFB02F708, 0xF00AEBEE);
	r2 = D(r2, s1_1_0, 0xFE28391A, 0xF12D0E04, 0xD90D1A24, 0xDB3B29E1);
	r3 = D(r3, s1_1_0, 0x2FF50323, 0x0B10F3FB, 0x442C1B32, 0x023016F7);
	r4 = D(r4, s1_1_0, 0x0019E4E2, 0xFAFD2919, 0xF6F80A06, 0xF1FCF825);
	r5 = D(r5, s1_1_0, 0xEDFA4F29, 0x0107F405, 0x1AE910DA, 0x022714D7);
	r6 = D(r6, s1_1_0, 0xE432F3E9, 0xFAE4DF06, 0xF607F6F6, 0x010600FB);
	r7 = D(r7, s1_1_0, 0x00FC00E2, 0x23F8D0A0, 0x08FB010F, 0xFBEC07FD);
	r0 = D(r0, s1_1_1, 0xF2D309D7, 0xFBD9E4D9, 0x0FF71718, 0x07FE0703);
	r1 = D(r1, s1_1_1, 0xC813CEB7, 0xE7C2FCFD, 0xE8B79D0E, 0x23DD0DD4);
	r2 = D(r2, s1_1_1, 0xBF01B700, 0x06F5E011, 0x5EDCF1CE, 0xFB17E1FA);
	r3 = D(r3, s1_1_1, 0xC1FBDD07, 0xE6F605F5, 0xCD05E10C, 0xD3ECD63F);
	r4 = D(r4, s1_1_1, 0xBD5058DC, 0x7F0CCB07, 0xD35F1BD1, 0xDC5311C4);
	r5 = D(r5, s1_1_1, 0xDD0E1EE2, 0x15E7EDED, 0xDC0ED508, 0xEF0DDE22);
	r6 = D(r6, s1_1_1, 0x34E0E4E0, 0x1606E6EC, 0x0927EFF7, 0x26181A0B);
	r7 = D(r7, s1_1_1, 0xFEE742F0, 0xB9D76014, 0x0BEBF1E0, 0xFAE2FFB6);
	r0 = D(r0, s1_1_2, 0x09F40FE0, 0xD236F3F8, 0x09FB0911, 0xF30BF406);
	r1 = D(r1, s1_1_2, 0xAE1B04BF, 0x04F90CF4, 0x0B04F805, 0xFCFCE2F1);
	r2 = D(r2, s1_1_2, 0x0FECDA18, 0xFA26EE17, 0xF2EDED04, 0xE508F7FA);
	r3 = D(r3, s1_1_2, 0xEBE5F803, 0x0503FF07, 0xE608EDFF, 0xEB04F709);
	r4 = D(r4, s1_1_2, 0xF130E1E5, 0x11EB2DDE, 0xF6020CFD, 0xEFE50B0C);
	r5 = D(r5, s1_1_2, 0xFEF6EEF6, 0xB41BD511, 0x08E606F6, 0xF3E21A08);
	r6 = D(r6, s1_1_2, 0xD6F8EA19, 0x0FC708FA, 0x06E1DCFD, 0xD7130616);
	r7 = D(r7, s1_1_2, 0xE019132B, 0x490217CC, 0x0316F60D, 0xFCF7F9E3);
	r0 = D(r0, s1_2_0, 0xEAEB0DBC, 0xF402E907, 0x0320E9FB, 0x090E0402);
	r1 = D(r1, s1_2_0, 0xEBF30446, 0xF00E2841, 0xFA030DEC, 0x00FB0BFD);
	r2 = D(r2, s1_2_0, 0xFBFFFA19, 0xF703F1E7, 0xFC1DFF1F, 0xD03EED04);
	r3 = D(r3, s1_2_0, 0xCEFF2034, 0x0907FCEE, 0x1FB705F2, 0xFAF3FF0F);
	r4 = D(r4, s1_2_0, 0xF9E9FBDB, 0xEAF3331A, 0x02FAF806, 0xF9E7FE20);
	r5 = D(r5, s1_2_0, 0x16EE1D06, 0xFAF5F1F8, 0xEDEE09E7, 0x05B9E2C8);
	r6 = D(r6, s1_2_0, 0xF519D80B, 0x00E9E9F4, 0xFCEAE3FA, 0xF80203EE);
	r7 = D(r7, s1_2_0, 0xE957FCFE, 0xF02B04E7, 0x05050900, 0xF6C7003A);
	r0 = D(r0, s1_2_1, 0x0010DAFB, 0x14D9ABD1, 0xFAFE0FED, 0xEE07FB0C);
	r1 = D(r1, s1_2_1, 0xF50950F4, 0x251D1816, 0xF00DE802, 0x0910F502);
	r2 = D(r2, s1_2_1, 0x07E4FCF2, 0xFFEBEDF4, 0xFD05010D, 0xF0140BDC);
	r3 = D(r3, s1_2_1, 0x15F10FDF, 0xF923FD02, 0xE70203EB, 0xE32900EA);
	r4 = D(r4, s1_2_1, 0xF58183F8, 0x4FE83E01, 0xEB81EC18, 0xFCA0BA0A);
	r5 = D(r5, s1_2_1, 0x35D9070A, 0x05F8EFFA, 0x05FEF9DA, 0x0BF58AE7);
	r6 = D(r6, s1_2_1, 0x19C0E6FE, 0xFE080AFF, 0xFAF9C004, 0xD3D8FC27);
	r7 = D(r7, s1_2_1, 0x02C5EF02, 0x0321D11F, 0xEE120B0B, 0x174ADA07);
	r0 = D(r0, s1_2_2, 0x0BC7F521, 0xFFEDEB22, 0x0906E7F2, 0x06000900);
	r1 = D(r1, s1_2_2, 0x18DD0E06, 0xE3E8F808, 0xEFFA10F8, 0xDFFEDD14);
	r2 = D(r2, s1_2_2, 0xEF0FDEF0, 0xF3F3E7EB, 0x01FB0B08, 0xF4FBEDF0);
	r3 = D(r3, s1_2_2, 0xE00CFF22, 0x0E000101, 0xF90AF708, 0xE6F30FEA);
	r4 = D(r4, s1_2_2, 0xC8F90FFD, 0x211513EE, 0xF308F404, 0xEC03EB02);
	r5 = D(r5, s1_2_2, 0xF7020224, 0x042A0703, 0xF81EEAFA, 0x150A0405);
	r6 = D(r6, s1_2_2, 0xD208E40B, 0x070D11EF, 0xDC0AED32, 0xFDF90617);
	r7 = D(r7, s1_2_2, 0x1BD91122, 0xFEDFEB13, 0x06EEFAF3, 0x1FFE1100);
	f0 = vec4(r0) * 6.2000124e-05;
	f0 += vec4(-2.757e-04, 1.606e-02, 4.686e-03, 7.902e-04);
	f0 = clamp(f0, vec4(0.0), vec4(1.0));
	imageStore(out_image, opos + ivec2(0, 0), f0);
	f1 = vec4(r1) * 6.2000124e-05;
	f1 += vec4(6.956e-03, -4.562e-03, 1.424e-02, 1.329e-02);
	f1 = clamp(f1, vec4(0.0), vec4(1.0));
	imageStore(out_image, opos + ivec2(1, 0), f1);
	f2 = vec4(r2) * 6.2000124e-05;
	f2 += vec4(-2.798e-03, 8.444e-03, 1.857e-03, -2.564e-03);
	f2 = clamp(f2, vec4(0.0), vec4(1.0));
	imageStore(out_image, opos + ivec2(0, 1), f2);
	f3 = vec4(r3) * 6.2000124e-05;
	f3 += vec4(-5.345e-03, 2.774e-03, 2.552e-02, 1.945e-02);
	f3 = clamp(f3, vec4(0.0), vec4(1.0));
	imageStore(out_image, opos + ivec2(1, 1), f3);
	f4 = vec4(r4) * 6.2000124e-05;
	f4 += vec4(3.839e-03, 8.968e-03, 9.268e-03, 3.387e-02);
	f4 = clamp(f4, vec4(0.0), vec4(1.0));
	imageStore(out_image, opos + ivec2(2, 0), f4);
	f5 = vec4(r5) * 6.2000124e-05;
	f5 += vec4(2.717e-03, 2.942e-02, 1.964e-02, 2.814e-03);
	f5 = clamp(f5, vec4(0.0), vec4(1.0));
	imageStore(out_image, opos + ivec2(3, 0), f5);
	f6 = vec4(r6) * 6.2000124e-05;
	f6 += vec4(2.352e-02, 9.422e-03, 3.311e-04, 2.670e-02);
	f6 = clamp(f6, vec4(0.0), vec4(1.0));
	imageStore(out_image, opos + ivec2(2, 1), f6);
	f7 = vec4(r7) * 6.2000124e-05;
	f7 += vec4(4.920e-03, -1.975e-02, 2.843e-03, 2.104e-02);
	f7 = clamp(f7, vec4(0.0), vec4(1.0));
	imageStore(out_image, opos + ivec2(3, 1), f7);
}

//!DESC CuNNy-4x32-conv2
//!HOOK LUMA
//!COMPUTE 32 16 8 8
//!BIND conv1
//!BIND LUMA
//!SAVE conv2
//!WIDTH LUMA.w 4 *
//!HEIGHT LUMA.h 2 *
//!COMPONENTS 4
//!WHEN OUTPUT.w LUMA.w / 1.3 > OUTPUT.h LUMA.h / 1.3 > *
#extension GL_EXT_spirv_intrinsics : require
spirv_instruction (extensions = ["SPV_KHR_integer_dot_product"], capabilities = [6019, 6018], id = 4450)
int dp4(int a, int b, spirv_literal int fmt);
#define D(r, s, a, b, c, d) r + ivec4(dp4(s, a, 0), dp4(s, b, 0), dp4(s, c, 0), dp4(s, d, 0))
shared int G[8][10][10];
void hook() {
	ivec2 xy = ivec2(gl_LocalInvocationID.xy);
	ivec2 pos = ivec2(gl_WorkGroupID.xy) * ivec2(8, 8) + xy;
	ivec2 opos = pos * ivec2(4, 2);
	ivec2 sz = ivec2(LUMA_size) - ivec2(1);
	for (int y = 0; y < 10; y += 8) {
		int ay = xy.y + y;
		if (ay >= 10) break;
		for (int x = 0; x < 10; x += 8) {
			int ax = xy.x + x;
			if (ax >= 10) break;
			vec2 p;
			vec4 r, g, b, a;
			p = vec2(clamp(pos + ivec2(x - 1, y - 1), ivec2(0), sz) * ivec2(4, 2) + ivec2(1, 1)) * conv1_pt;
			r = conv1_gather(p, 0);
			g = conv1_gather(p, 1);
			b = conv1_gather(p, 2);
			a = conv1_gather(p, 3);
			vec4 v0 = vec4(r.w, g.w, b.w, a.w) * 1.0000000e+00;
			vec4 v1 = vec4(r.z, g.z, b.z, a.z) * 1.0000000e+00;
			vec4 v2 = vec4(r.x, g.x, b.x, a.x) * 1.0000000e+00;
			vec4 v3 = vec4(r.y, g.y, b.y, a.y) * 1.0000000e+00;
			p = vec2(clamp(pos + ivec2(x - 1, y - 1), ivec2(0), sz) * ivec2(4, 2) + ivec2(3, 1)) * conv1_pt;
			r = conv1_gather(p, 0);
			g = conv1_gather(p, 1);
			b = conv1_gather(p, 2);
			a = conv1_gather(p, 3);
			vec4 v4 = vec4(r.w, g.w, b.w, a.w) * 1.0000000e+00;
			vec4 v5 = vec4(r.z, g.z, b.z, a.z) * 1.0000000e+00;
			vec4 v6 = vec4(r.x, g.x, b.x, a.x) * 1.0000000e+00;
			vec4 v7 = vec4(r.y, g.y, b.y, a.y) * 1.0000000e+00;
			G[0][ay][ax] = int(packSnorm4x8(v0));
			G[1][ay][ax] = int(packSnorm4x8(v1));
			G[2][ay][ax] = int(packSnorm4x8(v2));
			G[3][ay][ax] = int(packSnorm4x8(v3));
			G[4][ay][ax] = int(packSnorm4x8(v4));
			G[5][ay][ax] = int(packSnorm4x8(v5));
			G[6][ay][ax] = int(packSnorm4x8(v6));
			G[7][ay][ax] = int(packSnorm4x8(v7));
		}
	}
	barrier();
	int s0_0_0, s0_0_1, s0_0_2, s0_1_0, s0_1_1, s0_1_2, s0_2_0, s0_2_1, s0_2_2, s1_0_0, s1_0_1, s1_0_2, s1_1_0, s1_1_1, s1_1_2, s1_2_0, s1_2_1, s1_2_2;
	ivec4 r0, r1, r2, r3, r4, r5, r6, r7;
	vec4 f0, f1, f2, f3, f4, f5, f6, f7;
	r0 = ivec4(0); r1 = ivec4(0); r2 = ivec4(0); r3 = ivec4(0); r4 = ivec4(0); r5 = ivec4(0); r6 = ivec4(0); r7 = ivec4(0);
	s0_0_0 = G[0][xy.y+0][xy.x+0]; s0_0_1 = G[0][xy.y+0][xy.x+1];
	s0_0_2 = G[0][xy.y+0][xy.x+2]; s0_1_0 = G[0][xy.y+1][xy.x+0];
	s0_1_1 = G[0][xy.y+1][xy.x+1]; s0_1_2 = G[0][xy.y+1][xy.x+2];
	s0_2_0 = G[0][xy.y+2][xy.x+0]; s0_2_1 = G[0][xy.y+2][xy.x+1];
	s0_2_2 = G[0][xy.y+2][xy.x+2]; s1_0_0 = G[1][xy.y+0][xy.x+0];
	s1_0_1 = G[1][xy.y+0][xy.x+1]; s1_0_2 = G[1][xy.y+0][xy.x+2];
	s1_1_0 = G[1][xy.y+1][xy.x+0]; s1_1_1 = G[1][xy.y+1][xy.x+1];
	s1_1_2 = G[1][xy.y+1][xy.x+2]; s1_2_0 = G[1][xy.y+2][xy.x+0];
	s1_2_1 = G[1][xy.y+2][xy.x+1]; s1_2_2 = G[1][xy.y+2][xy.x+2];
	r0 = D(r0, s0_0_0, 0xF9F204F7, 0x02F70DFE, 0x050904FC, 0x0512FF0D);
	r1 = D(r1, s0_0_0, 0x0403F803, 0x01E4F5F9, 0x0A010805, 0x09F9FD0A);
	r2 = D(r2, s0_0_0, 0xF906FEFA, 0xF604FCF2, 0xFB070BF7, 0xFE0202FE);
	r3 = D(r3, s0_0_0, 0x00FD0205, 0x0AFCF31E, 0x02EDFBB9, 0x00D50DF5);
	r4 = D(r4, s0_0_0, 0x06ED01F9, 0x07FA0805, 0xF60E04FD, 0xFF02FE03);
	r5 = D(r5, s0_0_0, 0x030214FA, 0x03FFF4D3, 0x01E92D9E, 0xF105DECA);
	r6 = D(r6, s0_0_0, 0x02FAF5F0, 0x0412030D, 0xFB331042, 0xF7FF07EE);
	r7 = D(r7, s0_0_0, 0x03FE0009, 0xFEF8FFB9, 0xF800FDF6, 0xFAFD0A09);
	r0 = D(r0, s0_0_1, 0x090CE608, 0xFF101E08, 0xF00F0FF9, 0x0400FE09);
	r1 = D(r1, s0_0_1, 0x0AFAF403, 0x03081AD6, 0x080FFA0C, 0x08F30F0D);
	r2 = D(r2, s0_0_1, 0x0B0600EF, 0xE003342E, 0x030306FB, 0xF411FEF6);
	r3 = D(r3, s0_0_1, 0xFD01FEFD, 0x1BF5F1FF, 0x0C20ED9B, 0xF0B60B1E);
	r4 = D(r4, s0_0_1, 0x1D0C10F3, 0x12FF00F8, 0x0F100B39, 0xFF0105FF);
	r5 = D(r5, s0_0_1, 0xFDFF0B06, 0x0721D8DC, 0xDA0D1650, 0x020EF7FB);
	r6 = D(r6, s0_0_1, 0xE70B1AD9, 0x04E7F8FB, 0x0506C55C, 0xFBCF07E3);
	r7 = D(r7, s0_0_1, 0x02FBFAFF, 0xF8FC07C6, 0xF3F30D04, 0x00EA1206);
	r0 = D(r0, s0_0_2, 0x1205FBF0, 0xEFFE0AD8, 0xF5100904, 0xFDEC0096);
	r1 = D(r1, s0_0_2, 0x0D0EF9FA, 0xEA060204, 0x0F0D03FF, 0x03090114);
	r2 = D(r2, s0_0_2, 0xFB0702FF, 0xFFCFF551, 0x02FFFEFF, 0xFB040107);
	r3 = D(r3, s0_0_2, 0xFF0202FB, 0x1202FCF7, 0xE10EFBCF, 0xFD160704);
	r4 = D(r4, s0_0_2, 0xD3DA00F2, 0x090502FB, 0x07FA0511, 0x06FF0002);
	r5 = D(r5, s0_0_2, 0xFBFC022F, 0x25E70D8C, 0xF400FFFA, 0xE7F50AE2);
	r6 = D(r6, s0_0_2, 0xF41709EA, 0x00EA0914, 0x2CA9FA1A, 0xDE0A0CC3);
	r7 = D(r7, s0_0_2, 0x00FC01F8, 0x01170386, 0xF704041A, 0x07180600);
	r0 = D(r0, s0_1_0, 0x06FD04F9, 0x0A0303FE, 0x031FF005, 0xF70EEE0C);
	r1 = D(r1, s0_1_0, 0xFAF417F2, 0xFE2436D5, 0xFDFBF9EA, 0x03ED0FEB);
	r2 = D(r2, s0_1_0, 0x03001108, 0x08F90404, 0x020702F5, 0x030101FF);
	r3 = D(r3, s0_1_0, 0x0302FD00, 0x09E1DBFB, 0x06FD00C2, 0xE8EEF6DB);
	r4 = D(r4, s0_1_0, 0x09012705, 0xFCFE050E, 0x07D602F2, 0x0004F604);
	r5 = D(r5, s0_1_0, 0xFF09F7FC, 0xF5F50C07, 0xC7FFD0CD, 0xF5F60DE7);
	r6 = D(r6, s0_1_0, 0x04FBDF1F, 0xF5FA15F3, 0xE1C616A4, 0x091A37F2);
	r7 = D(r7, s0_1_0, 0xFFFAFDFF, 0xF515FC08, 0x081A010F, 0xF70F10EB);
	r0 = D(r0, s0_1_1, 0xE7B4FBE0, 0x044F1D13, 0xF47BEC00, 0x060BF998);
	r1 = D(r1, s0_1_1, 0xDCFFFD0E, 0xEC20F10D, 0x1CBCF40F, 0xE6C60A22);
	r2 = D(r2, s0_1_1, 0x05F3DCFC, 0x1AF7F806, 0x02F9FA08, 0xF3FC10FE);
	r3 = D(r3, s0_1_1, 0xFC08FCFC, 0xF1C3F7F3, 0xEB160F07, 0x02E91EF4);
	r4 = D(r4, s0_1_1, 0xFC1B05EC, 0xECF3FEF3, 0x181F0FFB, 0xFD000CF4);
	r5 = D(r5, s0_1_1, 0x30FB0A0C, 0xF7C0F51C, 0xE8C3FDD9, 0x00CBF719);
	r6 = D(r6, s0_1_1, 0x0394EFDB, 0x0BF3E014, 0xD9183B04, 0x16DD1FF0);
	r7 = D(r7, s0_1_1, 0x05F0FBF2, 0x1A1CDE06, 0x0B0509EC, 0xE9AFFBEB);
	r0 = D(r0, s0_1_2, 0x00FAFBEB, 0xF8F105FE, 0x0E3AFF0F, 0xD8CBD3A2);
	r1 = D(r1, s0_1_2, 0x140CF7F2, 0xF1FA02D8, 0x1025FEFD, 0xF9250101);
	r2 = D(r2, s0_1_2, 0xF5CD0A0C, 0x17BBE0DB, 0xE8E60307, 0xA30EF80A);
	r3 = D(r3, s0_1_2, 0x070102FD, 0x19F8DEFC, 0xFB3C1414, 0xE81F0F4E);
	r4 = D(r4, s0_1_2, 0x25E40AFF, 0x0D03FEF9, 0xF412040D, 0x3C06FE08);
	r5 = D(r5, s0_1_2, 0xFCFC02FE, 0xFB1DF60A, 0xFBBB05FF, 0xF7D4FD08);
	r6 = D(r6, s0_1_2, 0x0401141B, 0xBE8112E3, 0xEF371D05, 0x818DF5E2);
	r7 = D(r7, s0_1_2, 0xF2EE000F, 0x08FF0A07, 0xF1021803, 0x1D1B04DC);
	r0 = D(r0, s0_2_0, 0xFFF5E6F5, 0x0A00E4F7, 0x00020AFA, 0x10DF190E);
	r1 = D(r1, s0_2_0, 0x04F8FF10, 0xFB00FCC6, 0xFEFD0303, 0xFE1B0901);
	r2 = D(r2, s0_2_0, 0xFBFBFBF7, 0x03EE0A01, 0x05FD02FA, 0xFA0503F8);
	r3 = D(r3, s0_2_0, 0x04FD0B04, 0x0DF3FB02, 0x0CFFF7DF, 0x0B0FF6FE);
	r4 = D(r4, s0_2_0, 0x06FC0410, 0x020002FE, 0xF1DDFEEF, 0x0303FDFB);
	r5 = D(r5, s0_2_0, 0x0000FC05, 0x0302F7D1, 0x0FF0F4BC, 0x02F7FAD1);
	r6 = D(r6, s0_2_0, 0xFC0B15E1, 0xFB100EFF, 0xF7E5FFBA, 0xF80426D7);
	r7 = D(r7, s0_2_0, 0x0006FE04, 0x0403EEDC, 0xFBF9CAEE, 0xFE0509D2);
	r0 = D(r0, s0_2_1, 0x0B811A2E, 0x0902FB06, 0x010F0803, 0x2D811E11);
	r1 = D(r1, s0_2_1, 0x12FBFFF8, 0x24FD0103, 0xF6FFFF01, 0x090F0204);
	r2 = D(r2, s0_2_1, 0xF2FFFEFB, 0x13F0F907, 0xFDF8FEF5, 0xFF1207F2);
	r3 = D(r3, s0_2_1, 0x1C110401, 0xF0FCF906, 0x100EEEDA, 0xFC2104BF);
	r4 = D(r4, s0_2_1, 0xEC050500, 0x030402FC, 0x0CDD2BD0, 0x02010104);
	r5 = D(r5, s0_2_1, 0xF500141F, 0xE3E32AEB, 0xFDF90A05, 0x01D1F9FD);
	r6 = D(r6, s0_2_1, 0x0734ECEC, 0xF4FDE127, 0xF2010806, 0x19F4142F);
	r7 = D(r7, s0_2_1, 0xF6080005, 0x04F2FC81, 0xF5B21503, 0x101209CC);
	r0 = D(r0, s0_2_2, 0xD800F7E7, 0x1401010A, 0xFE0E0BFA, 0xA3DD06FB);
	r1 = D(r1, s0_2_2, 0x0F0FFC03, 0xF6090AE9, 0xF903FF09, 0x1807041D);
	r2 = D(r2, s0_2_2, 0xEA0102FD, 0x02ED00DE, 0x01010101, 0x060E0209);
	r3 = D(r3, s0_2_2, 0xFC01FF05, 0x0ADAF610, 0xEC08F8D3, 0xE0C41521);
	r4 = D(r4, s0_2_2, 0x0AF105EA, 0x03FB0200, 0x0405FBFE, 0x020400FE);
	r5 = D(r5, s0_2_2, 0x070E031A, 0xED22EEF5, 0xF8EF17F5, 0xF7DAFDDA);
	r6 = D(r6, s0_2_2, 0xF0F706EF, 0xEFE008F8, 0xFCEB0FE4, 0xE5B50C0F);
	r7 = D(r7, s0_2_2, 0xE2FCFE07, 0x0307FFBD, 0xF60400D9, 0x031701FC);
	r0 = D(r0, s1_0_0, 0xE8F4EFE1, 0xF505FC03, 0xF8F803F6, 0xDDF2EC01);
	r1 = D(r1, s1_0_0, 0xFF0208FA, 0xFBED081A, 0xFF030B06, 0xFCFBFC0D);
	r2 = D(r2, s1_0_0, 0x050A0700, 0x021F810B, 0x0104FC00, 0xFBFD00F9);
	r3 = D(r3, s1_0_0, 0x01000501, 0xF5F0E510, 0x070409F6, 0x2DFC0C13);
	r4 = D(r4, s1_0_0, 0xFD01F912, 0xFD040002, 0x10FE19F2, 0xFFFFFD01);
	r5 = D(r5, s1_0_0, 0x09FEFA03, 0x1AED0AE6, 0x3F3D0808, 0x250A08B9);
	r6 = D(r6, s1_0_0, 0xFD0DFEEA, 0xFC0B03FD, 0xECFF260D, 0x060028FF);
	r7 = D(r7, s1_0_0, 0xFEF9F9FF, 0x0D1012F2, 0xF7040F0A, 0xEE060605);
	r0 = D(r0, s1_0_1, 0xD5F70902, 0xF106170C, 0xEC080501, 0xD8141313);
	r1 = D(r1, s1_0_1, 0x08FAF9F8, 0x0209EE02, 0xFA01F1F2, 0x0CFCE601);
	r2 = D(r2, s1_0_1, 0xF404FEFB, 0x471D15DA, 0xFC09F5FC, 0x0606F7FC);
	r3 = D(r3, s1_0_1, 0xFAFE0903, 0x0CFBFF04, 0x1F0D21C0, 0x180AE9ED);
	r4 = D(r4, s1_0_1, 0x25EC1EF8, 0xF7070401, 0xEEFDC0E9, 0x040302FE);
	r5 = D(r5, s1_0_1, 0x0909F802, 0xC31EFFFC, 0xEBFD2F00, 0x1618E9EB);
	r6 = D(r6, s1_0_1, 0x1D2202E0, 0xEBF00D01, 0xCBB6EB18, 0x08F3DAF3);
	r7 = D(r7, s1_0_1, 0x05FCF904, 0x000724F8, 0xFE0B14FD, 0x030E20E6);
	r0 = D(r0, s1_0_2, 0x06FFFEF8, 0xFF0A1900, 0x0606F202, 0x0405FE14);
	r1 = D(r1, s1_0_2, 0x08FFF7F7, 0x0903E0F0, 0x0406F9FD, 0xEAFEE30F);
	r2 = D(r2, s1_0_2, 0xFC000408, 0x433231EE, 0x0C00FF0B, 0xF308E4EE);
	r3 = D(r3, s1_0_2, 0x010004FD, 0xFBF10FF9, 0x0A0F1FC7, 0x08FDC81C);
	r4 = D(r4, s1_0_2, 0x0EFEEFFE, 0x040009FD, 0x17FEE30B, 0xFC03F3FD);
	r5 = D(r5, s1_0_2, 0xFAFD0002, 0x180CFFF2, 0xFBFD0A0E, 0x1406E5E9);
	r6 = D(r6, s1_0_2, 0xE9FE01FE, 0x0AF5EDF7, 0x34FB33EB, 0x06F9F4E2);
	r7 = D(r7, s1_0_2, 0x07FCF303, 0xFC110BEF, 0x04FBE5FD, 0xFC01D50B);
	r0 = D(r0, s1_1_0, 0xD6E1F4F6, 0x08030AF5, 0xFF04070D, 0x00F6FB13);
	r1 = D(r1, s1_1_0, 0x080501FA, 0x0F1405EC, 0x06F604FE, 0x02F307F8);
	r2 = D(r2, s1_1_0, 0x010309F8, 0x0C23EBE9, 0xFEFEFF02, 0x090B00F3);
	r3 = D(r3, s1_1_0, 0xFD020205, 0xE1F204FE, 0xFA130CCB, 0xE00309FF);
	r4 = D(r4, s1_1_0, 0x060AECD6, 0x04FD0402, 0x11D714D9, 0x0002FF00);
	r5 = D(r5, s1_1_0, 0x01FB0400, 0xFEF7F0D8, 0x61954120, 0x02FF02EC);
	r6 = D(r6, s1_1_0, 0x13FF00F8, 0xFA0E14F6, 0xFBFA2AF2, 0x04060CEC);
	r7 = D(r7, s1_1_0, 0xFD04FA00, 0xFD18FBF5, 0x19FDEDF8, 0x1B0801FF);
	r0 = D(r0, s1_1_1, 0xA1E9FADF, 0x19FC2009, 0xEE0CFC17, 0xD6A6EA0D);
	r1 = D(r1, s1_1_1, 0x04EFEFF8, 0xF210EBF4, 0xE1EC09F7, 0xE5EDF70B);
	r2 = D(r2, s1_1_1, 0x19E3F411, 0x1B813AE2, 0x0AEA0803, 0xF8160000);
	r3 = D(r3, s1_1_1, 0x090613FF, 0xEB0B1306, 0x2D07F801, 0x01F91E1C);
	r4 = D(r4, s1_1_1, 0xF906F5DD, 0xFBFCFFFF, 0xE307A101, 0x01030202);
	r5 = D(r5, s1_1_1, 0xDA04050C, 0xFD11431D, 0xF8CEF4FC, 0xD5F2FB10);
	r6 = D(r6, s1_1_1, 0xFBF314FE, 0x2BFAF315, 0xE50405D5, 0xE1F51B1F);
	r7 = D(r7, s1_1_1, 0xF503EFF9, 0x17180F01, 0xCBF111CA, 0xFBFC0AFE);
	r0 = D(r0, s1_1_2, 0xEF0BF100, 0xF508FF09, 0x0212FBF9, 0x1D1606EC);
	r1 = D(r1, s1_1_2, 0x0303FEF7, 0x0DFBE710, 0xFD0501FA, 0x00F50705);
	r2 = D(r2, s1_1_2, 0x0102F90B, 0x03B9DFF5, 0x10EB1002, 0xF8F9190A);
	r3 = D(r3, s1_1_2, 0xFD000DFF, 0x07FB20F1, 0x19FE29EE, 0x17EAED0B);
	r4 = D(r4, s1_1_2, 0xEE19E3FE, 0xFCFFFA01, 0x0504E109, 0x050203FD);
	r5 = D(r5, s1_1_2, 0x07FDF800, 0x440EC7DF, 0xF4F60205, 0xEFFAED12);
	r6 = D(r6, s1_1_2, 0xFE030FF1, 0xFEE50BFE, 0x042AD1E5, 0xDDF0C5C0);
	r7 = D(r7, s1_1_2, 0x03FDFB04, 0xF5F83D08, 0xFAF7EF13, 0x00FE0F08);
	r0 = D(r0, s1_2_0, 0x0205F021, 0x03F405F7, 0x01EC03FC, 0x2C38CFF8);
	r1 = D(r1, s1_2_0, 0x02050103, 0x0E20FDFA, 0x03130A01, 0xFD06FA0B);
	r2 = D(r2, s1_2_0, 0x030003FB, 0xEDE5EF17, 0x0503FD05, 0xFA0900FD);
	r3 = D(r3, s1_2_0, 0xFEFF0202, 0x0CE8EE00, 0x0F040AB9, 0xEAFE0511);
	r4 = D(r4, s1_2_0, 0xF6FCF6EC, 0xFEFF0001, 0xECFAF0CE, 0xFD03FFFE);
	r5 = D(r5, s1_2_0, 0x03FAF614, 0xF5050BF5, 0xDEE8980A, 0xF60FFDE6);
	r6 = D(r6, s1_2_0, 0x03F516DA, 0xF80B05DC, 0x0CED1043, 0xFB03F010);
	r7 = D(r7, s1_2_0, 0xF6FEFFF9, 0x0002FAF0, 0x1239F3E5, 0xF6F7FAEC);
	r0 = D(r0, s1_2_1, 0x2305FF10, 0xF31C1108, 0xFA0D0800, 0x0A0716C5);
	r1 = D(r1, s1_2_1, 0xF41AFAF7, 0x0BF1F20A, 0x04FB09FF, 0xF803EE0D);
	r2 = D(r2, s1_2_1, 0x070001EE, 0xE41EF0D0, 0x01EF01FF, 0xFD040402);
	r3 = D(r3, s1_2_1, 0x00E8FBFB, 0x00F801F7, 0x13310DA9, 0xD617EC00);
	r4 = D(r4, s1_2_1, 0x05F6E2FE, 0x0104FF00, 0xE7EC0409, 0x02010604);
	r5 = D(r5, s1_2_1, 0x12FEF511, 0x27FA0307, 0xEC1AD8E8, 0xF609FCF8);
	r6 = D(r6, s1_2_1, 0xF80F06F0, 0x0BF6FB0F, 0x0B00E437, 0xF7F4E010);
	r7 = D(r7, s1_2_1, 0x020C0A05, 0x061D0CE6, 0x2EEF21FA, 0x0701FF0E);
	r0 = D(r0, s1_2_2, 0x12FF0CEE, 0xFF070509, 0x08F30A06, 0x23EECCF2);
	r1 = D(r1, s1_2_2, 0xF90600FD, 0x00F5FB03, 0x040209FD, 0x02F6EC0B);
	r2 = D(r2, s1_2_2, 0x00060600, 0xFEFA8103, 0xFB01F602, 0xFB06F2FF);
	r3 = D(r3, s1_2_2, 0xFF02F6FD, 0xEF01F103, 0x1BFFF7F3, 0xFDF2EF27);
	r4 = D(r4, s1_2_2, 0xF6F3E60C, 0x0002FC00, 0x0AEAF704, 0xFE010905);
	r5 = D(r5, s1_2_2, 0x05F80600, 0xE50905E0, 0x1604FD05, 0x070106FA);
	r6 = D(r6, s1_2_2, 0x06F7FC0D, 0x0601FAF9, 0x1CEBEE0A, 0x19F003F0);
	r7 = D(r7, s1_2_2, 0x03060303, 0x010DFEEF, 0xFA0820E9, 0x0FFE0405);
	s0_0_0 = G[2][xy.y+0][xy.x+0]; s0_0_1 = G[2][xy.y+0][xy.x+1];
	s0_0_2 = G[2][xy.y+0][xy.x+2]; s0_1_0 = G[2][xy.y+1][xy.x+0];
	s0_1_1 = G[2][xy.y+1][xy.x+1]; s0_1_2 = G[2][xy.y+1][xy.x+2];
	s0_2_0 = G[2][xy.y+2][xy.x+0]; s0_2_1 = G[2][xy.y+2][xy.x+1];
	s0_2_2 = G[2][xy.y+2][xy.x+2]; s1_0_0 = G[3][xy.y+0][xy.x+0];
	s1_0_1 = G[3][xy.y+0][xy.x+1]; s1_0_2 = G[3][xy.y+0][xy.x+2];
	s1_1_0 = G[3][xy.y+1][xy.x+0]; s1_1_1 = G[3][xy.y+1][xy.x+1];
	s1_1_2 = G[3][xy.y+1][xy.x+2]; s1_2_0 = G[3][xy.y+2][xy.x+0];
	s1_2_1 = G[3][xy.y+2][xy.x+1]; s1_2_2 = G[3][xy.y+2][xy.x+2];
	r0 = D(r0, s0_0_0, 0xF80EFBEE, 0xFD0509FD, 0x0606050D, 0xE7F500E5);
	r1 = D(r1, s0_0_0, 0xFA05060A, 0xEFF6EF02, 0x03020D04, 0xFD08050D);
	r2 = D(r2, s0_0_0, 0xFCFDFE03, 0xD0EFFEEC, 0xFF0302FC, 0x08060709);
	r3 = D(r3, s0_0_0, 0x00FD01FE, 0xEF11EEFB, 0x01F2F0F4, 0xF60FFAFF);
	r4 = D(r4, s0_0_0, 0x0AE7260A, 0x06030103, 0x0FE504FA, 0x01FDFFFF);
	r5 = D(r5, s0_0_0, 0x08FB0303, 0x0FF31A0D, 0x0D818822, 0x0AEEEF04);
	r6 = D(r6, s0_0_0, 0x010709FC, 0xF5070200, 0xED0B1623, 0xFCE9E8FD);
	r7 = D(r7, s0_0_0, 0x010301FB, 0x01EBF8EE, 0x0C1AF7FE, 0xFC0BFDFC);
	r0 = D(r0, s0_0_1, 0x010A07EC, 0x0EEAFEDA, 0x0F130D1B, 0x24F9C581);
	r1 = D(r1, s0_0_1, 0xFA04FD00, 0xE0161025, 0x0109FDFC, 0xF601080E);
	r2 = D(r2, s0_0_1, 0x040DFAF7, 0xEE81F233, 0xFC010503, 0x07F8FF07);
	r3 = D(r3, s0_0_1, 0xFBFDFF01, 0x0F04EFE9, 0x0704F3E3, 0x0B1E0D0A);
	r4 = D(r4, s0_0_1, 0x16B3F614, 0xFD07F902, 0x18FA1206, 0x02FC0005);
	r5 = D(r5, s0_0_1, 0x09EDFC09, 0x0E021900, 0xE2F4D9D7, 0xEC1308FE);
	r6 = D(r6, s0_0_1, 0xFB0A08D6, 0x071EE602, 0xFAE70CF5, 0x1310F90C);
	r7 = D(r7, s0_0_1, 0xF7FC0000, 0x07F9F7D4, 0x08FAEC13, 0xEB10F103);
	r0 = D(r0, s0_0_2, 0xED02FAF4, 0x0C0204F9, 0x030A0206, 0x0122E0D0);
	r1 = D(r1, s0_0_2, 0xFCF9000C, 0x090D11EB, 0x02FB0402, 0xE401F30D);
	r2 = D(r2, s0_0_2, 0xED0103FA, 0x2395D719, 0x0FF902F1, 0x0E0C04FC);
	r3 = D(r3, s0_0_2, 0x05FE00FF, 0xF102E9FC, 0x0604F4FF, 0xF0221604);
	r4 = D(r4, s0_0_2, 0x32E70128, 0xFE00FD05, 0xF503FE06, 0xFDFFFB04);
	r5 = D(r5, s0_0_2, 0x04FCFFFE, 0x06FB01E2, 0x0DF8E201, 0xF8E8FFEA);
	r6 = D(r6, s0_0_2, 0xF503F8FA, 0x0AFCF100, 0xD2F0FA0D, 0xD5F9F0DC);
	r7 = D(r7, s0_0_2, 0x01FEFF06, 0x091600F9, 0x0C2800F7, 0x011611FF);
	r0 = D(r0, s0_1_0, 0xFB1CFBF0, 0x01010CF7, 0x0DE90B09, 0xEF1BD6A6);
	r1 = D(r1, s0_1_0, 0x0E060CFE, 0x0706FC0B, 0x0BFA0305, 0xFE0EF216);
	r2 = D(r2, s0_1_0, 0x06080213, 0xF33323C3, 0x0A04090C, 0xFF000802);
	r3 = D(r3, s0_1_0, 0x010402FF, 0x00FFFBF6, 0xF71004EC, 0x03FF1901);
	r4 = D(r4, s0_1_0, 0xF80F17FF, 0xFD03FEFD, 0xEBF424FA, 0xFEFFFEFB);
	r5 = D(r5, s0_1_0, 0xFAF70200, 0x020A011C, 0x11CF23BE, 0x02130600);
	r6 = D(r6, s0_1_0, 0x03EB08F4, 0xFC02FB0E, 0x20CD2CFB, 0x0916050F);
	r7 = D(r7, s0_1_0, 0xFBF3FDF7, 0x03E606FC, 0x0AE7E2FB, 0x0402F203);
	r0 = D(r0, s0_1_1, 0x0E0A020A, 0x0EF60808, 0xE602041E, 0xD7D3363A);
	r1 = D(r1, s0_1_1, 0xF61804F3, 0x0FE803D6, 0x17DE01F4, 0x0CECFEED);
	r2 = D(r2, s0_1_1, 0xFBFA0000, 0xEB011300, 0x040808F2, 0x0300F700);
	r3 = D(r3, s0_1_1, 0x0EF605FC, 0x19F40110, 0x04FEFEFA, 0x1A02FAD5);
	r4 = D(r4, s0_1_1, 0xFD42FD03, 0x040F0901, 0x333221F0, 0xFAF60201);
	r5 = D(r5, s0_1_1, 0x03040D14, 0x2DB80AFA, 0xDFE8A61A, 0xE6C605E2);
	r6 = D(r6, s0_1_1, 0x11D8F507, 0x0504E1F6, 0x1E0C0EB3, 0x1E81F4FD);
	r7 = D(r7, s0_1_1, 0xFD03F7FF, 0x06EE07E9, 0x031BF0DD, 0xEE2AFDF9);
	r0 = D(r0, s0_1_2, 0x1FFFFFD6, 0x04EDF80E, 0xF5FC0A09, 0x1DF7CAF2);
	r1 = D(r1, s0_1_2, 0x05F6F701, 0x021503EB, 0x00EF02D9, 0xFEFCFA11);
	r2 = D(r2, s0_1_2, 0xF41B0E0D, 0xF71AFDF6, 0xDF03FD0C, 0xE624FD08);
	r3 = D(r3, s0_1_2, 0x05060102, 0x09EDD0F9, 0xE2EBFFCB, 0x0E0F1CF5);
	r4 = D(r4, s0_1_2, 0xF8F0FF19, 0xFD03FF01, 0xDA0404FB, 0x04FE02F3);
	r5 = D(r5, s0_1_2, 0xF2F3FA00, 0x088CD3E9, 0xEE10F003, 0xF70FEFD8);
	r6 = D(r6, s0_1_2, 0xEF140CE8, 0x050FF304, 0x16EDCC08, 0x42F9FFDD);
	r7 = D(r7, s0_1_2, 0x0303FC02, 0xF4E202DF, 0x220CFAFB, 0xED150001);
	r0 = D(r0, s0_2_0, 0xF5F3FDF3, 0x070307FF, 0x0A17FC05, 0xED3D20FE);
	r1 = D(r1, s0_2_0, 0xFF1202FA, 0x08110901, 0x08FD0103, 0x0CFCFE0D);
	r2 = D(r2, s0_2_0, 0x05F800FC, 0xF61904E5, 0x030B080B, 0x04FC0002);
	r3 = D(r3, s0_2_0, 0x000A0100, 0xFCFEF904, 0x12090AFC, 0xFCF5FCF3);
	r4 = D(r4, s0_2_0, 0x0508FFFE, 0xFD030500, 0xE62506FA, 0x02FF0001);
	r5 = D(r5, s0_2_0, 0x03020401, 0x0E000DFF, 0x0AF7E9F7, 0x0309F3F6);
	r6 = D(r6, s0_2_0, 0xFF14F9FF, 0x040B0506, 0xFAC905CB, 0x09E906FF);
	r7 = D(r7, s0_2_0, 0xFDFFFCFD, 0x0F040C0C, 0xF6E80517, 0xF90AF6F3);
	r0 = D(r0, s0_2_1, 0xF3050109, 0x021E060A, 0x0A0CFF07, 0xE7DA1D23);
	r1 = D(r1, s0_2_1, 0x02FC03FC, 0x0016FF06, 0x070AFE03, 0x010CF9F6);
	r2 = D(r2, s0_2_1, 0x04050203, 0x1D120801, 0xFD000708, 0xFE04F9FA);
	r3 = D(r3, s0_2_1, 0xFE120503, 0xEF0A03F5, 0x041710FE, 0xEC0AFDE7);
	r4 = D(r4, s0_2_1, 0x1002FB00, 0x04FDFE06, 0x1632F5FC, 0x01010201);
	r5 = D(r5, s0_2_1, 0x10070A05, 0x3CEBEC08, 0x0A0AFA02, 0x07EFFD04);
	r6 = D(r6, s0_2_1, 0xF504F9FD, 0xF7F2F1F3, 0xEC10FECD, 0x06FBC7E9);
	r7 = D(r7, s0_2_1, 0xFCF8F7FC, 0xFED20FF1, 0x1796000E, 0xFD0AFFF8);
	r0 = D(r0, s0_2_2, 0xFEF4EFFF, 0x09060111, 0xF8FE040D, 0x140DEAEB);
	r1 = D(r1, s0_2_2, 0x02F3FF00, 0xF702FDF7, 0x02F70201, 0xF80D0509);
	r2 = D(r2, s0_2_2, 0x04FA00FC, 0xFB27F9EA, 0x01020505, 0x0709FF01);
	r3 = D(r3, s0_2_2, 0xFE060203, 0xFADDEBEC, 0x00FD02F4, 0xE114010E);
	r4 = D(r4, s0_2_2, 0x0B0EF9FE, 0x0000FE01, 0x03F5FFFC, 0xFEFB0101);
	r5 = D(r5, s0_2_2, 0xF51AFF06, 0x2917FF00, 0xED20ECF7, 0x1F16FBFE);
	r6 = D(r6, s0_2_2, 0xF4EEF5F5, 0x1112FEFE, 0x16351616, 0x300014DF);
	r7 = D(r7, s0_2_2, 0xFDFBFDF8, 0x0008FFFD, 0x12F6FC0D, 0xF105FB01);
	r0 = D(r0, s1_0_0, 0x0A04FEFD, 0x02F90301, 0x00FE0C04, 0x080A0411);
	r1 = D(r1, s1_0_0, 0x0103F802, 0x19E3ECE7, 0xF502FBFF, 0x05FCFAFE);
	r2 = D(r2, s1_0_0, 0x0300F6FF, 0x2CDB0BF7, 0x01FEFFFF, 0x00FB03FF);
	r3 = D(r3, s1_0_0, 0xFF00FFF7, 0x010604F8, 0x0602F504, 0x0AE2F9FB);
	r4 = D(r4, s1_0_0, 0xFF0AEAF2, 0xFDFE0000, 0x09F3F004, 0x01FF03FF);
	r5 = D(r5, s1_0_0, 0xF90906FE, 0xFE19E126, 0x7FB0B525, 0xFA05F009);
	r6 = D(r6, s1_0_0, 0xFFFB071A, 0x04F204F1, 0xE6F3FC19, 0x1C02F0F7);
	r7 = D(r7, s1_0_0, 0xFF0003FD, 0xFE11F4FF, 0xF4010AFB, 0x05F704F0);
	r0 = D(r0, s1_0_1, 0xFEF70214, 0xFC00F5FD, 0x0300010B, 0x1F1BEB0D);
	r1 = D(r1, s1_0_1, 0x05FAEFFF, 0x02E1F80B, 0x080503FB, 0xFBF901F1);
	r2 = D(r2, s1_0_1, 0xEF050DFE, 0x5BB8AE81, 0x01FFFCFE, 0x11F00313);
	r3 = D(r3, s1_0_1, 0x0002F800, 0x0F1D06FA, 0x09FDFBEF, 0x0F05FBED);
	r4 = D(r4, s1_0_1, 0x12E2E1FC, 0xFD02FA02, 0x19F20F11, 0x02FF0001);
	r5 = D(r5, s1_0_1, 0x02FB0402, 0xF38118D8, 0x12DF1007, 0xF6F10AF8);
	r6 = D(r6, s1_0_1, 0xF10E160F, 0xF4F90401, 0x1918F2EC, 0x16EC2F04);
	r7 = D(r7, s1_0_1, 0x0403FA02, 0xF3F9FBF6, 0x050A1008, 0xF0F60DF8);
	r0 = D(r0, s1_0_2, 0x0DFFF8F1, 0xFB02FB05, 0x0907FB1D, 0x0D060406);
	r1 = D(r1, s1_0_2, 0x04FCF603, 0x08EC04EF, 0xF802FF01, 0x03F903F6);
	r2 = D(r2, s1_0_2, 0x0406FD0A, 0x20F19EE1, 0x09F6FEFC, 0x02E80FFB);
	r3 = D(r3, s1_0_2, 0x01FFFE02, 0x040308FE, 0x10F9020C, 0x050AF30D);
	r4 = D(r4, s1_0_2, 0xF9E2CBD8, 0xFDFBFFFC, 0x09F90403, 0xFEFE0805);
	r5 = D(r5, s1_0_2, 0x05F6FAFB, 0xF8F31314, 0x01FF06ED, 0xF40609F2);
	r6 = D(r6, s1_0_2, 0x001AEC1A, 0xF8030305, 0x13EAF6E6, 0x03090CF7);
	r7 = D(r7, s1_0_2, 0xFFFE0AFA, 0xF609FD1C, 0x08020411, 0xFB04F604);
	r0 = D(r0, s1_1_0, 0x0FDE14FD, 0x0D01F9FE, 0x0AF2F2FF, 0x2FDB16DF);
	r1 = D(r1, s1_1_0, 0xF5050403, 0x0E14ECF9, 0x0800F6F9, 0x0EFCF101);
	r2 = D(r2, s1_1_0, 0xF3FFFA08, 0x15DBE4FB, 0x01FD0011, 0xFEFBFAF9);
	r3 = D(r3, s1_1_0, 0x00FC0402, 0x1204FF0B, 0x0DF80100, 0x10F2F615);
	r4 = D(r4, s1_1_0, 0xFB0C0B00, 0x03FA0201, 0xF521ED0A, 0x020302FD);
	r5 = D(r5, s1_1_0, 0xFFFFF009, 0x1209FB10, 0x3E818143, 0xF905FA06);
	r6 = D(r6, s1_1_0, 0xFEF90CEA, 0x0C0FFB02, 0xFBFE1315, 0x14F0E31B);
	r7 = D(r7, s1_1_0, 0x040306FB, 0xF70B080D, 0x20FAF3F6, 0xF80CFAEE);
	r0 = D(r0, s1_1_1, 0x05EA6001, 0x0CF281EE, 0xF90C811A, 0xFEDD2508);
	r1 = D(r1, s1_1_1, 0x09FD05E8, 0xD4811021, 0xE5141A06, 0x04020BE6);
	r2 = D(r2, s1_1_1, 0xE8FD12FE, 0x2AE104BC, 0xEBF40903, 0x0FFD05F3);
	r3 = D(r3, s1_1_1, 0xFDFC27F9, 0x001518F6, 0xFFFA2321, 0xEFFDDC18);
	r4 = D(r4, s1_1_1, 0x18EEB5F4, 0x03FF28FD, 0x1C1D1C15, 0x12FEEF05);
	r5 = D(r5, s1_1_1, 0x12E2F018, 0xFFE0EAFF, 0xFA1DF708, 0x04E1111A);
	r6 = D(r6, s1_1_1, 0xFE200121, 0xE4FCDA16, 0xD40A190C, 0x26D33809);
	r7 = D(r7, s1_1_1, 0x130EFA00, 0xEC04DDF0, 0x07DAFCE7, 0x02FAE605);
	r0 = D(r0, s1_1_2, 0xF20D2AF5, 0xF90EF503, 0x0401171E, 0x0E1410E6);
	r1 = D(r1, s1_1_2, 0x01E0DEE5, 0x1CE912F0, 0x05F91C09, 0x0601010B);
	r2 = D(r2, s1_1_2, 0x2C132A04, 0x1A9FB69B, 0x280834EC, 0x14FA060A);
	r3 = D(r3, s1_1_2, 0xFEF302FB, 0xFDFF1A01, 0xF0FF0414, 0xF4CB2104);
	r4 = D(r4, s1_1_2, 0xF8FF1009, 0x0402F4FE, 0x0C16FF00, 0xF8E8FB05);
	r5 = D(r5, s1_1_2, 0xF2101AFA, 0xC3E4F53A, 0xF31FFCF6, 0x08081E0A);
	r6 = D(r6, s1_1_2, 0x1FFF1709, 0x0D0927FD, 0xD712F11A, 0xE5F5B8F1);
	r7 = D(r7, s1_1_2, 0x0DFA580C, 0x0910030D, 0xFDF012FC, 0xFD100701);
	r0 = D(r0, s1_2_0, 0x1006F8F2, 0x06FA000C, 0xFCFCFA10, 0x1E13E9A6);
	r1 = D(r1, s1_2_0, 0x0102FB00, 0x13FCFB05, 0xFA05FC02, 0x0503F40B);
	r2 = D(r2, s1_2_0, 0xFCFB0306, 0xF4F82905, 0x01FEFF05, 0x0400FA00);
	r3 = D(r3, s1_2_0, 0x0300F801, 0x0B0213FB, 0xEEF70B10, 0x12D9080D);
	r4 = D(r4, s1_2_0, 0x04FA0C01, 0x02FDFE01, 0xE1FC1000, 0x000105FE);
	r5 = D(r5, s1_2_0, 0x04FD0307, 0x0FF60900, 0x14D30D0B, 0x00FF0A09);
	r6 = D(r6, s1_2_0, 0xFCFCF4FF, 0xFB0A03F9, 0x12DF0FE8, 0x17F8F7F2);
	r7 = D(r7, s1_2_0, 0xFC0304FB, 0xF9060E0B, 0xE510F0FC, 0xFFF80400);
	r0 = D(r0, s1_2_1, 0x0C13D4F1, 0x07FFE509, 0x05FEFB15, 0x5EFE8181);
	r1 = D(r1, s1_2_1, 0x0904F6F8, 0x0D03EE1E, 0x04000907, 0x01F9F60E);
	r2 = D(r2, s1_2_1, 0xFBFDF802, 0x220C18F1, 0xFD0200FD, 0x07F80802);
	r3 = D(r3, s1_2_1, 0x03FBEDF6, 0xF1F719F4, 0x10FFEB03, 0x04FD010E);
	r4 = D(r4, s1_2_1, 0x16F91CFE, 0x000200FF, 0xFAEDF7EC, 0xFF010001);
	r5 = D(r5, s1_2_1, 0x04FB040C, 0x04FE0311, 0xFC010D12, 0xEB0420F4);
	r6 = D(r6, s1_2_1, 0x13E71312, 0xFBF30C17, 0xED27DE0F, 0x1EDE0A05);
	r7 = D(r7, s1_2_1, 0xFE00FDF9, 0xF9090E06, 0xE611E7F6, 0x04EA04FD);
	r0 = D(r0, s1_2_2, 0x13F0F2E7, 0xFC06F80C, 0xFD0CF712, 0x22CFC8F2);
	r1 = D(r1, s1_2_2, 0xFC0100FB, 0x17F8F203, 0xFE040505, 0x020308FD);
	r2 = D(r2, s1_2_2, 0x05FB1B06, 0x15F9F7EF, 0x05FD00F6, 0x0EED0B0E);
	r3 = D(r3, s1_2_2, 0x0504FFFF, 0xED050600, 0x020CED05, 0x0008DAF1);
	r4 = D(r4, s1_2_2, 0x04030109, 0xFF0504FF, 0x08F7FDF9, 0xFD02F9FC);
	r5 = D(r5, s1_2_2, 0x06070400, 0xF9FDFB04, 0x0B031107, 0x04FE13FF);
	r6 = D(r6, s1_2_2, 0x09020B0F, 0xFB000F06, 0xF42AF911, 0x09F107E1);
	r7 = D(r7, s1_2_2, 0xFF0604FE, 0xFFFE0CFE, 0x08FCFDF9, 0x0402FE05);
	s0_0_0 = G[4][xy.y+0][xy.x+0]; s0_0_1 = G[4][xy.y+0][xy.x+1];
	s0_0_2 = G[4][xy.y+0][xy.x+2]; s0_1_0 = G[4][xy.y+1][xy.x+0];
	s0_1_1 = G[4][xy.y+1][xy.x+1]; s0_1_2 = G[4][xy.y+1][xy.x+2];
	s0_2_0 = G[4][xy.y+2][xy.x+0]; s0_2_1 = G[4][xy.y+2][xy.x+1];
	s0_2_2 = G[4][xy.y+2][xy.x+2]; s1_0_0 = G[5][xy.y+0][xy.x+0];
	s1_0_1 = G[5][xy.y+0][xy.x+1]; s1_0_2 = G[5][xy.y+0][xy.x+2];
	s1_1_0 = G[5][xy.y+1][xy.x+0]; s1_1_1 = G[5][xy.y+1][xy.x+1];
	s1_1_2 = G[5][xy.y+1][xy.x+2]; s1_2_0 = G[5][xy.y+2][xy.x+0];
	s1_2_1 = G[5][xy.y+2][xy.x+1]; s1_2_2 = G[5][xy.y+2][xy.x+2];
	r0 = D(r0, s0_0_0, 0xF21BF9FE, 0xEDFBF8FB, 0x02E40309, 0x1414FC81);
	r1 = D(r1, s0_0_0, 0xF3050B04, 0x0AF2F910, 0x04F51604, 0x1CF907F7);
	r2 = D(r2, s0_0_0, 0x0005FBFE, 0x160304E9, 0xF8040904, 0x02E90E08);
	r3 = D(r3, s0_0_0, 0xFD02FEFD, 0x1610F110, 0xEC061314, 0x020606F0);
	r4 = D(r4, s0_0_0, 0xF2EFE107, 0x03070401, 0xE1FB0FF5, 0x00FCFE00);
	r5 = D(r5, s0_0_0, 0x06FB08F9, 0xEBDF0001, 0xD46F0B81, 0xFCEE0CF9);
	r6 = D(r6, s0_0_0, 0x1400FDFE, 0xFD02F60A, 0xEE03020C, 0x0C051FF3);
	r7 = D(r7, s0_0_0, 0x0607F7FE, 0xEF08F204, 0x0AD7ED1A, 0xF4FD0200);
	r0 = D(r0, s0_0_1, 0xE7F8E206, 0x398110C9, 0x2581F40D, 0x284A1181);
	r1 = D(r1, s0_0_1, 0xFE0406FD, 0xEBF003EF, 0xE91D0F18, 0xFC0518F8);
	r2 = D(r2, s0_0_1, 0x12FAEEFF, 0x8181C281, 0xF6EFFF01, 0x07E7210B);
	r3 = D(r3, s0_0_1, 0xFC03FC02, 0x060AC001, 0xD703FC15, 0x000223FB);
	r4 = D(r4, s0_0_1, 0x68813F9B, 0xF839060F, 0x16051A02, 0xFBFFFF00);
	r5 = D(r5, s0_0_1, 0x240BFAEA, 0x2E0AD704, 0x1006D605, 0xF2E50F07);
	r6 = D(r6, s0_0_1, 0xDC2A07FC, 0x0AFDE7EE, 0x1A02FE15, 0x0B2DF723);
	r7 = D(r7, s0_0_1, 0x0B04FD01, 0xF6F9F4F7, 0xFD06DE06, 0xDB19050F);
	r0 = D(r0, s0_0_2, 0x1207FA05, 0x1DF0F7FB, 0xFEEEFC08, 0x1CFBE6A1);
	r1 = D(r1, s0_0_2, 0xFCFB07FC, 0x11F3FA06, 0xFDFA0408, 0xFFF903FF);
	r2 = D(r2, s0_0_2, 0x02030800, 0x1549E981, 0x03E3FEFA, 0xFAD33C12);
	r3 = D(r3, s0_0_2, 0xFDFDFFFC, 0x0420EEFA, 0x0E10FDE7, 0xE7DF1B08);
	r4 = D(r4, s0_0_2, 0xF1EA11F5, 0xF70A0503, 0x0DEF07FB, 0x06010504);
	r5 = D(r5, s0_0_2, 0xF50102FE, 0x0EB8F7F1, 0x01FEF306, 0x02100CF8);
	r6 = D(r6, s0_0_2, 0x280BFEF6, 0x0100FA0B, 0xF5161AFA, 0xCC1D0318);
	r7 = D(r7, s0_0_2, 0x020005F8, 0x11050209, 0x000BFC08, 0xF401030A);
	r0 = D(r0, s0_1_0, 0x0D00FDFE, 0xFA00EC00, 0x0DF00000, 0xE608F981);
	r1 = D(r1, s0_1_0, 0x01F01D01, 0xE10510EE, 0x0B0C1500, 0xFEFE19FF);
	r2 = D(r2, s0_1_0, 0xF4FD1803, 0x0007020D, 0x00FBFCFF, 0x01F60F05);
	r3 = D(r3, s0_1_0, 0x06F30BFF, 0x0A13C303, 0x0A06FBFE, 0x9B1ECAEA);
	r4 = D(r4, s0_1_0, 0xF604FDFD, 0xF702FD03, 0xE6E4F30C, 0x03FFFAFF);
	r5 = D(r5, s0_1_0, 0xEF06F4FE, 0xFC0C11F6, 0x214881D6, 0xF202FDFA);
	r6 = D(r6, s0_1_0, 0x12FFEC0F, 0xD4120905, 0xD026F60A, 0x25DE43F9);
	r7 = D(r7, s0_1_0, 0x020AF600, 0x0606F806, 0x3781F7E1, 0xEAFB06FF);
	r0 = D(r0, s0_1_1, 0x273FB0EF, 0x0405B4E9, 0x06D1CE0E, 0x710B8181);
	r1 = D(r1, s0_1_1, 0x05CB3D08, 0xFC07B500, 0xF215B8F9, 0xEC12CA00);
	r2 = D(r2, s0_1_1, 0xF4EBED16, 0x21F781EA, 0xF901D710, 0x06002D00);
	r3 = D(r3, s0_1_1, 0xD4810F03, 0xEF17AF02, 0xC30A11F4, 0xD407910D);
	r4 = D(r4, s0_1_1, 0xE8940853, 0x0008E4FB, 0x03F9FF10, 0x06FCF6FA);
	r5 = D(r5, s0_1_1, 0x0620E6F8, 0x1731D6FA, 0xEF02FC28, 0x072E9DF3);
	r6 = D(r6, s0_1_1, 0xEEEED2FA, 0x1EDFE426, 0xCDE8DF07, 0xF53C81E4);
	r7 = D(r7, s0_1_1, 0x031DF4F3, 0xF31A01FC, 0x40F6D70D, 0xDC11E8F9);
	r0 = D(r0, s0_1_2, 0xFDFAFFF9, 0x05F805FC, 0xEBF0F802, 0x0F19F788);
	r1 = D(r1, s0_1_2, 0xFAF91CFB, 0x090602FF, 0x05F20707, 0xFFECEE07);
	r2 = D(r2, s0_1_2, 0x17FC0DF8, 0x34EBC210, 0xFEF021FA, 0xE1AB4A36);
	r3 = D(r3, s0_1_2, 0xFEF4FF00, 0x0E0AD8EF, 0xF60AEF0B, 0xF4E5D702);
	r4 = D(r4, s0_1_2, 0xEB00FC03, 0xFE04FA00, 0x02F5F503, 0xFA00FA06);
	r5 = D(r5, s0_1_2, 0x01F409FE, 0xDFD6E6FA, 0xFE0BF40A, 0x1810E100);
	r6 = D(r6, s0_1_2, 0x150F0CFF, 0xFBFADF03, 0x05FBCFEA, 0xEE21B5DF);
	r7 = D(r7, s0_1_2, 0x1800FBF1, 0x0200DCFB, 0xEFF5EF0C, 0xFF05F705);
	r0 = D(r0, s0_2_0, 0xFE06FF07, 0x0EFE00FC, 0x02FA0602, 0xE32B07E2);
	r1 = D(r1, s0_2_0, 0xFFF90F02, 0x00FA08FC, 0x07011800, 0xFCF11205);
	r2 = D(r2, s0_2_0, 0xFCFB0204, 0xF401FE11, 0xFEF90403, 0x01F90F08);
	r3 = D(r3, s0_2_0, 0xFF010400, 0x091AE7ED, 0xFFF8F801, 0xFBF7C7FD);
	r4 = D(r4, s0_2_0, 0xFA05EBF9, 0x01FCFE01, 0xF7FBD20F, 0x02FFFAFF);
	r5 = D(r5, s0_2_0, 0x0707FCFA, 0x05FE03F8, 0x060402ED, 0x07FCF60E);
	r6 = D(r6, s0_2_0, 0xFA0603FB, 0xFC061DF9, 0xFA0BE800, 0xFA0405FA);
	r7 = D(r7, s0_2_0, 0xFF01F800, 0x04080900, 0x03DFDDF5, 0xFF00EFFD);
	r0 = D(r0, s0_2_1, 0xFCF20FED, 0x02F906FF, 0xFDFCE402, 0xEC0DE6AA);
	r1 = D(r1, s0_2_1, 0x05F61FFC, 0x0A070EFE, 0xFD070AFB, 0xF9F6F005);
	r2 = D(r2, s0_2_1, 0xFA0E0CF9, 0xFD0AF2FF, 0xFCFB1605, 0x0DF22901);
	r3 = D(r3, s0_2_1, 0x05FBFDFD, 0x1011C5F3, 0x0202F8FE, 0x1912DDED);
	r4 = D(r4, s0_2_1, 0x0806EBF8, 0x0103FBFF, 0xFE0CE001, 0xFD00FAFF);
	r5 = D(r5, s0_2_1, 0x051A08FC, 0x102FDFF2, 0xE318DAFA, 0x100AF804);
	r6 = D(r6, s0_2_1, 0xFFF4EA01, 0xFEFE07FE, 0xD0159800, 0xEF00EF05);
	r7 = D(r7, s0_2_1, 0xFC04FBFE, 0x0415FBF7, 0x06072EFD, 0x0809E9FE);
	r0 = D(r0, s0_2_2, 0xE4FA0B07, 0xFBFF08FB, 0xFAFA0906, 0xF622CAE0);
	r1 = D(r1, s0_2_2, 0xF9FB17FE, 0xF3040E02, 0x00FE0E06, 0x08FC0D02);
	r2 = D(r2, s0_2_2, 0x05FFFA03, 0x02FBEC04, 0x01FE0704, 0x01F91600);
	r3 = D(r3, s0_2_2, 0x02FC0704, 0x061CE8DE, 0xF41018FC, 0x080E07F5);
	r4 = D(r4, s0_2_2, 0x000AE706, 0x00FFFE00, 0x0AF7F3FC, 0x02FFFD01);
	r5 = D(r5, s0_2_2, 0xF8F00D00, 0xE9E7E00F, 0xFC19F0FA, 0xF802F206);
	r6 = D(r6, s0_2_2, 0x0212F8FA, 0x0312E607, 0xF821D6EE, 0xE62EE9FC);
	r7 = D(r7, s0_2_2, 0xFB04F9FE, 0x0406FBEF, 0xFBF30BFD, 0x08FEFE01);
	r0 = D(r0, s1_0_0, 0x08EC0E0B, 0x150AF7FA, 0xF102F301, 0x10D41101);
	r1 = D(r1, s1_0_0, 0xFB06FD01, 0xEE0015FE, 0xF90E0208, 0xFB05F6F5);
	r2 = D(r2, s1_0_0, 0xFFF8FDFE, 0x11EA0109, 0xFCFE0005, 0xF6040105);
	r3 = D(r3, s1_0_0, 0x0104FC01, 0xE1F6FA02, 0xBE1917EF, 0xF00E04FB);
	r4 = D(r4, s1_0_0, 0x01F6F504, 0xFEFD03FF, 0x05FDF508, 0xFEFE0003);
	r5 = D(r5, s1_0_0, 0x08FDFBFC, 0xFEF810F5, 0x162DF122, 0x080A24F9);
	r6 = D(r6, s1_0_0, 0xF8F80AFA, 0x0E06F3FC, 0xBC0FFCE5, 0xECF1F4FF);
	r7 = D(r7, s1_0_0, 0x02FD0100, 0x0AFA1002, 0xF302FCFA, 0xFDF1FF01);
	r0 = D(r0, s1_0_1, 0xF4F1041E, 0xF8F5F2F9, 0xE4F6F5C7, 0x00EDFE02);
	r1 = D(r1, s1_0_1, 0xF410FFFD, 0x0E090E12, 0xFF070300, 0x190DF1EA);
	r2 = D(r2, s1_0_1, 0x09FCF0FC, 0x4E0EF21D, 0x130306F8, 0x01070E05);
	r3 = D(r3, s1_0_1, 0xFAFE01F7, 0xF4EEF4FF, 0xEBFB0AFB, 0x1B0B0FEC);
	r4 = D(r4, s1_0_1, 0xF72903FA, 0xFA0601FC, 0x070A0205, 0x01FC0407);
	r5 = D(r5, s1_0_1, 0x080AFD09, 0xCBF1F417, 0x0505E50F, 0x2006F70B);
	r6 = D(r6, s1_0_1, 0x03FAFB19, 0x120CF00B, 0xC60613E8, 0xF6F4FF35);
	r7 = D(r7, s1_0_1, 0xFA0005F8, 0x16FC0505, 0xFDEE0318, 0x080FFCFB);
	r0 = D(r0, s1_0_2, 0xFFF50517, 0xF9080010, 0x05FA0406, 0xFAE70213);
	r1 = D(r1, s1_0_2, 0xFF06F905, 0xF90BF908, 0x03130208, 0x11F5F3EF);
	r2 = D(r2, s1_0_2, 0xE903FEF6, 0x0224EAEB, 0xFFF3FBF1, 0x0D0DF816);
	r3 = D(r3, s1_0_2, 0x02020201, 0x02F2F0FB, 0xEF050F11, 0x11EB01F0);
	r4 = D(r4, s1_0_2, 0xFD230A1A, 0xFD05FFFD, 0x0206FA02, 0x05010301);
	r5 = D(r5, s1_0_2, 0x02FF02FC, 0xF83306E3, 0x0712EF19, 0x0413040A);
	r6 = D(r6, s1_0_2, 0xCA09E905, 0xF003F5F8, 0x931D110E, 0xF9E1FF20);
	r7 = D(r7, s1_0_2, 0x08FFFD08, 0xEDEEFF0E, 0xF310F905, 0x0501F607);
	r0 = D(r0, s1_1_0, 0x02041B15, 0x051EE3EC, 0xE2FF11D8, 0x1CF0161C);
	r1 = D(r1, s1_1_0, 0x04EF0706, 0x09FE81DE, 0xFD0CFE06, 0x040FDFE6);
	r2 = D(r2, s1_1_0, 0x04F5FE0A, 0xFC16AD03, 0xFBF503FD, 0x0204FB08);
	r3 = D(r3, s1_1_0, 0x0100FBFA, 0xF8E420EB, 0x9B13E3F6, 0x2BC4B4DC);
	r4 = D(r4, s1_1_0, 0xEB02DCF1, 0xFC02FAFE, 0xE0EBFCF1, 0xFF01FFFE);
	r5 = D(r5, s1_1_0, 0xFB0E0B00, 0xF4F30E1A, 0xFD700F40, 0xED0207E0);
	r6 = D(r6, s1_1_0, 0xD2181D0B, 0x15EDECEA, 0xC9E4D3DF, 0x08170CEF);
	r7 = D(r7, s1_1_0, 0x07FCFFFC, 0xEEEC1EFB, 0x09101B20, 0x0BF7EEFA);
	r0 = D(r0, s1_1_1, 0xEBE60C18, 0x1D0F0B00, 0x03F2F5EF, 0x011CEC17);
	r1 = D(r1, s1_1_1, 0x101CAF04, 0xEEFB002D, 0x0DC9FE0C, 0x03FB01E7);
	r2 = D(r2, s1_1_1, 0x0212270B, 0x2AE934E5, 0xEB0F0705, 0xEFFA0B06);
	r3 = D(r3, s1_1_1, 0x070D00F7, 0x04D4E714, 0xA6FD0EF3, 0xCDFBE803);
	r4 = D(r4, s1_1_1, 0x290BC019, 0xFAFC080F, 0x28D2FA0F, 0x0AFFF4FD);
	r5 = D(r5, s1_1_1, 0xF3F8E602, 0xC8D6F2EE, 0x08F506EC, 0xF20003D0);
	r6 = D(r6, s1_1_1, 0xEBDB34E3, 0xEA20120D, 0x1AB600EC, 0xE381D035);
	r7 = D(r7, s1_1_1, 0x10F9EE0C, 0xF11F060B, 0x1BF6F51A, 0xF20900E9);
	r0 = D(r0, s1_1_2, 0xF804FF07, 0xEF08FD03, 0x0C0900F2, 0x13F216F9);
	r1 = D(r1, s1_1_2, 0x080FFD0F, 0xF61800FF, 0x07ED020F, 0x17E2EF0B);
	r2 = D(r2, s1_1_2, 0xFF0017EB, 0xEA2B00DA, 0x070307EB, 0xD21F2DE2);
	r3 = D(r3, s1_1_2, 0xFA0B0102, 0x1100F505, 0xF51109F1, 0x2901DBF9);
	r4 = D(r4, s1_1_2, 0xF51D05F0, 0xFFFEFFFC, 0x11EAF501, 0x0801FE0A);
	r5 = D(r5, s1_1_2, 0x07F102FB, 0x36D3010F, 0xFBE608E2, 0xE30EFDF3);
	r6 = D(r6, s1_1_2, 0xEAED01EF, 0xF9F30E1B, 0xD5CAE51C, 0xF93B0D25);
	r7 = D(r7, s1_1_2, 0x03F60207, 0xE3070E02, 0x12070B1C, 0x01ECF8F3);
	r0 = D(r0, s1_2_0, 0xF90403F8, 0x010BE3F6, 0xF907FEFB, 0xC5EFEFE3);
	r1 = D(r1, s1_2_0, 0xFAFFF30A, 0xCF060E00, 0xFA070A00, 0x0C05F60F);
	r2 = D(r2, s1_2_0, 0x02040603, 0x07F51DE2, 0xFCFAFC00, 0xF401FD05);
	r3 = D(r3, s1_2_0, 0x00FF0AFD, 0x04EA1CE9, 0xDA0612FA, 0x22F42A1B);
	r4 = D(r4, s1_2_0, 0x0306F1F1, 0x02000403, 0xF1DCDDED, 0xFE000103);
	r5 = D(r5, s1_2_0, 0xFBFE0600, 0xBEFD1803, 0xFA2614FF, 0xF7020BEC);
	r6 = D(r6, s1_2_0, 0x00041BFE, 0x12F7DA05, 0xCAF32011, 0x16F716FC);
	r7 = D(r7, s1_2_0, 0x020201FC, 0xDFFF20FA, 0x0505DAFC, 0x08FB13FA);
	r0 = D(r0, s1_2_1, 0xF8EBD1DC, 0x020EF506, 0x08FFFD04, 0xF504E102);
	r1 = D(r1, s1_2_1, 0x0602F505, 0xFF00FFEB, 0xF7F300FE, 0x19F9F90C);
	r2 = D(r2, s1_2_1, 0xFB01FC05, 0xFAE10306, 0xFC130917, 0xF60D0211);
	r3 = D(r3, s1_2_1, 0xFD080A0E, 0xFBF4E910, 0xFD19F412, 0xFD14F21B);
	r4 = D(r4, s1_2_1, 0x01021129, 0x040200FC, 0x1FFBFDF4, 0xFC04F8FF);
	r5 = D(r5, s1_2_1, 0xF7F4F4E6, 0xD9CAFDDE, 0x110C09E9, 0xE0FAFBE6);
	r6 = D(r6, s1_2_1, 0x0E04ED23, 0xFE1B0BFF, 0xD51AE9FC, 0xF6D93DED);
	r7 = D(r7, s1_2_1, 0x0703F0FE, 0xE4F61001, 0xFCE325DA, 0x0E07FA04);
	r0 = D(r0, s1_2_2, 0x12E90D00, 0x0800F6FC, 0xEFFEF505, 0x3DFB02EC);
	r1 = D(r1, s1_2_2, 0x020AF80A, 0x06000AF9, 0xFA00FA02, 0xF8F301FB);
	r2 = D(r2, s1_2_2, 0x07020002, 0x35EEFEFA, 0x09FBF8FF, 0x03ED0422);
	r3 = D(r3, s1_2_2, 0xFF06FEFD, 0xFDF702EA, 0xE7FE15F4, 0xDF0CF8EE);
	r4 = D(r4, s1_2_2, 0x020DEDE5, 0x02FC0101, 0x01F4F9F3, 0x00FFFE06);
	r5 = D(r5, s1_2_2, 0x05F9FF03, 0x0ED1F3FE, 0xFFF9FBD4, 0x15F808F1);
	r6 = D(r6, s1_2_2, 0xE2130BF3, 0xE90CFCF4, 0xE8E5E4C5, 0xC607FCDA);
	r7 = D(r7, s1_2_2, 0x02FCFAF9, 0x03F113FB, 0xFDF20CFF, 0x03FAF60E);
	s0_0_0 = G[6][xy.y+0][xy.x+0]; s0_0_1 = G[6][xy.y+0][xy.x+1];
	s0_0_2 = G[6][xy.y+0][xy.x+2]; s0_1_0 = G[6][xy.y+1][xy.x+0];
	s0_1_1 = G[6][xy.y+1][xy.x+1]; s0_1_2 = G[6][xy.y+1][xy.x+2];
	s0_2_0 = G[6][xy.y+2][xy.x+0]; s0_2_1 = G[6][xy.y+2][xy.x+1];
	s0_2_2 = G[6][xy.y+2][xy.x+2]; s1_0_0 = G[7][xy.y+0][xy.x+0];
	s1_0_1 = G[7][xy.y+0][xy.x+1]; s1_0_2 = G[7][xy.y+0][xy.x+2];
	s1_1_0 = G[7][xy.y+1][xy.x+0]; s1_1_1 = G[7][xy.y+1][xy.x+1];
	s1_1_2 = G[7][xy.y+1][xy.x+2]; s1_2_0 = G[7][xy.y+2][xy.x+0];
	s1_2_1 = G[7][xy.y+2][xy.x+1]; s1_2_2 = G[7][xy.y+2][xy.x+2];
	r0 = D(r0, s0_0_0, 0xFC1DF407, 0x13FBFCFF, 0xFE0C0108, 0xE824090C);
	r1 = D(r1, s0_0_0, 0xF9FF0304, 0xFF12F204, 0x00EFFBF8, 0x0408ED08);
	r2 = D(r2, s0_0_0, 0xF9FBFF08, 0xF60AEAFC, 0x0A0AFD01, 0x04FF0601);
	r3 = D(r3, s0_0_0, 0x03FB0302, 0x1C0DFBFD, 0xF8E5FA0E, 0x1621E81B);
	r4 = D(r4, s0_0_0, 0x250D00EF, 0x0304FF02, 0x05061AFC, 0x01FE01FC);
	r5 = D(r5, s0_0_0, 0x0801FA01, 0xF924ED04, 0xEA1845E9, 0xC301F8FB);
	r6 = D(r6, s0_0_0, 0xEBF9FA00, 0xEEFE020F, 0x15F50A1A, 0xEC16F6DC);
	r7 = D(r7, s0_0_0, 0x000200FD, 0xFEF712F9, 0xFF19FF0E, 0xF707FFFD);
	r0 = D(r0, s0_0_1, 0xE517F5F5, 0x22F516FC, 0x0BFEDF01, 0xC41FE9FA);
	r1 = D(r1, s0_0_1, 0x0D15F600, 0xF8F2EE0E, 0xF3FC0B04, 0xF30712FE);
	r2 = D(r2, s0_0_1, 0x17F707FF, 0x12DA1CF4, 0x0EF90701, 0xEDEFF6FD);
	r3 = D(r3, s0_0_1, 0x0500FC01, 0xDB14F9F4, 0xDA061406, 0xE61D0512);
	r4 = D(r4, s0_0_1, 0x0DC03405, 0x06FD0502, 0x0E1BF0F8, 0xF1FDFB05);
	r5 = D(r5, s0_0_1, 0x06E01408, 0x0EF0021A, 0xF2F8D3E2, 0xF2F52107);
	r6 = D(r6, s0_0_1, 0xD4FE180A, 0x0BF60301, 0x0825F716, 0xF83501EF);
	r7 = D(r7, s0_0_1, 0xF90800FB, 0x0C040AFB, 0xF9FAFE03, 0xF615EC18);
	r0 = D(r0, s0_0_2, 0x0119EAF0, 0x020304FE, 0xF903F4FB, 0xF01AF9FE);
	r1 = D(r1, s0_0_2, 0x09FDF304, 0xFB0FFF00, 0x04F305FE, 0xF2FD00FA);
	r2 = D(r2, s0_0_2, 0xFDF10EFE, 0x14D63416, 0x08EE06FF, 0x09F613F9);
	r3 = D(r3, s0_0_2, 0xFFFF01FE, 0xFB00F2FE, 0xFE0CEF03, 0xF420E201);
	r4 = D(r4, s0_0_2, 0x0D1606F2, 0xFAFB0102, 0x010BF8EA, 0x0408FFFD);
	r5 = D(r5, s0_0_2, 0xFB0B05F2, 0x07011419, 0xF5FAE7E6, 0xEC0819F3);
	r6 = D(r6, s0_0_2, 0x06F203FD, 0xFB1601EF, 0xF49B081B, 0xFD1EC3D5);
	r7 = D(r7, s0_0_2, 0x0503F902, 0xF80000FA, 0xF825E2F5, 0xF6FEFB04);
	r0 = D(r0, s0_1_0, 0xFD00EB14, 0x140DFFFB, 0x0603F9FB, 0xAA33E203);
	r1 = D(r1, s0_1_0, 0x0C0CFEFA, 0xEF012003, 0xE0FA0801, 0xF0F017EF);
	r2 = D(r2, s0_1_0, 0x0D110E07, 0x045FFAF2, 0x070D0203, 0x03EA03EC);
	r3 = D(r3, s0_1_0, 0xF7FF0004, 0xE7130F02, 0xECFA15F5, 0xFEF833F4);
	r4 = D(r4, s0_1_0, 0x0BFC02FE, 0x020B05FD, 0xE421E2E3, 0xFDFF00FE);
	r5 = D(r5, s0_1_0, 0xFCEFFFFE, 0x1ADF02CD, 0xECFAB3F2, 0x1FF40415);
	r6 = D(r6, s0_1_0, 0xF8040902, 0x050B06FB, 0xDC020AED, 0xE50E1BC7);
	r7 = D(r7, s0_1_0, 0xFDFC09FD, 0xF2F20D07, 0x0910FEFB, 0x0F0F100A);
	r0 = D(r0, s0_1_1, 0x0EFB1BFC, 0x19F0F5F6, 0x2021D801, 0x21B3F717);
	r1 = D(r1, s0_1_1, 0x0DFD1CF6, 0x13E90D0F, 0xE30CFCF0, 0xFF15E4EF);
	r2 = D(r2, s0_1_1, 0x21DAD9F8, 0xF281A925, 0x1AEFEC09, 0xF4E612EB);
	r3 = D(r3, s0_1_1, 0xF8F6FE08, 0xBF012EE5, 0xDDD7F907, 0xE7131BDF);
	r4 = D(r4, s0_1_1, 0x1E03E6FD, 0x06F802FF, 0x0521ECF7, 0xFA0F0BF6);
	r5 = D(r5, s0_1_1, 0xE8F20108, 0xCF1401E8, 0xF3FCFA23, 0x1704DF15);
	r6 = D(r6, s0_1_1, 0xFD01E203, 0x1508EFEC, 0x250220E4, 0x2AE502F7);
	r7 = D(r7, s0_1_1, 0x080906FB, 0xE8FA160E, 0x1613F3FA, 0xF910FBF5);
	r0 = D(r0, s0_1_2, 0x0007F6F6, 0xFBF90509, 0x0206F6EE, 0x0ED0E4FA);
	r1 = D(r1, s0_1_2, 0x0EF00905, 0x0511DC02, 0x00F6090C, 0x0CF5F4F5);
	r2 = D(r2, s0_1_2, 0x040305FC, 0xF7E6E135, 0x13E31617, 0x0701F3F6);
	r3 = D(r3, s0_1_2, 0x02FD0302, 0xFBE4E610, 0xEA01EB18, 0x32E20EE5);
	r4 = D(r4, s0_1_2, 0xFF18F3E6, 0xFE02FEFD, 0xF3FF0A03, 0x020304FC);
	r5 = D(r5, s0_1_2, 0x0502FCFB, 0x17E1E3F7, 0x08210BED, 0xEC18E5EF);
	r6 = D(r6, s0_1_2, 0xF5161DEB, 0xFAF8DFB0, 0xE3DF0635, 0xFFF7DBB7);
	r7 = D(r7, s0_1_2, 0x030BFEF8, 0xFE1209F5, 0x080104DE, 0xF605FB0E);
	r0 = D(r0, s0_2_0, 0x19EC00FF, 0x0105E8F9, 0xFB09F903, 0x2DFAE9DE);
	r1 = D(r1, s0_2_0, 0x01F601FF, 0x0CF5FA0F, 0x0AFB1306, 0x0BFFFBFB);
	r2 = D(r2, s0_2_0, 0xFBF9050A, 0xE91F0AFE, 0x0603FFF9, 0x0907F602);
	r3 = D(r3, s0_2_0, 0x0302FE00, 0xEC18EF0F, 0x04EBE60E, 0x26E3EE39);
	r4 = D(r4, s0_2_0, 0xFE09F40B, 0xFC01FB03, 0xE9F4DF0F, 0xFEFEFDFE);
	r5 = D(r5, s0_2_0, 0xF4FCEB04, 0xEFD31AFF, 0xDEE7DBFF, 0xF9030708);
	r6 = D(r6, s0_2_0, 0xEF0A08F6, 0x0BFA130B, 0x25DED544, 0x14F709D6);
	r7 = D(r7, s0_2_0, 0xFAFDFBFF, 0xFB07180F, 0xFFDA13F3, 0xF4FEF405);
	r0 = D(r0, s0_2_1, 0x0DED1E00, 0x03FC0504, 0x0B0B0A01, 0x22DF240B);
	r1 = D(r1, s0_2_1, 0x07FDEF01, 0xF803FCF8, 0x0702FCEC, 0x0C05F809);
	r2 = D(r2, s0_2_1, 0xF70DFDFB, 0xF7041AF7, 0x02FBF5FD, 0x03F6F400);
	r3 = D(r3, s0_2_1, 0x00FBE903, 0xEAFF0408, 0xEFE90C12, 0x10B0C915);
	r4 = D(r4, s0_2_1, 0x0408EAFF, 0x00000305, 0x13FFFF03, 0xFE010502);
	r5 = D(r5, s0_2_1, 0x0C112EFD, 0x042A15F0, 0x02111CF6, 0xF6072EFA);
	r6 = D(r6, s0_2_1, 0x07FBE5ED, 0xF30CDA0B, 0xF91DC017, 0xF921D7ED);
	r7 = D(r7, s0_2_1, 0xFDFE0C06, 0xFDFCF9FC, 0xFF1F30F3, 0xFF1214FE);
	r0 = D(r0, s0_2_2, 0x0205F2FB, 0x05080C00, 0x02020504, 0x03F6F011);
	r1 = D(r1, s0_2_2, 0x03FFF9FF, 0xF5FCF2F4, 0x03FFFCFB, 0x06FE0407);
	r2 = D(r2, s0_2_2, 0x0104FD01, 0x0801FC02, 0xFEFAFA12, 0x0502FEFF);
	r3 = D(r3, s0_2_2, 0x01FEFEF8, 0x02EC2107, 0xF3FCE9FF, 0xFDF10C08);
	r4 = D(r4, s0_2_2, 0x01FAFCFE, 0xFDFCFC00, 0x03F9F9FE, 0xFEFFFF06);
	r5 = D(r5, s0_2_2, 0x01EFF70D, 0x00E6F81B, 0xED0FE6C3, 0x0A0FF9F8);
	r6 = D(r6, s0_2_2, 0xF60EF8F4, 0xFE0701CE, 0xD630ECE7, 0xFC412381);
	r7 = D(r7, s0_2_2, 0x04FF02FE, 0xFD0D00FC, 0xF3E90510, 0xFDF5FFF6);
	r0 = D(r0, s1_0_0, 0xFB0CEFFB, 0x0AF20DF8, 0xF9140EF5, 0x000D01F7);
	r1 = D(r1, s1_0_0, 0x03FC07F6, 0xFBD2070E, 0x01EFF103, 0x00F70A04);
	r2 = D(r2, s1_0_0, 0x00F504FC, 0x1C05FDDF, 0xF20401F6, 0xF807F806);
	r3 = D(r3, s1_0_0, 0xFEFDFDFE, 0x02FFF6FB, 0xFCD9ED0A, 0x06F10F02);
	r4 = D(r4, s1_0_0, 0x0BF51804, 0xFDF30300, 0x01E81605, 0x01FE0005);
	r5 = D(r5, s1_0_0, 0x0AFD00F7, 0x1FDD2B23, 0xFFB5CFBB, 0x0702F717);
	r6 = D(r6, s1_0_0, 0xF616F2FE, 0xF7110DFD, 0x01F0D8D4, 0xF5EFD81A);
	r7 = D(r7, s1_0_0, 0x0003FC06, 0x02F9FC0B, 0x0102F000, 0xFFE9F9FD);
	r0 = D(r0, s1_0_1, 0x021202F5, 0xECF60FF3, 0xEB02150C, 0xF6271CFF);
	r1 = D(r1, s1_0_1, 0xF9020601, 0x0BF806FC, 0xF3F5F4FB, 0x1100FDF8);
	r2 = D(r2, s1_0_1, 0xF90307EB, 0x1D8108E4, 0x1FFAFDFB, 0xF7DCEF14);
	r3 = D(r3, s1_0_1, 0xFDFD0603, 0x1FEE120E, 0xF718E2EC, 0x2AFEEFF1);
	r4 = D(r4, s1_0_1, 0xD5E5110F, 0xF30107FF, 0xFC05FEF8, 0xFFFEFDFC);
	r5 = D(r5, s1_0_1, 0xEFFFF8FB, 0xC515FFEE, 0xE41E01EB, 0x2C0EF7FA);
	r6 = D(r6, s1_0_1, 0x0C030802, 0x010E07FD, 0xBE130608, 0x2108C8FB);
	r7 = D(r7, s1_0_1, 0x040AFF07, 0xED05F6EC, 0xE511170E, 0xEAEAFBF9);
	r0 = D(r0, s1_0_2, 0x0BF609F4, 0xF701FDFB, 0x02F40E06, 0x0A01FC0E);
	r1 = D(r1, s1_0_2, 0xFA000600, 0x16FDFEF7, 0xFBFDF7FE, 0x110CFC05);
	r2 = D(r2, s1_0_2, 0x0403FA07, 0x10E2F4DD, 0x0900F2FA, 0x08FAFCED);
	r3 = D(r3, s1_0_2, 0xFB020100, 0xEB0705F6, 0xF4FF25F5, 0x1B001AEC);
	r4 = D(r4, s1_0_2, 0x17EEEF0B, 0xFF00FE01, 0x0DFCF902, 0xFB020405);
	r5 = D(r5, s1_0_2, 0x03FCF2FA, 0xF3F8EBE5, 0x17FC0A09, 0x0AF210FE);
	r6 = D(r6, s1_0_2, 0xF90BFA00, 0x02F8141F, 0xF7F7E9F8, 0xEDFB3113);
	r7 = D(r7, s1_0_2, 0x09040101, 0xFA070406, 0x10FF110E, 0x1D00FFF4);
	r0 = D(r0, s1_1_0, 0xFB1BF203, 0x0CFB0BFC, 0xFEF509EE, 0xFAF50B23);
	r1 = D(r1, s1_1_0, 0xFE040308, 0x1FFBE719, 0xF60AF50C, 0x03100FFB);
	r2 = D(r2, s1_1_0, 0x0306FC00, 0x030805FC, 0xFDF90004, 0xFCFFFE07);
	r3 = D(r3, s1_1_0, 0xF70309FD, 0xFE1C0002, 0xFBE9FFF0, 0x031CD31A);
	r4 = D(r4, s1_1_0, 0x05DB13F3, 0xFF05FD04, 0xD9FEF034, 0x02FFFF01);
	r5 = D(r5, s1_1_0, 0x12F9FF0C, 0x1315F507, 0x11ADDE81, 0x0B0DF9FA);
	r6 = D(r6, s1_1_0, 0xE4030B02, 0xF90E01F6, 0x131EF82B, 0x10F9D416);
	r7 = D(r7, s1_1_0, 0xFD03FB02, 0xFDED00F4, 0x00F9C713, 0x0EE40103);
	r0 = D(r0, s1_1_1, 0x81141ACF, 0xF181E7D6, 0x2181F60B, 0x8141EF85);
	r1 = D(r1, s1_1_1, 0xF912FE06, 0xCE2AE7ED, 0xF710FBE1, 0x181607FE);
	r2 = D(r2, s1_1_1, 0xFD81FACC, 0xE0F7E48F, 0x0DE007FD, 0xF811F705);
	r3 = D(r3, s1_1_1, 0x420A03FC, 0xFC0EFE1E, 0x0415E9E4, 0x0003EF10);
	r4 = D(r4, s1_1_1, 0x35060008, 0xFF0E02F8, 0x44130DF4, 0xF33BFF07);
	r5 = D(r5, s1_1_1, 0xEAEA0002, 0xE00CB7FE, 0x00FD1818, 0xF23DE4C1);
	r6 = D(r6, s1_1_1, 0x24FDE8FE, 0x112FF1D9, 0xF534CF1F, 0x0A06F5AC);
	r7 = D(r7, s1_1_1, 0xF31CF801, 0xF2D0040B, 0xCB07FDEF, 0x0ED704FE);
	r0 = D(r0, s1_1_2, 0xF613FCFA, 0x04040306, 0xFAFFF70B, 0xF91602F8);
	r1 = D(r1, s1_1_2, 0xFCF602F1, 0xFE001104, 0xFC04FFFD, 0xF705EFF4);
	r2 = D(r2, s1_1_2, 0x0FF5040E, 0x2BEEF049, 0xFCF0FE12, 0x110CF408);
	r3 = D(r3, s1_1_2, 0xFF0500FD, 0xF100FCE0, 0xF306FCF6, 0x01E2F417);
	r4 = D(r4, s1_1_2, 0x01070DF9, 0x07FF0201, 0xF3FFFF02, 0x00FF02FF);
	r5 = D(r5, s1_1_2, 0xF604FA11, 0xE808FE1B, 0x100EF600, 0xF81F12EC);
	r6 = D(r6, s1_1_2, 0xEDF70BF9, 0x070902E3, 0x040781DE, 0x2410E9D5);
	r7 = D(r7, s1_1_2, 0xEB0606FE, 0xFCFEEA0B, 0x0805120F, 0x04FA1A00);
	r0 = D(r0, s1_2_0, 0x0DFC120A, 0x01FF05FD, 0xF4000903, 0x15B6FFD1);
	r1 = D(r1, s1_2_0, 0xFEF203FF, 0x0CE70F01, 0x07F4F807, 0x16F7FA03);
	r2 = D(r2, s1_2_0, 0x03FEFB02, 0xEB031312, 0x01090100, 0xFC010101);
	r3 = D(r3, s1_2_0, 0x03F8FEFA, 0xEC2009EB, 0xF7E9FDF5, 0xEA04F7EF);
	r4 = D(r4, s1_2_0, 0x001B08FE, 0x03FFFE00, 0xEDB432F1, 0xFE0101FD);
	r5 = D(r5, s1_2_0, 0x0E020BFA, 0x0E0C19EF, 0xFD0822F3, 0xF2110F0E);
	r6 = D(r6, s1_2_0, 0xF3FBF1FD, 0x0AEBF715, 0xEA0FF6D8, 0x1000E7FC);
	r7 = D(r7, s1_2_0, 0x000304FA, 0x0903020C, 0x10F2FB01, 0xFB03F6FA);
	r0 = D(r0, s1_2_1, 0x1BFEEF13, 0x0EDC05F9, 0x07FDF4F0, 0x73CDF82E);
	r1 = D(r1, s1_2_1, 0x03020100, 0xFD0DF4FC, 0xF500FF00, 0x08E6F3EE);
	r2 = D(r2, s1_2_1, 0x02F4FC15, 0xE9100DDF, 0x06FBFF04, 0xFDF2FCFA);
	r3 = D(r3, s1_2_1, 0x08F00001, 0xE505DFF7, 0x15FBFBF8, 0x081F1AB3);
	r4 = D(r4, s1_2_1, 0xF8080B07, 0x03FE01FC, 0x13FAFE00, 0x0103FDFA);
	r5 = D(r5, s1_2_1, 0xF8FF0DF9, 0xE9F8F0F4, 0xF30C19F1, 0xF2211500);
	r6 = D(r6, s1_2_1, 0xFE0EE7FB, 0x01FCEAEE, 0x39DE1AE5, 0xEB2828E9);
	r7 = D(r7, s1_2_1, 0xFE03FBFF, 0xF6F8FCF9, 0xEF04EB35, 0xFC0200FD);
	r0 = D(r0, s1_2_2, 0x0407EA0B, 0xFF0302FB, 0x03000F06, 0x1007CA10);
	r1 = D(r1, s1_2_2, 0xFEFF03FD, 0xFAF80BF1, 0x02FCFD0B, 0xFFF903F8);
	r2 = D(r2, s1_2_2, 0xF1020202, 0xFC0AFFEA, 0x01EF0C00, 0xFDF6F600);
	r3 = D(r3, s1_2_2, 0x04F90000, 0xFBFD0AE5, 0xF8EB1000, 0x1DEE181F);
	r4 = D(r4, s1_2_2, 0x010EFEF0, 0xFEFEFFFD, 0xF602F0FD, 0x05FFFC00);
	r5 = D(r5, s1_2_2, 0x0604FBFF, 0xFD13FDF6, 0xF606FAE9, 0xEF0B07F2);
	r6 = D(r6, s1_2_2, 0xF1FA0CFB, 0xF006FD0A, 0xFFE13CD7, 0xF8FFFF03);
	r7 = D(r7, s1_2_2, 0xFB02FDF9, 0xFE10FEFE, 0x0609F503, 0xFF00FDFE);
	f0 = vec4(r0) * 6.2000124e-05;
	f0 += vec4(3.590e-03, -7.854e-04, -3.739e-02, -5.185e-02);
	f0 = clamp(f0, vec4(0.0), vec4(1.0));
	imageStore(out_image, opos + ivec2(0, 0), f0);
	f1 = vec4(r1) * 6.2000124e-05;
	f1 += vec4(4.193e-03, 4.751e-06, -8.927e-03, -1.299e-02);
	f1 = clamp(f1, vec4(0.0), vec4(1.0));
	imageStore(out_image, opos + ivec2(1, 0), f1);
	f2 = vec4(r2) * 6.2000124e-05;
	f2 += vec4(-8.634e-03, -5.437e-02, -9.754e-03, -1.144e-02);
	f2 = clamp(f2, vec4(0.0), vec4(1.0));
	imageStore(out_image, opos + ivec2(0, 1), f2);
	f3 = vec4(r3) * 6.2000124e-05;
	f3 += vec4(-9.748e-04, 1.843e-02, 1.077e-02, -4.272e-02);
	f3 = clamp(f3, vec4(0.0), vec4(1.0));
	imageStore(out_image, opos + ivec2(1, 1), f3);
	f4 = vec4(r4) * 6.2000124e-05;
	f4 += vec4(1.334e-02, 2.611e-03, -4.431e-03, 6.111e-03);
	f4 = clamp(f4, vec4(0.0), vec4(1.0));
	imageStore(out_image, opos + ivec2(2, 0), f4);
	f5 = vec4(r5) * 6.2000124e-05;
	f5 += vec4(-1.404e-03, -1.794e-02, -9.565e-03, -8.299e-03);
	f5 = clamp(f5, vec4(0.0), vec4(1.0));
	imageStore(out_image, opos + ivec2(3, 0), f5);
	f6 = vec4(r6) * 6.2000124e-05;
	f6 += vec4(-1.824e-02, -5.999e-03, -2.317e-02, 1.713e-02);
	f6 = clamp(f6, vec4(0.0), vec4(1.0));
	imageStore(out_image, opos + ivec2(2, 1), f6);
	f7 = vec4(r7) * 6.2000124e-05;
	f7 += vec4(1.054e-02, -1.012e-02, -3.256e-03, 1.554e-02);
	f7 = clamp(f7, vec4(0.0), vec4(1.0));
	imageStore(out_image, opos + ivec2(3, 1), f7);
}

//!DESC CuNNy-4x32-conv3
//!HOOK LUMA
//!COMPUTE 32 16 8 8
//!BIND conv2
//!BIND LUMA
//!SAVE conv3
//!WIDTH LUMA.w 4 *
//!HEIGHT LUMA.h 2 *
//!COMPONENTS 4
//!WHEN OUTPUT.w LUMA.w / 1.3 > OUTPUT.h LUMA.h / 1.3 > *
#extension GL_EXT_spirv_intrinsics : require
spirv_instruction (extensions = ["SPV_KHR_integer_dot_product"], capabilities = [6019, 6018], id = 4450)
int dp4(int a, int b, spirv_literal int fmt);
#define D(r, s, a, b, c, d) r + ivec4(dp4(s, a, 0), dp4(s, b, 0), dp4(s, c, 0), dp4(s, d, 0))
shared int G[8][10][10];
void hook() {
	ivec2 xy = ivec2(gl_LocalInvocationID.xy);
	ivec2 pos = ivec2(gl_WorkGroupID.xy) * ivec2(8, 8) + xy;
	ivec2 opos = pos * ivec2(4, 2);
	ivec2 sz = ivec2(LUMA_size) - ivec2(1);
	for (int y = 0; y < 10; y += 8) {
		int ay = xy.y + y;
		if (ay >= 10) break;
		for (int x = 0; x < 10; x += 8) {
			int ax = xy.x + x;
			if (ax >= 10) break;
			vec2 p;
			vec4 r, g, b, a;
			p = vec2(clamp(pos + ivec2(x - 1, y - 1), ivec2(0), sz) * ivec2(4, 2) + ivec2(1, 1)) * conv2_pt;
			r = conv2_gather(p, 0);
			g = conv2_gather(p, 1);
			b = conv2_gather(p, 2);
			a = conv2_gather(p, 3);
			vec4 v0 = vec4(r.w, g.w, b.w, a.w) * 1.0000000e+00;
			vec4 v1 = vec4(r.z, g.z, b.z, a.z) * 1.0000000e+00;
			vec4 v2 = vec4(r.x, g.x, b.x, a.x) * 1.0000000e+00;
			vec4 v3 = vec4(r.y, g.y, b.y, a.y) * 1.0000000e+00;
			p = vec2(clamp(pos + ivec2(x - 1, y - 1), ivec2(0), sz) * ivec2(4, 2) + ivec2(3, 1)) * conv2_pt;
			r = conv2_gather(p, 0);
			g = conv2_gather(p, 1);
			b = conv2_gather(p, 2);
			a = conv2_gather(p, 3);
			vec4 v4 = vec4(r.w, g.w, b.w, a.w) * 1.0000000e+00;
			vec4 v5 = vec4(r.z, g.z, b.z, a.z) * 1.0000000e+00;
			vec4 v6 = vec4(r.x, g.x, b.x, a.x) * 1.0000000e+00;
			vec4 v7 = vec4(r.y, g.y, b.y, a.y) * 1.0000000e+00;
			G[0][ay][ax] = int(packSnorm4x8(v0));
			G[1][ay][ax] = int(packSnorm4x8(v1));
			G[2][ay][ax] = int(packSnorm4x8(v2));
			G[3][ay][ax] = int(packSnorm4x8(v3));
			G[4][ay][ax] = int(packSnorm4x8(v4));
			G[5][ay][ax] = int(packSnorm4x8(v5));
			G[6][ay][ax] = int(packSnorm4x8(v6));
			G[7][ay][ax] = int(packSnorm4x8(v7));
		}
	}
	barrier();
	int s0_0_0, s0_0_1, s0_0_2, s0_1_0, s0_1_1, s0_1_2, s0_2_0, s0_2_1, s0_2_2, s1_0_0, s1_0_1, s1_0_2, s1_1_0, s1_1_1, s1_1_2, s1_2_0, s1_2_1, s1_2_2;
	ivec4 r0, r1, r2, r3, r4, r5, r6, r7;
	vec4 f0, f1, f2, f3, f4, f5, f6, f7;
	r0 = ivec4(0); r1 = ivec4(0); r2 = ivec4(0); r3 = ivec4(0); r4 = ivec4(0); r5 = ivec4(0); r6 = ivec4(0); r7 = ivec4(0);
	s0_0_0 = G[0][xy.y+0][xy.x+0]; s0_0_1 = G[0][xy.y+0][xy.x+1];
	s0_0_2 = G[0][xy.y+0][xy.x+2]; s0_1_0 = G[0][xy.y+1][xy.x+0];
	s0_1_1 = G[0][xy.y+1][xy.x+1]; s0_1_2 = G[0][xy.y+1][xy.x+2];
	s0_2_0 = G[0][xy.y+2][xy.x+0]; s0_2_1 = G[0][xy.y+2][xy.x+1];
	s0_2_2 = G[0][xy.y+2][xy.x+2]; s1_0_0 = G[1][xy.y+0][xy.x+0];
	s1_0_1 = G[1][xy.y+0][xy.x+1]; s1_0_2 = G[1][xy.y+0][xy.x+2];
	s1_1_0 = G[1][xy.y+1][xy.x+0]; s1_1_1 = G[1][xy.y+1][xy.x+1];
	s1_1_2 = G[1][xy.y+1][xy.x+2]; s1_2_0 = G[1][xy.y+2][xy.x+0];
	s1_2_1 = G[1][xy.y+2][xy.x+1]; s1_2_2 = G[1][xy.y+2][xy.x+2];
	r0 = D(r0, s0_0_0, 0x08FD04FF, 0x10F7FC09, 0xDE000CFE, 0xFD14FF06);
	r1 = D(r1, s0_0_0, 0xF409FFFB, 0xFDEB0101, 0xFB02FF00, 0xFFF504FF);
	r2 = D(r2, s0_0_0, 0xE2130607, 0xE712FDF1, 0x1CFE1005, 0xEF0A08FA);
	r3 = D(r3, s0_0_0, 0xF90B1600, 0x04FF04FD, 0x00F90400, 0x1E0AF6FA);
	r4 = D(r4, s0_0_0, 0xF9EF0304, 0x04EEFE00, 0xF301FFFA, 0x12F50401);
	r5 = D(r5, s0_0_0, 0xF302F904, 0x01EEDBFA, 0x12E509F1, 0xF1F6F006);
	r6 = D(r6, s0_0_0, 0x02F50401, 0xF30AFB00, 0xFF0CFDFE, 0x19F80905);
	r7 = D(r7, s0_0_0, 0xEE07FEFD, 0x81F90501, 0xF819F903, 0x14CAFC0A);
	r0 = D(r0, s0_0_1, 0xFD050605, 0x1EE8FA09, 0xF30705FB, 0x0CF60714);
	r1 = D(r1, s0_0_1, 0xF409FFFE, 0xF601FBFD, 0xFCFC0002, 0xEF070EFB);
	r2 = D(r2, s0_0_1, 0xDD0C0604, 0xF8DEE60F, 0xF7CF0723, 0xF700E508);
	r3 = D(r3, s0_0_1, 0xE8FE000B, 0x0AEBF111, 0x09DFFDF4, 0x10F314F0);
	r4 = D(r4, s0_0_1, 0xFD0A0EFA, 0xFEFD0A06, 0xCDFF0CF2, 0xEFE60510);
	r5 = D(r5, s0_0_1, 0x18F1DCFD, 0x0807EC07, 0x0411090A, 0xF700F7FC);
	r6 = D(r6, s0_0_1, 0x000C04FE, 0xDAFBFE0A, 0xFFFEFDF9, 0x0B1316ED);
	r7 = D(r7, s0_0_1, 0xDFE7F509, 0xC6151204, 0x8E23F00C, 0x1212F3E8);
	r0 = D(r0, s0_0_2, 0xEEFB00F8, 0x08FBFDFF, 0xFFFCFEFF, 0x190002FB);
	r1 = D(r1, s0_0_2, 0xF1020303, 0xC00D04F9, 0xF702FE01, 0xF41A07FE);
	r2 = D(r2, s0_0_2, 0xFF06F902, 0xE01981F5, 0x0A1DF706, 0xF505FB04);
	r3 = D(r3, s0_0_2, 0x09060106, 0x08FEFDFA, 0xF8FAFF04, 0x181301F7);
	r4 = D(r4, s0_0_2, 0x03120704, 0x02010500, 0xFE0700F9, 0xF90AF605);
	r5 = D(r5, s0_0_2, 0x040AFF0B, 0xFA1CF6EF, 0xC12312F8, 0x040502FC);
	r6 = D(r6, s0_0_2, 0xF10A0102, 0x06FD04F9, 0xFD040101, 0x100FFDFC);
	r7 = D(r7, s0_0_2, 0xF1F207F9, 0xD7FA17FC, 0xC30DFFFF, 0x2CE701FC);
	r0 = D(r0, s0_1_0, 0x0FEE0DFA, 0x170CFCFE, 0xEC241601, 0x0EE8000C);
	r1 = D(r1, s0_1_0, 0xF3FDF90E, 0xFA010E01, 0xFF010307, 0x06F50DF9);
	r2 = D(r2, s0_1_0, 0xF908030E, 0x01060601, 0x340F06D9, 0xEF0709FD);
	r3 = D(r3, s0_1_0, 0xEF020A0B, 0x0903FDFD, 0x000A01F9, 0x0EE4F7FC);
	r4 = D(r4, s0_1_0, 0xEF230D00, 0xFE181800, 0xFA06FDF2, 0x1B02DC05);
	r5 = D(r5, s0_1_0, 0xF617F10B, 0xD92FF903, 0x26F112EB, 0xE100E203);
	r6 = D(r6, s0_1_0, 0xF8F205FE, 0xFF08F206, 0xF7F6EE03, 0x04F6F904);
	r7 = D(r7, s0_1_0, 0xE11BFC04, 0x810C08FE, 0x12F10103, 0x2AEF09FC);
	r0 = D(r0, s0_1_1, 0x0909A204, 0x1A0D10E5, 0xED41F8FE, 0xFB6103E9);
	r1 = D(r1, s0_1_1, 0xE0A3EF21, 0xF1A7C9F6, 0xF5EE1902, 0xE2F5040B);
	r2 = D(r2, s0_1_1, 0xEAE9D402, 0xE029BD2E, 0x2703F2DF, 0xF7CDADFA);
	r3 = D(r3, s0_1_1, 0xF4DE190F, 0xFEFF08FE, 0xF5DAF507, 0xD934FFF7);
	r4 = D(r4, s0_1_1, 0xE9D5F417, 0x0DD3FE08, 0xF1FDC6FE, 0x27E40F09);
	r5 = D(r5, s0_1_1, 0x05081BF3, 0x01F1C702, 0x0F17120B, 0xECB0CB07);
	r6 = D(r6, s0_1_1, 0xF10AF905, 0xD9DABBEC, 0xFFF50005, 0xF7EDD416);
	r7 = D(r7, s0_1_1, 0xEDD9C6EB, 0x8F7F1508, 0xF8C700F5, 0x20DE2307);
	r0 = D(r0, s0_1_2, 0xF50FEAFE, 0x140604F1, 0x0AFB02F2, 0x161A16F4);
	r1 = D(r1, s0_1_2, 0xFB07FC0F, 0xC7050103, 0x040905FF, 0xEC02DDF9);
	r2 = D(r2, s0_1_2, 0xE9FDF6F0, 0xB41C0610, 0x20E6F9ED, 0xCBF0F7FD);
	r3 = D(r3, s0_1_2, 0xE8E6F605, 0x01FC02FD, 0xF5F6FBFD, 0x0A03FEFE);
	r4 = D(r4, s0_1_2, 0xF8D6FCF2, 0xFB020203, 0xD830F7FC, 0x05090B08);
	r5 = D(r5, s0_1_2, 0xE5030109, 0xF2C2F2FE, 0x4701E509, 0xECFBF50D);
	r6 = D(r6, s0_1_2, 0xE51BFB02, 0x0E1716F7, 0x00FC02FE, 0x070D0E03);
	r7 = D(r7, s0_1_2, 0xB6F3F707, 0xD330020C, 0xDF58F9E8, 0x11E51002);
	r0 = D(r0, s0_2_0, 0x18FC08FD, 0x0CFCF900, 0x05FA0AFD, 0x1E04FEF6);
	r1 = D(r1, s0_2_0, 0x07EDFE00, 0xEB00F706, 0xFF0905FE, 0xFF070C03);
	r2 = D(r2, s0_2_0, 0xF5090101, 0xEE28ED05, 0x2DED0AE6, 0xF5FB0A01);
	r3 = D(r3, s0_2_0, 0xE2FDED0B, 0xFDFDFF02, 0xEDFF0603, 0x190604FC);
	r4 = D(r4, s0_2_0, 0xEF0503FE, 0x0B000AFD, 0xE60306FB, 0x23FDF9F8);
	r5 = D(r5, s0_2_0, 0xDA09FD09, 0x2AF003F1, 0x08F807F5, 0xFFF70A08);
	r6 = D(r6, s0_2_0, 0xEFF405FA, 0x1D03FBF9, 0xFF030101, 0x33FF01F9);
	r7 = D(r7, s0_2_0, 0xF2130105, 0x13FD1302, 0xF5F0FC07, 0x00F6010A);
	r0 = D(r0, s0_2_1, 0x0FFDFFFB, 0x16ED0BEA, 0xFE1008FA, 0x131F0DF1);
	r1 = D(r1, s0_2_1, 0xF3FDFB0D, 0xE804E815, 0x12F5F9F9, 0xFAF8E6F5);
	r2 = D(r2, s0_2_1, 0xF70603FF, 0xFE1AEB02, 0x151D0CFA, 0xDF26EF1E);
	r3 = D(r3, s0_2_1, 0xE0F907F9, 0xF4FA00FF, 0xFFFFFD05, 0x090EE300);
	r4 = D(r4, s0_2_1, 0x08FBF1F2, 0x1D0108FC, 0xF0E7FD11, 0x2DECFBFC);
	r5 = D(r5, s0_2_1, 0xE6040613, 0x0522051B, 0x0B0903F8, 0xEB06EA09);
	r6 = D(r6, s0_2_1, 0xED0005FF, 0x15070C00, 0xFDF6FFFC, 0x080AF1F9);
	r7 = D(r7, s0_2_1, 0xEB07F710, 0xEB06170E, 0xB6D71DFC, 0x050BFDFA);
	r0 = D(r0, s0_2_2, 0xF707FDFC, 0x1201FDFC, 0x000A01F9, 0x150301FA);
	r1 = D(r1, s0_2_2, 0x0DFF0102, 0xFE0BFD09, 0xF906FFFF, 0xE81105FE);
	r2 = D(r2, s0_2_2, 0xE502F700, 0xF12AF4EB, 0x290605FC, 0xF0F80102);
	r3 = D(r3, s0_2_2, 0xE1FFFBFF, 0x00FCFFFE, 0xF8040104, 0x1900F5FB);
	r4 = D(r4, s0_2_2, 0x20030504, 0x20030202, 0xDC0E01F7, 0x1B0EFD01);
	r5 = D(r5, s0_2_2, 0xD5040110, 0xD019FA0F, 0x080D0606, 0xE005F702);
	r6 = D(r6, s0_2_2, 0xEB0303FF, 0x2C01FEF7, 0xF3FF00FD, 0x0A0507F3);
	r7 = D(r7, s0_2_2, 0xD8010604, 0x20FD03FE, 0xC31903FD, 0x13E502FE);
	r0 = D(r0, s1_0_0, 0x02FCF9FB, 0x04FC030C, 0xFFFFFF07, 0xFEF6FF04);
	r1 = D(r1, s1_0_0, 0x0A000403, 0x0A01FDFA, 0x0204FF01, 0xFEFAF7FD);
	r2 = D(r2, s1_0_0, 0x06010814, 0x030CFA16, 0x04EEF8FD, 0xF501FDFC);
	r3 = D(r3, s1_0_0, 0xF6F309FB, 0x070501F8, 0xFC010203, 0x00F1F90A);
	r4 = D(r4, s1_0_0, 0xF4FDFB02, 0xFC0002F9, 0x040F0405, 0x06FAF40A);
	r5 = D(r5, s1_0_0, 0x0C020106, 0xEAF61FF8, 0xFFF5E3F5, 0xEC000C01);
	r6 = D(r6, s1_0_0, 0xF903FDF5, 0x06FEF800, 0x00FD0207, 0xF8F9080C);
	r7 = D(r7, s1_0_0, 0xFD06090E, 0xF7050AFE, 0xFB09FFF4, 0x03FE0714);
	r0 = D(r0, s1_0_1, 0xFCFBF606, 0x10FFF3FB, 0xF7FAFCF8, 0x03F50406);
	r1 = D(r1, s1_0_1, 0xFDFCFE06, 0xFF05FC0A, 0x03FD0000, 0x0003F201);
	r2 = D(r2, s1_0_1, 0xF6F605FA, 0xED07E709, 0xE4DB0CFD, 0xE2F5FE11);
	r3 = D(r3, s1_0_1, 0xED011EFF, 0xFA010008, 0xFB04FAF7, 0x0DF2F904);
	r4 = D(r4, s1_0_1, 0x0BF3FD01, 0x0AFA0408, 0xF9040816, 0xF6100006);
	r5 = D(r5, s1_0_1, 0x0C17020B, 0xDFF91909, 0x0401DFFB, 0x0E0614FE);
	r6 = D(r6, s1_0_1, 0x09FE0000, 0xF1F00014, 0x0C010404, 0x0FEC06F5);
	r7 = D(r7, s1_0_1, 0x0DFEFF05, 0x0610020B, 0xF9140105, 0xE50F0FFA);
	r0 = D(r0, s1_0_2, 0x00F50009, 0x0204FD03, 0x0307FD05, 0xFD05F9F3);
	r1 = D(r1, s1_0_2, 0xF7FCFDFC, 0x03FEFF01, 0xF90001FE, 0xFCFF0005);
	r2 = D(r2, s1_0_2, 0xFC0EFF0B, 0xD907D110, 0x0EEC0109, 0xFC0BF505);
	r3 = D(r3, s1_0_2, 0xE0F01CF1, 0x05FD0200, 0x0709FDFC, 0xF2F6DE12);
	r4 = D(r4, s1_0_2, 0x06060000, 0xF8F8FE03, 0xE2020600, 0x03F905F9);
	r5 = D(r5, s1_0_2, 0x0B0A0104, 0x0F0B0013, 0xE2E9020C, 0xF6FF12FF);
	r6 = D(r6, s1_0_2, 0x07FC03FE, 0x040403FB, 0xFDFF0101, 0xF0FCF405);
	r7 = D(r7, s1_0_2, 0x0109E9FE, 0x00F6FFFF, 0xFC1CFF18, 0x010EFFFB);
	r0 = D(r0, s1_1_0, 0x120DF6EF, 0x1304050E, 0xF5090113, 0xF7F5061A);
	r1 = D(r1, s1_1_0, 0xFAF30604, 0x03F8F4FF, 0xFB000209, 0xFC09FEFB);
	r2 = D(r2, s1_1_0, 0x0903F808, 0xDE0A011A, 0x1314FEE6, 0x05070F0C);
	r3 = D(r3, s1_1_0, 0xEBFD19F2, 0x06030201, 0x070100FF, 0xEAF1F7FD);
	r4 = D(r4, s1_1_0, 0x12F9FDFF, 0x1300FE81, 0x1E17FBE6, 0xEDF20204);
	r5 = D(r5, s1_1_0, 0x11F9050E, 0xFB0FFF00, 0x0712E3F3, 0xFCF90C04);
	r6 = D(r6, s1_1_0, 0x02FEFEF5, 0xF9F5FF0F, 0xFD000114, 0xE5F60315);
	r7 = D(r7, s1_1_0, 0x0F060D03, 0x251304F5, 0xD8F8FA20, 0xF804F91C);
	r0 = D(r0, s1_1_1, 0xE3EFE828, 0x08FDF9FC, 0xE8F5F7F8, 0x0FF508F5);
	r1 = D(r1, s1_1_1, 0x110505E0, 0x1A0303F5, 0x0E0604F1, 0xF40FF80C);
	r2 = D(r2, s1_1_1, 0x15E40933, 0x0CF52021, 0xC606D636, 0xFC0420CB);
	r3 = D(r3, s1_1_1, 0x1FFC2102, 0x061203FF, 0xF12E07F7, 0xEBEFF0F1);
	r4 = D(r4, s1_1_1, 0xEB14F0DD, 0xF4011903, 0x34160F33, 0x22EDFF37);
	r5 = D(r5, s1_1_1, 0x0FDAF1E7, 0xF41525CF, 0xE60CDAF0, 0xF80B05FB);
	r6 = D(r6, s1_1_1, 0xF4F300F6, 0x270F0304, 0xFC160DF3, 0xF70B11DB);
	r7 = D(r7, s1_1_1, 0x00030DFB, 0xF6FAF965, 0xF7FB03DE, 0x15F519DC);
	r0 = D(r0, s1_1_2, 0xEB02F5F9, 0xFA10F0FB, 0x0F02FEF8, 0xE5FE05FC);
	r1 = D(r1, s1_1_2, 0xF8F30702, 0xF7EDFFF1, 0xF8FDFC05, 0x06F8FEDF);
	r2 = D(r2, s1_1_2, 0xFD0BF21C, 0xBF18F3D5, 0xF1EE0D0B, 0x00EF0C0C);
	r3 = D(r3, s1_1_2, 0xEAF507EA, 0xFCFDFEFC, 0x0CFF0400, 0xF6E80FDD);
	r4 = D(r4, s1_1_2, 0xFB05FB00, 0xF3FE0003, 0xCFFC14EC, 0xF2F2FDFC);
	r5 = D(r5, s1_1_2, 0xFF00EC07, 0xFAF6FCEF, 0x05FC1AF1, 0xF6010D01);
	r6 = D(r6, s1_1_2, 0xFF0705FD, 0xD9E9F1F6, 0x04FC0201, 0xF1EB26EE);
	r7 = D(r7, s1_1_2, 0x0509FB01, 0xEA130315, 0x0A100E03, 0x1D01F3F8);
	r0 = D(r0, s1_2_0, 0x0308F6FA, 0x00000508, 0xFDFAFE09, 0xFD02F616);
	r1 = D(r1, s1_2_0, 0x04020A05, 0xFEF30707, 0xF50AFF08, 0x0904FEFE);
	r2 = D(r2, s1_2_0, 0x0305F9F9, 0xFC20EE08, 0xFC1AF2E7, 0xF906FCFA);
	r3 = D(r3, s1_2_0, 0xEEF427EC, 0x030102FE, 0x00040002, 0x02FB0706);
	r4 = D(r4, s1_2_0, 0x00F9FD07, 0x04FBFC00, 0x090DFBFB, 0xF809F7F8);
	r5 = D(r5, s1_2_0, 0x0C010701, 0xF704F3FD, 0xFFFA050F, 0xF8FD06F4);
	r6 = D(r6, s1_2_0, 0x00FFFDFD, 0xFB06F417, 0x0A010301, 0xF102F8F8);
	r7 = D(r7, s1_2_0, 0xF80AFF00, 0xFB0500FB, 0x09040206, 0x0001040C);
	r0 = D(r0, s1_2_1, 0x0EFFFB05, 0x10FAFB0B, 0x02FDF803, 0xE80BF6D9);
	r1 = D(r1, s1_2_1, 0xFCF9030B, 0xF40804D7, 0x0B02F80C, 0x04EB0B0D);
	r2 = D(r2, s1_2_1, 0x0AFFF2EC, 0xFDF5F717, 0x12F1E9DC, 0xD1060CD6);
	r3 = D(r3, s1_2_1, 0xF50712FF, 0x02040303, 0x030205FB, 0x04F01727);
	r4 = D(r4, s1_2_1, 0xFEF1F80B, 0xF801FDFD, 0x150F0905, 0x0403FA08);
	r5 = D(r5, s1_2_1, 0x16080B0D, 0x0D00E5ED, 0x09FC1103, 0xFD0915F6);
	r6 = D(r6, s1_2_1, 0x020500FE, 0xE50EE7DA, 0xFCFA0003, 0x0AF01C0B);
	r7 = D(r7, s1_2_1, 0xF40606EC, 0xF71EF70D, 0x23EB0A0C, 0xEF140906);
	r0 = D(r0, s1_2_2, 0xF8F6FBFE, 0x01F6F500, 0xF90CFCFE, 0x1905FDEF);
	r1 = D(r1, s1_2_2, 0x05FEF90B, 0xFAF707F9, 0xFC030005, 0xE606F8FE);
	r2 = D(r2, s1_2_2, 0x0906FEFE, 0xF20CCBF3, 0x09EFF403, 0x060C12FF);
	r3 = D(r3, s1_2_2, 0xE2F31AFE, 0x010205FF, 0xFA04FF02, 0xF4FDFE18);
	r4 = D(r4, s1_2_2, 0xF002F1F9, 0x00FCFBFF, 0x0AFB0209, 0x01F8F8FB);
	r5 = D(r5, s1_2_2, 0x03050109, 0xF30810FC, 0xF101FDF9, 0x0A0008FE);
	r6 = D(r6, s1_2_2, 0xFC050000, 0x2806FB04, 0x00FE0001, 0xFAFC1209);
	r7 = D(r7, s1_2_2, 0xFA080703, 0x06FE00F9, 0xFDF90EFF, 0xFB0B1712);
	s0_0_0 = G[2][xy.y+0][xy.x+0]; s0_0_1 = G[2][xy.y+0][xy.x+1];
	s0_0_2 = G[2][xy.y+0][xy.x+2]; s0_1_0 = G[2][xy.y+1][xy.x+0];
	s0_1_1 = G[2][xy.y+1][xy.x+1]; s0_1_2 = G[2][xy.y+1][xy.x+2];
	s0_2_0 = G[2][xy.y+2][xy.x+0]; s0_2_1 = G[2][xy.y+2][xy.x+1];
	s0_2_2 = G[2][xy.y+2][xy.x+2]; s1_0_0 = G[3][xy.y+0][xy.x+0];
	s1_0_1 = G[3][xy.y+0][xy.x+1]; s1_0_2 = G[3][xy.y+0][xy.x+2];
	s1_1_0 = G[3][xy.y+1][xy.x+0]; s1_1_1 = G[3][xy.y+1][xy.x+1];
	s1_1_2 = G[3][xy.y+1][xy.x+2]; s1_2_0 = G[3][xy.y+2][xy.x+0];
	s1_2_1 = G[3][xy.y+2][xy.x+1]; s1_2_2 = G[3][xy.y+2][xy.x+2];
	r0 = D(r0, s0_0_0, 0xF9F8FD03, 0x04000E0E, 0x01F60BFE, 0x10020608);
	r1 = D(r1, s0_0_0, 0xF6F4FF04, 0xF3F506FF, 0x04FEFDFF, 0x07F3FC03);
	r2 = D(r2, s0_0_0, 0xFFF3E8FE, 0x22FAE907, 0x15F0DEF9, 0xFEF60E07);
	r3 = D(r3, s0_0_0, 0xF200FA11, 0x090100FA, 0x05FFFA03, 0x00E91902);
	r4 = D(r4, s0_0_0, 0xFEFA0B01, 0x0002FF02, 0xF810C1F1, 0x04FA070B);
	r5 = D(r5, s0_0_0, 0xFF16F206, 0x0D01EFEE, 0xD2E6F0FB, 0xEA0CF6F6);
	r6 = D(r6, s0_0_0, 0xFD01F802, 0x09FE0705, 0x01FCFE01, 0x08E50FFA);
	r7 = D(r7, s0_0_0, 0x0D05E207, 0x030DF7EB, 0x0BE7C40A, 0x00F30BFA);
	r0 = D(r0, s0_0_1, 0x00F9FCFF, 0xFA171803, 0x01070DF6, 0x0F001003);
	r1 = D(r1, s0_0_1, 0xF7030200, 0xF7F51904, 0xFE04FAFF, 0xFBF329F6);
	r2 = D(r2, s0_0_1, 0x04FCF015, 0x07DF031D, 0xFD020800, 0xF606EFFC);
	r3 = D(r3, s0_0_1, 0xF1FADC0C, 0xFD0511F6, 0xFD02FC08, 0x08FB26EC);
	r4 = D(r4, s0_0_1, 0xFBF60415, 0x05F90101, 0xFF0CDC04, 0x08F5F108);
	r5 = D(r5, s0_0_1, 0x0113F0EF, 0xF0EAE2EF, 0xD6EBF5F1, 0xFFF7F0FD);
	r6 = D(r6, s0_0_1, 0xFF00F304, 0x0E04FB08, 0xFF03F9FD, 0x0B113CEB);
	r7 = D(r7, s0_0_1, 0xF918DFFA, 0x0902FD01, 0xFDEFD2FB, 0xFA0D29E6);
	r0 = D(r0, s0_0_2, 0x00FAF801, 0x04000B04, 0x0403FCFF, 0xFCFF1D05);
	r1 = D(r1, s0_0_2, 0xFCFE0702, 0xFA00FE00, 0x0101F901, 0x00FC1D00);
	r2 = D(r2, s0_0_2, 0x05EEDA13, 0xFFFDE9FB, 0x03032901, 0xFF0222F6);
	r3 = D(r3, s0_0_2, 0x06D9EF1C, 0x03010FFE, 0x02FEF501, 0xFE0B2EFA);
	r4 = D(r4, s0_0_2, 0xFEF5F105, 0xFEFF2400, 0xFB0DE004, 0xFFF90405);
	r5 = D(r5, s0_0_2, 0x0406D5FC, 0xFC022AF1, 0xFF03FFE9, 0xF50912FD);
	r6 = D(r6, s0_0_2, 0x00FEFBFF, 0x010A0700, 0x0001F600, 0xFB173FEE);
	r7 = D(r7, s0_0_2, 0x0012FAF5, 0xF8081EF5, 0x000DD8F9, 0xF20814F1);
	r0 = D(r0, s0_1_0, 0x1103FA00, 0xF80C1403, 0xC8E9F311, 0xD103F619);
	r1 = D(r1, s0_1_0, 0x0002FAFE, 0x25FAE502, 0xDEF800FA, 0xEEE1D515);
	r2 = D(r2, s0_1_0, 0xDE0EFB03, 0xAC0BEA19, 0xD2C1FD03, 0xEE08E305);
	r3 = D(r3, s0_1_0, 0x1601E3FE, 0x0007FFF6, 0xFD06070D, 0xC60F1402);
	r4 = D(r4, s0_1_0, 0xD3F0DE25, 0x0521ED26, 0xF30DE206, 0x05F011DC);
	r5 = D(r5, s0_1_0, 0x241708DF, 0xCC02DC04, 0x13EF040B, 0x1814F207);
	r6 = D(r6, s0_1_0, 0xFAF9E8FA, 0xDEF8E708, 0xF3FC0915, 0xD1F21303);
	r7 = D(r7, s0_1_0, 0x0F0CDE16, 0x7F0AA0F2, 0x4A14E008, 0xE0EB1ADB);
	r0 = D(r0, s0_1_1, 0xE6EC1D05, 0xFAFE1D08, 0x040BFFF6, 0xF7D2F001);
	r1 = D(r1, s0_1_1, 0x00F9FDF5, 0x02F60602, 0xFCF6F703, 0xF112E617);
	r2 = D(r2, s0_1_1, 0x05051C04, 0xAB078118, 0x03FCD41A, 0xFAFDE90D);
	r3 = D(r3, s0_1_1, 0x0906F60B, 0xFF0306F6, 0xF513FC1C, 0xD8E1101F);
	r4 = D(r4, s0_1_1, 0xFD1C011E, 0x08001FFF, 0x04C682E3, 0x01FEEEFD);
	r5 = D(r5, s0_1_1, 0x06202A81, 0x09F3E128, 0xE70DF21E, 0xF90B04ED);
	r6 = D(r6, s0_1_1, 0xFB04D70C, 0xFDD2F90B, 0x00FFF504, 0xECE02F1A);
	r7 = D(r7, s0_1_1, 0x0DF0CDFC, 0x1FE311FC, 0xECEAFC17, 0xF32D37D5);
	r0 = D(r0, s0_1_2, 0x05F2EF1D, 0x01F7240C, 0xFB0107F2, 0x02071DF5);
	r1 = D(r1, s0_1_2, 0xFC06F201, 0x04FAE708, 0x01FEFB00, 0x01F8040A);
	r2 = D(r2, s0_1_2, 0xFE01F8FB, 0x2301FD03, 0xFFFEF40F, 0x01F8EDFC);
	r3 = D(r3, s0_1_2, 0x1CEEE726, 0x01FF0DFD, 0xFCFFFBFF, 0x01001012);
	r4 = D(r4, s0_1_2, 0xFFF2ED0C, 0xFF000E00, 0xFB05EB04, 0x080DEF05);
	r5 = D(r5, s0_1_2, 0x09050FFC, 0x02FDDD09, 0x0BFD230F, 0xFBFCE702);
	r6 = D(r6, s0_1_2, 0x02FADE01, 0xFE0907F6, 0x00FFEEFE, 0xFF0D1507);
	r7 = D(r7, s0_1_2, 0x08FBBB07, 0x09F9ED06, 0x04FDD5FB, 0x040613F4);
	r0 = D(r0, s0_2_0, 0x0105F8F5, 0xEC080DFD, 0x00F3EA0D, 0xDC0E09FF);
	r1 = D(r1, s0_2_0, 0x11FCF9F9, 0xD703EB05, 0xF0000402, 0xE0F3E006);
	r2 = D(r2, s0_2_0, 0xFF15EAF3, 0xFCFFF7EE, 0x0E0719EA, 0xF810FFF4);
	r3 = D(r3, s0_2_0, 0xF0E8ED1A, 0xFCFF0101, 0xFC040003, 0xF4F70502);
	r4 = D(r4, s0_2_0, 0x08FAFF02, 0xFEFE00FD, 0x0D14E5DA, 0x0BF90708);
	r5 = D(r5, s0_2_0, 0x040F01FB, 0xF013ECE6, 0x04F1FA04, 0xFF0AF2FE);
	r6 = D(r6, s0_2_0, 0x01FDF3FD, 0xE311FE09, 0xFC00FF01, 0x09F8000B);
	r7 = D(r7, s0_2_0, 0x0911FCFC, 0x190CB5FC, 0x07FFF009, 0xFC09030A);
	r0 = D(r0, s0_2_1, 0xF9EF0217, 0x09001E03, 0xFC01FCFF, 0xD7010EEE);
	r1 = D(r1, s0_2_1, 0xF507FAFB, 0xFEF6030E, 0x02F91BFC, 0x11EA0410);
	r2 = D(r2, s0_2_1, 0xFD06FCFC, 0x20EEEC03, 0xF90814EC, 0x070AE30A);
	r3 = D(r3, s0_2_1, 0x12EADC11, 0xFE030701, 0xFB01010E, 0x0201170C);
	r4 = D(r4, s0_2_1, 0x00EE0405, 0xFF0407F6, 0xEA0CE3F4, 0x01FEF0FB);
	r5 = D(r5, s0_2_1, 0x070B03FC, 0xF90CE7FB, 0x05FE0508, 0x0207F1FA);
	r6 = D(r6, s0_2_1, 0xFE04E002, 0xEF12FEEC, 0x01FEFD02, 0x04F11209);
	r7 = D(r7, s0_2_1, 0x0008DD10, 0xFEF9EF04, 0xF6FDD60A, 0x03FF1E03);
	r0 = D(r0, s0_2_2, 0x0602DD0C, 0x06FA1507, 0x05FE09FB, 0xF90719F4);
	r1 = D(r1, s0_2_2, 0xFE03FCFF, 0x01F70107, 0x00020701, 0x01FBFCFE);
	r2 = D(r2, s0_2_2, 0xFE0403FA, 0x010DE1FC, 0x0D0D18EF, 0x0100ECFE);
	r3 = D(r3, s0_2_2, 0xF9EEF41B, 0x00FF0500, 0x08FBF709, 0x02F6170D);
	r4 = D(r4, s0_2_2, 0xFF0213FC, 0x020311FE, 0xF8F9C803, 0x09040BFA);
	r5 = D(r5, s0_2_2, 0x02FEF7FF, 0x0903F702, 0x0A020901, 0xFDF7C704);
	r6 = D(r6, s0_2_2, 0x03FFE203, 0x040F0CF1, 0x0100F800, 0x0DF20D06);
	r7 = D(r7, s0_2_2, 0xFDFFEA0E, 0xFB07F7FA, 0x0C05A6FF, 0xFFEF1C0B);
	r0 = D(r0, s1_0_0, 0x02030003, 0xFF0409FF, 0xFCFBFFFC, 0x0B05040C);
	r1 = D(r1, s1_0_0, 0xFCF102F7, 0xF901FBF1, 0x020200FC, 0x05F7F4FF);
	r2 = D(r2, s1_0_0, 0xFDFE08F1, 0x16FC06E6, 0x130A09FF, 0x02FB0015);
	r3 = D(r3, s1_0_0, 0x02D013F9, 0xFD010302, 0xF9FB0101, 0x05FDF501);
	r4 = D(r4, s1_0_0, 0xFBEF010C, 0xF90208FE, 0xFEFBFBEE, 0x0718FEFF);
	r5 = D(r5, s1_0_0, 0xFF06FAE8, 0x06130111, 0xFAE0F0FE, 0xF004FE01);
	r6 = D(r6, s1_0_0, 0x0105000A, 0x08020405, 0xFC0202F0, 0x04FDF902);
	r7 = D(r7, s1_0_0, 0xF6F2080A, 0x01FDFAFE, 0x0608F806, 0xFEFE0FFF);
	r0 = D(r0, s1_0_1, 0x0605F8F7, 0xE8080AE6, 0x010FFB08, 0xF7F30C1D);
	r1 = D(r1, s1_0_1, 0x11F9FAF4, 0x11F3FCF8, 0xFDFEFF00, 0xFAED011C);
	r2 = D(r2, s1_0_1, 0x0E00EF1E, 0x03110530, 0xF604FA2E, 0x0901051E);
	r3 = D(r3, s1_0_1, 0xF8F10E0A, 0xFA020657, 0xF603FA11, 0xF8F20C04);
	r4 = D(r4, s1_0_1, 0x01EFF804, 0xFBF80AFA, 0x22EFEDF5, 0x00ECFE03);
	r5 = D(r5, s1_0_1, 0x0BFCF181, 0xF6FB0522, 0x07E9FEB5, 0xEEF105EB);
	r6 = D(r6, s1_0_1, 0xFD03FD47, 0x09F60B04, 0xFEFE0100, 0xF8E70EFA);
	r7 = D(r7, s1_0_1, 0x0AFDFDDC, 0x18F1FDED, 0xF41E0331, 0x160B07E4);
	r0 = D(r0, s1_0_2, 0xF4FC090D, 0xF8FF05F8, 0x000202FD, 0x0202FFFA);
	r1 = D(r1, s1_0_2, 0x0900FFFB, 0xFF02FFFF, 0x0000FE00, 0x04FE0207);
	r2 = D(r2, s1_0_2, 0x050401F7, 0xF3F4FFF3, 0xFFFD09FA, 0xF0FF04FE);
	r3 = D(r3, s1_0_2, 0xF1E81911, 0x00010009, 0xF7FF02F8, 0x000203F9);
	r4 = D(r4, s1_0_2, 0x07F904FE, 0x0CFFFEFF, 0x1B03F3FC, 0xFB0202F9);
	r5 = D(r5, s1_0_2, 0xEAFEEEF9, 0xEC02FAEE, 0x16F3FC1F, 0x0601F8FD);
	r6 = D(r6, s1_0_2, 0xFFFD050E, 0x04FEFBF4, 0x01FFFFFF, 0x10040AEF);
	r7 = D(r7, s1_0_2, 0x0902FB06, 0x1409F012, 0xEEF2FDF4, 0xFE0302FA);
	r0 = D(r0, s1_1_0, 0x0D040103, 0x060003FF, 0xFA010707, 0x0EF7FF01);
	r1 = D(r1, s1_1_0, 0x030AFD0B, 0xFE1103FA, 0x0400FFF6, 0x07EF0603);
	r2 = D(r2, s1_1_0, 0x0504FBFA, 0x11ED0102, 0xF6DAFDED, 0x07E80E07);
	r3 = D(r3, s1_1_0, 0xCFF90B0D, 0x00FC0208, 0xFAFE01FF, 0x0808FEF6);
	r4 = D(r4, s1_1_0, 0x0EE30307, 0xF4FDFEE8, 0x0711F5F9, 0x0306FB03);
	r5 = D(r5, s1_1_0, 0xEE08FBF6, 0xE5DA00F3, 0x051500FD, 0xECF80307);
	r6 = D(r6, s1_1_0, 0x0300FE00, 0x0DF7020B, 0xF8FCFE05, 0x09FA0E0C);
	r7 = D(r7, s1_1_0, 0x0ED71107, 0xE8FC0DE9, 0x0309FC01, 0x0F001503);
	r0 = D(r0, s1_1_1, 0xFE03FB02, 0xF307F9D5, 0xFD02FDEA, 0x13E011F5);
	r1 = D(r1, s1_1_1, 0x0102070F, 0xEAFA0F28, 0x08FBFAED, 0x0BFEDCFF);
	r2 = D(r2, s1_1_1, 0x19F304F5, 0x09F6FB32, 0x18E6FDE1, 0x28E8FE46);
	r3 = D(r3, s1_1_1, 0xE0F811EE, 0x0B010508, 0xF807F70D, 0x080E0022);
	r4 = D(r4, s1_1_1, 0x06F7F5F7, 0x310115FB, 0x05080E0F, 0xFF050509);
	r5 = D(r5, s1_1_1, 0xF9F903E9, 0x00E8F82E, 0x0108FAFD, 0xF3070D07);
	r6 = D(r6, s1_1_1, 0x0900FE05, 0x0EDE1437, 0xFAFF09FC, 0xEEF60AFE);
	r7 = D(r7, s1_1_1, 0x0817FB13, 0xE908FBF3, 0x02EE03D6, 0xF901FA01);
	r0 = D(r0, s1_1_2, 0xFEF707FF, 0xFA0101F8, 0x00FB01F7, 0x0BFFF6EE);
	r1 = D(r1, s1_1_2, 0x00FFFA01, 0x13FBF811, 0x0A0001F2, 0x0B020905);
	r2 = D(r2, s1_1_2, 0x0909FA04, 0x1701F82A, 0x0300110B, 0x13020218);
	r3 = D(r3, s1_1_2, 0xF0FD101C, 0xF8FFFF03, 0xFFFC0504, 0xF9FDF6FA);
	r4 = D(r4, s1_1_2, 0x180506FE, 0x0202FE00, 0x0000E80B, 0x0303F90F);
	r5 = D(r5, s1_1_2, 0x0BFCF103, 0xEAFD0307, 0x12010200, 0xE9FDF701);
	r6 = D(r6, s1_1_2, 0x04FE040D, 0x12FCF9F7, 0xFF0006FA, 0xEBFCF400);
	r7 = D(r7, s1_1_2, 0xE103EDFB, 0xFBF2E90A, 0x2BFCFED5, 0x0C0411FB);
	r0 = D(r0, s1_2_0, 0xFE10FEF9, 0xF90101FF, 0x04010202, 0x06FD0601);
	r1 = D(r1, s1_2_0, 0x05F505FF, 0x07FAFA0B, 0x04FD04FA, 0x0AF1FC05);
	r2 = D(r2, s1_2_0, 0xF810FDF6, 0x031008FA, 0xE32005F7, 0xFB070000);
	r3 = D(r3, s1_2_0, 0xE8D51EFD, 0xFDFCFFFF, 0xF6FA0100, 0x08FD0BFF);
	r4 = D(r4, s1_2_0, 0x0EFA0600, 0x08FF0801, 0xF913F1F2, 0x0109FDFD);
	r5 = D(r5, s1_2_0, 0xFFF9F1FF, 0xD82409FF, 0x19FB0305, 0xF701FE04);
	r6 = D(r6, s1_2_0, 0xF802FF00, 0x08FE05FF, 0xFEFFFFFE, 0x07FF0405);
	r7 = D(r7, s1_2_0, 0xF409F901, 0x0000FEFD, 0xFFEE0306, 0xFFF80302);
	r0 = D(r0, s1_2_1, 0xFBFDFDFF, 0xFC030A02, 0x0800FEF9, 0xF90D08FC);
	r1 = D(r1, s1_2_1, 0x09F5020C, 0x08FF050B, 0x08FD03F6, 0x19FD0D09);
	r2 = D(r2, s1_2_1, 0xF9FFEDFF, 0x23EA0A0F, 0xD0FFF4ED, 0xFAFFF208);
	r3 = D(r3, s1_2_1, 0x1AE50B1E, 0x07FF0301, 0xF600FBFE, 0x0BF5110C);
	r4 = D(r4, s1_2_1, 0x13010709, 0x010202FD, 0xFDFBF105, 0xFE09FB03);
	r5 = D(r5, s1_2_1, 0x0A04EE04, 0xEE08F6EC, 0x12FFFEFE, 0xF603FDFE);
	r6 = D(r6, s1_2_1, 0x09FAFEFF, 0xEC14FE03, 0xF9FFFE00, 0x12F91407);
	r7 = D(r7, s1_2_1, 0xEC01F5FE, 0x0E0603FD, 0x10FAF9FE, 0x0CFD0507);
	r0 = D(r0, s1_2_2, 0xFD0F0401, 0xF80102FC, 0xF904FE00, 0xFAFDF9F2);
	r1 = D(r1, s1_2_2, 0x02FF0901, 0xF2F9F8FF, 0xFE00FBFE, 0x01FAFD07);
	r2 = D(r2, s1_2_2, 0xF800F702, 0x0DFAF80C, 0xE40EF8F9, 0xF40C0500);
	r3 = D(r3, s1_2_2, 0xE7E31B05, 0xFFFFFD01, 0xF9010101, 0x08F90D00);
	r4 = D(r4, s1_2_2, 0xF7FEF802, 0x000102FC, 0x03FF0008, 0x000103FD);
	r5 = D(r5, s1_2_2, 0xEDFEE002, 0xF60DF4FE, 0xFFF0FC05, 0xEC010501);
	r6 = D(r6, s1_2_2, 0x00020505, 0xFAF6FBE8, 0xFF00FE00, 0x000A0401);
	r7 = D(r7, s1_2_2, 0x0CF9FA0B, 0x12F8FB05, 0x0B06F806, 0x07020108);
	s0_0_0 = G[4][xy.y+0][xy.x+0]; s0_0_1 = G[4][xy.y+0][xy.x+1];
	s0_0_2 = G[4][xy.y+0][xy.x+2]; s0_1_0 = G[4][xy.y+1][xy.x+0];
	s0_1_1 = G[4][xy.y+1][xy.x+1]; s0_1_2 = G[4][xy.y+1][xy.x+2];
	s0_2_0 = G[4][xy.y+2][xy.x+0]; s0_2_1 = G[4][xy.y+2][xy.x+1];
	s0_2_2 = G[4][xy.y+2][xy.x+2]; s1_0_0 = G[5][xy.y+0][xy.x+0];
	s1_0_1 = G[5][xy.y+0][xy.x+1]; s1_0_2 = G[5][xy.y+0][xy.x+2];
	s1_1_0 = G[5][xy.y+1][xy.x+0]; s1_1_1 = G[5][xy.y+1][xy.x+1];
	s1_1_2 = G[5][xy.y+1][xy.x+2]; s1_2_0 = G[5][xy.y+2][xy.x+0];
	s1_2_1 = G[5][xy.y+2][xy.x+1]; s1_2_2 = G[5][xy.y+2][xy.x+2];
	r0 = D(r0, s0_0_0, 0xF0FB0005, 0x0603FFFF, 0xFF00FE01, 0xFE060306);
	r1 = D(r1, s0_0_0, 0xEF05F904, 0x03FB00FF, 0xFE020201, 0x04FA030B);
	r2 = D(r2, s0_0_0, 0x0205FA00, 0xFC04FB15, 0x06060D0A, 0xFF0005FF);
	r3 = D(r3, s0_0_0, 0x11100BEC, 0xF60002FF, 0x060102FE, 0xF8FCFCFF);
	r4 = D(r4, s0_0_0, 0xFEFE0605, 0x06FBF8FE, 0x06F50306, 0xF800FA03);
	r5 = D(r5, s0_0_0, 0xF4FB0605, 0xF8000908, 0x14FB0800, 0x080103FD);
	r6 = D(r6, s0_0_0, 0x09FD04FD, 0xFCFFFD04, 0x0700FEFF, 0xF6000408);
	r7 = D(r7, s0_0_0, 0xFF05F6FF, 0x0400FEFE, 0x0202FB08, 0xFF01FE01);
	r0 = D(r0, s0_0_1, 0x15F10209, 0x080F0300, 0xF60DF601, 0xF41A0CF9);
	r1 = D(r1, s0_0_1, 0xFA060203, 0x02EFF504, 0x0203FE01, 0xF7E4FEFE);
	r2 = D(r2, s0_0_1, 0xE51200F8, 0xF50809FB, 0x0B0F0902, 0xEF0DFCF8);
	r3 = D(r3, s0_0_1, 0x0A0504F6, 0x04060A06, 0x0005FFFF, 0x02FEF2F5);
	r4 = D(r4, s0_0_1, 0x050EF7FC, 0x021803F8, 0xF8F8F800, 0x0805FD02);
	r5 = D(r5, s0_0_1, 0x02FF060C, 0xFD0908F7, 0xD5DAFAFD, 0xF8FFF8FE);
	r6 = D(r6, s0_0_1, 0x00F5FCFE, 0xF00E07FB, 0x0111FAFF, 0xEF01F9F7);
	r7 = D(r7, s0_0_1, 0xFC170E04, 0xF802FB05, 0xEF08EDFD, 0xE61BFD09);
	r0 = D(r0, s0_0_2, 0x020FF6F7, 0x07FA02FD, 0xFE060205, 0x010900FF);
	r1 = D(r1, s0_0_2, 0x0104FBFF, 0x0105FF03, 0x010A0201, 0x040802FC);
	r2 = D(r2, s0_0_2, 0xFC13F4FA, 0xF704E4F5, 0xFC36FB08, 0xF8120C06);
	r3 = D(r3, s0_0_2, 0x0912FEE9, 0xFF010500, 0x0203FE03, 0x07EC01FD);
	r4 = D(r4, s0_0_2, 0xFF1B01FD, 0xFF0CF8FF, 0x0D1F01FA, 0x0003F8FD);
	r5 = D(r5, s0_0_2, 0x00E30409, 0xF814F419, 0x120DF111, 0x0204FC04);
	r6 = D(r6, s0_0_2, 0xFE0008FC, 0x040F0002, 0x01010401, 0x0311FB01);
	r7 = D(r7, s0_0_2, 0x01E4020A, 0xF5F2FDFB, 0xF005FF0F, 0x00DE0A01);
	r0 = D(r0, s0_1_0, 0xE9F8F1FF, 0xFBFDF906, 0x2C03FDF6, 0x23021AFE);
	r1 = D(r1, s0_1_0, 0x03010E04, 0xE7010204, 0x04FF09FE, 0xD7FD0D02);
	r2 = D(r2, s0_1_0, 0x07FA0BF9, 0xF60213FE, 0xC4EC1B05, 0xF60318FA);
	r3 = D(r3, s0_1_0, 0x050B0EEF, 0x05010002, 0xEEFFF604, 0x0D060D02);
	r4 = D(r4, s0_1_0, 0xFF05FAFF, 0x8101D401, 0xBEF6FF00, 0x0EF50A10);
	r5 = D(r5, s0_1_0, 0xB404FF06, 0xE0FB0FFE, 0xD50A0006, 0x0804F3F9);
	r6 = D(r6, s0_1_0, 0x06FD0D00, 0x0F021BFD, 0x5AFE1101, 0x080811FD);
	r7 = D(r7, s0_1_0, 0x050003F3, 0xF8FCE601, 0x0E01140C, 0xF704FA0C);
	r0 = D(r0, s0_1_1, 0x1EF9200A, 0x0A05C80F, 0xE203D608, 0xDC07CFF4);
	r1 = D(r1, s0_1_1, 0x060939F5, 0x151314F9, 0x03FEFAEE, 0xF809CDF1);
	r2 = D(r2, s0_1_1, 0x05F821DE, 0x1BF501ED, 0x2AE2EDF6, 0x171AF2D7);
	r3 = D(r3, s0_1_1, 0xFAFFEBFB, 0x2902C403, 0xF00AEDFE, 0xF30EC2FA);
	r4 = D(r4, s0_1_1, 0xE6072AE7, 0x0E191902, 0x2BD93708, 0x12EF29EE);
	r5 = D(r5, s0_1_1, 0x01083A14, 0x0AF2FDE8, 0xD1070A07, 0x160431ED);
	r6 = D(r6, s0_1_1, 0xF7F4F4FE, 0x2503E0E7, 0x0A10E100, 0x240310DD);
	r7 = D(r7, s0_1_1, 0x021020FE, 0xE90A0613, 0xE2FACEEB, 0xE207F30D);
	r0 = D(r0, s0_1_2, 0x0D08DFF1, 0x0701EE05, 0xF7070804, 0x00E40A0C);
	r1 = D(r1, s0_1_2, 0xFE020201, 0xFE14FFF5, 0xFBFE00FE, 0x04090AFE);
	r2 = D(r2, s0_1_2, 0xFBECF908, 0x34F692FC, 0x070508F5, 0xFD0B15EB);
	r3 = D(r3, s0_1_2, 0x080FF6EC, 0xFEFD0203, 0x080809FC, 0xF9180812);
	r4 = D(r4, s0_1_2, 0x08FBECF8, 0x02FC01FF, 0x05F7E405, 0x06031000);
	r5 = D(r5, s0_1_2, 0xFF0CFA04, 0x05000ADE, 0x000E08FE, 0x05FAFCFE);
	r6 = D(r6, s0_1_2, 0x010100FB, 0x02070803, 0xFDFD0501, 0x0812FFFD);
	r7 = D(r7, s0_1_2, 0x00F2F003, 0x0A04E905, 0xFF1300FE, 0xF81C15F5);
	r0 = D(r0, s0_2_0, 0xF2FEF207, 0x0600F700, 0x0EFE06F6, 0xF00318FE);
	r1 = D(r1, s0_2_0, 0xFBFF07FB, 0x1A0005FD, 0xF10108FB, 0x0D0100FF);
	r2 = D(r2, s0_2_0, 0xFD00F903, 0xE704F9F4, 0xE003F90E, 0xFF03EAFC);
	r3 = D(r3, s0_2_0, 0xD806DD06, 0xFC020003, 0x0A0100FD, 0xF7021301);
	r4 = D(r4, s0_2_0, 0x0A020DF6, 0x14FEFDFF, 0xDE04F90B, 0xE9FFF80B);
	r5 = D(r5, s0_2_0, 0x03FFFA05, 0x0705F9F4, 0x01F91402, 0x0002F800);
	r6 = D(r6, s0_2_0, 0xFCFF0303, 0xFC0519FD, 0x07000001, 0xFCFDFDF5);
	r7 = D(r7, s0_2_0, 0x0901FAFC, 0xFCFC00FC, 0x01FE06FA, 0xED02060D);
	r0 = D(r0, s0_2_1, 0x0AFD0403, 0x05090A07, 0xF6FE1900, 0xE908F903);
	r1 = D(r1, s0_2_1, 0xFCF805F7, 0x1608D9F6, 0xFD005003, 0x0C0018EF);
	r2 = D(r2, s0_2_1, 0xFF02F207, 0x010314DA, 0x00DEF6FA, 0xF9F4E1F3);
	r3 = D(r3, s0_2_1, 0x0C0A0604, 0xF801FF01, 0x05050601, 0x05FE0EE1);
	r4 = D(r4, s0_2_1, 0x16FFFBFA, 0xFD030F02, 0xEAF604F9, 0xF7FB01F8);
	r5 = D(r5, s0_2_1, 0x0F02D70B, 0x10FAFFF3, 0x09010B00, 0xFD04F9F9);
	r6 = D(r6, s0_2_1, 0xFEFC0A01, 0xF908F2FB, 0x0003FE01, 0xF2FA29EA);
	r7 = D(r7, s0_2_1, 0x070B04FD, 0xF3F9FB01, 0xFB0117F2, 0xFB01F20E);
	r0 = D(r0, s0_2_2, 0x0309FDF8, 0xFD0DFD01, 0x010403FD, 0xF9FB07FE);
	r1 = D(r1, s0_2_2, 0x020100FF, 0x03F7FDFD, 0xFE010BFD, 0x0803F1FA);
	r2 = D(r2, s0_2_2, 0xFE04F500, 0xF7150FEE, 0xFF090D04, 0xFEFD02FE);
	r3 = D(r3, s0_2_2, 0x02090E0C, 0x03FEFB00, 0x0301F9FD, 0xFA0401F4);
	r4 = D(r4, s0_2_2, 0x03040102, 0x0003FC00, 0xFE00F40A, 0x0604FCFD);
	r5 = D(r5, s0_2_2, 0x0100F603, 0x05FE0700, 0x08FFF4F9, 0x02FEF800);
	r6 = D(r6, s0_2_2, 0x02000DFF, 0xF9FA0C07, 0x01FE0100, 0x0305F5F7);
	r7 = D(r7, s0_2_2, 0x03F6EDFC, 0xF8FFF203, 0xFE08FBFB, 0x04FDF302);
	r0 = D(r0, s1_0_0, 0x05FC10FE, 0xF901090A, 0xFF120C04, 0xF71D06F3);
	r1 = D(r1, s1_0_0, 0x0DF4F803, 0x01F2F900, 0x000BFFFD, 0xF6090002);
	r2 = D(r2, s1_0_0, 0x07F101FF, 0xF903EEF0, 0x071A03E9, 0x08100F02);
	r3 = D(r3, s1_0_0, 0x1AC1EBF9, 0x00F70CFC, 0x02F30104, 0xFB1C0706);
	r4 = D(r4, s1_0_0, 0x040502FF, 0xF7060AF7, 0x02DFFEF8, 0xFD11D4FF);
	r5 = D(r5, s1_0_0, 0xFBDBF5F5, 0xE223E405, 0x0AE018F4, 0xF313FFFB);
	r6 = D(r6, s1_0_0, 0x0507FDFB, 0xF60EE4F7, 0xFE03FB03, 0xF83205FB);
	r7 = D(r7, s1_0_0, 0x06E90E07, 0x04091BFD, 0xEBF7FD07, 0xF208E700);
	r0 = D(r0, s1_0_1, 0xF91707FB, 0x00FC05F7, 0x0102FB07, 0xF80C0EF9);
	r1 = D(r1, s1_0_1, 0x0306E701, 0x0307FA03, 0xFF0203FF, 0x0D08F20B);
	r2 = D(r2, s1_0_1, 0xFAF7E60D, 0xF0E7DEF4, 0xE43C0BF1, 0xF4061CF7);
	r3 = D(r3, s1_0_1, 0x13FEDCF2, 0xFBFF0AFA, 0xFE00FFFA, 0x0014FE08);
	r4 = D(r4, s1_0_1, 0x051FF007, 0xFE1CFF04, 0x09F7FC0A, 0xFA2B04F3);
	r5 = D(r5, s1_0_1, 0xFEDAFEF2, 0xF2080EF4, 0x0C161CEF, 0x05EB0EFB);
	r6 = D(r6, s1_0_1, 0x01220200, 0xFA2217F4, 0xFEF2FF04, 0x150BEF05);
	r7 = D(r7, s1_0_1, 0x06E908FD, 0x13170910, 0xFD0A0D0A, 0xEDF3E508);
	r0 = D(r0, s1_0_2, 0x01FA0BFF, 0xFE13FD08, 0xFDF50300, 0xFDD60206);
	r1 = D(r1, s1_0_2, 0x02E7FF00, 0x000BF906, 0xFFF602FD, 0xFF09F708);
	r2 = D(r2, s1_0_2, 0x04D90EFB, 0x0EF62781, 0x071A05ED, 0x0010FCFE);
	r3 = D(r3, s1_0_2, 0x16FFE5F3, 0xFF0F0202, 0xFF00FFFA, 0x07090CFE);
	r4 = D(r4, s1_0_2, 0xFAFAFDFD, 0x0AFF08FF, 0x08F90CF8, 0x060FF6F0);
	r5 = D(r5, s1_0_2, 0xF7E60201, 0x03A7E800, 0x0E02FF06, 0xFEE703FF);
	r6 = D(r6, s1_0_2, 0x020B01F7, 0xFDFB0303, 0xFFF20102, 0x061008F1);
	r7 = D(r7, s1_0_2, 0xFFF3FAFC, 0x01ED130D, 0xEF1DF602, 0x0B1905EF);
	r0 = D(r0, s1_1_0, 0x04F20FF9, 0xFF0C0805, 0xF7130703, 0xEF0CF40D);
	r1 = D(r1, s1_1_0, 0xF8FEF8FC, 0xFE0EF305, 0x00FD06FE, 0x00FB0EF6);
	r2 = D(r2, s1_1_0, 0x04010302, 0xF914FF01, 0x03B31CF2, 0x12E705EF);
	r3 = D(r3, s1_1_0, 0x0FF402F6, 0x03FC0602, 0x02EBFD01, 0xFE1EF1FF);
	r4 = D(r4, s1_1_0, 0x03FAFBFF, 0xFE09180C, 0x05E624EF, 0xF0FAE7FA);
	r5 = D(r5, s1_1_0, 0x05EFFAFA, 0x10F506E8, 0xFC04F803, 0x0B0315FB);
	r6 = D(r6, s1_1_0, 0x000002F5, 0xF40FFC0A, 0x010BF301, 0xF82DF4FF);
	r7 = D(r7, s1_1_0, 0x13D70808, 0x031C1AF7, 0xFA00F00E, 0x11F70701);
	r0 = D(r0, s1_1_1, 0xED0EFB13, 0xF60DF90E, 0x03FBFF1C, 0x0110130C);
	r1 = D(r1, s1_1_1, 0xFEE206F2, 0x07FCF611, 0x050B0E18, 0xF323EB27);
	r2 = D(r2, s1_1_1, 0x0902E7FD, 0xE51BF813, 0xEF20E221, 0x17F9ECFE);
	r3 = D(r3, s1_1_1, 0x0208F004, 0x0214FBFF, 0xFF05F50B, 0xF5142420);
	r4 = D(r4, s1_1_1, 0xEAFAF50B, 0xF7F11403, 0xF2F1FBEE, 0x101D17F6);
	r5 = D(r5, s1_1_1, 0x05DEF4E7, 0x0811DE08, 0xED37F115, 0x06E112E2);
	r6 = D(r6, s1_1_1, 0xF41C03FD, 0x19EF1707, 0x04F71205, 0xEF050E06);
	r7 = D(r7, s1_1_1, 0xF9F30FE3, 0xF1DCD2F9, 0x08E73803, 0x0742F507);
	r0 = D(r0, s1_1_2, 0x02180D09, 0x02141000, 0xFFF30DFC, 0xEBC5DC0D);
	r1 = D(r1, s1_1_2, 0xFEE5EEFD, 0x10DEE80D, 0x04FE0702, 0xF7D518F7);
	r2 = D(r2, s1_1_2, 0xF8E713F8, 0xE3F90BDE, 0x0A0F1A03, 0x08FC0FFD);
	r3 = D(r3, s1_1_2, 0x0AFC08EE, 0x01FBFA00, 0x03F908F8, 0x00F2EF11);
	r4 = D(r4, s1_1_2, 0xF4EB15FC, 0xFEF9EF08, 0xF92DDC0F, 0xFE19FCFA);
	r5 = D(r5, s1_1_2, 0x04EF09F1, 0xFBEF1007, 0x0537140A, 0xF3E9FE0A);
	r6 = D(r6, s1_1_2, 0x000A05F8, 0xFBF4DF0A, 0xFBEF02FD, 0x0702F114);
	r7 = D(r7, s1_1_2, 0xFCE9F102, 0xFDB4F301, 0x17171EEC, 0x0902FCFE);
	r0 = D(r0, s1_2_0, 0xFEFFFEF9, 0x02F403FF, 0xFB0DFD07, 0xF812020C);
	r1 = D(r1, s1_2_0, 0x04F301F3, 0xFF0EF710, 0x01030200, 0x0402FF02);
	r2 = D(r2, s1_2_0, 0xFAF103FB, 0x07EF16EC, 0x06F407E9, 0x06DDF5FC);
	r3 = D(r3, s1_2_0, 0x12E2FAE6, 0xFE01FF01, 0xFEF8FE04, 0x060901FA);
	r4 = D(r4, s1_2_0, 0x03FAF807, 0x030A00FE, 0xFDCEF4F7, 0xF6061005);
	r5 = D(r5, s1_2_0, 0x00F30D01, 0xF700FB05, 0x08030204, 0x07D20600);
	r6 = D(r6, s1_2_0, 0x00FFFFFF, 0xF508FB12, 0x01F90000, 0xFB0E0E03);
	r7 = D(r7, s1_2_0, 0xFDE2EE06, 0xFAF2FEFF, 0xFCDCDC0E, 0xFE2D0B06);
	r0 = D(r0, s1_2_1, 0xFE05DF0F, 0x0001FF08, 0x05F90EFF, 0xF5D719FA);
	r1 = D(r1, s1_2_1, 0x06FBFB08, 0x05F2ED02, 0x00FFFBFE, 0x0809E80C);
	r2 = D(r2, s1_2_1, 0xFFFB06FE, 0xF9EB0B37, 0xE627F004, 0x04031401);
	r3 = D(r3, s1_2_1, 0x12DAF504, 0xFF0302FE, 0xFBFF0301, 0x0512F005);
	r4 = D(r4, s1_2_1, 0xFDEFFC0B, 0xFA120E00, 0xF7FCFDF4, 0xFA18F20D);
	r5 = D(r5, s1_2_1, 0x08EAE600, 0xF921010C, 0xFA3BF608, 0xFB0E0AF6);
	r6 = D(r6, s1_2_1, 0x0007FD00, 0xF5ED19FA, 0xFDF605FF, 0xFD1BF504);
	r7 = D(r7, s1_2_1, 0x01DC10FC, 0xF8D70605, 0xFE050C0B, 0xF023FD06);
	r0 = D(r0, s1_2_2, 0x03080F03, 0x040A0DFD, 0xF9E507FF, 0x01EDF8F8);
	r1 = D(r1, s1_2_2, 0x03F7F207, 0x05E1EA00, 0xFF0DFD00, 0xFDF605FA);
	r2 = D(r2, s1_2_2, 0xF9D3FC04, 0x27D11D1B, 0x021A11F6, 0x03E51505);
	r3 = D(r3, s1_2_2, 0x0D05D7FC, 0xFFFEFD01, 0x01FAFFFF, 0x101E2008);
	r4 = D(r4, s1_2_2, 0xFB05FBFF, 0xFC010901, 0x04DCF40C, 0xFF1404FA);
	r5 = D(r5, s1_2_2, 0x0208F7FD, 0x040FF4F8, 0x072208FE, 0xFFE70100);
	r6 = D(r6, s1_2_2, 0x04F303FF, 0xFDEBE7F8, 0x00F804FE, 0x03201807);
	r7 = D(r7, s1_2_2, 0x03D3FA03, 0xF8C40601, 0x00F003FB, 0x070CFFFE);
	s0_0_0 = G[6][xy.y+0][xy.x+0]; s0_0_1 = G[6][xy.y+0][xy.x+1];
	s0_0_2 = G[6][xy.y+0][xy.x+2]; s0_1_0 = G[6][xy.y+1][xy.x+0];
	s0_1_1 = G[6][xy.y+1][xy.x+1]; s0_1_2 = G[6][xy.y+1][xy.x+2];
	s0_2_0 = G[6][xy.y+2][xy.x+0]; s0_2_1 = G[6][xy.y+2][xy.x+1];
	s0_2_2 = G[6][xy.y+2][xy.x+2]; s1_0_0 = G[7][xy.y+0][xy.x+0];
	s1_0_1 = G[7][xy.y+0][xy.x+1]; s1_0_2 = G[7][xy.y+0][xy.x+2];
	s1_1_0 = G[7][xy.y+1][xy.x+0]; s1_1_1 = G[7][xy.y+1][xy.x+1];
	s1_1_2 = G[7][xy.y+1][xy.x+2]; s1_2_0 = G[7][xy.y+2][xy.x+0];
	s1_2_1 = G[7][xy.y+2][xy.x+1]; s1_2_2 = G[7][xy.y+2][xy.x+2];
	r0 = D(r0, s0_0_0, 0xF806F8F9, 0x0BFAF9F7, 0xF40D09FF, 0x07150803);
	r1 = D(r1, s0_0_0, 0x06FDFBFA, 0xFCF803FE, 0x02090902, 0xEE0FE4F8);
	r2 = D(r2, s0_0_0, 0x110217F5, 0xFA1FE202, 0xF81A1909, 0x091F14F9);
	r3 = D(r3, s0_0_0, 0x07EAE6F4, 0x02021302, 0x07FBFEFE, 0x0AEE24F7);
	r4 = D(r4, s0_0_0, 0xFEFCF9FA, 0xF900FC0A, 0x06FF12FD, 0xFE05CAFE);
	r5 = D(r5, s0_0_0, 0x06F1F8FC, 0x061CFD0F, 0xC6DDB5F4, 0x04F7F40C);
	r6 = D(r6, s0_0_0, 0xFB07F704, 0xFF0A17FD, 0x03050001, 0xFB1BF309);
	r7 = D(r7, s0_0_0, 0x0B0814FB, 0xF0082304, 0x061709FD, 0xFA13FBFB);
	r0 = D(r0, s0_0_1, 0x06040807, 0x07F405F6, 0xEF0FF6FB, 0xF304FCF5);
	r1 = D(r1, s0_0_1, 0xFFF6010E, 0x02FC0208, 0x0105FCFC, 0x07ED00F6);
	r2 = D(r2, s0_0_1, 0xF90CEF19, 0x18173AE8, 0x1A23EC0A, 0xF40A07F6);
	r3 = D(r3, s0_0_1, 0x0910EBF3, 0x03FA09FA, 0x0400F203, 0xF8EF16F9);
	r4 = D(r4, s0_0_1, 0x08FCE509, 0x03070505, 0x0402091A, 0x13011014);
	r5 = D(r5, s0_0_1, 0x06E81EE7, 0xF80A00F8, 0xEC122AF5, 0x05ED150F);
	r6 = D(r6, s0_0_1, 0x040D0610, 0xFE00FAFA, 0x010B0800, 0x00041B28);
	r7 = D(r7, s0_0_1, 0xEDFAF3F3, 0xF5FDFF14, 0xF51F0AF1, 0xE40AF9FA);
	r0 = D(r0, s0_0_2, 0x02FC0501, 0x0302FEF7, 0x02FF03FE, 0xFAF4FF03);
	r1 = D(r1, s0_0_2, 0x0300FDFF, 0x03F4F400, 0xFF050101, 0x08FA0204);
	r2 = D(r2, s0_0_2, 0xFD0012F7, 0x0CF82AFB, 0x00060B11, 0xFCF90C09);
	r3 = D(r3, s0_0_2, 0x0FF9FBF5, 0xFFFEFD05, 0x050207FA, 0xFEEEFE01);
	r4 = D(r4, s0_0_2, 0x050705F9, 0xFD000109, 0x0510F102, 0x01FAFB03);
	r5 = D(r5, s0_0_2, 0x02ED0306, 0xFA012020, 0x020D1012, 0x03FDFA09);
	r6 = D(r6, s0_0_2, 0x030808FA, 0xFCFBF602, 0x01020000, 0xFF0906F7);
	r7 = D(r7, s0_0_2, 0xFEEBF7F5, 0xF715F704, 0xFBF7FDF9, 0xFCE61111);
	r0 = D(r0, s0_1_0, 0x020709EE, 0x06FA0407, 0xFF0AFE0B, 0x04010810);
	r1 = D(r1, s0_1_0, 0x0513F3F9, 0x04060A01, 0x00FE0EFC, 0xF902FAEC);
	r2 = D(r2, s0_1_0, 0x12E413F6, 0x0EFE00FB, 0xDBE517D5, 0x090800FA);
	r3 = D(r3, s0_1_0, 0x06F204F4, 0xFEFCFBFF, 0x070202FD, 0x060DE70F);
	r4 = D(r4, s0_1_0, 0x10F801EF, 0x08F705ED, 0xF9FB0FEF, 0xF4F2E40C);
	r5 = D(r5, s0_1_0, 0xFCEA000B, 0x071204F7, 0xDB13D1F2, 0x0EFF100B);
	r6 = D(r6, s0_1_0, 0xEFF7FAF9, 0xF4FCF60D, 0x1408F806, 0xF60AFC15);
	r7 = D(r7, s0_1_0, 0x1FED07F2, 0xF01203F0, 0xF705D90D, 0xDE10F5FF);
	r0 = D(r0, s0_1_1, 0x10E8F614, 0x0DF311FC, 0xF017FB0C, 0xE3FE3DFB);
	r1 = D(r1, s0_1_1, 0x020E08FA, 0x12FD0AE7, 0x04080A17, 0x0A07D6ED);
	r2 = D(r2, s0_1_1, 0xF7F8F120, 0x3714FD12, 0x25E2FD40, 0x02FE021C);
	r3 = D(r3, s0_1_1, 0x06F90DFC, 0x01050204, 0x0503ED0A, 0x010815EB);
	r4 = D(r4, s0_1_1, 0xF9FDE3EB, 0x06F80DF8, 0x1CFB261F, 0x0CF60303);
	r5 = D(r5, s0_1_1, 0xF9071008, 0x0015D41A, 0xFC0EF3B3, 0x06F40914);
	r6 = D(r6, s0_1_1, 0x02050DF0, 0x0AFA31F8, 0x04070403, 0x15140EF6);
	r7 = D(r7, s0_1_1, 0xEA01DE01, 0xDDF92ACD, 0xE51B0A08, 0xF112D505);
	r0 = D(r0, s0_1_2, 0x050CFFFD, 0x0AF0F904, 0xFA0A12FA, 0xFFF2F914);
	r1 = D(r1, s0_1_2, 0xFC06F80B, 0x02FDF104, 0xFE0004FF, 0x0D0BFCE8);
	r2 = D(r2, s0_1_2, 0xFDE816F3, 0x0B211CE9, 0xFF0506FF, 0xF91004E4);
	r3 = D(r3, s0_1_2, 0x0EF502E1, 0xFDFDFE04, 0x030C01FE, 0x0A0BF700);
	r4 = D(r4, s0_1_2, 0x040009E0, 0xFC04FD0F, 0x01F6DE25, 0x0502F602);
	r5 = D(r5, s0_1_2, 0x03FF03EF, 0x0017FEF7, 0x0A15EE02, 0x00FC000C);
	r6 = D(r6, s0_1_2, 0xFF1607FB, 0xF9ECFA25, 0xFFF901FF, 0x0418EF23);
	r7 = D(r7, s0_1_2, 0xFD02FCF9, 0x01FAED0D, 0x0DFF00F3, 0x001308EB);
	r0 = D(r0, s0_2_0, 0xFD0505FB, 0x06060701, 0x03040F01, 0xFAF4F604);
	r1 = D(r1, s0_2_0, 0x00010DFF, 0x03FFFB0C, 0xF7FD03FD, 0x0DFD09F2);
	r2 = D(r2, s0_2_0, 0x03FFFAFF, 0x0F0E46F0, 0xC51506FF, 0x040A0903);
	r3 = D(r3, s0_2_0, 0x070409E0, 0xFF00FF02, 0x0805FE04, 0xF8FA12FD);
	r4 = D(r4, s0_2_0, 0x06F40006, 0xFDFD0B08, 0xE204F8FB, 0xE90CFAF4);
	r5 = D(r5, s0_2_0, 0x090AFE0C, 0xEEFCDC08, 0xF0F0FA02, 0x0507FF00);
	r6 = D(r6, s0_2_0, 0xFEFEFE00, 0xFDFBFD01, 0x00010100, 0xF4030FF3);
	r7 = D(r7, s0_2_0, 0x070AEB00, 0xFC090202, 0xFD081202, 0xF9080703);
	r0 = D(r0, s0_2_1, 0x0FF90300, 0x02FA0801, 0xF601FD07, 0xE80804F2);
	r1 = D(r1, s0_2_1, 0xFFFD050D, 0x070B16F4, 0x01FF0603, 0x0EE6F90F);
	r2 = D(r2, s0_2_1, 0xFCF30107, 0x00E30FFB, 0xFB0C12F2, 0xFD1A0AFD);
	r3 = D(r3, s0_2_1, 0x0AF70BEC, 0xFF030406, 0x0004FAFC, 0x06EFF610);
	r4 = D(r4, s0_2_1, 0x01F3FA06, 0x00F80C09, 0xFA000AEB, 0x050C15F5);
	r5 = D(r5, s0_2_1, 0x05FF0608, 0x0806F2F5, 0x03000AF8, 0x000AF3FE);
	r6 = D(r6, s0_2_1, 0x01FE0001, 0xF61518D5, 0x01FFFB00, 0xFEF0EC08);
	r7 = D(r7, s0_2_1, 0xFD0DF4EC, 0xF70907FE, 0xF5F10217, 0xFB01F300);
	r0 = D(r0, s0_2_2, 0x07FC02F5, 0x01F90204, 0xFD080103, 0xFD00FF02);
	r1 = D(r1, s0_2_2, 0x05F90201, 0x0101FFF5, 0xFF0303FA, 0xFDFD0902);
	r2 = D(r2, s0_2_2, 0x02FBFA02, 0x060103F9, 0x05080606, 0xFF0319E5);
	r3 = D(r3, s0_2_2, 0x0D01FFFC, 0x01FF0500, 0x0204FE00, 0x02F60202);
	r4 = D(r4, s0_2_2, 0xFAFCFFFE, 0xFFFE04FE, 0x0C0408F6, 0x02FE0102);
	r5 = D(r5, s0_2_2, 0xFFFB0405, 0x051EF702, 0x05E20B03, 0x04F6FD04);
	r6 = D(r6, s0_2_2, 0x010001FD, 0xFB050700, 0x00010002, 0x06FFF80F);
	r7 = D(r7, s0_2_2, 0x0001FEEF, 0xFB090403, 0xFC09060C, 0x03030507);
	r0 = D(r0, s1_0_0, 0x09FB1507, 0xF80BFFFE, 0x070207F9, 0xF40AF2F7);
	r1 = D(r1, s1_0_0, 0x06FF0A02, 0x0E050306, 0xFC0200F6, 0x010A0103);
	r2 = D(r2, s1_0_0, 0xF500FCFE, 0xE7EEF5F2, 0xF90301F4, 0x0502FDEF);
	r3 = D(r3, s1_0_0, 0x00F308FE, 0xFC06FE06, 0x000401FE, 0x01090414);
	r4 = D(r4, s1_0_0, 0x00F40704, 0x08F9F30A, 0x03061005, 0xFA01EEF2);
	r5 = D(r5, s1_0_0, 0xF108F5F8, 0xEFF0FAEF, 0x0AF91021, 0xEFF6FC00);
	r6 = D(r6, s1_0_0, 0x06FDFFFE, 0x010DFEFA, 0xFFFDFCFC, 0xFA03FC11);
	r7 = D(r7, s1_0_0, 0xF4FFFBF5, 0x00FE00F2, 0x001801EC, 0xFDF60000);
	r0 = D(r0, s1_0_1, 0xF907F100, 0xFAFEFFF0, 0x040A0208, 0xF8F9F606);
	r1 = D(r1, s1_0_1, 0xFBF50004, 0x05F80DFC, 0xFE01FDFE, 0x0510FE0C);
	r2 = D(r2, s1_0_1, 0xEF0DDEF7, 0xF42EF6EA, 0xEF10F119, 0xF416EAEE);
	r3 = D(r3, s1_0_1, 0xE9FCF8FD, 0xF8FAF9F1, 0x0906FC03, 0x07F61909);
	r4 = D(r4, s1_0_1, 0x0009F40B, 0xFAF900F8, 0x0000FFF1, 0xF2FCFD0C);
	r5 = D(r5, s1_0_1, 0x03FB03E9, 0x0EF3032E, 0x24F713F6, 0x09FB0803);
	r6 = D(r6, s1_0_1, 0xFEFEF707, 0xF2F4FAFE, 0x00FF02FD, 0x00ED11FF);
	r7 = D(r7, s1_0_1, 0x060205EE, 0x0AF9FDF5, 0x14FDFAF8, 0x07F5FDE5);
	r0 = D(r0, s1_0_2, 0x03FD0101, 0x000607F9, 0xFFFF05F5, 0x0500F5FE);
	r1 = D(r1, s1_0_2, 0x02F80104, 0xFE070204, 0x00FFFCFE, 0xFFEF0700);
	r2 = D(r2, s1_0_2, 0x09F2FEED, 0x180FBAD8, 0x0BFBF2FD, 0xF8F81AF5);
	r3 = D(r3, s1_0_2, 0xFDF618F6, 0xFF05FE06, 0xFDFE02FF, 0xFBF80003);
	r4 = D(r4, s1_0_2, 0xF6EA07FB, 0x0904F700, 0xFE0DEF05, 0x0701F505);
	r5 = D(r5, s1_0_2, 0xF4070AF6, 0xF2FE04F3, 0xF30C0912, 0xFFF90206);
	r6 = D(r6, s1_0_2, 0xFDFD0300, 0x080FFB00, 0xFEFF00FF, 0x00F4FE06);
	r7 = D(r7, s1_0_2, 0xFF081002, 0x0A16FB11, 0xEE0408EB, 0xF600F202);
	r0 = D(r0, s1_1_0, 0x180408FB, 0xF006F71A, 0xF806F2EB, 0xE9FEF4ED);
	r1 = D(r1, s1_1_0, 0xF7F6FE02, 0xFE09F304, 0x03FFFE07, 0x06FD0DE1);
	r2 = D(r2, s1_1_0, 0xFE080514, 0xF00809DF, 0x14F011B5, 0x03FB150F);
	r3 = D(r3, s1_1_0, 0xFAF70DEA, 0x06FFFC05, 0x0101FB04, 0xF20AFEEE);
	r4 = D(r4, s1_1_0, 0xF30408FC, 0xF2000412, 0x05FC0EF8, 0x14F01609);
	r5 = D(r5, s1_1_0, 0x04040118, 0xFE030804, 0xF8FFF9CB, 0xECF80501);
	r6 = D(r6, s1_1_0, 0x07FE0CEA, 0xEBFFF1F9, 0xF701FA02, 0xE3F8FDD3);
	r7 = D(r7, s1_1_0, 0x02FE0108, 0x040D05FC, 0xF600F1FD, 0x16F9FBE4);
	r0 = D(r0, s1_1_1, 0xEE01040F, 0xFA181617, 0x0CF9FC06, 0x23FFF1CE);
	r1 = D(r1, s1_1_1, 0x07F3F7F6, 0xF4FBE5FC, 0x03010526, 0xDC00EB20);
	r2 = D(r2, s1_1_1, 0x1A0109EF, 0xDD05F419, 0xFBE60F03, 0xF8ECEFF3);
	r3 = D(r3, s1_1_1, 0xFDF216E9, 0x05FE00FF, 0xF8010035, 0xE708E9FF);
	r4 = D(r4, s1_1_1, 0xDC02F20D, 0x1DFEF0E5, 0xFB02F90C, 0x0E0B01FB);
	r5 = D(r5, s1_1_1, 0x081D0A08, 0xECDFF8E7, 0xEEFEEE15, 0xF317F5EF);
	r6 = D(r6, s1_1_1, 0x00FEFF30, 0x1BF4D7D2, 0x040101F7, 0xEF0BEFF1);
	r7 = D(r7, s1_1_1, 0x0DF8F0D7, 0xE4F9EDD9, 0x0403EF02, 0x0CF806FF);
	r0 = D(r0, s1_1_2, 0x0607F5F7, 0x050F0107, 0xFE050904, 0xF504FE07);
	r1 = D(r1, s1_1_2, 0x02EB0306, 0x0B05F30A, 0x03FCFEFF, 0x18FBF707);
	r2 = D(r2, s1_1_2, 0x0607F8F6, 0x340C07F9, 0x2808E8F6, 0x24F3040B);
	r3 = D(r3, s1_1_2, 0x020F02ED, 0xFC010505, 0x050503FB, 0x02EEFAFE);
	r4 = D(r4, s1_1_2, 0x25F4F701, 0x05FEFC01, 0xE6FAFA10, 0xFF01F8FE);
	r5 = D(r5, s1_1_2, 0xE81A0A0B, 0x19E2E4FF, 0x220BF1EE, 0xFBFB0D02);
	r6 = D(r6, s1_1_2, 0x0AFDFFFB, 0x0BF9FC0B, 0x00000001, 0x09D904F9);
	r7 = D(r7, s1_1_2, 0xF7F50813, 0xF2FC03FC, 0x00EC0A0E, 0xE00706FD);
	r0 = D(r0, s1_2_0, 0x13FFFA02, 0x0AF90909, 0xF802FFEF, 0xED0108FD);
	r1 = D(r1, s1_2_0, 0x15F404FE, 0xF0FBFDF3, 0xF80101FB, 0xF7FF0305);
	r2 = D(r2, s1_2_0, 0x0A01FF07, 0x010E0BF6, 0x200202FD, 0xFD14F7F3);
	r3 = D(r3, s1_2_0, 0x10DB0011, 0xFFFDFF00, 0x02FE00FE, 0x00FD0208);
	r4 = D(r4, s1_2_0, 0xEE0002FF, 0xFDF4FEFE, 0x0FFEFEFF, 0x08FFFA10);
	r5 = D(r5, s1_2_0, 0x0500F701, 0x0902FCEE, 0xF8FFFDFA, 0xFF00F8F1);
	r6 = D(r6, s1_2_0, 0x0404FE01, 0xE10205F5, 0xFBFFFFFC, 0xF203FFED);
	r7 = D(r7, s1_2_0, 0xF90CFFF9, 0xFD02F7FA, 0xF8140CE6, 0xF208FDFA);
	r0 = D(r0, s1_2_1, 0xF00005FF, 0xED030301, 0x06FFFBFD, 0x0F09EC00);
	r1 = D(r1, s1_2_1, 0x03E60101, 0xFAFAF1F8, 0x0E0101FE, 0xEDFD03F2);
	r2 = D(r2, s1_2_1, 0x00FFFE02, 0xFF0701F0, 0xCE06FE17, 0xDBFB0EFB);
	r3 = D(r3, s1_2_1, 0x08D810EE, 0x02010206, 0x0602FEFA, 0x01FB09E9);
	r4 = D(r4, s1_2_1, 0xFEFD08EF, 0x0000FAF8, 0xFE0AFB16, 0xF9FFFF13);
	r5 = D(r5, s1_2_1, 0x09F804F3, 0xF80AE8EF, 0xF1FFFDFB, 0xF7F90409);
	r6 = D(r6, s1_2_1, 0xFFFE0005, 0xFD0FF107, 0x06FFFF04, 0xE9EA0402);
	r7 = D(r7, s1_2_1, 0x02070703, 0x00050001, 0x1109EFE3, 0x07FEFF00);
	r0 = D(r0, s1_2_2, 0xFE05E5FE, 0x000CF500, 0xFB01FEFD, 0xE9050800);
	r1 = D(r1, s1_2_2, 0x07FDFCFE, 0xFAF1FF05, 0xFD01F8FC, 0x06FCE10C);
	r2 = D(r2, s1_2_2, 0xFA000404, 0x1606C503, 0xF814FD07, 0x080EF7F8);
	r3 = D(r3, s1_2_2, 0xF3EDF201, 0x030000FE, 0x0703FDFC, 0x1504EBF8);
	r4 = D(r4, s1_2_2, 0xF3FEF606, 0xF8FFF6FF, 0xF714FEFE, 0x0508FD07);
	r5 = D(r5, s1_2_2, 0x03FF0403, 0x081407F8, 0x0E0BF1FA, 0x03FC0403);
	r6 = D(r6, s1_2_2, 0xFE0300FC, 0xE0FF08FC, 0xFD020101, 0x18FEEE03);
	r7 = D(r7, s1_2_2, 0x1B0302F6, 0x01FF0101, 0x0F06E4F2, 0x13FCFBFB);
	f0 = vec4(r0) * 6.2000124e-05;
	f0 += vec4(-1.497e-02, 2.246e-03, -5.323e-03, -7.639e-04);
	f0 = clamp(f0, vec4(0.0), vec4(1.0));
	imageStore(out_image, opos + ivec2(0, 0), f0);
	f1 = vec4(r1) * 6.2000124e-05;
	f1 += vec4(-1.059e-02, -1.269e-02, -7.081e-03, -1.729e-02);
	f1 = clamp(f1, vec4(0.0), vec4(1.0));
	imageStore(out_image, opos + ivec2(1, 0), f1);
	f2 = vec4(r2) * 6.2000124e-05;
	f2 += vec4(-1.716e-02, -2.612e-02, -8.149e-03, 5.714e-03);
	f2 = clamp(f2, vec4(0.0), vec4(1.0));
	imageStore(out_image, opos + ivec2(0, 1), f2);
	f3 = vec4(r3) * 6.2000124e-05;
	f3 += vec4(1.621e-02, -1.356e-03, -5.386e-03, -1.425e-02);
	f3 = clamp(f3, vec4(0.0), vec4(1.0));
	imageStore(out_image, opos + ivec2(1, 1), f3);
	f4 = vec4(r4) * 6.2000124e-05;
	f4 += vec4(-9.037e-03, 5.671e-03, -2.138e-03, -2.277e-02);
	f4 = clamp(f4, vec4(0.0), vec4(1.0));
	imageStore(out_image, opos + ivec2(2, 0), f4);
	f5 = vec4(r5) * 6.2000124e-05;
	f5 += vec4(-1.183e-02, -2.788e-02, -1.102e-02, -1.490e-02);
	f5 = clamp(f5, vec4(0.0), vec4(1.0));
	imageStore(out_image, opos + ivec2(3, 0), f5);
	f6 = vec4(r6) * 6.2000124e-05;
	f6 += vec4(-2.191e-03, -1.206e-02, -7.849e-03, -2.751e-02);
	f6 = clamp(f6, vec4(0.0), vec4(1.0));
	imageStore(out_image, opos + ivec2(2, 1), f6);
	f7 = vec4(r7) * 6.2000124e-05;
	f7 += vec4(-2.171e-03, 4.856e-03, -1.413e-02, 1.159e-02);
	f7 = clamp(f7, vec4(0.0), vec4(1.0));
	imageStore(out_image, opos + ivec2(3, 1), f7);
}

//!DESC CuNNy-4x32-conv4
//!HOOK LUMA
//!COMPUTE 32 16 8 8
//!BIND conv3
//!BIND LUMA
//!SAVE conv4
//!WIDTH LUMA.w 4 *
//!HEIGHT LUMA.h 2 *
//!COMPONENTS 4
//!WHEN OUTPUT.w LUMA.w / 1.3 > OUTPUT.h LUMA.h / 1.3 > *
#extension GL_EXT_spirv_intrinsics : require
spirv_instruction (extensions = ["SPV_KHR_integer_dot_product"], capabilities = [6019, 6018], id = 4450)
int dp4(int a, int b, spirv_literal int fmt);
#define D(r, s, a, b, c, d) r + ivec4(dp4(s, a, 0), dp4(s, b, 0), dp4(s, c, 0), dp4(s, d, 0))
shared int G[8][10][10];
void hook() {
	ivec2 xy = ivec2(gl_LocalInvocationID.xy);
	ivec2 pos = ivec2(gl_WorkGroupID.xy) * ivec2(8, 8) + xy;
	ivec2 opos = pos * ivec2(4, 2);
	ivec2 sz = ivec2(LUMA_size) - ivec2(1);
	for (int y = 0; y < 10; y += 8) {
		int ay = xy.y + y;
		if (ay >= 10) break;
		for (int x = 0; x < 10; x += 8) {
			int ax = xy.x + x;
			if (ax >= 10) break;
			vec2 p;
			vec4 r, g, b, a;
			p = vec2(clamp(pos + ivec2(x - 1, y - 1), ivec2(0), sz) * ivec2(4, 2) + ivec2(1, 1)) * conv3_pt;
			r = conv3_gather(p, 0);
			g = conv3_gather(p, 1);
			b = conv3_gather(p, 2);
			a = conv3_gather(p, 3);
			vec4 v0 = vec4(r.w, g.w, b.w, a.w) * 1.0000000e+00;
			vec4 v1 = vec4(r.z, g.z, b.z, a.z) * 1.0000000e+00;
			vec4 v2 = vec4(r.x, g.x, b.x, a.x) * 1.0000000e+00;
			vec4 v3 = vec4(r.y, g.y, b.y, a.y) * 1.0000000e+00;
			p = vec2(clamp(pos + ivec2(x - 1, y - 1), ivec2(0), sz) * ivec2(4, 2) + ivec2(3, 1)) * conv3_pt;
			r = conv3_gather(p, 0);
			g = conv3_gather(p, 1);
			b = conv3_gather(p, 2);
			a = conv3_gather(p, 3);
			vec4 v4 = vec4(r.w, g.w, b.w, a.w) * 1.0000000e+00;
			vec4 v5 = vec4(r.z, g.z, b.z, a.z) * 1.0000000e+00;
			vec4 v6 = vec4(r.x, g.x, b.x, a.x) * 1.0000000e+00;
			vec4 v7 = vec4(r.y, g.y, b.y, a.y) * 1.0000000e+00;
			G[0][ay][ax] = int(packSnorm4x8(v0));
			G[1][ay][ax] = int(packSnorm4x8(v1));
			G[2][ay][ax] = int(packSnorm4x8(v2));
			G[3][ay][ax] = int(packSnorm4x8(v3));
			G[4][ay][ax] = int(packSnorm4x8(v4));
			G[5][ay][ax] = int(packSnorm4x8(v5));
			G[6][ay][ax] = int(packSnorm4x8(v6));
			G[7][ay][ax] = int(packSnorm4x8(v7));
		}
	}
	barrier();
	int s0_0_0, s0_0_1, s0_0_2, s0_1_0, s0_1_1, s0_1_2, s0_2_0, s0_2_1, s0_2_2, s1_0_0, s1_0_1, s1_0_2, s1_1_0, s1_1_1, s1_1_2, s1_2_0, s1_2_1, s1_2_2;
	ivec4 r0, r1, r2, r3, r4, r5, r6, r7;
	vec4 f0, f1, f2, f3, f4, f5, f6, f7;
	r0 = ivec4(0); r1 = ivec4(0); r2 = ivec4(0); r3 = ivec4(0); r4 = ivec4(0); r5 = ivec4(0); r6 = ivec4(0); r7 = ivec4(0);
	s0_0_0 = G[0][xy.y+0][xy.x+0]; s0_0_1 = G[0][xy.y+0][xy.x+1];
	s0_0_2 = G[0][xy.y+0][xy.x+2]; s0_1_0 = G[0][xy.y+1][xy.x+0];
	s0_1_1 = G[0][xy.y+1][xy.x+1]; s0_1_2 = G[0][xy.y+1][xy.x+2];
	s0_2_0 = G[0][xy.y+2][xy.x+0]; s0_2_1 = G[0][xy.y+2][xy.x+1];
	s0_2_2 = G[0][xy.y+2][xy.x+2]; s1_0_0 = G[1][xy.y+0][xy.x+0];
	s1_0_1 = G[1][xy.y+0][xy.x+1]; s1_0_2 = G[1][xy.y+0][xy.x+2];
	s1_1_0 = G[1][xy.y+1][xy.x+0]; s1_1_1 = G[1][xy.y+1][xy.x+1];
	s1_1_2 = G[1][xy.y+1][xy.x+2]; s1_2_0 = G[1][xy.y+2][xy.x+0];
	s1_2_1 = G[1][xy.y+2][xy.x+1]; s1_2_2 = G[1][xy.y+2][xy.x+2];
	r0 = D(r0, s0_0_0, 0xF407020D, 0xFF000007, 0x1ACEF223, 0xFC0A0A12);
	r1 = D(r1, s0_0_0, 0xFAF80205, 0xF6FD08FF, 0xFB08F6ED, 0xFD02041F);
	r2 = D(r2, s0_0_0, 0xFBFF0100, 0xEEF20401, 0xFE07FC03, 0xF90C060A);
	r3 = D(r3, s0_0_0, 0xF604FE0C, 0x06F9FFE3, 0xFF02FEE7, 0xFB06FBF8);
	r4 = D(r4, s0_0_0, 0x00020008, 0xFFFF000A, 0x04010002, 0x01020007);
	r5 = D(r5, s0_0_0, 0x0000FE03, 0x04FDFD03, 0x05F60108, 0xF3FE010A);
	r6 = D(r6, s0_0_0, 0x00010303, 0x04FCED0F, 0x000200FE, 0xFD08FC0B);
	r7 = D(r7, s0_0_0, 0xEF08E901, 0xFCF60907, 0xFB02FF01, 0xFA05F80A);
	r0 = D(r0, s0_0_1, 0xD80507FF, 0x00FFFB00, 0xFE9581FD, 0x21F716E9);
	r1 = D(r1, s0_0_1, 0xF80305FD, 0xF505FA15, 0xD4EE8119, 0xE4FA0307);
	r2 = D(r2, s0_0_1, 0xECFBFFFC, 0xEEF2DFE2, 0xF3040701, 0x14081CDB);
	r3 = D(r3, s0_0_1, 0xFFFAFEEB, 0xB3B2EFE5, 0xF405E7FE, 0x13FB0407);
	r4 = D(r4, s0_0_1, 0xFEFDFF03, 0xFDF6FF03, 0xFC07FFFE, 0xFEFC0007);
	r5 = D(r5, s0_0_1, 0xF90DFB07, 0xFC00FA01, 0xEA0D01FE, 0xDBBEE6F2);
	r6 = D(r6, s0_0_1, 0x03FE0103, 0xF207E408, 0x000605F6, 0xFD0804ED);
	r7 = D(r7, s0_0_1, 0x0DFF05FF, 0x0AE90605, 0x0100F9FF, 0x04060EF1);
	r0 = D(r0, s0_0_2, 0x080E050A, 0xFF040101, 0xDBDDB31F, 0xF3E12200);
	r1 = D(r1, s0_0_2, 0x0D030002, 0x04F00502, 0x06F8EB02, 0xF8150CF2);
	r2 = D(r2, s0_0_2, 0x00080706, 0x1007FD07, 0x08FA0301, 0x0FE40107);
	r3 = D(r3, s0_0_2, 0xF8FF0001, 0x11FCFB04, 0x000A06FE, 0xFFFDFE07);
	r4 = D(r4, s0_0_2, 0xFA0400FE, 0xFC0300FF, 0xFEFF00FF, 0x00FB0001);
	r5 = D(r5, s0_0_2, 0x06070002, 0xFC040200, 0x060003FC, 0x0907FE03);
	r6 = D(r6, s0_0_2, 0x02FC0103, 0xFE0AFD06, 0xFBFE0102, 0x00F6FF02);
	r7 = D(r7, s0_0_2, 0x000102FF, 0x04FB0608, 0xFA06FD05, 0xFBF5F602);
	r0 = D(r0, s0_1_0, 0xD7F606F6, 0x0007020E, 0xF5EFDB2E, 0xE20EF606);
	r1 = D(r1, s0_1_0, 0xEC05F5F5, 0xF3FDEE2C, 0x0AFC0129, 0xF116DA0C);
	r2 = D(r2, s0_1_0, 0x01F80403, 0x0FFF02E7, 0xFD00050C, 0xCF0EF014);
	r3 = D(r3, s0_1_0, 0xFB04FC09, 0xFB00F90B, 0xF607040E, 0xF405F317);
	r4 = D(r4, s0_1_0, 0xFC0100F6, 0xFC0200F9, 0xF60B0215, 0xFE010007);
	r5 = D(r5, s0_1_0, 0x01FF05F6, 0xF3F603EC, 0x0602F0ED, 0x0803FEFB);
	r6 = D(r6, s0_1_0, 0xFA02F906, 0xE209CCFC, 0x0500FF05, 0x02FAFFF5);
	r7 = D(r7, s0_1_0, 0xE7F8DA0E, 0xF4F608F7, 0xFD01F701, 0xF100EC06);
	r0 = D(r0, s0_1_1, 0xB1D3FFE5, 0xC1DAF9E1, 0x81A6B3D8, 0xC5FF8140);
	r1 = D(r1, s0_1_1, 0xDDF30DF2, 0xD0EA0601, 0x080316C6, 0xF5EE06F0);
	r2 = D(r2, s0_1_1, 0xE3090114, 0xEDFBEA15, 0xEFDEF6D3, 0x81D98107);
	r3 = D(r3, s0_1_1, 0xE3C2F72F, 0x11F600F9, 0x0BB8DEFF, 0xD7F0F2F6);
	r4 = D(r4, s0_1_1, 0xF4FAFEFC, 0xFFFBFAFD, 0xD0C507EC, 0xF6F7FD10);
	r5 = D(r5, s0_1_1, 0xE22701EC, 0xD8EFF615, 0xC4D50B03, 0x04FB030B);
	r6 = D(r6, s0_1_1, 0xDF06F4E3, 0xFAEBDA0C, 0xFCFA03F9, 0xE5F3E80B);
	r7 = D(r7, s0_1_1, 0xF50800F8, 0x0A06E10E, 0x06F6E407, 0xF2E9E707);
	r0 = D(r0, s0_1_2, 0x0900FA00, 0x040B0003, 0x15D5E1EC, 0xF800C017);
	r1 = D(r1, s0_1_2, 0x0BFEFAFF, 0x17DFF9FF, 0x0CF00604, 0xF7190E07);
	r2 = D(r2, s0_1_2, 0x0D09F50B, 0xF5EA04F9, 0xFF160103, 0xE010EBFC);
	r3 = D(r3, s0_1_2, 0xF7EB02FC, 0xFAFB0306, 0x07F4FE07, 0x03F900F7);
	r4 = D(r4, s0_1_2, 0x04FD0102, 0x02FD0002, 0x05130307, 0xFE0202FE);
	r5 = D(r5, s0_1_2, 0x2001F907, 0xFBFDFFFB, 0x0B06030B, 0x04F6F9FF);
	r6 = D(r6, s0_1_2, 0xFC00F9FF, 0x06000202, 0xD4EAF809, 0x09FEFC07);
	r7 = D(r7, s0_1_2, 0x01FFFB08, 0x01E6FC01, 0xF105FA08, 0x0401FA01);
	r0 = D(r0, s0_2_0, 0xF7FE0518, 0xFE04FF07, 0xFC08FDCA, 0xFFD8BE19);
	r1 = D(r1, s0_2_0, 0xF1F50817, 0xF5F3FEFF, 0xFD01FFFB, 0xF709F802);
	r2 = D(r2, s0_2_0, 0x03FE0200, 0xFE030002, 0xFF030200, 0x17E9FAFA);
	r3 = D(r3, s0_2_0, 0x00F70309, 0x0000FFFC, 0x03FCF1FB, 0x08FA06F1);
	r4 = D(r4, s0_2_0, 0x03000003, 0x01020000, 0xFC030104, 0x01010001);
	r5 = D(r5, s0_2_0, 0x03FF0001, 0x000504FF, 0x00F706F7, 0xFDFD0202);
	r6 = D(r6, s0_2_0, 0xFDFFFDF4, 0xFDFB0604, 0xFF010001, 0xFFFF00F3);
	r7 = D(r7, s0_2_0, 0x0AF90BFB, 0x06FF08FD, 0xF8060008, 0xF702FF02);
	r0 = D(r0, s0_2_1, 0xF6F8F503, 0x06F60205, 0x0AE48135, 0x9EBD8108);
	r1 = D(r1, s0_2_1, 0x03F8FAFB, 0x0F00FC09, 0x0005EEFC, 0x9BAB24FC);
	r2 = D(r2, s0_2_1, 0xED080209, 0x030306FC, 0xFCFF0205, 0x00F2A236);
	r3 = D(r3, s0_2_1, 0x01FFFFFE, 0xFE010107, 0x050B0AFA, 0x01FDF6FF);
	r4 = D(r4, s0_2_1, 0x01FF00FE, 0xFE0201FC, 0x0EFAF9FB, 0x040002FB);
	r5 = D(r5, s0_2_1, 0x01FE0708, 0x06FD030D, 0xFA04010E, 0x0101FF02);
	r6 = D(r6, s0_2_1, 0xD911EA0C, 0xF6020EF9, 0xF80402FD, 0xFF0EEFF7);
	r7 = D(r7, s0_2_1, 0x06E6F301, 0xFFF9FD0A, 0xFFFBEFFB, 0xFA02EC02);
	r0 = D(r0, s0_2_2, 0x090F0510, 0xFD070002, 0x02E30D19, 0x07D3F8F1);
	r1 = D(r1, s0_2_2, 0x000B0605, 0x160604FF, 0xFF060404, 0xF700FAF8);
	r2 = D(r2, s0_2_2, 0x01070304, 0x06FCF804, 0x0206FE04, 0x04ECEC0A);
	r3 = D(r3, s0_2_2, 0x030303FB, 0x01FEFFFF, 0x03FEFE04, 0x09080303);
	r4 = D(r4, s0_2_2, 0x020000FF, 0x0300FFFF, 0x020200FE, 0x00FEFEFD);
	r5 = D(r5, s0_2_2, 0xFD07FDFC, 0xFD02FB03, 0x051202F6, 0x01FB0300);
	r6 = D(r6, s0_2_2, 0x05EAF70A, 0x00FBFC06, 0xFEFB0103, 0x01FD0000);
	r7 = D(r7, s0_2_2, 0x070206FD, 0x06EE030C, 0x01020004, 0x010105FD);
	r0 = D(r0, s1_0_0, 0x0701F10A, 0xF8FFF802, 0x36D9F82B, 0x051226E8);
	r1 = D(r1, s1_0_0, 0xF6151402, 0xEC00FCFA, 0xFC0002FE, 0xE1031B03);
	r2 = D(r2, s1_0_0, 0xFEFE0102, 0xFCFF00FA, 0xFC05F901, 0xE41123E9);
	r3 = D(r3, s1_0_0, 0x07FDF000, 0x0DFB0AF9, 0xF0020007, 0xF9FF0400);
	r4 = D(r4, s1_0_0, 0xFF030300, 0x03FC05FD, 0xF70A00FE, 0x02010400);
	r5 = D(r5, s1_0_0, 0xF6FC0003, 0xF5FEFD03, 0xFEFE1303, 0xF6F8FE0A);
	r6 = D(r6, s1_0_0, 0x06010405, 0x08F4F106, 0x07FAFC02, 0x0EFFFD05);
	r7 = D(r7, s1_0_0, 0x0004F4F1, 0x05FA0302, 0xFAFDFE00, 0xF40410F7);
	r0 = D(r0, s1_0_1, 0xF73414EE, 0x08030801, 0xD0C8E506, 0xEC170516);
	r1 = D(r1, s1_0_1, 0xFBF512F7, 0xE0CBD311, 0xD1E6C319, 0x1106D3F6);
	r2 = D(r2, s1_0_1, 0x04FBF4FE, 0x03040409, 0xED2212F1, 0xEA32270D);
	r3 = D(r3, s1_0_1, 0x0A0F0A06, 0xF4E6FD0E, 0x020827DB, 0x0F19F9FA);
	r4 = D(r4, s1_0_1, 0x0C3B0404, 0x031C170F, 0xFE0DFDFD, 0x0D340605);
	r5 = D(r5, s1_0_1, 0x0C0EEEFC, 0x03FE060D, 0x1A0FFCF6, 0xFCEFECE9);
	r6 = D(r6, s1_0_1, 0xFE090E02, 0x07FE0EFD, 0xF8020804, 0xE91012FB);
	r7 = D(r7, s1_0_1, 0xF8FD0D02, 0xEE270107, 0xFAF5F2FF, 0x052714F9);
	r0 = D(r0, s1_0_2, 0xFDF9E7FE, 0x05F80207, 0xEB43FC21, 0x042CEFF2);
	r1 = D(r1, s1_0_2, 0x0302EF06, 0x0204F8F8, 0x06F1E430, 0xFB0806F4);
	r2 = D(r2, s1_0_2, 0x0309F3FE, 0xF611E8DD, 0x07F9F2F9, 0x121A17EB);
	r3 = D(r3, s1_0_2, 0xFAFB02F5, 0x070706FE, 0x0200F60C, 0x0BF7FF02);
	r4 = D(r4, s1_0_2, 0xFF030706, 0x00F90709, 0x0403FB03, 0x070B0A05);
	r5 = D(r5, s1_0_2, 0x05FC0502, 0xFDFF0505, 0xF6060502, 0xEBFF09F8);
	r6 = D(r6, s1_0_2, 0x01FE0301, 0xF0F906FE, 0x021A11FA, 0x0212FDFA);
	r7 = D(r7, s1_0_2, 0x0302FD00, 0xF8EA0100, 0x080402FB, 0x040906EF);
	r0 = D(r0, s1_1_0, 0x22FAF108, 0x05FEFE01, 0x391EEA26, 0xC62C37FA);
	r1 = D(r1, s1_1_0, 0x0610FA04, 0x0B09ECFE, 0x240402F7, 0x87051CF9);
	r2 = D(r2, s1_1_0, 0xFBFBFE05, 0xFDF80103, 0xFF050202, 0xF6060CFE);
	r3 = D(r3, s1_1_0, 0xF90AFFFD, 0x0CFD02FF, 0x12F90EFA, 0xFF00FDFB);
	r4 = D(r4, s1_1_0, 0x0501FF01, 0xFEFF0002, 0x1101EA07, 0x02030403);
	r5 = D(r5, s1_1_0, 0x02FC0102, 0xF8000B05, 0xE901FF03, 0x1102FCFE);
	r6 = D(r6, s1_1_0, 0xF10203FD, 0xFD040710, 0x0601FE05, 0xFE01F4FF);
	r7 = D(r7, s1_1_0, 0x04F302FF, 0xE205F402, 0x0EFE0806, 0x230FFF03);
	r0 = D(r0, s1_1_1, 0xEA15F6ED, 0xF9FD0104, 0x0407EBCE, 0xFE2B2FD3);
	r1 = D(r1, s1_1_1, 0xEFE602F1, 0xD9272CD8, 0xFD07F5FF, 0x090A0BB2);
	r2 = D(r2, s1_1_1, 0xF6FD1601, 0xE7F2F6F4, 0xFB0BF107, 0xB70426FD);
	r3 = D(r3, s1_1_1, 0x0F0D0EDF, 0x09FD0601, 0x20EFDC14, 0xDB0E1905);
	r4 = D(r4, s1_1_1, 0x09010007, 0x06020105, 0xDE201D16, 0x08030209);
	r5 = D(r5, s1_1_1, 0xD7FE0C11, 0xECE4D7E8, 0xE5F614C4, 0xFD00010F);
	r6 = D(r6, s1_1_1, 0x053826F6, 0xF304CAF5, 0xFA0E060A, 0x28121B0C);
	r7 = D(r7, s1_1_1, 0xEDF9FC03, 0x31D5CE09, 0xFEF61204, 0xDA0F0D0A);
	r0 = D(r0, s1_1_2, 0xE9E90BCC, 0xF8FCF7F8, 0xCC0A1FFD, 0xE8FB2ECA);
	r1 = D(r1, s1_1_2, 0x020A02F8, 0x0BF7FCE5, 0xFB030906, 0xF707E523);
	r2 = D(r2, s1_1_2, 0xFDFBDCEB, 0xFB0B04FF, 0xFA09010D, 0xD2F711E4);
	r3 = D(r3, s1_1_2, 0x0103010F, 0xFF01FF0A, 0xFE090EFA, 0x0600F3E9);
	r4 = D(r4, s1_1_2, 0xFE00FF05, 0xFDFFFD06, 0xFEFDFC02, 0x06F8FFF5);
	r5 = D(r5, s1_1_2, 0x10F9F708, 0xFD02FEFA, 0x140AF30D, 0xFFFBFEF3);
	r6 = D(r6, s1_1_2, 0xFF060BF7, 0xF9040507, 0xEE0C1709, 0xF904FD02);
	r7 = D(r7, s1_1_2, 0x01FF06FB, 0x01FD0A05, 0xF1F9FE02, 0x010B010B);
	r0 = D(r0, s1_2_0, 0x0305FC06, 0x02FEFF06, 0xFEF2EFEF, 0x922807E6);
	r1 = D(r1, s1_2_0, 0x0CFE08FC, 0x0A06F600, 0xFD00FDFD, 0xB80B0BF9);
	r2 = D(r2, s1_2_0, 0x06000104, 0x030001FE, 0xF9010103, 0x0504F0F9);
	r3 = D(r3, s1_2_0, 0x14FEFE05, 0xFFFFFFFF, 0x03FB04FD, 0x0800FC05);
	r4 = D(r4, s1_2_0, 0x0201FF00, 0x01000000, 0x06010103, 0xFF000002);
	r5 = D(r5, s1_2_0, 0x00FEFE01, 0x0CFEF505, 0x09FF0606, 0x0502FEFF);
	r6 = D(r6, s1_2_0, 0x080000FD, 0x01FF05FB, 0x0300FF01, 0x03FE01FF);
	r7 = D(r7, s1_2_0, 0x1104FB08, 0xFC030800, 0xF700F509, 0xFA0101F7);
	r0 = D(r0, s1_2_1, 0x070500E2, 0x00030300, 0x1C1CF314, 0x0B2D0D17);
	r1 = D(r1, s1_2_1, 0x06FBFBF3, 0x0708FB0E, 0xFF00F7FC, 0xEFEF02FF);
	r2 = D(r2, s1_2_1, 0xEA0002F9, 0xFB040108, 0x010002FA, 0x2DF8FE12);
	r3 = D(r3, s1_2_1, 0xF50102F5, 0xFD01FE04, 0xF3030409, 0x02FCF9ED);
	r4 = D(r4, s1_2_1, 0x010101FF, 0x010001FF, 0x0AFF01F2, 0xFC0002FD);
	r5 = D(r5, s1_2_1, 0xFE060305, 0xF6030A0A, 0xEB0104FB, 0x0701FE00);
	r6 = D(r6, s1_2_1, 0xEAFE0102, 0xFA03110E, 0x00FE0103, 0xFAFDFDFD);
	r7 = D(r7, s1_2_1, 0xFCF602F9, 0xF6FA0D0D, 0x0AFBE00F, 0x0C03FB02);
	r0 = D(r0, s1_2_2, 0xF9F8FF1C, 0xFF000309, 0x2F0309ED, 0x2EF60FEA);
	r1 = D(r1, s1_2_2, 0xFEFF0109, 0xF7FD0003, 0xFE00FCF4, 0x0809F5FC);
	r2 = D(r2, s1_2_2, 0xF5FD010C, 0x040003FB, 0xFD000100, 0x0B07FBFB);
	r3 = D(r3, s1_2_2, 0x09000002, 0x0301FFFF, 0x04000207, 0xFF020204);
	r4 = D(r4, s1_2_2, 0xFF010100, 0x01000101, 0x00FFFFFE, 0x00000100);
	r5 = D(r5, s1_2_2, 0xFAFEFD01, 0x02000109, 0x0207FEF9, 0x02010102);
	r6 = D(r6, s1_2_2, 0x10FFFDFE, 0xFEFF040A, 0x01FE03F9, 0x04FE01F9);
	r7 = D(r7, s1_2_2, 0x0002FFFB, 0xFEFE010B, 0xF6FF031A, 0x04FF03F7);
	s0_0_0 = G[2][xy.y+0][xy.x+0]; s0_0_1 = G[2][xy.y+0][xy.x+1];
	s0_0_2 = G[2][xy.y+0][xy.x+2]; s0_1_0 = G[2][xy.y+1][xy.x+0];
	s0_1_1 = G[2][xy.y+1][xy.x+1]; s0_1_2 = G[2][xy.y+1][xy.x+2];
	s0_2_0 = G[2][xy.y+2][xy.x+0]; s0_2_1 = G[2][xy.y+2][xy.x+1];
	s0_2_2 = G[2][xy.y+2][xy.x+2]; s1_0_0 = G[3][xy.y+0][xy.x+0];
	s1_0_1 = G[3][xy.y+0][xy.x+1]; s1_0_2 = G[3][xy.y+0][xy.x+2];
	s1_1_0 = G[3][xy.y+1][xy.x+0]; s1_1_1 = G[3][xy.y+1][xy.x+1];
	s1_1_2 = G[3][xy.y+1][xy.x+2]; s1_2_0 = G[3][xy.y+2][xy.x+0];
	s1_2_1 = G[3][xy.y+2][xy.x+1]; s1_2_2 = G[3][xy.y+2][xy.x+2];
	r0 = D(r0, s0_0_0, 0x140A1004, 0x01FF0101, 0x1CD422EE, 0x08EF0702);
	r1 = D(r1, s0_0_0, 0x06FD0402, 0x0901F3FF, 0x010923FB, 0xE3FE1701);
	r2 = D(r2, s0_0_0, 0xF907FCFC, 0xFD0306F9, 0x00FCFB01, 0x04E70A01);
	r3 = D(r3, s0_0_0, 0x09FA0306, 0xF901F602, 0x0504FC02, 0x05FAFA03);
	r4 = D(r4, s0_0_0, 0x02FD0201, 0x01FE0202, 0x04000204, 0x01FE0302);
	r5 = D(r5, s0_0_0, 0xFD00F904, 0x02FFFFFE, 0xFA0507FA, 0xF60901FE);
	r6 = D(r6, s0_0_0, 0xFCFD0702, 0xF5ED0404, 0x02000105, 0x01010005);
	r7 = D(r7, s0_0_0, 0xF9FDFF04, 0xFEFDFFFC, 0xFEFDFFFF, 0xF9F7F9FE);
	r0 = D(r0, s0_0_1, 0xEFDF01FD, 0xFBF90304, 0x040039EB, 0x10EEFFFB);
	r1 = D(r1, s0_0_1, 0xF3E8FDFF, 0xFDF4F7F8, 0x1CF728F6, 0x1EF21813);
	r2 = D(r2, s0_0_1, 0x01F601FF, 0x00EEF9EB, 0x04F60303, 0x07E10409);
	r3 = D(r3, s0_0_1, 0xFC00FFFF, 0xFA0519F9, 0xE2E10505, 0x0AF805FB);
	r4 = D(r4, s0_0_1, 0xFCFA0000, 0xFAF7FEFC, 0x05FAFF05, 0x00FAFF02);
	r5 = D(r5, s0_0_1, 0xFFF50107, 0x010201FD, 0x07FB04FE, 0xFEE000FC);
	r6 = D(r6, s0_0_1, 0xFD0205FE, 0xEFFD03FF, 0x0100FE00, 0x00FB01FD);
	r7 = D(r7, s0_0_1, 0x05FE0102, 0x06FEFDFE, 0x01FAFF06, 0x12FCFDFB);
	r0 = D(r0, s0_0_2, 0x0FF70D02, 0x000000FE, 0x30E5FEE8, 0x21FC07FB);
	r1 = D(r1, s0_0_2, 0x02FEFDFF, 0xFDFCFFFF, 0xFEFF0D06, 0xFEF5F2F6);
	r2 = D(r2, s0_0_2, 0x0DF2FD00, 0x16F304FC, 0x0601FEFF, 0x0BFA0007);
	r3 = D(r3, s0_0_2, 0xFFFEFCFC, 0xF0F4040D, 0x03F9FF04, 0xF6FFFFFD);
	r4 = D(r4, s0_0_2, 0x02FE00FD, 0x02FF01FC, 0x0300FFFF, 0xFCFF01FE);
	r5 = D(r5, s0_0_2, 0xFB01FD01, 0x010001FF, 0xF6F9FD02, 0xFDFC0004);
	r6 = D(r6, s0_0_2, 0x00FF02FF, 0x00FBFDFD, 0x01F90006, 0x05000203);
	r7 = D(r7, s0_0_2, 0x03000202, 0xF9FE0000, 0x00FCFF04, 0x010503F9);
	r0 = D(r0, s0_1_0, 0x030218FC, 0x010602FD, 0xEF102206, 0x30BB08ED);
	r1 = D(r1, s0_1_0, 0xFF0A05E0, 0xF70D0605, 0xF80AFD08, 0xF3FC07F0);
	r2 = D(r2, s0_1_0, 0xFC04FA08, 0xFFFEFB08, 0x04FE0001, 0x24DE28DB);
	r3 = D(r3, s0_1_0, 0x00FA01F7, 0xFF0000FE, 0xFB0D0CEA, 0x040505FB);
	r4 = D(r4, s0_1_0, 0x000005FA, 0x010105FA, 0x0206FDF3, 0x000002FB);
	r5 = D(r5, s0_1_0, 0x0102FE02, 0x0705F802, 0xF2F50604, 0x0200FA13);
	r6 = D(r6, s0_1_0, 0x05F6FBF7, 0x0606F9FD, 0xFF030002, 0xFF04F7FC);
	r7 = D(r7, s0_1_0, 0xF601FE05, 0x06FAF50E, 0x03F4F8FD, 0x010005F3);
	r0 = D(r0, s0_1_1, 0xEDC51EDC, 0x0AF103FC, 0x2BAB2E81, 0xFECC1519);
	r1 = D(r1, s0_1_1, 0x04F3F60A, 0xF1CFEC01, 0xFB0BFDD2, 0x3FD00DE2);
	r2 = D(r2, s0_1_1, 0x08F30CF2, 0xFF0D24FE, 0x0C000EE2, 0x17AA0FCC);
	r3 = D(r3, s0_1_1, 0xFFECF9F8, 0xF1FEFB0F, 0x00E2060E, 0xFEF2EF04);
	r4 = D(r4, s0_1_1, 0x00F90905, 0xFCFB0907, 0xF7E7FDE8, 0xFCFA09FF);
	r5 = D(r5, s0_1_1, 0x1DF91105, 0x0AE9FE05, 0x25F81306, 0xFC1305FE);
	r6 = D(r6, s0_1_1, 0x14EFFCF7, 0x1ADA01F6, 0xFC0105F2, 0x08E90AD9);
	r7 = D(r7, s0_1_1, 0xF8F7FEFE, 0xFA1A03F7, 0x09FCFAF4, 0x00FC0FE4);
	r0 = D(r0, s0_1_2, 0x0BF50BEB, 0x03FDFF02, 0xEFD51C1E, 0xFABD09DE);
	r1 = D(r1, s0_1_2, 0x01010401, 0xFDFCFD0B, 0xF40AFB11, 0xE9F502EC);
	r2 = D(r2, s0_1_2, 0x02F608FE, 0xFCEE0308, 0xFFF9FEFD, 0x13CF03EE);
	r3 = D(r3, s0_1_2, 0xFBFB0301, 0x0100FC16, 0xF804FFFE, 0x05020208);
	r4 = D(r4, s0_1_2, 0xFFF9FF02, 0xFFFDFF00, 0x04F801FF, 0x01F3010F);
	r5 = D(r5, s0_1_2, 0x00F302F7, 0x0401FC03, 0xF6F9FA04, 0xFFFA01FE);
	r6 = D(r6, s0_1_2, 0x08F5FEF2, 0x01F903FE, 0xFEF700F5, 0xFAEF0004);
	r7 = D(r7, s0_1_2, 0x02FE0103, 0xFBFA01F6, 0x00F6FAF4, 0xFBF60106);
	r0 = D(r0, s0_2_0, 0x040026F1, 0x000001FE, 0xFF0004EF, 0x26F519E5);
	r1 = D(r1, s0_2_0, 0xFF0706D9, 0xFC0438EA, 0x02FD0401, 0xFFEA22E2);
	r2 = D(r2, s0_2_0, 0x0000FB0B, 0x0302FF05, 0x0100FAFC, 0x09020E0C);
	r3 = D(r3, s0_2_0, 0x00FF06EC, 0xFF04FFFF, 0xFB03F607, 0xFC03FCF3);
	r4 = D(r4, s0_2_0, 0x00010202, 0x000204FF, 0x00050802, 0xFFFF0302);
	r5 = D(r5, s0_2_0, 0x01FFF2FF, 0xFEFE010C, 0xF507F1FC, 0x02FFFEFB);
	r6 = D(r6, s0_2_0, 0x0002F006, 0xFEF10BF6, 0x00010802, 0xFE010008);
	r7 = D(r7, s0_2_0, 0xFE00F8EF, 0x04FBE016, 0xFF0604F8, 0x03FE0300);
	r0 = D(r0, s0_2_1, 0x06F70BF2, 0xFEFD00F0, 0xFCFE10F6, 0x1CB5F5AF);
	r1 = D(r1, s0_2_1, 0x02F5F907, 0x1202F4D8, 0x050205FD, 0x31D117B1);
	r2 = D(r2, s0_2_1, 0x020004E7, 0xFBFEFC00, 0x06FA0303, 0xF8FC0716);
	r3 = D(r3, s0_2_1, 0x05FEEA1D, 0xFFFDFF05, 0xF9FEFF04, 0x06010304);
	r4 = D(r4, s0_2_1, 0xFF020002, 0xFF000004, 0x0206FC0B, 0xFE0103FE);
	r5 = D(r5, s0_2_1, 0x0002000C, 0xFD03080E, 0x07051301, 0xFCFFFB04);
	r6 = D(r6, s0_2_1, 0x01EE090B, 0xF9FD0D07, 0x0001FBFA, 0xFF050609);
	r7 = D(r7, s0_2_1, 0xFD0305FC, 0x01F7FDFD, 0xEE1110F0, 0x0204FF04);
	r0 = D(r0, s0_2_2, 0x0FED050F, 0xFF01020B, 0x0C26EF07, 0x1DF3FFFE);
	r1 = D(r1, s0_2_2, 0x03FB0209, 0xFBFF04F7, 0x04070203, 0xE2CC08FD);
	r2 = D(r2, s0_2_2, 0x05EBFC11, 0x0307FEF3, 0x03FAFEFB, 0x03030014);
	r3 = D(r3, s0_2_2, 0x01FEFFF1, 0x010302FB, 0x0200FF03, 0x06F6FFFC);
	r4 = D(r4, s0_2_2, 0xFF010005, 0x00010105, 0xFF010000, 0x0003FF0D);
	r5 = D(r5, s0_2_2, 0x0400FCF8, 0xFF0101FE, 0xFFFB01F8, 0x0202FE01);
	r6 = D(r6, s0_2_2, 0x00F7FE04, 0xF9030403, 0x0301FE05, 0xFE090000);
	r7 = D(r7, s0_2_2, 0x00FE00FE, 0xF9FCFB0C, 0x00FA03F7, 0x010304FA);
	r0 = D(r0, s1_0_0, 0x03F01603, 0x0104FF03, 0xCAE516ED, 0xE9FBF7C1);
	r1 = D(r1, s1_0_0, 0x0BF2FEF4, 0x0AFEFFFD, 0xF2E206EF, 0xF8F004D7);
	r2 = D(r2, s1_0_0, 0x0AFBFEFD, 0x01F606EE, 0xFE04FF02, 0x0F0EFAD5);
	r3 = D(r3, s1_0_0, 0x00FE01FC, 0xF90908F5, 0x050AFDF8, 0xFA090200);
	r4 = D(r4, s1_0_0, 0xFEFF0000, 0xF5020101, 0x0100FE01, 0xFC000001);
	r5 = D(r5, s1_0_0, 0x020FFFFE, 0xF80B0100, 0xF3F8FCEE, 0xFC0603FB);
	r6 = D(r6, s1_0_0, 0x03040200, 0x0D03FFF7, 0x0000FF02, 0xFE05FFFA);
	r7 = D(r7, s1_0_0, 0xFCF406FB, 0x06FF01F3, 0x0B02F901, 0x0BFB02F4);
	r0 = D(r0, s1_0_1, 0x0DF209DB, 0xFDFD0000, 0xC2EA12EE, 0xF4F2F7E4);
	r1 = D(r1, s1_0_1, 0x0805FFFC, 0x25F508EF, 0xBCFEF2FA, 0x06E70C0E);
	r2 = D(r2, s1_0_1, 0xF8F10EFF, 0xE1F504FD, 0x10FBFDFC, 0xFDF8FCEC);
	r3 = D(r3, s1_0_1, 0x03FFFE01, 0xE8FA06F8, 0xFA01FFF5, 0xFDF5FEF0);
	r4 = D(r4, s1_0_1, 0x00010201, 0xFDF70300, 0x03020003, 0xFD0401FE);
	r5 = D(r5, s1_0_1, 0x11020306, 0xFF06FDFA, 0xFC0C0603, 0xD40009FF);
	r6 = D(r6, s1_0_1, 0xF80000FE, 0x08FCF4F5, 0xFCFDFE00, 0x0EFB04FB);
	r7 = D(r7, s1_0_1, 0x0A00F9F9, 0xF7F6FCF8, 0x0D01FDFE, 0x070800F3);
	r0 = D(r0, s1_0_2, 0x0701FFF9, 0x00FD0000, 0xEC010DF3, 0x01FFFBCD);
	r1 = D(r1, s1_0_2, 0xFE00FDFB, 0x050800F7, 0xD9FEF4FE, 0x01F5FDDF);
	r2 = D(r2, s1_0_2, 0x1809FCF6, 0x0C0803F1, 0x03FEFEFE, 0x1AFDFFD4);
	r3 = D(r3, s1_0_2, 0x08020400, 0x020704FC, 0xFF0302FE, 0x07000002);
	r4 = D(r4, s1_0_2, 0x01000000, 0x01FF0001, 0xFDFF00FC, 0x0704FF01);
	r5 = D(r5, s1_0_2, 0x0CFFFCFB, 0xFCFFFE07, 0xFBFBFFF8, 0x0700FFF3);
	r6 = D(r6, s1_0_2, 0xFE01FFFE, 0xFCFEFDF6, 0xF804FE00, 0x0300FCFE);
	r7 = D(r7, s1_0_2, 0xFBFFFF01, 0xFFFD01FE, 0x04FD0102, 0x0605FCFB);
	r0 = D(r0, s1_1_0, 0x0FF314FA, 0xF8FA07FF, 0xFBA71BF6, 0x100C01DF);
	r1 = D(r1, s1_1_0, 0x0C14E9F9, 0xFFF41EFD, 0x020BFBF4, 0xF803FAE6);
	r2 = D(r2, s1_1_0, 0x0D0EF600, 0x0611F9FF, 0xFF000100, 0xD6E515FF);
	r3 = D(r3, s1_1_0, 0xFADA1600, 0x000000FA, 0xD9F40EF5, 0x07ED0CF4);
	r4 = D(r4, s1_1_0, 0xFD00FD00, 0xFEFF0100, 0xFBF9FEFD, 0xFB00FE00);
	r5 = D(r5, s1_1_0, 0xF806FC03, 0x06FBFEFF, 0x08FDEFF9, 0x0401F5FE);
	r6 = D(r6, s1_1_0, 0xFE0305F8, 0xEA071EF7, 0xFBFD0600, 0x0CF806F9);
	r7 = D(r7, s1_1_0, 0xF4271DFB, 0x0B01FAFF, 0x08FEFFFB, 0xEB020BFB);
	r0 = D(r0, s1_1_1, 0xEF241FF7, 0x090B1A02, 0x1EFE1F0F, 0xF1EA0602);
	r1 = D(r1, s1_1_1, 0x0E18F6FF, 0xFCF535EF, 0xFA0919F6, 0x182D0CF7);
	r2 = D(r2, s1_1_1, 0xFDF618F8, 0xFB0CF6F2, 0xEB08F706, 0xB7FEE307);
	r3 = D(r3, s1_1_1, 0xF83C0101, 0xFFFF0DFC, 0x01120DFE, 0xF11AFA04);
	r4 = D(r4, s1_1_1, 0xF4FE0D00, 0xFD092C01, 0xF2F90502, 0xFA1B0400);
	r5 = D(r5, s1_1_1, 0xF52818FD, 0x063D0F03, 0x03220AFD, 0x001109FD);
	r6 = D(r6, s1_1_1, 0x0E0C00FC, 0x0A1D0F02, 0xFB06F802, 0xD10B0004);
	r7 = D(r7, s1_1_1, 0xF303FCF9, 0x0E1AE6FC, 0xDF0403F7, 0xEA080702);
	r0 = D(r0, s1_1_2, 0x08F8F8F9, 0x00020402, 0x0F14FFF9, 0x0EF8010F);
	r1 = D(r1, s1_1_2, 0x04FC03FB, 0x080E02FD, 0xFB0218F7, 0x0114FF00);
	r2 = D(r2, s1_1_2, 0x1004F201, 0xF30704FD, 0xFF02FCFD, 0xFD04E900);
	r3 = D(r3, s1_1_2, 0xFBFAFCFB, 0xFC03F9F8, 0xFF0704FD, 0x04FE01F1);
	r4 = D(r4, s1_1_2, 0xFF01FE00, 0xFE020200, 0xFEFFF7FE, 0xFA06F900);
	r5 = D(r5, s1_1_2, 0xF707FD05, 0xF90102FE, 0xFE0CFCF4, 0xFF0800FA);
	r6 = D(r6, s1_1_2, 0x0802FEF8, 0x03070204, 0xF81FFD05, 0x05FFFEFD);
	r7 = D(r7, s1_1_2, 0x04FCFD00, 0x0CFB0BFA, 0x0903F8FA, 0xFE0103F8);
	r0 = D(r0, s1_2_0, 0x08F003F8, 0xFF000800, 0xC516EBDE, 0x81BDE5DB);
	r1 = D(r1, s1_2_0, 0x140301F6, 0x0304FEF4, 0xFC0602F9, 0xE7EFEFE3);
	r2 = D(r2, s1_2_0, 0xFFFBFBFF, 0xF9F8FBF8, 0xFF00FD01, 0xF8FEECD8);
	r3 = D(r3, s1_2_0, 0xFCFE0801, 0x01FD04FE, 0xFEFCFEF8, 0x0306FDF8);
	r4 = D(r4, s1_2_0, 0xFE00FF01, 0x00FE0001, 0x0303FAFF, 0x0000FE01);
	r5 = D(r5, s1_2_0, 0x02FD01FE, 0xFDF7F9FF, 0xFF04FEF5, 0x00FE01FE);
	r6 = D(r6, s1_2_0, 0xEEFBF8FE, 0x04EE0BFD, 0xFE010001, 0x050902FE);
	r7 = D(r7, s1_2_0, 0x08F9F4FB, 0x010000F6, 0xFFF80BF9, 0x01FD07F5);
	r0 = D(r0, s1_2_1, 0xF8FBF8ED, 0x01FA1102, 0x0CF4E2DE, 0x8D150BEB);
	r1 = D(r1, s1_2_1, 0xFF01FA01, 0xF401D2F8, 0xFAFEF8FF, 0x50F8D3F6);
	r2 = D(r2, s1_2_1, 0x04F5FFF9, 0xFFFF10FA, 0x01F904FC, 0xEE10E5E4);
	r3 = D(r3, s1_2_1, 0x040EF800, 0xFE03FFFA, 0xFE0216F8, 0x0005F1FB);
	r4 = D(r4, s1_2_1, 0x00FE0000, 0xFFFCFD00, 0x0404F600, 0xFF02FA00);
	r5 = D(r5, s1_2_1, 0x02030001, 0xFF071A00, 0x050508FF, 0x02FCFCFD);
	r6 = D(r6, s1_2_1, 0xD500EEFC, 0x01F417F7, 0x0509F003, 0xFE02EEF7);
	r7 = D(r7, s1_2_1, 0x0A1009FE, 0x08FC27F9, 0x00FF2CFC, 0xFA04F3F4);
	r0 = D(r0, s1_2_2, 0x0504F3F2, 0xFCFF01FE, 0xF4EDE7F8, 0xFD01E4E0);
	r1 = D(r1, s1_2_2, 0xFAFEF9F9, 0x011407F4, 0x0203F8FE, 0xF40409E2);
	r2 = D(r2, s1_2_2, 0x040C09FA, 0x03FCF9F7, 0x0102FC00, 0x05FEF0E4);
	r3 = D(r3, s1_2_2, 0xFFF901FF, 0xFDFC00FB, 0xFCFFF4F6, 0xF90208FA);
	r4 = D(r4, s1_2_2, 0xFE000001, 0x00000001, 0x00FFFC01, 0xFF040500);
	r5 = D(r5, s1_2_2, 0x010406FE, 0xFB0003FF, 0xEEFA04F8, 0x020508FE);
	r6 = D(r6, s1_2_2, 0xF901F8FB, 0xFF02F9F9, 0x0205FA02, 0x040401FB);
	r7 = D(r7, s1_2_2, 0x0102FCF7, 0x0504FDF8, 0xF70606F8, 0x07020800);
	s0_0_0 = G[4][xy.y+0][xy.x+0]; s0_0_1 = G[4][xy.y+0][xy.x+1];
	s0_0_2 = G[4][xy.y+0][xy.x+2]; s0_1_0 = G[4][xy.y+1][xy.x+0];
	s0_1_1 = G[4][xy.y+1][xy.x+1]; s0_1_2 = G[4][xy.y+1][xy.x+2];
	s0_2_0 = G[4][xy.y+2][xy.x+0]; s0_2_1 = G[4][xy.y+2][xy.x+1];
	s0_2_2 = G[4][xy.y+2][xy.x+2]; s1_0_0 = G[5][xy.y+0][xy.x+0];
	s1_0_1 = G[5][xy.y+0][xy.x+1]; s1_0_2 = G[5][xy.y+0][xy.x+2];
	s1_1_0 = G[5][xy.y+1][xy.x+0]; s1_1_1 = G[5][xy.y+1][xy.x+1];
	s1_1_2 = G[5][xy.y+1][xy.x+2]; s1_2_0 = G[5][xy.y+2][xy.x+0];
	s1_2_1 = G[5][xy.y+2][xy.x+1]; s1_2_2 = G[5][xy.y+2][xy.x+2];
	r0 = D(r0, s0_0_0, 0x0013FC02, 0xFE00FE00, 0x0508020A, 0x05FBF913);
	r1 = D(r1, s0_0_0, 0x030403FC, 0x09EB06F6, 0x04FD050B, 0x12FB09F8);
	r2 = D(r2, s0_0_0, 0x00FEFF02, 0xFA07000D, 0xFEFCFFFD, 0x01F80009);
	r3 = D(r3, s0_0_0, 0xFDFE0300, 0xFE0800F3, 0x0701FEFD, 0xFEF905FB);
	r4 = D(r4, s0_0_0, 0xFE01FFFE, 0xFE0000FE, 0xFD01FCFF, 0xFF0200FF);
	r5 = D(r5, s0_0_0, 0xF9FCFDF9, 0x0002FDF9, 0x02030202, 0xF8F801F6);
	r6 = D(r6, s0_0_0, 0xFC01FDFF, 0xFAFC02FF, 0xFE000001, 0xFDFF00FC);
	r7 = D(r7, s0_0_0, 0xF2FA080D, 0x08F10107, 0x01FB0005, 0x06FAFD09);
	r0 = D(r0, s0_0_1, 0xFA0018FE, 0xFDFC0006, 0xFC151B09, 0x0700F2F6);
	r1 = D(r1, s0_0_1, 0xFCFB0A0D, 0x0CF2090E, 0xF2120F15, 0xF5090910);
	r2 = D(r2, s0_0_1, 0x08FEFF06, 0x01FC0F06, 0x05FEFEFB, 0x0509FBF2);
	r3 = D(r3, s0_0_1, 0x02FA0A02, 0xFA070731, 0xF906FE14, 0xFD06FEF9);
	r4 = D(r4, s0_0_1, 0xF700FFFA, 0xFC010401, 0xFFFEFFFC, 0xF601FFF8);
	r5 = D(r5, s0_0_1, 0x00FF03FE, 0xFBFFFFFD, 0xFA040404, 0xFD0611EF);
	r6 = D(r6, s0_0_1, 0xFDFEFD02, 0x00FD0407, 0xFE000103, 0x03FD02F7);
	r7 = D(r7, s0_0_1, 0xFF06F8FD, 0x09F3FE0A, 0x0202FB04, 0x1005FDEA);
	r0 = D(r0, s0_0_2, 0xFDF90511, 0xFDFFFCFF, 0x02090DE9, 0xFD0AFCF1);
	r1 = D(r1, s0_0_2, 0x0100FAFC, 0x04F51602, 0xFDFBF6FE, 0xFCFC1AFD);
	r2 = D(r2, s0_0_2, 0xFBF40A06, 0xFA0A0510, 0x0200FAFA, 0xFEFE05F0);
	r3 = D(r3, s0_0_2, 0x01FD0605, 0xF90703FD, 0xFE0806FF, 0x08FE05FE);
	r4 = D(r4, s0_0_2, 0xFE0102FE, 0xFE0100FB, 0xFF01FEFF, 0x00020801);
	r5 = D(r5, s0_0_2, 0xFD04FBF4, 0x0100FEFF, 0x010108F2, 0x0204EE0D);
	r6 = D(r6, s0_0_2, 0x04FFFF01, 0x0400FD09, 0xFEFEFEFB, 0x00FDFCFF);
	r7 = D(r7, s0_0_2, 0x01FFFF01, 0x08F0FF09, 0xFFFE0AFB, 0x03FCFC02);
	r0 = D(r0, s0_1_0, 0xEC1306F5, 0xFBFB0007, 0x08E622FE, 0x10E90DD7);
	r1 = D(r1, s0_1_0, 0xFB01FDE3, 0x15DF0407, 0x06F800FE, 0x1AE210ED);
	r2 = D(r2, s0_1_0, 0x04F7FCFF, 0x0201FFFD, 0xFFFE0103, 0x0E1506FF);
	r3 = D(r3, s0_1_0, 0x03F9040D, 0x01FF0402, 0xFD0DFF18, 0x0407FE0D);
	r4 = D(r4, s0_1_0, 0x020200FE, 0x040200FE, 0xFE02FDFE, 0x010200FD);
	r5 = D(r5, s0_1_0, 0xFBFDFCFB, 0x00FB00F9, 0x0CFF07F1, 0x0801FDFB);
	r6 = D(r6, s0_1_0, 0xFDFF00F8, 0x03FF09F4, 0xFB040001, 0x0101FF00);
	r7 = D(r7, s0_1_0, 0xEC0E06ED, 0x0CEC0D06, 0xFEFF00FC, 0x0B0206E8);
	r0 = D(r0, s0_1_1, 0xF5D620D5, 0x05FA0104, 0xECAC45FB, 0x1BDA2FF2);
	r1 = D(r1, s0_1_1, 0xECF6270A, 0x47F91126, 0xF513F30B, 0xED1B2511);
	r2 = D(r2, s0_1_1, 0x0B07F312, 0x0306FFF9, 0xFFFEFDFC, 0xF8F51A0C);
	r3 = D(r3, s0_1_1, 0xE8050810, 0xFEFE020D, 0xFBF41AF1, 0xD9E01AFA);
	r4 = D(r4, s0_1_1, 0xFC0801F9, 0xF307FD00, 0xF9F4021B, 0xF804FC01);
	r5 = D(r5, s0_1_1, 0xFAFBF519, 0x100E07F0, 0xE40B1517, 0xF904F90B);
	r6 = D(r6, s0_1_1, 0x02F40FDA, 0x080314EE, 0xFDFF03F4, 0x0203030B);
	r7 = D(r7, s0_1_1, 0xFBF415F1, 0xEEF71ADE, 0x08FAFE18, 0xDFFC1524);
	r0 = D(r0, s0_1_2, 0xEB081425, 0xFB00000C, 0xAA005115, 0xE9E03B27);
	r1 = D(r1, s0_1_2, 0xFE0AE804, 0x00F92801, 0xF900F416, 0x0702FDE3);
	r2 = D(r2, s0_1_2, 0xE1F012FF, 0xF5050CF1, 0xFD00FB04, 0x0AFD031C);
	r3 = D(r3, s0_1_2, 0x05FA00F7, 0xF7FFFCFC, 0xFFFE01FE, 0xFC00EC01);
	r4 = D(r4, s0_1_2, 0xFA0103FE, 0xF7010700, 0x0201FC01, 0xFF0323DF);
	r5 = D(r5, s0_1_2, 0xFDFD0BE8, 0x03FFFEFE, 0xF505FCE1, 0xFBFD13F4);
	r6 = D(r6, s0_1_2, 0xF7FDFD06, 0x02FA0209, 0xFDFA031B, 0xF2000BFE);
	r7 = D(r7, s0_1_2, 0xFF00FC07, 0x10F501FE, 0x06FCFC0D, 0xFA00FFFC);
	r0 = D(r0, s0_2_0, 0xFB06FCFF, 0x00FD0004, 0x06FEF705, 0x0E08FE22);
	r1 = D(r1, s0_2_0, 0x06FE0004, 0x12F307F8, 0x0100FCFE, 0x0E0017E4);
	r2 = D(r2, s0_2_0, 0x0500FDFF, 0xFEFFFF02, 0xFCFFFF01, 0x0BF702F0);
	r3 = D(r3, s0_2_0, 0x06FC07FD, 0xFC010002, 0xFFFE0505, 0xF6070000);
	r4 = D(r4, s0_2_0, 0xFE0100FE, 0xFE010000, 0xF703FFFD, 0xFE0100FF);
	r5 = D(r5, s0_2_0, 0xF900FD02, 0x0EF602F6, 0x070600FB, 0xFB02FFFF);
	r6 = D(r6, s0_2_0, 0x0AF70304, 0x0AFA0406, 0xFCFFFF03, 0xFE000100);
	r7 = D(r7, s0_2_0, 0x0FFDFEFC, 0x08EF06FF, 0x02F907FF, 0x02FF05FB);
	r0 = D(r0, s0_2_1, 0x01FB0DED, 0xF9FEFF0D, 0x14E302C9, 0xEDFD45B0);
	r1 = D(r1, s0_2_1, 0xF3FF0CF1, 0x18E20CEF, 0x03F9FFF5, 0xDB24470B);
	r2 = D(r2, s0_2_1, 0x00FB0202, 0xFE04FC08, 0x04FF0003, 0xF9F017C5);
	r3 = D(r3, s0_2_1, 0xF5FE0EF6, 0x00FEFEFD, 0xF206FE07, 0x0B01FEE8);
	r4 = D(r4, s0_2_1, 0x0001FF01, 0x0301FE02, 0x04FFFEEF, 0x000100FB);
	r5 = D(r5, s0_2_1, 0xF604FF03, 0xEEFFFA06, 0xF3FF0F0A, 0x06FDFF00);
	r6 = D(r6, s0_2_1, 0x09FBFF0F, 0xFAF80302, 0xFEFBFB05, 0x02FC01EC);
	r7 = D(r7, s0_2_1, 0x00FE0C02, 0x0EEC09F7, 0x00F412FE, 0xFEFF04F3);
	r0 = D(r0, s0_2_2, 0x0E010A06, 0xFEFFFE02, 0x0B0AFEFB, 0x0B0C21F8);
	r1 = D(r1, s0_2_2, 0x0000F203, 0x07F51100, 0x0AFC0204, 0xFD010FE9);
	r2 = D(r2, s0_2_2, 0xF2F50701, 0xFB05F903, 0xFDFFFEFE, 0x100221F3);
	r3 = D(r3, s0_2_2, 0xFF0400FE, 0x03FE01FD, 0x00FA00FF, 0xFC02FE00);
	r4 = D(r4, s0_2_2, 0xFE020001, 0xFF02FF00, 0xFB03FE02, 0xFC0006FE);
	r5 = D(r5, s0_2_2, 0xF7040200, 0x02FEFDF8, 0xF10405FB, 0xFC000101);
	r6 = D(r6, s0_2_2, 0x07FC00F6, 0xF8FC02FD, 0xFE00FFFA, 0xFE020001);
	r7 = D(r7, s0_2_2, 0x00030003, 0x0BF008FA, 0xFBFA0AFF, 0xFE040000);
	r0 = D(r0, s1_0_0, 0xFA0A0403, 0x0302FA03, 0xCE14F5FF, 0xFAF9090B);
	r1 = D(r1, s1_0_0, 0xF2FE07F8, 0xF8FDEEF9, 0xF5F506FA, 0x0023230A);
	r2 = D(r2, s1_0_0, 0xF90004FD, 0xFCFA0A05, 0x020200FE, 0xFDF11E02);
	r3 = D(r3, s1_0_0, 0x08FBF6FE, 0x03110107, 0xFBFE02FB, 0x0D03FFFB);
	r4 = D(r4, s1_0_0, 0xFF0101FF, 0x00FF05FF, 0x0101FC01, 0xFF020200);
	r5 = D(r5, s1_0_0, 0x04020808, 0x0405FFFE, 0xF0040208, 0x0BF5E9FB);
	r6 = D(r6, s1_0_0, 0x02030601, 0x0606DF0F, 0x00FDFD02, 0x02030401);
	r7 = D(r7, s1_0_0, 0x0B04EF05, 0x0FFC01FF, 0xFDFEFD00, 0xF7F514FC);
	r0 = D(r0, s1_0_1, 0xF5FE07EC, 0xFB03F809, 0xCCCE0D04, 0xFEFA0CF5);
	r1 = D(r1, s1_0_1, 0x050200F9, 0xF4FE0E05, 0xF7ECF5DF, 0x0D0EEEF9);
	r2 = D(r2, s1_0_1, 0xFFFBFA02, 0x11FCFCEE, 0xFDF703F7, 0x0BFE16EA);
	r3 = D(r3, s1_0_1, 0xF006FD02, 0xEDDAF9E7, 0xF503FDFB, 0x06FFFBF8);
	r4 = D(r4, s1_0_1, 0x02FFF501, 0x04F8DC01, 0xFCFC0802, 0x020200FF);
	r5 = D(r5, s1_0_1, 0xFE07E20C, 0x0200F907, 0x0FFBEEEE, 0x09F917F1);
	r6 = D(r6, s1_0_1, 0x0A00FAFB, 0xF1050508, 0xFD0502FD, 0xFEFA0FFE);
	r7 = D(r7, s1_0_1, 0x02060EFE, 0x10FEE5F1, 0xF7010E02, 0x0D0102F1);
	r0 = D(r0, s1_0_2, 0x0CFFFC01, 0x00FFFD01, 0xF9F107FA, 0x08ED0500);
	r1 = D(r1, s1_0_2, 0x02FB01FD, 0x09FEFFFE, 0xF9D70CE2, 0x03FC0F0C);
	r2 = D(r2, s1_0_2, 0x0CF5FDFF, 0x140C0ADD, 0x0500FEFB, 0x14EA0009);
	r3 = D(r3, s1_0_2, 0x00000300, 0x03F50FFE, 0xFFFD0300, 0xF8FE050A);
	r4 = D(r4, s1_0_2, 0x0000FE00, 0x0000FFFF, 0x01FEFC03, 0xFDFE0002);
	r5 = D(r5, s1_0_2, 0xF803050D, 0xFCFE0102, 0xFD040702, 0xFD0CFB05);
	r6 = D(r6, s1_0_2, 0x0100FCFF, 0xFF0805FE, 0xFD0307FC, 0x07FFF9FE);
	r7 = D(r7, s1_0_2, 0x0400FEFF, 0xFCFBFBF8, 0x04020303, 0x0500F8F8);
	r0 = D(r0, s1_1_0, 0xECF0080B, 0xFDFDFE03, 0x2DF1D8D7, 0x081C94F0);
	r1 = D(r1, s1_1_0, 0xEFFDE5E0, 0xFBF1F51A, 0x05D2F9FA, 0x0400F9D7);
	r2 = D(r2, s1_1_0, 0x090CFBFF, 0x0F03F7FD, 0x02080004, 0xF515F0E5);
	r3 = D(r3, s1_1_0, 0xFAFE02FD, 0xF8ED04FE, 0xF5FE0706, 0xFC031105);
	r4 = D(r4, s1_1_0, 0xFEFEFE01, 0x00000001, 0xFC0B0309, 0x01060101);
	r5 = D(r5, s1_1_0, 0x0016FBFB, 0xFE0AFEFA, 0x15FCE7E2, 0x08FE0407);
	r6 = D(r6, s1_1_0, 0xF8FD01FF, 0xE3EC15F9, 0x01020300, 0xFB090A03);
	r7 = D(r7, s1_1_0, 0xEAC912E4, 0x0804F1EE, 0xFB030D02, 0xFE050CF4);
	r0 = D(r0, s1_1_1, 0xF8CECAB5, 0xEDF916DB, 0xBED7C705, 0xB6E0E2F5);
	r1 = D(r1, s1_1_1, 0x12F9E411, 0x12E9F0E7, 0x13FCD8C0, 0x0D02FBBA);
	r2 = D(r2, s1_1_1, 0x0ACA0C02, 0xE8C9F912, 0x0D03FBEE, 0xBD02E9B7);
	r3 = D(r3, s1_1_1, 0xDDE3FDD5, 0x04EE0203, 0x03CD00FD, 0xECF8EBF0);
	r4 = D(r4, s1_1_1, 0x05F31AF6, 0xF2F41CF4, 0xFD0CFAE7, 0xF6E915F1);
	r5 = D(r5, s1_1_1, 0x0FDC29B8, 0xF70110EC, 0xD2FEF4C3, 0x03F6E5FF);
	r6 = D(r6, s1_1_1, 0xDA0007D8, 0xFDFD07E1, 0x0010FBEF, 0x04040ADE);
	r7 = D(r7, s1_1_1, 0x00F6E806, 0xD1FB1905, 0x0EF8030D, 0xD6FFF8D8);
	r0 = D(r0, s1_1_2, 0x100B0ECB, 0xFD00FCFD, 0xB1F0D311, 0xF132F5EA);
	r1 = D(r1, s1_1_2, 0xFAFD0702, 0xF5F8FF0F, 0xF3F5E5F9, 0xE6FAF105);
	r2 = D(r2, s1_1_2, 0xDFF601BD, 0x010410F7, 0xE8020BF9, 0xE31EE8E5);
	r3 = D(r3, s1_1_2, 0x03FCFC06, 0xF004EEFD, 0xFB0502F7, 0x170301F9);
	r4 = D(r4, s1_1_2, 0x01FF09FF, 0x02FF0FFD, 0xF8000602, 0x15FB0F01);
	r5 = D(r5, s1_1_2, 0xF4F50600, 0x0504FC02, 0xF4E8F00A, 0x09F81002);
	r6 = D(r6, s1_1_2, 0x0401FFF6, 0x05FC0704, 0xF201FCFB, 0xF705F500);
	r7 = D(r7, s1_1_2, 0x0103FB02, 0x0B00FAF2, 0xFBFBFC03, 0xFC0602FF);
	r0 = D(r0, s1_2_0, 0x04F10A06, 0x00FBFD01, 0xEFB6EB10, 0xB0FF0DD6);
	r1 = D(r1, s1_2_0, 0x04E1F9F8, 0x05F7FD0A, 0xFF08FC02, 0xFAE7FAE7);
	r2 = D(r2, s1_2_0, 0x080C00FF, 0xFF0B0302, 0xFFFDFDFE, 0xF2BFFAF9);
	r3 = D(r3, s1_2_0, 0xFFFAF9ED, 0x01FF0103, 0xFFF10101, 0x07F5F3FF);
	r4 = D(r4, s1_2_0, 0x00FCFF00, 0x00FBFD00, 0xFAE6F607, 0x01FFFE00);
	r5 = D(r5, s1_2_0, 0x030102FE, 0x0D060BFB, 0x06080E03, 0xFC02FBFF);
	r6 = D(r6, s1_2_0, 0xFCFDFFFF, 0x0EE903FB, 0x00FEFE00, 0x01FAFF00);
	r7 = D(r7, s1_2_0, 0x18ED01F2, 0xF9070BEF, 0x00F4FBF8, 0xFCEF0005);
	r0 = D(r0, s1_2_1, 0x00DC03ED, 0xFDF6FBFF, 0x0DE41815, 0xE9D91CCA);
	r1 = D(r1, s1_2_1, 0xF9F50B08, 0xD2FCF1EF, 0xFC0F0503, 0xDCAB15F0);
	r2 = D(r2, s1_2_1, 0xF9DF0004, 0x0AE60002, 0x05F10204, 0xF3DE05FC);
	r3 = D(r3, s1_2_1, 0xF7F80201, 0x0404FCFB, 0xFD05F9FC, 0x05EE0607);
	r4 = D(r4, s1_2_1, 0x00FFFD01, 0x04010001, 0x05FE0209, 0x0500FF00);
	r5 = D(r5, s1_2_1, 0xFDFEF5FE, 0xEDF9E7DD, 0xDFEDEEF6, 0x03F50303);
	r6 = D(r6, s1_2_1, 0x06EB13F8, 0xF3F8E5F2, 0x03F7FA00, 0xF003FC05);
	r7 = D(r7, s1_2_1, 0x07ED0EFC, 0x13F414E9, 0xFDE4E4BB, 0xF5FFFE0C);
	r0 = D(r0, s1_2_2, 0xD70301FC, 0xF503FCFE, 0x35D0320B, 0x14B82FE5);
	r1 = D(r1, s1_2_2, 0xF400FBFE, 0xEEFF02FE, 0x10011503, 0xD3EBF00E);
	r2 = D(r2, s1_2_2, 0xEB00F2F1, 0xFCFFFC01, 0xFD01FFFF, 0x03E21809);
	r3 = D(r3, s1_2_2, 0x03FD0104, 0x04FE02FC, 0xF6FBFDFE, 0xFD0108FC);
	r4 = D(r4, s1_2_2, 0x0402FE00, 0x0101FC00, 0xFFFF0401, 0xFD00FE00);
	r5 = D(r5, s1_2_2, 0xFB04FA0C, 0x02FF06FE, 0x1305010A, 0xFDFDFFFF);
	r6 = D(r6, s1_2_2, 0xFDF50D08, 0xF9FEFEFF, 0xFFFDFF03, 0x03FE0408);
	r7 = D(r7, s1_2_2, 0xFFFE0404, 0x05F8F7F2, 0xF4FC09F2, 0x09FB0902);
	s0_0_0 = G[6][xy.y+0][xy.x+0]; s0_0_1 = G[6][xy.y+0][xy.x+1];
	s0_0_2 = G[6][xy.y+0][xy.x+2]; s0_1_0 = G[6][xy.y+1][xy.x+0];
	s0_1_1 = G[6][xy.y+1][xy.x+1]; s0_1_2 = G[6][xy.y+1][xy.x+2];
	s0_2_0 = G[6][xy.y+2][xy.x+0]; s0_2_1 = G[6][xy.y+2][xy.x+1];
	s0_2_2 = G[6][xy.y+2][xy.x+2]; s1_0_0 = G[7][xy.y+0][xy.x+0];
	s1_0_1 = G[7][xy.y+0][xy.x+1]; s1_0_2 = G[7][xy.y+0][xy.x+2];
	s1_1_0 = G[7][xy.y+1][xy.x+0]; s1_1_1 = G[7][xy.y+1][xy.x+1];
	s1_1_2 = G[7][xy.y+1][xy.x+2]; s1_2_0 = G[7][xy.y+2][xy.x+0];
	s1_2_1 = G[7][xy.y+2][xy.x+1]; s1_2_2 = G[7][xy.y+2][xy.x+2];
	r0 = D(r0, s0_0_0, 0xFFF6E7F0, 0x00000403, 0xFD11E7DF, 0x08020AFA);
	r1 = D(r1, s0_0_0, 0xFE060406, 0x05070D06, 0xF9F91500, 0x0506110F);
	r2 = D(r2, s0_0_0, 0xFFFE0106, 0x0004F6F6, 0xFF0000FE, 0xF8FF0D03);
	r3 = D(r3, s0_0_0, 0xFF0102FC, 0x0C03F9F9, 0xF8FE0807, 0x0804F9FC);
	r4 = D(r4, s0_0_0, 0xFD00FDFE, 0xFD00FEFD, 0xFE000300, 0xFFFFFE00);
	r5 = D(r5, s0_0_0, 0x03FF0505, 0x0002FFFD, 0xFD03FD06, 0x05FE140A);
	r6 = D(r6, s0_0_0, 0xFF0201FE, 0x0C0CFEFF, 0xFF01FDFD, 0xFF01FFFE);
	r7 = D(r7, s0_0_0, 0x1207E9FD, 0x0400F4FF, 0xFD010308, 0xFB06FBFE);
	r0 = D(r0, s0_0_1, 0x050218F6, 0x0205FBFD, 0x0C0CCAC6, 0xEE07ED09);
	r1 = D(r1, s0_0_1, 0x01FE0BFC, 0xFDF71705, 0x12FF14FA, 0x0DDADFFC);
	r2 = D(r2, s0_0_1, 0x0400EDF5, 0x1B11D2F4, 0xF4080904, 0xF7FFFCFE);
	r3 = D(r3, s0_0_1, 0x03FDFA03, 0xE9EA23F2, 0x10FBF6F5, 0xFCF9F902);
	r4 = D(r4, s0_0_1, 0xFE04FFFD, 0xFEFDF8FD, 0xFB070203, 0xFEFFFCFE);
	r5 = D(r5, s0_0_1, 0x0002F6FA, 0x01FAFF01, 0x0AF507F8, 0x2F0DE6E7);
	r6 = D(r6, s0_0_1, 0x0800FD02, 0x03FAEE0F, 0xFCFF0209, 0xF4000505);
	r7 = D(r7, s0_0_1, 0xF702FD03, 0x09FDF602, 0xF80A0A04, 0xF3F6FA03);
	r0 = D(r0, s0_0_2, 0x05F7ED01, 0xFC0CFE01, 0xF2FD040E, 0x0DF9F401);
	r1 = D(r1, s0_0_2, 0x02FE0302, 0x01EA03FE, 0x13FB0F10, 0xF8F81B00);
	r2 = D(r2, s0_0_2, 0x06FE08FD, 0xF00DF7FC, 0xFF06FC01, 0xFFFCFF03);
	r3 = D(r3, s0_0_2, 0x020802FD, 0xF818F6FA, 0x01F702FF, 0x02FA0EFE);
	r4 = D(r4, s0_0_2, 0xFD010000, 0xFC060500, 0xFF04FEFF, 0xFCF1F2FF);
	r5 = D(r5, s0_0_2, 0xFA09F806, 0xFB010001, 0x01FA0FFE, 0xF710FAFF);
	r6 = D(r6, s0_0_2, 0x02FE0200, 0xFC0A0604, 0xFCFEFF00, 0x00FBFD03);
	r7 = D(r7, s0_0_2, 0x00FF0101, 0x0703F7FE, 0x02010101, 0x02F7FB00);
	r0 = D(r0, s0_1_0, 0xE119D3E9, 0xFAFDFAFC, 0x12F8FA16, 0x1FE9EBE6);
	r1 = D(r1, s0_1_0, 0x00FF0A10, 0x0F0B11E0, 0x0100FBFB, 0x13F503FA);
	r2 = D(r2, s0_1_0, 0x0901090E, 0x0AFE030E, 0xFCFDFDF9, 0x1DF9CFC5);
	r3 = D(r3, s0_1_0, 0xFDFEE9EF, 0xF0FF06FB, 0xF500F4DF, 0xF500ECE7);
	r4 = D(r4, s0_1_0, 0xFFFFFFFE, 0xFEFE0404, 0xF9FD04FC, 0xFFFEFE03);
	r5 = D(r5, s0_1_0, 0xFD03000E, 0x01000D12, 0x0EFA0712, 0xFEFDFEFE);
	r6 = D(r6, s0_1_0, 0x0AFDFBF9, 0x01F80703, 0x00FEFCF8, 0xF801FDFB);
	r7 = D(r7, s0_1_0, 0xFA09FBF2, 0x10FF0C08, 0x0A01F9F9, 0xFDFD04F5);
	r0 = D(r0, s0_1_1, 0x14041ECE, 0x021E2EEC, 0x3017F59A, 0x170481EB);
	r1 = D(r1, s0_1_1, 0x0D050C03, 0x0F0CEEFD, 0x1001F70C, 0xF131B2C8);
	r2 = D(r2, s0_1_1, 0xE9F6E8F0, 0x01FE0E00, 0x141814F9, 0x1AF0E614);
	r3 = D(r3, s0_1_1, 0x0A352AF4, 0x1D0DFB0B, 0x050D1506, 0x1F2409F3);
	r4 = D(r4, s0_1_1, 0xF6FC03F7, 0xFA040A05, 0x142516F2, 0xFB020B03);
	r5 = D(r5, s0_1_1, 0xF5F90EDC, 0xEF021BDB, 0xFE2EE2D6, 0xFD07F406);
	r6 = D(r6, s0_1_1, 0x00FFFE02, 0x0A1010EB, 0x02020716, 0x0E04CEEB);
	r7 = D(r7, s0_1_1, 0x0EF80CFE, 0x02043916, 0x15F7D8F6, 0x1209FBDF);
	r0 = D(r0, s0_1_2, 0xF627DB0A, 0xFF16F70A, 0x0E031DF5, 0x19D619EE);
	r1 = D(r1, s0_1_2, 0xF513FA03, 0x03D4F301, 0x010B0301, 0x12F81EFA);
	r2 = D(r2, s0_1_2, 0xFE30FBFD, 0x170706F0, 0xFB20ED02, 0x21ED110A);
	r3 = D(r3, s0_1_2, 0x0BE40705, 0x02FF0602, 0xF714FAF0, 0xF6FEFF10);
	r4 = D(r4, s0_1_2, 0xFF480902, 0xFE450A04, 0xFD17F907, 0x001009F8);
	r5 = D(r5, s0_1_2, 0x080DFB02, 0x04F90102, 0x06F30302, 0x0EFCFF03);
	r6 = D(r6, s0_1_2, 0x0601FE03, 0x05F207FF, 0x0A001AE6, 0x030D0A01);
	r7 = D(r7, s0_1_2, 0xFB0DFC01, 0x030BFC08, 0x03FF0903, 0x010503FB);
	r0 = D(r0, s0_2_0, 0x05F7FEFD, 0xFBFE0204, 0xF3071B1E, 0xF40608F2);
	r1 = D(r1, s0_2_0, 0xFB060105, 0x030B05FC, 0xFF000400, 0x16EF08F5);
	r2 = D(r2, s0_2_0, 0x04010205, 0xFCFE0100, 0xFEFE0003, 0x0D060710);
	r3 = D(r3, s0_2_0, 0xFE030B0B, 0x010202FF, 0xFB010707, 0x0902FB03);
	r4 = D(r4, s0_2_0, 0xFF00FE00, 0xFE00FF02, 0x03FC0400, 0xFDFFFD00);
	r5 = D(r5, s0_2_0, 0xFE010006, 0xF800FFFF, 0xFD0605FD, 0xFD0201FE);
	r6 = D(r6, s0_2_0, 0xFA040603, 0xF803F607, 0xFE00FEFF, 0x02030305);
	r7 = D(r7, s0_2_0, 0x02FFF704, 0x0300F6F5, 0xFAF80DFD, 0xFE0206FC);
	r0 = D(r0, s0_2_1, 0x01F51C04, 0xFF0BFC0C, 0xC9240F2F, 0xD70CDDC9);
	r1 = D(r1, s0_2_1, 0x0AEA0503, 0x09F7E3E7, 0xF6FD12F7, 0xC130E5E3);
	r2 = D(r2, s0_2_1, 0xF6F201F7, 0x0A06F8FF, 0xF90407FF, 0xF01B16F6);
	r3 = D(r3, s0_2_1, 0xFAFC06F4, 0x00000000, 0x1005F9F8, 0x00F70FFB);
	r4 = D(r4, s0_2_1, 0xFE0001FF, 0xFC010100, 0xF301FEFD, 0x01FEFF01);
	r5 = D(r5, s0_2_1, 0xFE000306, 0x08FCE813, 0xF6F109FE, 0x04FD04FE);
	r6 = D(r6, s0_2_1, 0xE7FC10F9, 0x07F6FB00, 0xFDFFF909, 0xFFF908FF);
	r7 = D(r7, s0_2_1, 0x03FEF308, 0xFAF3FDFE, 0x010D0E0E, 0xF6FF0505);
	r0 = D(r0, s0_2_2, 0xF709F305, 0x00FD01FF, 0xEDFE001A, 0x09CF0D24);
	r1 = D(r1, s0_2_2, 0xFE07FE00, 0x08F0F6FC, 0xFE050AF4, 0x010512F6);
	r2 = D(r2, s0_2_2, 0x0C040601, 0x01FD0305, 0x0109FCFD, 0xEEFF0A04);
	r3 = D(r3, s0_2_2, 0x0501FCFC, 0x03FF0202, 0x06FC030A, 0x0A05FCF3);
	r4 = D(r4, s0_2_2, 0xFE01FE00, 0xFD02FF00, 0x000DFD04, 0xFEF80000);
	r5 = D(r5, s0_2_2, 0x05FCFE08, 0xFFF7FBFE, 0x0BFF04F9, 0x03FCFF00);
	r6 = D(r6, s0_2_2, 0x060106F8, 0x03000101, 0xFCFD0201, 0xFCFD04FC);
	r7 = D(r7, s0_2_2, 0x03FDFEFF, 0x02F703F9, 0x05F804FF, 0xFDFFFE01);
	r0 = D(r0, s1_0_0, 0xF80600F8, 0xFE01FE00, 0xFB4F0A1E, 0xF20E050E);
	r1 = D(r1, s1_0_0, 0xF9F506FC, 0xFDEAFEF0, 0xF503020A, 0x03FCFD09);
	r2 = D(r2, s1_0_0, 0xFDFDFF03, 0xFE010004, 0xFE02FFFF, 0xFEF706FD);
	r3 = D(r3, s1_0_0, 0xFA05FBFE, 0xFE070000, 0x0BF803FF, 0x03F8FEFE);
	r4 = D(r4, s1_0_0, 0x0000FFFF, 0xFF010000, 0xFE0200FF, 0x000100FF);
	r5 = D(r5, s1_0_0, 0xFCF701FE, 0xFF09FFFD, 0xFD030007, 0xF8FB0702);
	r6 = D(r6, s1_0_0, 0x02FB0100, 0x0200FC00, 0x020300FD, 0x00FDFFFF);
	r7 = D(r7, s1_0_0, 0xFA0AF70C, 0x02ED02FB, 0x01FFFE04, 0x07FDFD0A);
	r0 = D(r0, s1_0_1, 0xE30402FE, 0xFC05FDFF, 0xF24FDBE5, 0xFAF20604);
	r1 = D(r1, s1_0_1, 0xF608FD02, 0xFD2BEBEF, 0xF0F1E1E1, 0xFA0503F4);
	r2 = D(r2, s1_0_1, 0xF5FCFB00, 0xF8E6F2FF, 0x02F20101, 0xFC080CF6);
	r3 = D(r3, s1_0_1, 0x04FE09FF, 0xECF4F504, 0xFA0EF401, 0x03F302F8);
	r4 = D(r4, s1_0_1, 0x010300FD, 0x0006FF01, 0xFBFE02F9, 0x000000FB);
	r5 = D(r5, s1_0_1, 0xF9E3EFFF, 0x000702FC, 0xF101FC05, 0xDFFEDB06);
	r6 = D(r6, s1_0_1, 0x03FC0002, 0x01FFFB08, 0x000300FB, 0x03F80701);
	r7 = D(r7, s1_0_1, 0xFCF3FEFB, 0x090301F6, 0xFEF90003, 0x05F8FE06);
	r0 = D(r0, s1_0_2, 0xFFEEFF0B, 0xFEFE0100, 0xD74481DA, 0xDF1601F2);
	r1 = D(r1, s1_0_2, 0x03FDFDFA, 0x02F5FCE5, 0xFAFFF9F7, 0xF3FA0603);
	r2 = D(r2, s1_0_2, 0xFDF2FB04, 0x06F303F4, 0x0402FC01, 0xFA04F702);
	r3 = D(r3, s1_0_2, 0x02FE03FD, 0xF2FB01F6, 0xFAFAFFFA, 0xFC05FD01);
	r4 = D(r4, s1_0_2, 0xFE01FF00, 0xFF050002, 0xFEFB02FE, 0xFE000002);
	r5 = D(r5, s1_0_2, 0xFBF4FD05, 0xFD020306, 0x01FF0101, 0xF8FB0308);
	r6 = D(r6, s1_0_2, 0x00FDFC03, 0x0601FF06, 0xFFFE03FB, 0x02F90002);
	r7 = D(r7, s1_0_2, 0xFB0200FD, 0x09FAFCF9, 0x010001FD, 0x08FF0303);
	r0 = D(r0, s1_1_0, 0xDCFF0206, 0xFC0DFC01, 0xF2D7D8E2, 0x03F209E1);
	r1 = D(r1, s1_1_0, 0xFDF50BFE, 0xF4E2F2F7, 0xF8F402FB, 0xD3FA0714);
	r2 = D(r2, s1_1_0, 0x06F70404, 0x03FC01FA, 0xFE0701FE, 0xF70FF7F6);
	r3 = D(r3, s1_1_0, 0x000B0300, 0xFF04FEFC, 0xEE06FA05, 0xF70804FC);
	r4 = D(r4, s1_1_0, 0x00010001, 0x0000FF00, 0xF7FCF601, 0x0104FF00);
	r5 = D(r5, s1_1_0, 0xFE070003, 0xFC050103, 0x02F10B04, 0x0104FBF9);
	r6 = D(r6, s1_1_0, 0x02F9FB00, 0x04FBF401, 0xFE04FEFF, 0x02060104);
	r7 = D(r7, s1_1_0, 0xEA0EF3D5, 0xFFDB00F6, 0x04F7FEF9, 0xFAF8FB06);
	r0 = D(r0, s1_1_1, 0xC2F2DE10, 0xFB03F4FB, 0xFCF9CACA, 0xE306E312);
	r1 = D(r1, s1_1_1, 0xD7F6FD0F, 0x0D33E3EF, 0xFAEF05FF, 0xFFEEE7E9);
	r2 = D(r2, s1_1_1, 0xD2F5FA06, 0xF00300FD, 0xF5ECF9FE, 0xF9FCAA10);
	r3 = D(r3, s1_1_1, 0xEC00F2F9, 0xFB000508, 0xFB15F2FB, 0xE7F3F606);
	r4 = D(r4, s1_1_1, 0xFC0500FF, 0xFC0001FC, 0xFD2AD806, 0xFDFF02FC);
	r5 = D(r5, s1_1_1, 0x04EED2E8, 0xEB03E7FA, 0xE3F4DFC5, 0xF50407F9);
	r6 = D(r6, s1_1_1, 0xFD060CFD, 0x000BEFFD, 0xFFFD0400, 0xF5FCEB00);
	r7 = D(r7, s1_1_1, 0x020EFE11, 0xE2F8D3EA, 0x10FBF30D, 0xF809F8FB);
	r0 = D(r0, s1_1_2, 0x18F10807, 0xFDF501FF, 0x12EEE806, 0x2303053F);
	r1 = D(r1, s1_1_2, 0x01F5FEFD, 0xFA03E8D3, 0xFEF40A0D, 0xFA0505FF);
	r2 = D(r2, s1_1_2, 0xF208F9FA, 0xF3FBFB02, 0x01EE01FE, 0x2617F721);
	r3 = D(r3, s1_1_2, 0x060DF805, 0x0A020006, 0xF5FA05FC, 0x0FF60300);
	r4 = D(r4, s1_1_2, 0x00FFFF00, 0xFFFCFFFF, 0xFBFA01FE, 0xFC03FD03);
	r5 = D(r5, s1_1_2, 0xE9FCF000, 0xF7050200, 0xC6000404, 0xE303FDF8);
	r6 = D(r6, s1_1_2, 0x05F80102, 0xF8FD06FD, 0xF603FBF8, 0x000A0101);
	r7 = D(r7, s1_1_2, 0x05FDFF02, 0x0AFA08F4, 0x01FEFCFF, 0xFCFD0100);
	r0 = D(r0, s1_2_0, 0xEC03FE01, 0xFEFF0100, 0x09FFFE30, 0x0260CB4F);
	r1 = D(r1, s1_2_0, 0xF3F201F9, 0xFEF002F2, 0x0204FE03, 0x01FAF908);
	r2 = D(r2, s1_2_0, 0xFCFEFEFE, 0xFE04FDFE, 0xFE010101, 0x1003FE18);
	r3 = D(r3, s1_2_0, 0xFC01FC03, 0xFF0101FE, 0xFFFCFEFC, 0xF9FDFD03);
	r4 = D(r4, s1_2_0, 0x0001FF00, 0x0100FF01, 0xFEFCFE03, 0x0002FF00);
	r5 = D(r5, s1_2_0, 0xFE0004FF, 0xFFFCFD00, 0xFB010304, 0x00010100);
	r6 = D(r6, s1_2_0, 0x0002FC04, 0xF806FCFD, 0xFF040000, 0xFEFAFF01);
	r7 = D(r7, s1_2_0, 0xFCF80800, 0xFFF2F8F4, 0xFAFEFEFE, 0x020103FD);
	r0 = D(r0, s1_2_1, 0xC30901F8, 0xFBFC02FE, 0xF81EFAFB, 0xF44A81E4);
	r1 = D(r1, s1_2_1, 0xE507FFF9, 0x01FEF0F8, 0x0708F706, 0x9001E1D1);
	r2 = D(r2, s1_2_1, 0xEB03FA02, 0x01FBFD04, 0xFE0102FE, 0x07F7FCFE);
	r3 = D(r3, s1_2_1, 0xFCF902ED, 0x000000FE, 0xF2FE0403, 0xF20601FC);
	r4 = D(r4, s1_2_1, 0x01010001, 0x0103FF00, 0xFC06F7FB, 0x00000000);
	r5 = D(r5, s1_2_1, 0xFFF403FD, 0xFCF70400, 0xEB0BF806, 0x01FDFE01);
	r6 = D(r6, s1_2_1, 0x0302FDFC, 0xFAF905FF, 0x00000000, 0x07FE0103);
	r7 = D(r7, s1_2_1, 0xF702FDF8, 0xFCF103F2, 0xF0FDFEF7, 0x06000001);
	r0 = D(r0, s1_2_2, 0x05F9FCFC, 0x0200FFFD, 0xE302F4D8, 0xB525FDCA);
	r1 = D(r1, s1_2_2, 0x0BFBFAFD, 0xF8F5FDDB, 0xFB0AFDFC, 0xA40D070E);
	r2 = D(r2, s1_2_2, 0xFDF2FBFF, 0xF801FD01, 0xFF010000, 0xDE0CFEE9);
	r3 = D(r3, s1_2_2, 0xFD00FE05, 0xFD020101, 0x06010207, 0x00FFFEFB);
	r4 = D(r4, s1_2_2, 0x00000000, 0x00000000, 0xFE0201FE, 0x00000002);
	r5 = D(r5, s1_2_2, 0xFDF40104, 0xFF0700FD, 0xF9F4FC06, 0xFB0003FF);
	r6 = D(r6, s1_2_2, 0xFEFEFCFA, 0x04F40203, 0xF902FEFF, 0xFBFFFA01);
	r7 = D(r7, s1_2_2, 0xF606FFFF, 0x09FBFEFD, 0xF4FFFEFF, 0xFBFD03FE);
	f0 = vec4(r0) * 6.2000124e-05;
	f0 += vec4(-2.421e-02, -8.393e-03, -3.920e-02, -5.409e-02);
	f0 = clamp(f0, vec4(0.0), vec4(1.0));
	imageStore(out_image, opos + ivec2(0, 0), f0);
	f1 = vec4(r1) * 6.2000124e-05;
	f1 += vec4(-2.184e-02, -1.206e-02, -2.109e-02, -4.935e-02);
	f1 = clamp(f1, vec4(0.0), vec4(1.0));
	imageStore(out_image, opos + ivec2(1, 0), f1);
	f2 = vec4(r2) * 6.2000124e-05;
	f2 += vec4(-1.286e-02, -1.040e-02, -6.918e-03, -3.920e-02);
	f2 = clamp(f2, vec4(0.0), vec4(1.0));
	imageStore(out_image, opos + ivec2(0, 1), f2);
	f3 = vec4(r3) * 6.2000124e-05;
	f3 += vec4(-1.222e-02, -8.339e-03, -9.489e-03, -1.060e-02);
	f3 = clamp(f3, vec4(0.0), vec4(1.0));
	imageStore(out_image, opos + ivec2(1, 1), f3);
	f4 = vec4(r4) * 6.2000124e-05;
	f4 += vec4(-6.852e-04, -1.213e-03, -5.408e-03, -3.959e-04);
	f4 = clamp(f4, vec4(0.0), vec4(1.0));
	imageStore(out_image, opos + ivec2(2, 0), f4);
	f5 = vec4(r5) * 6.2000124e-05;
	f5 += vec4(-7.282e-03, -6.824e-03, -1.606e-02, -8.029e-03);
	f5 = clamp(f5, vec4(0.0), vec4(1.0));
	imageStore(out_image, opos + ivec2(3, 0), f5);
	f6 = vec4(r6) * 6.2000124e-05;
	f6 += vec4(-1.525e-02, -1.460e-02, -7.401e-03, -7.439e-03);
	f6 = clamp(f6, vec4(0.0), vec4(1.0));
	imageStore(out_image, opos + ivec2(2, 1), f6);
	f7 = vec4(r7) * 6.2000124e-05;
	f7 += vec4(-9.025e-03, -6.912e-03, -1.860e-02, -1.563e-02);
	f7 = clamp(f7, vec4(0.0), vec4(1.0));
	imageStore(out_image, opos + ivec2(3, 1), f7);
}

//!DESC CuNNy-4x32-out-shuffle
//!HOOK LUMA
//!COMPUTE 16 16 8 8
//!BIND conv4
//!BIND LUMA
//!WIDTH LUMA.w 2 *
//!HEIGHT LUMA.h 2 *
//!COMPONENTS 1
//!WHEN OUTPUT.w LUMA.w / 1.3 > OUTPUT.h LUMA.h / 1.3 > *
#extension GL_EXT_shader_explicit_arithmetic_types_float16 : enable
#ifdef GL_EXT_shader_explicit_arithmetic_types_float16
#	define V4 f16vec4
#	define M4 f16mat4
#	define F float16_t
#else
#	define V4 vec4
#	define M4 mat4
#	define F float
#endif
shared V4 G[8][10][10];
void hook() {
	ivec2 xy = ivec2(gl_LocalInvocationID.xy);
	ivec2 pos = ivec2(gl_WorkGroupID.xy) * ivec2(8, 8) + xy;
	ivec2 opos = pos * ivec2(2, 2);
	ivec2 sz = ivec2(LUMA_size) - ivec2(1);
	for (int y = 0; y < 10; y += 8) {
		int ay = xy.y + y;
		if (ay >= 10) break;
		for (int x = 0; x < 10; x += 8) {
			int ax = xy.x + x;
			if (ax >= 10) break;
			vec2 p;
			p = vec2(clamp(pos + ivec2(x - 1, y - 1), ivec2(0), sz) * ivec2(4, 2) + ivec2(1, 1)) * conv4_pt;
			V4 sr0 = V4(conv4_gather(p, 0));
			V4 sg0 = V4(conv4_gather(p, 1));
			V4 sb0 = V4(conv4_gather(p, 2));
			V4 sa0 = V4(conv4_gather(p, 3));
			G[0][ay][ax] = V4(sr0.w, sg0.w, sb0.w, sa0.w);
			G[1][ay][ax] = V4(sr0.z, sg0.z, sb0.z, sa0.z);
			G[2][ay][ax] = V4(sr0.x, sg0.x, sb0.x, sa0.x);
			G[3][ay][ax] = V4(sr0.y, sg0.y, sb0.y, sa0.y);
			p = vec2(clamp(pos + ivec2(x - 1, y - 1), ivec2(0), sz) * ivec2(4, 2) + ivec2(3, 1)) * conv4_pt;
			V4 sr1 = V4(conv4_gather(p, 0));
			V4 sg1 = V4(conv4_gather(p, 1));
			V4 sb1 = V4(conv4_gather(p, 2));
			V4 sa1 = V4(conv4_gather(p, 3));
			G[4][ay][ax] = V4(sr1.w, sg1.w, sb1.w, sa1.w);
			G[5][ay][ax] = V4(sr1.z, sg1.z, sb1.z, sa1.z);
			G[6][ay][ax] = V4(sr1.x, sg1.x, sb1.x, sa1.x);
			G[7][ay][ax] = V4(sr1.y, sg1.y, sb1.y, sa1.y);
		}
	}
	barrier();
	V4 s0_0_0, s0_0_1, s0_0_2, s0_1_0, s0_1_1, s0_1_2, s0_2_0, s0_2_1, s0_2_2, s1_0_0, s1_0_1, s1_0_2, s1_1_0, s1_1_1, s1_1_2, s1_2_0, s1_2_1, s1_2_2;
	V4 r0;
	r0 = V4(0.0);
	s0_0_0 = G[0][xy.y+0][xy.x+0]; s0_0_1 = G[0][xy.y+0][xy.x+1];
	s0_0_2 = G[0][xy.y+0][xy.x+2]; s0_1_0 = G[0][xy.y+1][xy.x+0];
	s0_1_1 = G[0][xy.y+1][xy.x+1]; s0_1_2 = G[0][xy.y+1][xy.x+2];
	s0_2_0 = G[0][xy.y+2][xy.x+0]; s0_2_1 = G[0][xy.y+2][xy.x+1];
	s0_2_2 = G[0][xy.y+2][xy.x+2]; s1_0_0 = G[1][xy.y+0][xy.x+0];
	s1_0_1 = G[1][xy.y+0][xy.x+1]; s1_0_2 = G[1][xy.y+0][xy.x+2];
	s1_1_0 = G[1][xy.y+1][xy.x+0]; s1_1_1 = G[1][xy.y+1][xy.x+1];
	s1_1_2 = G[1][xy.y+1][xy.x+2]; s1_2_0 = G[1][xy.y+2][xy.x+0];
	s1_2_1 = G[1][xy.y+2][xy.x+1]; s1_2_2 = G[1][xy.y+2][xy.x+2];
	r0 += M4(9.457e-03, 3.534e-04, 1.828e-03, 3.677e-04, 1.984e-02, 7.773e-06, 1.822e-04, -1.301e-05, 3.216e-03, -2.815e-03, -3.239e-05, -5.919e-04, -5.994e-02, -2.032e-02, 5.518e-02, 1.784e-02) * s0_0_0;
	r0 += M4(-5.525e-02, 3.193e-02, -3.548e-03, 2.236e-03, 2.072e-02, 4.374e-02, 4.531e-03, -1.992e-03, -3.167e-03, 5.394e-03, 3.730e-03, 2.062e-03, -1.453e-01, -1.257e-01, 1.390e-01, 1.333e-01) * s0_0_1;
	r0 += M4(1.279e-03, -5.480e-03, 5.012e-04, -7.243e-03, -1.579e-03, -2.725e-04, -1.365e-04, 1.962e-03, -5.204e-03, -8.698e-03, 5.695e-04, 2.059e-03, -5.035e-02, -9.917e-02, 4.249e-02, 8.507e-02) * s0_0_2;
	r0 += M4(3.864e-03, -8.319e-04, 1.115e-02, -1.435e-03, 3.698e-02, -8.286e-04, 5.164e-02, 3.724e-04, 5.209e-02, 1.060e-02, -5.307e-02, -1.082e-02, 3.758e-03, 8.280e-04, -1.099e-02, -1.473e-02) * s0_1_0;
	r0 += M4(-1.752e-01, 1.927e-01, -1.846e-01, 1.767e-01, -2.170e-01, -3.898e-03, 1.212e-02, 2.270e-01, 1.248e-01, 1.335e-01, -1.159e-01, -1.364e-01, -1.169e-03, 2.614e-04, 9.306e-03, 1.219e-03) * s0_1_1;
	r0 += M4(1.842e-03, -1.295e-03, -8.674e-05, 5.018e-03, -2.550e-03, -4.548e-02, -9.821e-04, -2.827e-02, 1.130e-02, 4.916e-02, -7.068e-03, -4.205e-02, 1.183e-03, 2.756e-04, -6.663e-03, 1.478e-03) * s0_1_2;
	r0 += M4(3.030e-03, 6.698e-05, 5.208e-03, -3.268e-04, -1.078e-03, 1.765e-04, 6.623e-05, 3.659e-05, -5.986e-02, -4.754e-02, 6.894e-02, 4.326e-02, -4.442e-05, -2.207e-05, -7.434e-04, 1.615e-04) * s0_2_0;
	r0 += M4(1.685e-03, -2.567e-04, -4.088e-02, 3.119e-02, 2.191e-03, -4.672e-03, -2.618e-02, -1.300e-02, -3.379e-02, -4.690e-02, 1.848e-02, 5.600e-02, -6.311e-05, -1.036e-04, -1.434e-03, -1.418e-03) * s0_2_1;
	r0 += M4(-5.486e-04, -3.318e-03, 5.655e-04, -6.334e-03, 1.983e-04, 5.727e-04, -3.298e-04, -1.413e-02, -3.272e-03, -1.198e-02, 8.971e-03, 3.727e-03, 2.732e-05, -6.571e-05, -1.286e-04, -9.418e-04) * s0_2_2;
	r0 += M4(2.299e-04, 1.195e-04, -1.322e-03, 2.489e-05, -7.256e-03, 9.759e-06, 1.894e-07, 9.630e-05, 1.445e-05, 1.581e-06, -9.897e-08, -3.712e-06, 1.976e-03, 3.187e-04, -4.599e-03, 2.569e-03) * s1_0_0;
	r0 += M4(-3.952e-02, 1.071e-02, 3.702e-03, -3.315e-03, -2.288e-02, -2.143e-02, 8.219e-05, 7.073e-06, -2.938e-05, -4.022e-06, -9.294e-07, 6.605e-06, 1.655e-01, -1.556e-01, 7.955e-02, -6.958e-02) * s1_0_1;
	r0 += M4(-3.817e-04, 4.537e-02, 7.266e-04, -2.838e-03, 6.516e-07, -7.837e-03, 7.418e-06, 2.896e-06, 1.497e-05, 2.243e-06, 8.657e-07, -2.681e-06, -1.323e-03, 3.826e-04, -2.130e-04, 1.183e-03) * s1_0_2;
	r0 += M4(9.774e-04, -1.854e-05, 2.056e-03, -1.185e-04, -2.274e-02, 1.535e-04, -2.210e-02, -1.361e-05, 2.408e-02, 2.371e-04, -5.054e-04, 1.041e-03, -3.161e-03, 1.976e-04, -5.017e-03, -1.617e-04) * s1_1_0;
	r0 += M4(-1.711e-01, 8.093e-03, -1.870e-01, 3.892e-02, -6.462e-02, -6.274e-02, -6.274e-02, -6.518e-02, 1.873e-02, 3.474e-02, -1.090e-03, -2.707e-03, 2.666e-02, -3.177e-02, 1.372e-01, -1.189e-01) * s1_1_1;
	r0 += M4(-1.693e-03, 1.101e-01, -1.860e-03, 1.323e-01, -6.508e-05, -2.311e-02, 4.569e-05, -2.259e-02, 2.186e-03, 7.812e-03, 3.372e-04, 5.126e-04, 6.464e-06, 1.096e-02, -7.718e-04, 7.517e-03) * s1_1_2;
	r0 += M4(-1.171e-03, -9.218e-05, -7.380e-04, 9.245e-05, 2.179e-05, 5.623e-06, -7.001e-03, -5.214e-05, -8.919e-02, 3.935e-03, 3.986e-02, -4.677e-03, -2.555e-03, -1.855e-05, -6.267e-04, 7.867e-05) * s1_2_0;
	r0 += M4(5.471e-03, -2.706e-04, -8.798e-03, -3.337e-03, -9.840e-05, 8.528e-05, -2.483e-02, -2.352e-02, -1.565e-01, -2.348e-01, 1.039e-01, 1.534e-01, 4.019e-03, -5.918e-03, 5.197e-03, -1.209e-02) * s1_2_1;
	r0 += M4(7.856e-04, 1.132e-03, -2.985e-04, 2.449e-02, 1.190e-04, -2.499e-06, 1.020e-04, -8.011e-03, 6.519e-03, -9.193e-03, -2.339e-03, -4.308e-03, -2.523e-04, 7.417e-04, -2.666e-04, 3.805e-03) * s1_2_2;
	s0_0_0 = G[2][xy.y+0][xy.x+0]; s0_0_1 = G[2][xy.y+0][xy.x+1];
	s0_0_2 = G[2][xy.y+0][xy.x+2]; s0_1_0 = G[2][xy.y+1][xy.x+0];
	s0_1_1 = G[2][xy.y+1][xy.x+1]; s0_1_2 = G[2][xy.y+1][xy.x+2];
	s0_2_0 = G[2][xy.y+2][xy.x+0]; s0_2_1 = G[2][xy.y+2][xy.x+1];
	s0_2_2 = G[2][xy.y+2][xy.x+2]; s1_0_0 = G[3][xy.y+0][xy.x+0];
	s1_0_1 = G[3][xy.y+0][xy.x+1]; s1_0_2 = G[3][xy.y+0][xy.x+2];
	s1_1_0 = G[3][xy.y+1][xy.x+0]; s1_1_1 = G[3][xy.y+1][xy.x+1];
	s1_1_2 = G[3][xy.y+1][xy.x+2]; s1_2_0 = G[3][xy.y+2][xy.x+0];
	s1_2_1 = G[3][xy.y+2][xy.x+1]; s1_2_2 = G[3][xy.y+2][xy.x+2];
	r0 += M4(3.186e-02, 3.727e-03, -8.769e-04, -1.257e-04, -4.803e-03, 5.985e-03, -1.113e-03, -9.904e-04, 6.552e-03, -2.079e-04, 2.273e-04, -4.837e-04, -6.247e-03, -7.770e-03, 1.368e-03, 1.098e-03) * s0_0_0;
	r0 += M4(-5.540e-03, -3.227e-02, -8.170e-04, 6.550e-03, -2.305e-04, 2.443e-03, -2.967e-05, -5.879e-04, -3.424e-03, 7.662e-03, -1.516e-03, 2.936e-04, 1.611e-02, 5.370e-03, -2.251e-03, -1.664e-05) * s0_0_1;
	r0 += M4(1.178e-04, 1.191e-04, 9.049e-05, -1.397e-03, -2.107e-05, 2.787e-04, 2.896e-06, 2.900e-05, 1.651e-04, 2.221e-04, -2.178e-06, 1.406e-03, -6.607e-03, -4.982e-04, 4.861e-04, -1.384e-03) * s0_0_2;
	r0 += M4(1.531e-01, -3.512e-03, 1.562e-01, 1.234e-03, -7.649e-02, 5.504e-02, -2.703e-02, -5.289e-04, 6.018e-02, 7.037e-04, 3.891e-02, 1.856e-03, 2.703e-02, 3.273e-03, -4.708e-02, 2.355e-03) * s0_1_0;
	r0 += M4(7.086e-03, -1.618e-01, 7.707e-04, -1.606e-01, 3.423e-02, -1.489e-01, 5.471e-03, 2.231e-02, 1.868e-02, 2.435e-01, -2.389e-02, 3.778e-02, 1.379e-01, 1.175e-01, -1.710e-01, -1.430e-01) * s0_1_1;
	r0 += M4(-1.792e-04, 7.234e-04, -5.752e-04, 1.961e-03, -1.033e-03, 1.142e-02, -8.485e-04, 7.677e-04, -2.895e-04, -5.189e-03, 6.978e-04, -1.481e-02, 9.070e-03, 4.553e-02, -1.144e-02, -8.178e-02) * s0_1_2;
	r0 += M4(8.964e-04, 2.700e-05, 3.281e-02, -8.897e-04, 1.244e-02, 1.034e-03, 1.499e-01, 1.892e-03, -9.845e-05, 3.922e-05, 2.289e-02, -4.778e-04, 1.217e-04, 1.901e-05, 4.997e-03, 3.653e-03) * s0_2_0;
	r0 += M4(-2.462e-03, -5.967e-04, -2.071e-04, -3.701e-02, -2.070e-02, 9.204e-02, -1.070e-01, -4.106e-02, 4.053e-03, -5.817e-04, 3.139e-02, 6.189e-02, -7.799e-04, -7.239e-04, 1.641e-02, 3.482e-03) * s0_2_1;
	r0 += M4(-1.993e-04, -4.803e-04, 1.157e-04, 9.389e-04, -8.406e-03, -1.679e-02, 3.230e-04, 1.664e-03, 2.007e-04, -6.699e-04, 1.362e-03, 5.970e-05, -6.117e-04, 5.422e-04, 5.499e-03, 1.262e-02) * s0_2_2;
	r0 += M4(-7.843e-03, -7.272e-04, -7.318e-04, 5.438e-04, -6.972e-05, 1.943e-06, 3.031e-06, -4.978e-06, -3.943e-05, 3.148e-05, 4.246e-05, -4.082e-06, 1.332e-02, 1.613e-03, 3.262e-03, -1.872e-03) * s1_0_0;
	r0 += M4(4.187e-02, -1.841e-02, -8.888e-03, 2.277e-03, 6.567e-04, 1.478e-04, 1.085e-06, -3.767e-05, 2.212e-02, 4.782e-03, 1.251e-03, 4.609e-04, -3.799e-02, 3.791e-03, 5.905e-03, -1.199e-02) * s1_0_1;
	r0 += M4(-3.587e-04, 1.209e-02, 1.210e-04, 2.607e-03, -1.635e-03, -2.285e-04, -2.397e-06, 4.135e-05, -1.737e-03, -1.515e-03, -1.972e-03, 2.400e-03, 5.164e-03, -1.665e-03, 1.091e-03, -8.948e-04) * s1_0_2;
	r0 += M4(-3.430e-02, -3.686e-04, -2.601e-02, -1.280e-03, -5.121e-04, -7.029e-04, 4.828e-04, 2.116e-04, 2.010e-02, -2.126e-04, -6.735e-04, 3.119e-05, -1.204e-02, -6.686e-04, 1.306e-02, -1.556e-03) * s1_1_0;
	r0 += M4(7.583e-02, 5.731e-02, 1.652e-01, -4.568e-02, 7.803e-02, 5.255e-02, -1.171e-03, -1.786e-03, -3.623e-01, 5.376e-02, 8.032e-02, 8.592e-03, 2.078e-01, -6.937e-02, -1.585e-01, 1.947e-01) * s1_1_1;
	r0 += M4(-3.791e-03, -3.379e-03, -3.560e-03, 9.926e-03, -1.727e-03, -3.046e-02, 1.083e-03, 3.959e-03, 6.237e-03, 1.286e-02, 6.740e-03, -1.265e-01, -5.591e-03, -5.261e-02, 5.785e-03, -4.115e-02) * s1_1_2;
	r0 += M4(3.189e-03, -4.423e-04, 6.271e-04, -5.594e-04, 6.517e-02, -9.213e-04, 3.628e-02, -6.377e-04, 3.508e-04, -4.320e-04, 3.921e-03, 1.115e-03, -4.879e-05, 3.536e-06, -4.668e-03, 3.458e-04) * s1_2_0;
	r0 += M4(5.485e-04, 2.654e-03, 3.999e-03, 4.571e-02, 1.575e-01, -1.562e-01, -1.564e-01, 2.420e-01, -2.633e-03, 3.509e-03, 1.578e-02, -9.053e-02, -2.759e-03, -3.775e-04, 1.475e-02, -1.381e-02) * s1_2_1;
	r0 += M4(6.249e-05, -1.325e-03, -1.625e-04, -6.102e-03, -1.548e-03, 2.414e-02, 1.125e-03, 7.979e-04, -1.985e-04, -3.006e-05, -5.814e-03, 1.985e-02, -2.320e-03, 2.625e-06, 2.034e-03, 1.136e-02) * s1_2_2;
	s0_0_0 = G[4][xy.y+0][xy.x+0]; s0_0_1 = G[4][xy.y+0][xy.x+1];
	s0_0_2 = G[4][xy.y+0][xy.x+2]; s0_1_0 = G[4][xy.y+1][xy.x+0];
	s0_1_1 = G[4][xy.y+1][xy.x+1]; s0_1_2 = G[4][xy.y+1][xy.x+2];
	s0_2_0 = G[4][xy.y+2][xy.x+0]; s0_2_1 = G[4][xy.y+2][xy.x+1];
	s0_2_2 = G[4][xy.y+2][xy.x+2]; s1_0_0 = G[5][xy.y+0][xy.x+0];
	s1_0_1 = G[5][xy.y+0][xy.x+1]; s1_0_2 = G[5][xy.y+0][xy.x+2];
	s1_1_0 = G[5][xy.y+1][xy.x+0]; s1_1_1 = G[5][xy.y+1][xy.x+1];
	s1_1_2 = G[5][xy.y+1][xy.x+2]; s1_2_0 = G[5][xy.y+2][xy.x+0];
	s1_2_1 = G[5][xy.y+2][xy.x+1]; s1_2_2 = G[5][xy.y+2][xy.x+2];
	r0 += M4(5.937e-03, -2.582e-03, 2.163e-03, 7.609e-05, 3.446e-05, -3.161e-06, 7.783e-06, 2.992e-06, -7.443e-03, 3.854e-04, 2.068e-04, 7.427e-05, -5.643e-03, 2.606e-03, -2.083e-03, -4.759e-05) * s0_0_0;
	r0 += M4(3.114e-04, -1.419e-02, 7.179e-05, -2.235e-03, -4.804e-05, 2.486e-04, -1.372e-05, -1.104e-05, -5.817e-02, -1.703e-02, 4.996e-05, -3.677e-03, -1.097e-03, 1.523e-02, -9.560e-05, 2.438e-03) * s0_0_1;
	r0 += M4(4.956e-06, 2.364e-04, -6.362e-06, -3.595e-05, 1.385e-05, -2.420e-04, 6.038e-06, 8.162e-06, 4.514e-04, -2.591e-02, 9.485e-04, -1.119e-03, -8.062e-08, -8.273e-05, 8.330e-06, 7.541e-07) * s0_0_2;
	r0 += M4(6.236e-02, -9.849e-04, 7.780e-02, 4.014e-03, 2.374e-02, 2.861e-03, -2.538e-03, -5.445e-04, 5.693e-03, 1.613e-04, 6.349e-04, 5.521e-04, -9.949e-02, -2.358e-03, -7.643e-02, -3.915e-03) * s0_1_0;
	r0 += M4(-1.074e-01, -1.964e-01, -5.089e-03, -8.406e-02, 9.570e-02, 9.985e-02, 2.490e-03, 4.723e-03, -3.109e-02, 6.918e-03, -2.652e-01, -3.677e-02, 1.482e-03, 8.268e-02, 1.429e-04, 8.253e-02) * s0_1_1;
	r0 += M4(-6.015e-04, -1.481e-02, -1.179e-05, 3.377e-03, 8.335e-04, 1.341e-02, 6.742e-05, -3.083e-03, 1.633e-03, -2.903e-02, -2.069e-03, -4.578e-02, 6.575e-07, 1.953e-05, -2.167e-05, -3.634e-06) * s0_1_2;
	r0 += M4(-1.529e-03, -3.711e-04, 2.606e-02, 9.124e-04, 5.300e-03, 8.230e-04, -3.108e-03, -4.044e-03, 4.239e-05, -9.115e-06, 1.229e-03, -5.181e-06, -5.155e-03, -6.042e-04, -2.655e-02, 4.134e-03) * s0_2_0;
	r0 += M4(6.529e-03, 3.024e-03, 1.342e-01, 9.773e-02, -5.637e-03, -5.941e-03, -1.169e-01, -1.051e-01, 2.703e-04, 6.614e-04, 3.866e-04, 4.760e-03, 7.891e-05, 3.992e-03, 1.225e-04, 2.065e-02) * s0_2_1;
	r0 += M4(-9.725e-05, -4.872e-03, 2.552e-04, 1.273e-02, 8.593e-05, 4.164e-03, -7.799e-06, -1.166e-02, -3.231e-04, 6.239e-04, -7.230e-04, -8.222e-03, -5.565e-07, 3.776e-05, 1.481e-05, 2.854e-06) * s0_2_2;
	r0 += M4(-7.694e-03, -2.533e-04, 8.269e-04, 3.142e-04, 8.584e-03, 1.475e-03, -5.223e-04, -5.753e-04, -1.601e-02, 3.983e-05, -6.120e-03, -7.721e-04, -2.352e-03, -2.000e-03, -2.273e-05, 4.890e-05) * s1_0_0;
	r0 += M4(3.124e-03, -7.225e-03, 1.595e-03, 1.827e-03, 6.043e-02, 4.157e-02, -1.614e-04, 4.905e-03, 9.557e-03, -1.598e-02, 1.671e-04, 4.996e-03, 6.146e-04, 1.560e-04, 4.051e-05, -5.690e-04) * s1_0_1;
	r0 += M4(2.635e-05, 8.603e-04, -5.222e-05, 2.142e-04, 1.983e-04, 2.007e-02, 9.742e-05, -1.292e-04, 2.398e-04, 6.761e-03, 3.083e-04, -7.493e-05, -4.019e-06, -1.035e-04, -3.544e-06, -2.535e-06) * s1_0_2;
	r0 += M4(-3.735e-02, -1.192e-03, -3.842e-02, -1.536e-03, -1.435e-02, -2.027e-04, -8.266e-03, -8.211e-04, -9.850e-03, 1.277e-03, -1.165e-02, 1.258e-03, -2.261e-02, -1.010e-02, 9.404e-04, 2.894e-03) * s1_1_0;
	r0 += M4(-5.237e-02, -1.512e-01, -7.305e-03, -8.075e-02, 6.530e-02, -4.735e-02, 1.759e-01, 4.640e-02, 1.702e-01, -1.809e-01, 1.014e-01, -1.751e-01, 2.614e-02, 7.546e-02, -3.987e-04, -2.832e-03) * s1_1_1;
	r0 += M4(1.996e-03, 6.412e-03, 5.548e-04, 4.564e-03, 4.530e-04, 4.306e-02, 7.038e-04, 4.678e-02, -2.600e-03, 1.120e-02, -1.680e-03, 1.840e-02, 1.469e-04, 2.891e-04, 1.575e-04, -9.700e-04) * s1_1_2;
	r0 += M4(2.871e-04, 2.266e-04, -1.134e-02, 5.966e-04, 2.534e-04, 1.042e-04, -6.009e-03, -6.134e-04, -3.326e-03, -5.100e-04, -1.017e-02, -2.133e-04, 6.469e-03, 9.226e-04, -2.305e-02, 1.254e-03) * s1_2_0;
	r0 += M4(-6.047e-04, 1.263e-03, -2.864e-02, -3.748e-02, -4.234e-03, 1.505e-03, -4.068e-03, -1.522e-02, -4.591e-03, -8.961e-05, 1.926e-02, -4.137e-02, -1.701e-01, 4.232e-02, 2.300e-01, -1.688e-01) * s1_2_1;
	r0 += M4(6.330e-05, -7.444e-04, 9.070e-04, -5.139e-04, 6.277e-04, -1.010e-03, -6.649e-04, 8.810e-03, 8.069e-04, 3.273e-03, -1.964e-04, 3.697e-03, 6.645e-03, 5.968e-02, -2.753e-03, 2.131e-02) * s1_2_2;
	s0_0_0 = G[6][xy.y+0][xy.x+0]; s0_0_1 = G[6][xy.y+0][xy.x+1];
	s0_0_2 = G[6][xy.y+0][xy.x+2]; s0_1_0 = G[6][xy.y+1][xy.x+0];
	s0_1_1 = G[6][xy.y+1][xy.x+1]; s0_1_2 = G[6][xy.y+1][xy.x+2];
	s0_2_0 = G[6][xy.y+2][xy.x+0]; s0_2_1 = G[6][xy.y+2][xy.x+1];
	s0_2_2 = G[6][xy.y+2][xy.x+2]; s1_0_0 = G[7][xy.y+0][xy.x+0];
	s1_0_1 = G[7][xy.y+0][xy.x+1]; s1_0_2 = G[7][xy.y+0][xy.x+2];
	s1_1_0 = G[7][xy.y+1][xy.x+0]; s1_1_1 = G[7][xy.y+1][xy.x+1];
	s1_1_2 = G[7][xy.y+1][xy.x+2]; s1_2_0 = G[7][xy.y+2][xy.x+0];
	s1_2_1 = G[7][xy.y+2][xy.x+1]; s1_2_2 = G[7][xy.y+2][xy.x+2];
	r0 += M4(-8.790e-02, 3.920e-03, -5.435e-03, -6.412e-03, 1.075e-03, -4.998e-05, -1.169e-04, 4.360e-05, -2.218e-02, -4.092e-02, -2.967e-03, 1.186e-03, -2.055e-02, 3.821e-05, -2.371e-03, 3.741e-04) * s0_0_0;
	r0 += M4(-1.169e-01, -1.892e-01, 6.641e-03, 1.222e-02, 4.197e-03, 8.279e-03, -2.444e-03, -6.715e-04, -1.462e-03, 1.735e-03, -1.892e-03, -6.157e-03, -2.083e-02, -4.651e-02, -3.805e-03, 9.741e-03) * s0_0_1;
	r0 += M4(5.235e-03, -1.218e-02, -4.324e-03, -5.132e-03, 2.978e-03, 4.150e-03, -1.025e-03, -4.319e-03, -3.153e-07, 6.498e-05, -1.847e-05, 8.077e-07, 1.317e-03, -9.422e-05, -3.168e-04, 2.206e-03) * s0_0_2;
	r0 += M4(-5.713e-04, 3.576e-04, 7.349e-02, -1.170e-02, 5.386e-03, 8.070e-04, 3.141e-03, 3.346e-04, 1.429e-01, -3.105e-02, 2.074e-02, -1.301e-01, 1.060e-02, -4.712e-03, -8.520e-02, 1.303e-02) * s0_1_0;
	r0 += M4(1.737e-03, -1.332e-03, 1.215e-01, 2.014e-01, -1.379e-01, -9.898e-03, 1.322e-01, 7.237e-03, 4.603e-03, 8.417e-02, 6.283e-03, 6.323e-02, -3.523e-02, 1.468e-01, 4.744e-02, -2.786e-01) * s0_1_1;
	r0 += M4(-9.361e-04, 7.314e-04, -1.834e-03, 3.649e-03, 1.863e-02, -1.204e-01, 3.057e-03, 1.082e-01, -1.966e-07, -2.558e-05, 2.509e-05, -8.366e-07, -2.132e-04, -7.404e-03, 3.619e-04, -3.039e-03) * s0_1_2;
	r0 += M4(-1.822e-05, 1.343e-05, -1.688e-05, 2.330e-04, 1.189e-04, -3.602e-04, 2.176e-03, -3.811e-04, -1.871e-03, 7.308e-04, 4.189e-02, 1.359e-03, 6.749e-04, -5.180e-06, 6.729e-03, 1.507e-03) * s0_2_0;
	r0 += M4(1.803e-05, -4.994e-05, -1.845e-04, -3.421e-06, 4.006e-03, -4.092e-04, -1.953e-02, 6.221e-04, -1.698e-04, 2.080e-03, 8.472e-05, 3.454e-02, 2.188e-03, -1.923e-03, 5.696e-03, 3.107e-02) * s0_2_1;
	r0 += M4(4.487e-08, -6.639e-06, 1.926e-04, -3.261e-04, -1.362e-03, 2.691e-03, -3.735e-03, -3.067e-02, 1.681e-07, 1.078e-06, -8.803e-06, 8.630e-08, 3.268e-05, -2.413e-04, -3.731e-04, 6.947e-04) * s0_2_2;
	r0 += M4(-4.202e-03, -3.890e-04, -1.136e-05, 6.364e-04, 5.467e-03, 8.044e-05, -1.876e-04, -2.441e-05, 4.003e-02, -9.404e-03, 1.101e-03, 9.450e-04, -2.595e-03, 2.023e-03, -9.293e-05, -4.433e-04) * s1_0_0;
	r0 += M4(4.515e-02, -1.220e-02, 5.159e-03, -5.474e-03, 1.171e-02, 1.620e-02, -1.275e-03, -2.479e-04, 1.255e-01, 1.606e-01, -1.337e-03, -4.135e-03, -1.680e-02, -7.757e-03, 7.776e-03, 6.433e-04) * s1_0_1;
	r0 += M4(-5.197e-03, 5.627e-02, -1.147e-03, -6.215e-03, -1.154e-03, 4.237e-04, -5.523e-05, -1.313e-03, -6.018e-03, 1.506e-02, 2.763e-04, 2.173e-03, 1.467e-03, -6.374e-03, 5.293e-05, -5.376e-04) * s1_0_2;
	r0 += M4(1.897e-03, 1.515e-04, 2.057e-04, 2.382e-04, 1.523e-02, -2.190e-04, 1.800e-02, -5.840e-04, -1.072e-04, -3.410e-03, -6.254e-02, 1.186e-03, -8.090e-04, 5.233e-04, -7.678e-03, 5.795e-03) * s1_1_0;
	r0 += M4(-2.934e-02, 8.024e-03, -1.434e-01, -8.942e-03, 6.909e-02, 5.869e-02, 6.371e-02, 7.467e-02, -1.637e-03, 5.724e-03, -1.218e-01, -1.636e-01, 2.481e-01, 7.460e-02, -9.743e-02, -6.711e-02) * s1_1_1;
	r0 += M4(1.286e-01, -2.642e-01, -1.942e-04, 1.860e-01, -2.237e-03, 1.569e-02, -1.572e-03, 1.469e-02, 6.516e-05, -2.201e-03, 2.499e-03, -1.586e-02, -2.812e-03, 3.566e-02, -3.211e-03, 4.578e-02) * s1_1_2;
	r0 += M4(-2.683e-05, 8.914e-07, 1.213e-03, 1.124e-05, 2.095e-04, -2.216e-05, 2.429e-03, -1.017e-04, 1.712e-04, 1.043e-04, 1.401e-03, -3.580e-04, -3.298e-04, -7.993e-05, 6.128e-03, -1.411e-03) * s1_2_0;
	r0 += M4(9.783e-04, -5.502e-04, -3.566e-04, 1.493e-03, -1.232e-03, -9.295e-04, 1.250e-02, 1.167e-02, -2.820e-04, -1.949e-04, -9.025e-05, 1.309e-03, -4.226e-03, 3.184e-04, 8.026e-03, 2.802e-02) * s1_2_1;
	r0 += M4(7.241e-04, -8.976e-04, -3.330e-02, -3.486e-02, -5.169e-04, -5.812e-04, -9.435e-04, 3.040e-03, 1.323e-04, 1.581e-04, -4.147e-04, 1.540e-04, 2.537e-04, -2.642e-04, 8.414e-04, -2.406e-03) * s1_2_2;
	r0 += V4(3.035e-11, 1.721e-11, -7.759e-11, 1.501e-11);
	r0 = r0;
	vec2 opt = 0.5 * LUMA_pt;
	vec2 fpos = (vec2(opos) + vec2(0.5)) * opt;
	imageStore(out_image, opos + ivec2(0, 0), vec4(r0.x + LUMA_tex(fpos + vec2(0.0, 0.0) * opt).r, 0.0, 0.0, 1.0));
	imageStore(out_image, opos + ivec2(1, 0), vec4(r0.y + LUMA_tex(fpos + vec2(1.0, 0.0) * opt).r, 0.0, 0.0, 1.0));
	imageStore(out_image, opos + ivec2(0, 1), vec4(r0.z + LUMA_tex(fpos + vec2(0.0, 1.0) * opt).r, 0.0, 0.0, 1.0));
	imageStore(out_image, opos + ivec2(1, 1), vec4(r0.w + LUMA_tex(fpos + vec2(1.0, 1.0) * opt).r, 0.0, 0.0, 1.0));
}
