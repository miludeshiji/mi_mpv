// CuNNy 4x24 (dp4a)
// Copyright (c) 2024 funnyplanter

// This program is free software; you can redistribute it and/or
// modify it under the terms of the GNU Lesser General Public
// License as published by the Free Software Foundation; either
// version 3.0 of the License, or (at your option) any later version.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
// Lesser General Public License for more details.
//
// You should have received a copy of the GNU Lesser General Public
// License along with this program.  If not, see <https://www.gnu.org/licenses/>.
/* ------------------------------------------------------------------- */


//!DESC CuNNy-4x24-in
//!HOOK LUMA
//!COMPUTE 24 16 8 8
//!BIND LUMA
//!SAVE in
//!WIDTH LUMA.w 3 *
//!HEIGHT LUMA.h 2 *
//!COMPONENTS 4
//!WHEN OUTPUT.w LUMA.w / 1.3 > OUTPUT.h LUMA.h / 1.3 > *
#extension GL_EXT_shader_explicit_arithmetic_types_float16 : enable
#ifdef GL_EXT_shader_explicit_arithmetic_types_float16
#	define V4 f16vec4
#	define M4 f16mat4
#	define F float16_t
#else
#	define V4 vec4
#	define M4 mat4
#	define F float
#endif
#define l0(x, y) F((LUMA_mul * texelFetch(LUMA_raw, clamp(pos + ivec2(x, y), ivec2(0), sz) * ivec2(1, 1) + ivec2(0, 0), 0)).r)
shared F G[1][10][10];
void hook() {
	ivec2 xy = ivec2(gl_LocalInvocationID.xy);
	ivec2 pos = ivec2(gl_WorkGroupID.xy) * ivec2(8, 8) + xy;
	ivec2 opos = pos * ivec2(3, 2);
	ivec2 sz = ivec2(LUMA_size) - ivec2(1);
	for (int y = 0; y < 10; y += 8) {
		int ay = xy.y + y;
		if (ay >= 10) break;
		for (int x = 0; x < 10; x += 8) {
			int ax = xy.x + x;
			if (ax >= 10) break;
			G[0][ay][ax] = l0(x - 1, y - 1);
		}
	}
	barrier();
	F s0_0_0, s0_0_1, s0_0_2, s0_1_0, s0_1_1, s0_1_2, s0_2_0, s0_2_1, s0_2_2;
	V4 r0, r1, r2, r3, r4, r5;
	r0 = V4(0.0); r1 = V4(0.0); r2 = V4(0.0); r3 = V4(0.0); r4 = V4(0.0); r5 = V4(0.0);
	s0_0_0 = G[0][xy.y+0][xy.x+0]; s0_0_1 = G[0][xy.y+0][xy.x+1];
	s0_0_2 = G[0][xy.y+0][xy.x+2]; s0_1_0 = G[0][xy.y+1][xy.x+0];
	s0_1_1 = G[0][xy.y+1][xy.x+1]; s0_1_2 = G[0][xy.y+1][xy.x+2];
	s0_2_0 = G[0][xy.y+2][xy.x+0]; s0_2_1 = G[0][xy.y+2][xy.x+1];
	s0_2_2 = G[0][xy.y+2][xy.x+2];
	r0 += V4(1.463e-02, 7.240e-05, 5.090e-02, 6.195e-02) * s0_0_0;
	r1 += V4(3.687e-01, 9.975e-03, 3.922e-04, 5.083e-01) * s0_0_0;
	r2 += V4(-1.105e-02, 7.402e-02, -1.911e-03, 1.743e-02) * s0_0_0;
	r3 += V4(-2.457e-04, -3.916e-01, -3.746e-02, 1.145e+00) * s0_0_0;
	r4 += V4(7.343e-02, 1.357e-01, 1.465e-03, 3.136e-01) * s0_0_0;
	r5 += V4(-8.716e-02, 5.004e-03, -3.633e-01, -2.054e-01) * s0_0_0;
	r0 += V4(2.292e-02, 5.498e-01, 9.139e-01, 7.754e-01) * s0_0_1;
	r1 += V4(-4.684e-01, -6.066e-02, -1.457e-02, -4.765e-01) * s0_0_1;
	r2 += V4(2.307e-02, -3.669e-02, -4.857e-02, -1.819e-02) * s0_0_1;
	r3 += V4(5.774e-04, 5.675e-01, 2.527e-02, 1.127e-03) * s0_0_1;
	r4 += V4(-4.033e-01, -5.171e-02, -5.499e-03, -6.062e-01) * s0_0_1;
	r5 += V4(-1.021e-01, -5.105e-03, -2.148e-01, -2.522e-01) * s0_0_1;
	r0 += V4(9.900e-02, 1.896e-01, 1.351e-02, 1.153e-02) * s0_0_2;
	r1 += V4(1.051e-01, 2.252e-02, 1.123e-02, -5.666e-02) * s0_0_2;
	r2 += V4(-2.411e-02, -6.471e-02, 4.385e-02, -5.001e-02) * s0_0_2;
	r3 += V4(8.063e-03, -1.575e-01, 1.936e-02, -2.363e-02) * s0_0_2;
	r4 += V4(2.904e-01, -7.956e-02, 1.809e-03, 2.794e-02) * s0_0_2;
	r5 += V4(-2.874e-02, -4.711e-04, 1.044e-01, 2.373e-02) * s0_0_2;
	r0 += V4(6.566e-02, 6.199e-04, -7.027e-02, -2.899e-02) * s0_1_0;
	r1 += V4(-1.267e-01, -9.386e-02, -1.321e-02, -5.605e-01) * s0_1_0;
	r2 += V4(-3.522e-01, 8.471e-02, 1.803e-01, -7.365e-02) * s0_1_0;
	r3 += V4(2.217e-02, 4.492e-01, 2.305e-02, 2.242e-03) * s0_1_0;
	r4 += V4(2.104e-01, 4.921e-01, 8.457e-01, 3.545e-01) * s0_1_0;
	r5 += V4(-2.725e-01, -3.087e-03, -4.366e-03, -6.420e-02) * s0_1_0;
	r0 += V4(-7.462e-03, -3.369e-01, -8.860e-01, -8.311e-01) * s0_1_1;
	r1 += V4(1.143e-01, 5.260e-01, 2.165e-01, 5.374e-01) * s0_1_1;
	r2 += V4(1.059e-01, 4.940e-01, 2.309e-01, -2.101e-01) * s0_1_1;
	r3 += V4(-5.449e-01, -4.307e-01, -6.192e-01, -1.421e-02) * s0_1_1;
	r4 += V4(-1.577e-01, -1.454e-01, -8.351e-01, -6.398e-02) * s0_1_1;
	r5 += V4(7.506e-01, 5.715e-01, 5.604e-01, 5.230e-01) * s0_1_1;
	r0 += V4(-3.019e+00, -1.625e-01, -1.346e-02, -2.090e-02) * s0_1_2;
	r1 += V4(1.010e-02, -7.034e-02, -1.782e-02, 5.678e-02) * s0_1_2;
	r2 += V4(2.565e-01, -5.601e-01, -4.561e-01, -4.912e-01) * s0_1_2;
	r3 += V4(6.621e-03, 8.859e-02, 5.813e-01, 2.239e-04) * s0_1_2;
	r4 += V4(-3.247e-03, -2.403e-01, -6.904e-03, -3.229e-02) * s0_1_2;
	r5 += V4(-6.066e-02, -2.917e-03, -8.372e-02, -7.617e-02) * s0_1_2;
	r0 += V4(-2.522e-04, 2.336e-03, 1.279e-02, -1.151e-02) * s0_2_0;
	r1 += V4(-2.607e-01, -5.323e-02, -3.869e-04, 5.097e-02) * s0_2_0;
	r2 += V4(-3.046e-01, -2.258e-01, -1.528e-01, 5.350e-02) * s0_2_0;
	r3 += V4(-1.597e-02, -1.479e-01, -9.349e-03, -2.011e-02) * s0_2_0;
	r4 += V4(2.674e-02, 1.562e-02, 2.069e-02, 1.559e-03) * s0_2_0;
	r5 += V4(-1.204e-01, -5.645e-01, 5.530e-02, -1.230e-01) * s0_2_0;
	r0 += V4(5.067e-02, -1.850e-01, -1.361e-02, 3.159e-02) * s0_2_1;
	r1 += V4(3.467e-01, -1.743e-01, -7.499e-03, -5.572e-02) * s0_2_1;
	r2 += V4(9.161e-02, -9.324e-02, -3.180e-01, 2.297e-01) * s0_2_1;
	r3 += V4(6.543e-01, -4.177e-02, -3.333e-02, 2.942e-03) * s0_2_1;
	r4 += V4(-7.323e-02, -1.146e-01, -2.716e-02, 7.627e-03) * s0_2_1;
	r5 += V4(-7.188e-02, -4.800e-03, -3.166e-02, -5.271e-02) * s0_2_1;
	r0 += V4(8.587e-02, -5.547e-02, -4.507e-03, 6.443e-03) * s0_2_2;
	r1 += V4(-9.226e-02, -3.427e-02, 1.640e-02, -5.801e-03) * s0_2_2;
	r2 += V4(2.114e-01, 3.271e-01, 5.140e-01, 5.441e-01) * s0_2_2;
	r3 += V4(-1.311e-01, 6.272e-02, 5.164e-02, 7.684e-03) * s0_2_2;
	r4 += V4(4.859e-02, -9.388e-03, 4.016e-03, -6.683e-03) * s0_2_2;
	r5 += V4(-3.306e-03, 4.066e-03, -2.221e-02, 1.408e-02) * s0_2_2;
	r0 += V4(2.758e-02, 2.093e-02, 8.000e-03, -1.450e-03);
	r0 = clamp(r0, V4(0.0), V4(1.0));
	imageStore(out_image, opos + ivec2(0, 0), vec4(r0));
	r1 += V4(-5.072e-03, 7.748e-03, -1.165e-01, 3.242e-03);
	r1 = clamp(r1, V4(0.0), V4(1.0));
	imageStore(out_image, opos + ivec2(1, 0), vec4(r1));
	r2 += V4(1.230e-02, 6.016e-03, -9.986e-03, 5.432e-03);
	r2 = clamp(r2, V4(0.0), V4(1.0));
	imageStore(out_image, opos + ivec2(2, 0), vec4(r2));
	r3 += V4(1.318e-02, 1.296e-04, 1.311e-02, -1.079e+00);
	r3 = clamp(r3, V4(0.0), V4(1.0));
	imageStore(out_image, opos + ivec2(0, 1), vec4(r3));
	r4 += V4(3.247e-03, 1.858e-02, 3.417e-03, 1.295e-02);
	r4 = clamp(r4, V4(0.0), V4(1.0));
	imageStore(out_image, opos + ivec2(1, 1), vec4(r4));
	r5 += V4(9.315e-03, 2.671e-03, 3.324e-03, 1.973e-03);
	r5 = clamp(r5, V4(0.0), V4(1.0));
	imageStore(out_image, opos + ivec2(2, 1), vec4(r5));
}

//!DESC CuNNy-4x24-conv1
//!HOOK LUMA
//!COMPUTE 24 16 8 8
//!BIND in
//!BIND LUMA
//!SAVE conv1
//!WIDTH LUMA.w 3 *
//!HEIGHT LUMA.h 2 *
//!COMPONENTS 4
//!WHEN OUTPUT.w LUMA.w / 1.3 > OUTPUT.h LUMA.h / 1.3 > *
#extension GL_EXT_spirv_intrinsics : require
#define l0(x, y) (in_mul * texelFetch(in_raw, clamp(pos + ivec2(x, y), ivec2(0), sz) * ivec2(3, 2) + ivec2(0, 0), 0))
#define l1(x, y) (in_mul * texelFetch(in_raw, clamp(pos + ivec2(x, y), ivec2(0), sz) * ivec2(3, 2) + ivec2(1, 0), 0))
#define l2(x, y) (in_mul * texelFetch(in_raw, clamp(pos + ivec2(x, y), ivec2(0), sz) * ivec2(3, 2) + ivec2(2, 0), 0))
#define l3(x, y) (in_mul * texelFetch(in_raw, clamp(pos + ivec2(x, y), ivec2(0), sz) * ivec2(3, 2) + ivec2(0, 1), 0))
#define l4(x, y) (in_mul * texelFetch(in_raw, clamp(pos + ivec2(x, y), ivec2(0), sz) * ivec2(3, 2) + ivec2(1, 1), 0))
#define l5(x, y) (in_mul * texelFetch(in_raw, clamp(pos + ivec2(x, y), ivec2(0), sz) * ivec2(3, 2) + ivec2(2, 1), 0))
spirv_instruction (extensions = ["SPV_KHR_integer_dot_product"], capabilities = [6019, 6018], id = 4450)
int dp4(int a, int b, spirv_literal int fmt);
#define D(r, s, a, b, c, d) r + ivec4(dp4(s, a, 0), dp4(s, b, 0), dp4(s, c, 0), dp4(s, d, 0))
shared int G[6][10][10];
void hook() {
	ivec2 xy = ivec2(gl_LocalInvocationID.xy);
	ivec2 pos = ivec2(gl_WorkGroupID.xy) * ivec2(8, 8) + xy;
	ivec2 opos = pos * ivec2(3, 2);
	ivec2 sz = ivec2(LUMA_size) - ivec2(1);
	for (int y = 0; y < 10; y += 8) {
		int ay = xy.y + y;
		if (ay >= 10) break;
		for (int x = 0; x < 10; x += 8) {
			int ax = xy.x + x;
			if (ax >= 10) break;
			vec4 v0 = l0(x - 1, y - 1) * 1.0000000e+00;
			vec4 v1 = l1(x - 1, y - 1) * 1.0000000e+00;
			vec4 v2 = l2(x - 1, y - 1) * 1.0000000e+00;
			vec4 v3 = l3(x - 1, y - 1) * 1.0000000e+00;
			vec4 v4 = l4(x - 1, y - 1) * 1.0000000e+00;
			vec4 v5 = l5(x - 1, y - 1) * 1.0000000e+00;
			G[0][ay][ax] = int(packSnorm4x8(v0));
			G[1][ay][ax] = int(packSnorm4x8(v1));
			G[2][ay][ax] = int(packSnorm4x8(v2));
			G[3][ay][ax] = int(packSnorm4x8(v3));
			G[4][ay][ax] = int(packSnorm4x8(v4));
			G[5][ay][ax] = int(packSnorm4x8(v5));
		}
	}
	barrier();
	int s0_0_0, s0_0_1, s0_0_2, s0_1_0, s0_1_1, s0_1_2, s0_2_0, s0_2_1, s0_2_2, s1_0_0, s1_0_1, s1_0_2, s1_1_0, s1_1_1, s1_1_2, s1_2_0, s1_2_1, s1_2_2;
	ivec4 r0, r1, r2, r3, r4, r5;
	vec4 f0, f1, f2, f3, f4, f5;
	r0 = ivec4(0); r1 = ivec4(0); r2 = ivec4(0); r3 = ivec4(0); r4 = ivec4(0); r5 = ivec4(0);
	s0_0_0 = G[0][xy.y+0][xy.x+0]; s0_0_1 = G[0][xy.y+0][xy.x+1];
	s0_0_2 = G[0][xy.y+0][xy.x+2]; s0_1_0 = G[0][xy.y+1][xy.x+0];
	s0_1_1 = G[0][xy.y+1][xy.x+1]; s0_1_2 = G[0][xy.y+1][xy.x+2];
	s0_2_0 = G[0][xy.y+2][xy.x+0]; s0_2_1 = G[0][xy.y+2][xy.x+1];
	s0_2_2 = G[0][xy.y+2][xy.x+2]; s1_0_0 = G[1][xy.y+0][xy.x+0];
	s1_0_1 = G[1][xy.y+0][xy.x+1]; s1_0_2 = G[1][xy.y+0][xy.x+2];
	s1_1_0 = G[1][xy.y+1][xy.x+0]; s1_1_1 = G[1][xy.y+1][xy.x+1];
	s1_1_2 = G[1][xy.y+1][xy.x+2]; s1_2_0 = G[1][xy.y+2][xy.x+0];
	s1_2_1 = G[1][xy.y+2][xy.x+1]; s1_2_2 = G[1][xy.y+2][xy.x+2];
	r0 = D(r0, s0_0_0, 0xE717E817, 0xEF18F581, 0xF40F090A, 0x12EC0F08);
	r1 = D(r1, s0_0_0, 0x03FFFDF3, 0xDA0E310B, 0x05F907F6, 0x0713F037);
	r2 = D(r2, s0_0_0, 0x07CB2E9E, 0x06D83B81, 0xF1FC1FD1, 0x60AB0BD9);
	r3 = D(r3, s0_0_0, 0x06FE03F8, 0xF7FCF72B, 0x0BF9FFFB, 0xF2FC157F);
	r4 = D(r4, s0_0_0, 0x53A51413, 0x01F7030A, 0xE0EA3B90, 0xEA0EFF14);
	r5 = D(r5, s0_0_0, 0xDF0F0D18, 0x2EEFCD58, 0x22EBEFEB, 0xE12DF118);
	r0 = D(r0, s0_0_1, 0x2ED7F2FA, 0x17FAEA11, 0xD62F1307, 0xEF0FF9EF);
	r1 = D(r1, s0_0_1, 0x0811DC0B, 0xEA08EB0A, 0x04FC01FC, 0xFE01FB15);
	r2 = D(r2, s0_0_1, 0xE316E1FA, 0x08DE17F4, 0x00AC1201, 0xF900E7D3);
	r3 = D(r3, s0_0_1, 0x07000704, 0x08EA38F6, 0xFFFF0000, 0x17E9FB13);
	r4 = D(r4, s0_0_1, 0x7390149A, 0x3BDECF1E, 0xE71E1D1C, 0x0806FE11);
	r5 = D(r5, s0_0_1, 0x0904F2F2, 0xF700FD09, 0x1D0ADCDB, 0xEA27E60E);
	r0 = D(r0, s0_0_2, 0x0CF00705, 0xFE0F010C, 0xDA06EC02, 0x1FE7FDFA);
	r1 = D(r1, s0_0_2, 0x060DF7FE, 0x54BAFA04, 0xF4040901, 0x0AF610FD);
	r2 = D(r2, s0_0_2, 0x17FFFD04, 0x7F8DFC0D, 0x24D7FAF7, 0x1BEDF3FB);
	r3 = D(r3, s0_0_2, 0xED0F0207, 0x21E1F0E9, 0xFD05FD08, 0xE92AF2E9);
	r4 = D(r4, s0_0_2, 0x0FEE07FC, 0xF51410FB, 0x16EEEAD9, 0x0BF7FEF6);
	r5 = D(r5, s0_0_2, 0xE31AFF04, 0xEE280C12, 0xD20E14FA, 0xF4FB170A);
	r0 = D(r0, s0_1_0, 0xD52EF3FE, 0xE1290681, 0x3AC0E59A, 0x1CDAFEE1);
	r1 = D(r1, s0_1_0, 0x06FC297F, 0xAB4E0749, 0x11EE01F7, 0xF70DFF54);
	r2 = D(r2, s0_1_0, 0x2745BB59, 0xF2D50181, 0x034811CB, 0x21E6C7F3);
	r3 = D(r3, s0_1_0, 0x08EAF881, 0xF5EBD97F, 0xFC030010, 0x12E13081);
	r4 = D(r4, s0_1_0, 0xE526F581, 0xBF280525, 0x2EE8FCD4, 0xE8E4FB25);
	r5 = D(r5, s0_1_0, 0xF202F001, 0xFF07D92B, 0x25F4DE55, 0xDCE5EBA8);
	r0 = D(r0, s0_1_1, 0x012EEBFD, 0x55B9CB1D, 0x12DC0349, 0xDE010522);
	r1 = D(r1, s0_1_1, 0xC2351FEC, 0x00FEF1B2, 0x2333EF00, 0x18370D1D);
	r2 = D(r2, s0_1_1, 0x97811BC4, 0xDF42F634, 0xBEBCA70A, 0xAD7F251B);
	r3 = D(r3, s0_1_1, 0xF60FF5F7, 0xEF252DD2, 0x0A0002FE, 0xB2481034);
	r4 = D(r4, s0_1_1, 0xBEF51EF7, 0xB8DB0CEA, 0x81221D09, 0x8181B910);
	r5 = D(r5, s0_1_1, 0x81818804, 0x25D9F381, 0xFF3213FE, 0x54D8EA4B);
	r0 = D(r0, s0_1_2, 0xF1FC09F5, 0x23E511F9, 0x7F81EEDC, 0x1CEE0101);
	r1 = D(r1, s0_1_2, 0x2A25F8F1, 0x7F9DC465, 0xFD0C07FF, 0xF0E109F5);
	r2 = D(r2, s0_1_2, 0xCB1909E3, 0x001CF0FB, 0xC005FDD6, 0x813F0EF2);
	r3 = D(r3, s0_1_2, 0xEEFC0FF2, 0x21EB001B, 0xFCEEFFF2, 0xF4D706EB);
	r4 = D(r4, s0_1_2, 0xC91A1F09, 0xAF52FDE3, 0xEE16FD21, 0xD82500FB);
	r5 = D(r5, s0_1_2, 0xECE41800, 0xE0340939, 0xB6120006, 0xC01D30F0);
	r0 = D(r0, s0_2_0, 0xF414F0F2, 0xF701080E, 0xF2F40EA4, 0x07091010);
	r1 = D(r1, s0_2_0, 0x2908EEEC, 0xC23DFAE2, 0xFF0002F3, 0x07EC0A00);
	r2 = D(r2, s0_2_0, 0xF3FAF35D, 0xB1FBF43C, 0x011CD227, 0x13D9F1F1);
	r3 = D(r3, s0_2_0, 0x050C07F5, 0x17C8E8DC, 0x09FC00F7, 0xF402F3E6);
	r4 = D(r4, s0_2_0, 0x0226D01E, 0xBDF61581, 0xEC0F00F5, 0x03E706EF);
	r5 = D(r5, s0_2_0, 0xD61AF8DC, 0xEE30E2C5, 0x3EBBED00, 0xCD1C189C);
	r0 = D(r0, s0_2_1, 0xF1E9F0EA, 0xDD20F5FC, 0x0E381F19, 0xA27F4F07);
	r1 = D(r1, s0_2_1, 0x81D10301, 0x2CD1D281, 0x14EFF8F9, 0xEF20FA11);
	r2 = D(r2, s0_2_1, 0x090A0E1A, 0x0D57FE0E, 0xD50B1B07, 0xDC3743F9);
	r3 = D(r3, s0_2_1, 0x1BFBFDFD, 0xB55D0B03, 0xF70A0007, 0x31F6D910);
	r4 = D(r4, s0_2_1, 0x000FEAF7, 0x8181E2F7, 0xF01BEC1F, 0x0A170026);
	r5 = D(r5, s0_2_1, 0x030B0315, 0xE9610781, 0x1030FA0D, 0x7981A416);
	r0 = D(r0, s0_2_2, 0x19D803FB, 0xF0120BF1, 0xE8C90AF3, 0x04FDFE01);
	r1 = D(r1, s0_2_2, 0x26D809EC, 0x7F81F83B, 0xF90EFC05, 0x12EE01F6);
	r2 = D(r2, s0_2_2, 0x20E0F5F4, 0x29FBE9FA, 0xD124F00A, 0xF0E30A13);
	r3 = D(r3, s0_2_2, 0xEE0111FD, 0x0EE70F04, 0x04F5020B, 0xE80322FD);
	r4 = D(r4, s0_2_2, 0x0B0213F9, 0xC8130B06, 0xCF1716E1, 0xE1150AEE);
	r5 = D(r5, s0_2_2, 0xD622FEFB, 0x56AF0D22, 0x33C50101, 0xF52E0205);
	r0 = D(r0, s1_0_0, 0xFCF7BB13, 0x11F40806, 0x0321D3E1, 0x02F508FC);
	r1 = D(r1, s1_0_0, 0x08FAF6FB, 0xF9F5DB01, 0x000305FC, 0xF30E15EA);
	r2 = D(r2, s1_0_0, 0xFB1300E2, 0xF6F2152C, 0x11FBF913, 0xE60B020D);
	r3 = D(r3, s1_0_0, 0xFE0A1404, 0x020DD003, 0xFD0601FE, 0x0DEE02F9);
	r4 = D(r4, s1_0_0, 0xF702FCF9, 0x0E21F909, 0x01E9F4EC, 0x07ED0212);
	r5 = D(r5, s1_0_0, 0xF9F7F705, 0xFE180704, 0xF1C5E7F0, 0x1EF807E9);
	r0 = D(r0, s1_0_1, 0xFD090F0D, 0x0D0ED0FA, 0xD0472CF6, 0xF90C1BFA);
	r1 = D(r1, s1_0_1, 0x0EF400FA, 0xD41BE819, 0x0101FDFA, 0xEF031BF7);
	r2 = D(r2, s1_0_1, 0x36DAB5C9, 0x102213C8, 0x0EFB1A0B, 0x0311EF05);
	r3 = D(r3, s1_0_1, 0xF7FCE80C, 0x251CD310, 0xF6FBFC09, 0xF4E1490A);
	r4 = D(r4, s1_0_1, 0xEA2D68F9, 0x2B07EBFA, 0xE2F4FFF0, 0xFFEEF617);
	r5 = D(r5, s1_0_1, 0xFB07D00E, 0xD8190612, 0x0B35CEEF, 0xFEEBFCFD);
	r0 = D(r0, s1_0_2, 0xEC000A10, 0xFEC5E9EB, 0xA83823F1, 0xFBFD1D06);
	r1 = D(r1, s1_0_2, 0x0B02C207, 0x01F0F702, 0xFFF910FC, 0x0A03CFFA);
	r2 = D(r2, s1_0_2, 0xD408FA08, 0x01FBFC04, 0x10F8F324, 0x0EF00510);
	r3 = D(r3, s1_0_2, 0x05FD1105, 0xF8E21D02, 0xFE0608FF, 0xFB05F019);
	r4 = D(r4, s1_0_2, 0xBD0B2BC7, 0x141CF4F3, 0x220F3DF5, 0xF3E7110C);
	r5 = D(r5, s1_0_2, 0xFCFCFFFF, 0x17D91407, 0x01E802F3, 0x062238CD);
	r0 = D(r0, s1_1_0, 0x03FBEB2B, 0x0AF8F91C, 0x19FBD807, 0x0206F6FE);
	r1 = D(r1, s1_1_0, 0x16072004, 0xF9130FFD, 0xFBF40AF2, 0x021016F0);
	r2 = D(r2, s1_1_0, 0x1C2C6FE0, 0xD72527D4, 0xFDF8F7FF, 0xF4ECF403);
	r3 = D(r3, s1_1_0, 0xFCEEFAFB, 0xEAE04307, 0xFBFCF906, 0x0600E6DF);
	r4 = D(r4, s1_1_0, 0x0602C6EF, 0xF0DD1626, 0xE619CA08, 0x06DDFE13);
	r5 = D(r5, s1_1_0, 0xFE0C0607, 0x34F2C5DE, 0x046435E7, 0x001B0C2E);
	r0 = D(r0, s1_1_1, 0x08FD0A16, 0xD67F50EB, 0x409AFF21, 0xFD16010D);
	r1 = D(r1, s1_1_1, 0xF43945E6, 0xF6F9DDFA, 0x0116F300, 0x0ABFEB15);
	r2 = D(r2, s1_1_1, 0x04E8AD09, 0x0BC58141, 0x9DFABAFC, 0x02080C25);
	r3 = D(r3, s1_1_1, 0x1715190D, 0x000BDE29, 0x03F2D8FD, 0xE7F20CFE);
	r4 = D(r4, s1_1_1, 0x37C2ECD0, 0xEF0108F9, 0xA7DFE8CD, 0x1A7F2632);
	r5 = D(r5, s1_1_1, 0x23FB4306, 0xF102B3CA, 0x0E22CC0A, 0x4909BC23);
	r0 = D(r0, s1_1_2, 0x25FD3702, 0xE70FF420, 0x52116EF9, 0xFAFBF0F3);
	r1 = D(r1, s1_1_2, 0x19EBD413, 0x0BFB03EE, 0xF9F9F60A, 0xFA0CE9FA);
	r2 = D(r2, s1_1_2, 0xC013FA1B, 0x1F0328FB, 0x1ED6242B, 0x08F230EE);
	r3 = D(r3, s1_1_2, 0xF0F7F6F7, 0xF7023BF7, 0x2C0E2D04, 0xDE32E412);
	r4 = D(r4, s1_1_2, 0x0AF8DDF6, 0xF8F9FE3D, 0x41F941EF, 0xFCFBF307);
	r5 = D(r5, s1_1_2, 0xF3FDFF03, 0x13C751C7, 0xFAEE2A08, 0x3CD5101F);
	r0 = D(r0, s1_2_0, 0x17F30222, 0xFD0909F5, 0x04FEF511, 0x0B1105F9);
	r1 = D(r1, s1_2_0, 0xF1EF05FF, 0x06DA0B09, 0xFFFEFAFB, 0xF8F81002);
	r2 = D(r2, s1_2_0, 0xF5171E18, 0xF204FE01, 0x171B0B14, 0x08F80BF1);
	r3 = D(r3, s1_2_0, 0x04FDFA03, 0x0CE7F716, 0xFF000004, 0x1813FCEC);
	r4 = D(r4, s1_2_0, 0x1E08020A, 0xE4F9DF1C, 0x1FEEF5FE, 0x0FEE1014);
	r5 = D(r5, s1_2_0, 0xFFFC0204, 0x1F21E716, 0xFED3F40D, 0xD0DAECFE);
	r0 = D(r0, s1_2_1, 0x11100531, 0xEFDDF308, 0x4EC7BD14, 0xF9E6C3F3);
	r1 = D(r1, s1_2_1, 0xDCFA1C18, 0x01FA2415, 0x060103FB, 0xFA0C1B10);
	r2 = D(r2, s1_2_1, 0x32CC2205, 0xFFF90717, 0x371D1007, 0x242DFBFC);
	r3 = D(r3, s1_2_1, 0x0703E90C, 0x2F25FC0B, 0xFEFC0408, 0x11F0FD05);
	r4 = D(r4, s1_2_1, 0x41F7DF04, 0x100F390B, 0xF903ECE7, 0xEBF9F90D);
	r5 = D(r5, s1_2_1, 0x030DF6FB, 0x083B50FA, 0x101E0CE3, 0xC52131CB);
	r0 = D(r0, s1_2_2, 0xF9050420, 0x0BC81106, 0xCBF5E8F2, 0x02F10A03);
	r1 = D(r1, s1_2_2, 0xF102E406, 0x271C28E9, 0xF8FEFDFC, 0x2305E2FE);
	r2 = D(r2, s1_2_2, 0xE706F403, 0x24F512E4, 0xE81611FB, 0xF8F2CEF4);
	r3 = D(r3, s1_2_2, 0xF90205FA, 0xFEF8F215, 0xEC02FEFE, 0xFC10F802);
	r4 = D(r4, s1_2_2, 0x170AEAF2, 0xCADEEC37, 0x1132F1FF, 0xD800E507);
	r5 = D(r5, s1_2_2, 0xFBFC00FD, 0xB1D4F01D, 0xE0CA0211, 0x4C02D7E5);
	s0_0_0 = G[2][xy.y+0][xy.x+0]; s0_0_1 = G[2][xy.y+0][xy.x+1];
	s0_0_2 = G[2][xy.y+0][xy.x+2]; s0_1_0 = G[2][xy.y+1][xy.x+0];
	s0_1_1 = G[2][xy.y+1][xy.x+1]; s0_1_2 = G[2][xy.y+1][xy.x+2];
	s0_2_0 = G[2][xy.y+2][xy.x+0]; s0_2_1 = G[2][xy.y+2][xy.x+1];
	s0_2_2 = G[2][xy.y+2][xy.x+2]; s1_0_0 = G[3][xy.y+0][xy.x+0];
	s1_0_1 = G[3][xy.y+0][xy.x+1]; s1_0_2 = G[3][xy.y+0][xy.x+2];
	s1_1_0 = G[3][xy.y+1][xy.x+0]; s1_1_1 = G[3][xy.y+1][xy.x+1];
	s1_1_2 = G[3][xy.y+1][xy.x+2]; s1_2_0 = G[3][xy.y+2][xy.x+0];
	s1_2_1 = G[3][xy.y+2][xy.x+1]; s1_2_2 = G[3][xy.y+2][xy.x+2];
	r0 = D(r0, s0_0_0, 0xCA04E70A, 0xE9F604E6, 0x05D22510, 0xE906F40C);
	r1 = D(r1, s0_0_0, 0xEE03F9FC, 0x0DFCFFEA, 0x0000FBFF, 0xFEEC13FA);
	r2 = D(r2, s0_0_0, 0xBD03350D, 0xCE31BACD, 0xCF2AFB16, 0x1101F204);
	r3 = D(r3, s0_0_0, 0x2109F0FD, 0xDB10F206, 0x020201FE, 0xE9200C02);
	r4 = D(r4, s0_0_0, 0xB8BF20E4, 0x07CDEB02, 0x0FF6CBF8, 0x19ED0524);
	r5 = D(r5, s0_0_0, 0x43DF0D05, 0xF3A413EC, 0x0AC92903, 0x041EF8FA);
	r0 = D(r0, s0_0_1, 0xE8EC1F04, 0x0C11EA0A, 0x09D05EED, 0xEAFE1502);
	r1 = D(r1, s0_0_1, 0xDB13150B, 0xF9F40AFB, 0x0703F1F6, 0x0A29F1E7);
	r2 = D(r2, s0_0_1, 0x280ABCC4, 0xDD2C49DB, 0x0AC7EB38, 0xD36AFFDF);
	r3 = D(r3, s0_0_1, 0x3305EBFF, 0xF9E3FCE9, 0x03E0000E, 0x2D1FDE0F);
	r4 = D(r4, s0_0_1, 0xF9340904, 0xC4E1EDF6, 0xF6B31E00, 0x0E02FC1A);
	r5 = D(r5, s0_0_1, 0x491BF516, 0xFC0437DD, 0x0814F6F8, 0x111B28E1);
	r0 = D(r0, s0_0_2, 0xE2071210, 0x02F8FDFC, 0xF40CF4D7, 0x0909EFE6);
	r1 = D(r1, s0_0_2, 0xF7F523FE, 0xFF1DDCFB, 0xFF00FCFD, 0x04F210F9);
	r2 = D(r2, s0_0_2, 0x0806FF02, 0xF712ECEB, 0x2D08DC0E, 0x0714EAEA);
	r3 = D(r3, s0_0_2, 0xFCF40C0B, 0x0611E709, 0x05FB0511, 0xFAF317EA);
	r4 = D(r4, s0_0_2, 0xFBFEF1F4, 0x01FE1712, 0xF4ED272D, 0xF30B17FD);
	r5 = D(r5, s0_0_2, 0xFEF207F3, 0x03FF16C6, 0xFAFFFDFA, 0x041DF9EA);
	r0 = D(r0, s0_1_0, 0x08E3DA0F, 0xD00AE8E1, 0x0AD90FFA, 0xC8E80FF0);
	r1 = D(r1, s0_1_0, 0x103BD7EF, 0xDBDC4B22, 0x0CF320FC, 0xFE27E6F8);
	r2 = D(r2, s0_1_0, 0x22DC1291, 0xD2EE35D4, 0xFDE5F20A, 0x030B0CF4);
	r3 = D(r3, s0_1_0, 0xF8FA090A, 0xEEC8010B, 0x01000705, 0x0413FFF5);
	r4 = D(r4, s0_1_0, 0x02F4E9F7, 0xFC30C025, 0x1A09FDE4, 0x0120DB08);
	r5 = D(r5, s0_1_0, 0xF0080604, 0xF704D200, 0x14080DEC, 0x19F4F7E7);
	r0 = D(r0, s0_1_1, 0xFCFCEEE5, 0x00E50218, 0x8150BAD9, 0xD3100309);
	r1 = D(r1, s0_1_1, 0x040FEC28, 0xFCA6C40E, 0xFF03FBFF, 0xFDE607FD);
	r2 = D(r2, s0_1_1, 0xE50125ED, 0xDAEC4CDA, 0x1CFA0410, 0xA408E4D5);
	r3 = D(r3, s0_1_1, 0x150BFCFD, 0xFCBC23F8, 0xFC15DA20, 0x221EDBFB);
	r4 = D(r4, s0_1_1, 0x0D060FF7, 0xF710F5F7, 0x282C0C09, 0xF6241C0A);
	r5 = D(r5, s0_1_1, 0xFE0B03F1, 0x1A61BD21, 0x021D13F6, 0x1CF001F2);
	r0 = D(r0, s0_1_2, 0xF6FE0C08, 0xE8F90EE0, 0xF5F5144D, 0xFC08071B);
	r1 = D(r1, s0_1_2, 0x0015F4F0, 0x08EDD0FF, 0x06FB0404, 0xFA00ECE3);
	r2 = D(r2, s0_1_2, 0x0CFCFDF4, 0xFDEA1C0E, 0x05250AC4, 0x1FC90DDC);
	r3 = D(r3, s0_1_2, 0xF5FF03FF, 0x0BF40F0F, 0xFD0B081A, 0xF5FC0DDC);
	r4 = D(r4, s0_1_2, 0x040CF7F7, 0xEDF82403, 0xDD210308, 0x0620EF02);
	r5 = D(r5, s0_1_2, 0xFD03FF01, 0xFC158110, 0xF2F70409, 0xFE0919F8);
	r0 = D(r0, s0_2_0, 0xD1FDFA03, 0x06E81CFB, 0x051BDEFE, 0x100DF902);
	r1 = D(r1, s0_2_0, 0xF3F714FC, 0x0F14E502, 0x030107FE, 0xEE01F608);
	r2 = D(r2, s0_2_0, 0x0313E01B, 0xFA1FCAF1, 0xF109FBED, 0xFEFCF603);
	r3 = D(r3, s0_2_0, 0xFEFA0CFE, 0xF918D4F5, 0x03FDFF00, 0xFDFE22F7);
	r4 = D(r4, s0_2_0, 0xEA00FEEF, 0xE8D006FA, 0x05EA2FEE, 0x07110AEF);
	r5 = D(r5, s0_2_0, 0x0105FEFB, 0xDFF0FF0C, 0x0406F107, 0xD6F02317);
	r0 = D(r0, s0_2_1, 0x04F6FEFA, 0xF3F2FC00, 0x4A160205, 0xFC0904FD);
	r1 = D(r1, s0_2_1, 0x0306FEFC, 0x151AD1FB, 0x04030202, 0x0516D5FB);
	r2 = D(r2, s0_2_1, 0x0405FDFD, 0xF934C0F0, 0x14061CFC, 0x1BF51216);
	r3 = D(r3, s0_2_1, 0x1002FE03, 0xFBF009F5, 0xFAFFF703, 0x0D1BFFF9);
	r4 = D(r4, s0_2_1, 0x260E08ED, 0xFCD40505, 0xEFF91007, 0xE816FAFD);
	r5 = D(r5, s0_2_1, 0x01050303, 0x0BF0F502, 0x12E41F03, 0x06F7D7F4);
	r0 = D(r0, s0_2_2, 0xFCFC020E, 0xF715F405, 0xF81700D5, 0xFD06FC04);
	r1 = D(r1, s0_2_2, 0xFE0D08F4, 0x0344BFEB, 0xFD03FBFE, 0x0402FF00);
	r2 = D(r2, s0_2_2, 0xFF0FF205, 0xFF070B01, 0xFD100301, 0x08FCE60B);
	r3 = D(r3, s0_2_2, 0xFB0BFBFC, 0xFCF51110, 0x00F908FE, 0xF71DFDF4);
	r4 = D(r4, s0_2_2, 0xFE03FFF4, 0x0B04F3EF, 0x16E616FB, 0x010311F8);
	r5 = D(r5, s0_2_2, 0x02FFFEFD, 0x11FBE111, 0x00E7080C, 0xECFA21FE);
	r0 = D(r0, s1_0_0, 0xEF15FFFF, 0x2FF70E11, 0x27052217, 0x09E20300);
	r1 = D(r1, s1_0_0, 0xFAD9FD0C, 0xFBD8F2F2, 0xFB00FA01, 0x10F7FBE9);
	r2 = D(r2, s1_0_0, 0x10DF0CC3, 0x0CF5FB8B, 0xF907180F, 0x0006F800);
	r3 = D(r3, s1_0_0, 0xF90A0A0D, 0xDD2409E0, 0xF7FE030A, 0xF3CFF1F6);
	r4 = D(r4, s1_0_0, 0x4C120710, 0x13E1010A, 0xEBEC14EC, 0xFCF1F3C2);
	r5 = D(r5, s1_0_0, 0x060300EE, 0x0A1F1D06, 0xB510070A, 0x2219FEFC);
	r0 = D(r0, s1_0_1, 0xDD0410C9, 0x180A101D, 0xF335424C, 0xFC010617);
	r1 = D(r1, s1_0_1, 0xF21F05D8, 0x30E907B5, 0xF7FB01F8, 0xD6341BF0);
	r2 = D(r2, s1_0_1, 0x0926F920, 0x14F2CFC2, 0x1EF2DECD, 0xD6F00F33);
	r3 = D(r3, s1_0_1, 0xEC110847, 0x20D30BE4, 0x020301E2, 0xEDF81018);
	r4 = D(r4, s1_0_1, 0xA9D117E3, 0x30EA001C, 0x3610BBF0, 0xFF17FE03);
	r5 = D(r5, s1_0_1, 0x06160364, 0xDC9D08FD, 0x041EF56C, 0x573B1A04);
	r0 = D(r0, s1_0_2, 0xAAF6EE03, 0xC80000DC, 0xC51B431C, 0xEF0DFEFF);
	r1 = D(r1, s1_0_2, 0x1903F6D9, 0xF424125B, 0xEBFD08FD, 0xEFEF0E11);
	r2 = D(r2, s1_0_2, 0x810BF911, 0xC81C2307, 0x811EF004, 0x1405F0ED);
	r3 = D(r3, s1_0_2, 0x02FC04FD, 0xE00D0435, 0xFBFD0306, 0xFE1B0E2A);
	r4 = D(r4, s1_0_2, 0xC00FFC0D, 0xE3E7F90F, 0x42EA2153, 0xB1FE21FE);
	r5 = D(r5, s1_0_2, 0xCF0406ED, 0x06DBF6DF, 0x22E80F0B, 0x05031FB9);
	r0 = D(r0, s1_1_0, 0x18FD1AFD, 0x1914FD0A, 0xDBED09FB, 0xFBFDFA17);
	r1 = D(r1, s1_1_0, 0x10B205E5, 0xF7DDFFF9, 0xEEEEF8F3, 0xE0030217);
	r2 = D(r2, s1_1_0, 0xDC81F72A, 0x23811733, 0x35040C0A, 0xE8FB0943);
	r3 = D(r3, s1_1_0, 0xF9100EEE, 0x11D91201, 0x11FB0305, 0x2A000910);
	r4 = D(r4, s1_1_0, 0x1FFD041E, 0xFA160FD9, 0xAD3AF003, 0xDEDEF707);
	r5 = D(r5, s1_1_0, 0xF4F3F703, 0x185AFF0D, 0x24170A14, 0xCDC1EBE6);
	r0 = D(r0, s1_1_1, 0x00F71814, 0x7FB518BD, 0x03EEFDFB, 0x1B14FC97);
	r1 = D(r1, s1_1_1, 0x0527331F, 0xFD1B22FF, 0xF30A0202, 0x38B63502);
	r2 = D(r2, s1_1_1, 0x76310C00, 0x13DED025, 0xFDD0E90B, 0xCA81F0E8);
	r3 = D(r3, s1_1_1, 0x25F214EC, 0xCB10FF23, 0x064FFB01, 0x0522E800);
	r4 = D(r4, s1_1_1, 0xFCFECF09, 0x2B17F2CE, 0x97DCD4FC, 0x51110D0F);
	r5 = D(r5, s1_1_1, 0x00E9ECF8, 0xFEE60E19, 0x8108ED1E, 0xC2B3DDEA);
	r0 = D(r0, s1_1_2, 0x81E3F7EF, 0x7F210313, 0x7FFBD6CF, 0xCA04ED26);
	r1 = D(r1, s1_1_2, 0xD70DE116, 0x320E3BF7, 0x1F07FE02, 0x20230CF1);
	r2 = D(r2, s1_1_2, 0xBC14FB17, 0x30EFF028, 0x890D4FDE, 0x6A0207FD);
	r3 = D(r3, s1_1_2, 0x00110502, 0x70D9FAE2, 0x15ECF700, 0x923033F6);
	r4 = D(r4, s1_1_2, 0x300ADCF1, 0x480102E5, 0x81FE22F0, 0xD6110F04);
	r5 = D(r5, s1_1_2, 0xAA061C06, 0x07FCC8F4, 0x2506F7D5, 0xCFF5DE09);
	r0 = D(r0, s1_2_0, 0x4A180005, 0x1A0B1902, 0xB522E7F0, 0x0922F7FF);
	r1 = D(r1, s1_2_0, 0x20EF050B, 0xC01A03D7, 0xD5FBFFFF, 0xFAFFF800);
	r2 = D(r2, s1_2_0, 0x0519080B, 0x8B392004, 0x2AF3F406, 0xF8FB04FE);
	r3 = D(r3, s1_2_0, 0x04F600FD, 0xCA0817F3, 0xEF01FFFE, 0x0EDA0D06);
	r4 = D(r4, s1_2_0, 0xFD160BF4, 0x0B0F07ED, 0x5B22FB02, 0xBE0CEF05);
	r5 = D(r5, s1_2_0, 0xF50000FE, 0x46F7ECE9, 0xACF50DEC, 0xC31FC90A);
	r0 = D(r0, s1_2_1, 0x490F0E0A, 0x7F1B0A03, 0xEEF0F000, 0xEEFFF208);
	r1 = D(r1, s1_2_1, 0xDA140808, 0x3C1F0FD1, 0xF1F7F5FE, 0xDC1FFE0E);
	r2 = D(r2, s1_2_1, 0x7FF3FDED, 0x1B12E5FC, 0xE522E411, 0xE018F305);
	r3 = D(r3, s1_2_1, 0xBFFF1112, 0x271C070F, 0xEBF6FDFC, 0x350F0E17);
	r4 = D(r4, s1_2_1, 0x27E9FF0A, 0xAA1B0313, 0x7FF40BF2, 0x2A04F312);
	r5 = D(r5, s1_2_1, 0xF601FD02, 0xD7D0E019, 0x7FECF604, 0x10D1020F);
	r0 = D(r0, s1_2_2, 0x81FC0AF5, 0x7F0C080F, 0x23F101C7, 0x5EF2F6FC);
	r1 = D(r1, s1_2_2, 0x16090408, 0x81F606FE, 0x290404FE, 0x810A07FA);
	r2 = D(r2, s1_2_2, 0x810BEBF2, 0x7F07110C, 0x81F3DAF4, 0x1F1401E5);
	r3 = D(r3, s1_2_2, 0x7C0508FA, 0x0EF6F10D, 0x09FA080A, 0x7F1D0B03);
	r4 = D(r4, s1_2_2, 0x8B1313E9, 0xC8220FF9, 0x03F5080A, 0x7FF9050F);
	r5 = D(r5, s1_2_2, 0x7F04FDFA, 0x17F140FB, 0x21EC35E2, 0x3CF61F28);
	s0_0_0 = G[4][xy.y+0][xy.x+0]; s0_0_1 = G[4][xy.y+0][xy.x+1];
	s0_0_2 = G[4][xy.y+0][xy.x+2]; s0_1_0 = G[4][xy.y+1][xy.x+0];
	s0_1_1 = G[4][xy.y+1][xy.x+1]; s0_1_2 = G[4][xy.y+1][xy.x+2];
	s0_2_0 = G[4][xy.y+2][xy.x+0]; s0_2_1 = G[4][xy.y+2][xy.x+1];
	s0_2_2 = G[4][xy.y+2][xy.x+2]; s1_0_0 = G[5][xy.y+0][xy.x+0];
	s1_0_1 = G[5][xy.y+0][xy.x+1]; s1_0_2 = G[5][xy.y+0][xy.x+2];
	s1_1_0 = G[5][xy.y+1][xy.x+0]; s1_1_1 = G[5][xy.y+1][xy.x+1];
	s1_1_2 = G[5][xy.y+1][xy.x+2]; s1_2_0 = G[5][xy.y+2][xy.x+0];
	s1_2_1 = G[5][xy.y+2][xy.x+1]; s1_2_2 = G[5][xy.y+2][xy.x+2];
	r0 = D(r0, s0_0_0, 0x0609EFF1, 0x03FCFBF7, 0x11E4FD20, 0xFCFD0904);
	r1 = D(r1, s0_0_0, 0xFDE712F6, 0x06070AED, 0xFC060DF7, 0x040AEB0C);
	r2 = D(r2, s0_0_0, 0x02E206FF, 0xDC112224, 0x0910F4F6, 0x0108FAFE);
	r3 = D(r3, s0_0_0, 0x01020705, 0x050DFC03, 0x020003FD, 0xFBF01DFD);
	r4 = D(r4, s0_0_0, 0x07F614F6, 0xF709060A, 0xE5B318EE, 0xF8EC16F9);
	r5 = D(r5, s0_0_0, 0xFD070803, 0x180B0603, 0x0EFFF510, 0x16FFD5DF);
	r0 = D(r0, s0_0_1, 0x1202E3E2, 0xFF031402, 0x18FFDEF5, 0xFF02FEFE);
	r1 = D(r1, s0_0_1, 0xF6090516, 0xF1EB17F6, 0x020913FE, 0x0E13FAFB);
	r2 = D(r2, s0_0_1, 0xF489050D, 0x059106E9, 0xF8DD112D, 0x13EBE80F);
	r3 = D(r3, s0_0_1, 0x0706F8FA, 0x020D040C, 0xFEFE04FB, 0xF9D3F9F7);
	r4 = D(r4, s0_0_1, 0xF881194D, 0x0F4BEE08, 0x1A8129EB, 0xF8AD0DF8);
	r5 = D(r5, s0_0_1, 0x05F7F2FC, 0x1826F0E2, 0xFA1CD4F8, 0x2317D8B8);
	r0 = D(r0, s0_0_2, 0xF9EFEDE5, 0x0F02090C, 0x12CCFAFC, 0xF7F41409);
	r1 = D(r1, s0_0_2, 0xFCD7E404, 0xE8031411, 0x01110EFF, 0x00D6FE01);
	r2 = D(r2, s0_0_2, 0x12FB0D0E, 0x05AF0E10, 0xFEB8060E, 0xF5F5F904);
	r3 = D(r3, s0_0_2, 0x0113F801, 0xFD020C00, 0x00F4FB00, 0x0006030B);
	r4 = D(r4, s0_0_2, 0x2EAF231E, 0xFE36EBFD, 0xEE91FC03, 0x06F20412);
	r5 = D(r5, s0_0_2, 0x01ED0201, 0xE1E61011, 0x03E10E01, 0xFAC1FDEC);
	r0 = D(r0, s0_1_0, 0xE61501EF, 0xEF1B13F0, 0x10F20005, 0xF2FEF505);
	r1 = D(r1, s0_1_0, 0x0BFA0C07, 0xE702E248, 0xF6F60705, 0x0502FE12);
	r2 = D(r2, s0_1_0, 0xEF012A2A, 0xD8DB4902, 0xE723E5F4, 0xFF14EAFB);
	r3 = D(r3, s0_1_0, 0xF505FD13, 0x0602E8FB, 0xFA00FA00, 0x08D5FD07);
	r4 = D(r4, s0_1_0, 0xF418EFF0, 0xED160AEB, 0x19ECF9F8, 0x10EBEA23);
	r5 = D(r5, s0_1_0, 0xEC08F505, 0xC81F06D7, 0xFEE5050C, 0xFCE13FF9);
	r0 = D(r0, s0_1_1, 0x1C331903, 0xFFDFF529, 0x1147F5CB, 0x04F5E90E);
	r1 = D(r1, s0_1_1, 0xF3E4E000, 0x19EC1702, 0x08340311, 0xE963F2F0);
	r2 = D(r2, s0_1_1, 0x33104CD0, 0x2115E906, 0x16E4D736, 0xE616FEFD);
	r3 = D(r3, s0_1_1, 0x08C900FC, 0x1F52EB5C, 0x060AF3F8, 0x1EF7E550);
	r4 = D(r4, s0_1_1, 0xE271EC0B, 0xEAF20DDB, 0x199FBD2D, 0xFE81B4EA);
	r5 = D(r5, s0_1_1, 0x1F0BF117, 0xE514CB9E, 0x011AF2EE, 0xDF32E01C);
	r0 = D(r0, s0_1_2, 0x0934F8F7, 0x0C0A0EDD, 0xED68EE2A, 0x03E2F904);
	r1 = D(r1, s0_1_2, 0x20812DDB, 0xBE81CFBF, 0xF8E5F1FF, 0x091F3401);
	r2 = D(r2, s0_1_2, 0x29F712D9, 0xF65DEEFE, 0x18D038E5, 0x2723261A);
	r3 = D(r3, s0_1_2, 0x021FF9FB, 0xCC81F7F5, 0xEF81CEFB, 0x195A02DB);
	r4 = D(r4, s0_1_2, 0xD90002D6, 0x0FD4E802, 0xAF819F29, 0x17FBF7EA);
	r5 = D(r5, s0_1_2, 0x020904F9, 0x2BA52559, 0x0A39DF0E, 0x027FE318);
	r0 = D(r0, s0_2_0, 0x0323E603, 0xEA060BD0, 0x20F00104, 0x11FF0109);
	r1 = D(r1, s0_2_0, 0xED090BEF, 0x1E19E2C1, 0xFEFB09EF, 0xEDF8060D);
	r2 = D(r2, s0_2_0, 0xAF0406F5, 0xE2FF1ABF, 0xEB1CFCFA, 0xF30B00E4);
	r3 = D(r3, s0_2_0, 0xFFFE0515, 0xFA0EFEEF, 0x06FFFF08, 0xFAF5101A);
	r4 = D(r4, s0_2_0, 0xE2070504, 0xEC21E406, 0xEA2511CC, 0x180003DB);
	r5 = D(r5, s0_2_0, 0x0EFF00F6, 0xF521ECED, 0x29DD1AEC, 0x0D0406EE);
	r0 = D(r0, s0_2_1, 0xE80011FE, 0x0ED6F72B, 0xE6F016EA, 0x0C020EEE);
	r1 = D(r1, s0_2_1, 0x3319EA08, 0x20EFFA36, 0x14FF0D17, 0xD40702EB);
	r2 = D(r2, s0_2_1, 0x0D06FB06, 0x3908E7F8, 0x53F307E5, 0xDEE700BC);
	r3 = D(r3, s0_2_1, 0x05FF14F7, 0x101915E1, 0x10FCF6FB, 0xDCED2AEB);
	r4 = D(r4, s0_2_1, 0xC0FB12EA, 0x1BEB081C, 0x11E2003F, 0xBEEAFE13);
	r5 = D(r5, s0_2_1, 0xECFB06FD, 0x24DB0073, 0x12D70D0A, 0x1CA61CEF);
	r0 = D(r0, s0_2_2, 0xFD00F41B, 0x13FDFBFC, 0x05AD2B0D, 0x0824F4F6);
	r1 = D(r1, s0_2_2, 0xD6EA1306, 0x83D711FA, 0x050103F2, 0xFDEC0EFF);
	r2 = D(r2, s0_2_2, 0xFB130BDF, 0x5210E004, 0xCD0B02EB, 0x12C629EF);
	r3 = D(r3, s0_2_2, 0xF6FD09F5, 0x120BCCF7, 0xCD08FE0D, 0xF10716CD);
	r4 = D(r4, s0_2_2, 0xE1F0FED5, 0x1DF01AE7, 0xF51120E6, 0x08050407);
	r5 = D(r5, s0_2_2, 0x0700FD01, 0xB581000A, 0x29D4FE1B, 0x33C7ED39);
	r0 = D(r0, s1_0_0, 0x00F71C13, 0xF2051701, 0x08D6FF26, 0xFEF70511);
	r1 = D(r1, s1_0_0, 0xF709FE03, 0x0DFCEE30, 0xF7050AFE, 0x08F502F0);
	r2 = D(r2, s1_0_0, 0xFFD4BF39, 0xFD0C2FF7, 0xEC1C01E7, 0xDBFD13FC);
	r3 = D(r3, s1_0_0, 0x0A020CFB, 0xF9F5FE10, 0x06FC0400, 0x06FEE525);
	r4 = D(r4, s1_0_0, 0xFFDC222F, 0xF41712CE, 0x360938D8, 0xE617EDF0);
	r5 = D(r5, s1_0_0, 0xFB00030A, 0x06072BFA, 0x01F302F2, 0xF80E27F1);
	r0 = D(r0, s1_0_1, 0x0305FA06, 0xEF1306F0, 0x65C8E704, 0x0CF8121E);
	r1 = D(r1, s1_0_1, 0xFBF30538, 0xFBE70403, 0x010B13EC, 0xFFED220C);
	r2 = D(r2, s1_0_1, 0x0F35A0A5, 0xE81D8113, 0xE1FECB1A, 0x08F70514);
	r3 = D(r3, s1_0_1, 0x080409CD, 0xE32B48D7, 0xFA00FB02, 0xFEE4C730);
	r4 = D(r4, s1_0_1, 0x0ADDE565, 0xE5211BE8, 0xB71D1DEB, 0xF402B911);
	r5 = D(r5, s1_0_1, 0x0903D1CE, 0x1B00FE04, 0xE9F63615, 0x27E84AEC);
	r0 = D(r0, s1_0_2, 0x0BF9F700, 0xDE1504EB, 0x7FBFFAF5, 0x0BF1E60E);
	r1 = D(r1, s1_0_2, 0x1002EDE5, 0x0012FC18, 0x000111FC, 0x0B0FFFFA);
	r2 = D(r2, s1_0_2, 0xF10DAAF5, 0x16EE40F3, 0xCD1E81EF, 0x1AFD360A);
	r3 = D(r3, s1_0_2, 0xF505DE03, 0x14ECC814, 0xFB031303, 0x0EF919E6);
	r4 = D(r4, s1_0_2, 0x05CBEC01, 0xD62223E4, 0x0624D8D1, 0xF2FEC707);
	r5 = D(r5, s1_0_2, 0xF707FE01, 0x2BD4EDE9, 0x100A1D07, 0x26EAE3F7);
	r0 = D(r0, s1_1_0, 0x07F40AE2, 0x153122DD, 0x0527FDD2, 0xFEEF0302);
	r1 = D(r1, s1_1_0, 0xEC07110F, 0x0BFECEFC, 0xF902FC0A, 0x060F00F6);
	r2 = D(r2, s1_1_0, 0xF107ED7F, 0xE9EA0252, 0xFAF11BFB, 0xED0BF80D);
	r3 = D(r3, s1_1_0, 0xF7F3FAFB, 0xF7EE13E1, 0xFF01FCF8, 0x02E30E1E);
	r4 = D(r4, s1_1_0, 0xEB2235C5, 0xF01512F0, 0xCEE0F95A, 0xF1F40F22);
	r5 = D(r5, s1_1_0, 0xF9F9FDEC, 0xF20318CD, 0xE6EDEB10, 0xEF260504);
	r0 = D(r0, s1_1_1, 0x23EFF5FC, 0xF5EBD315, 0x012836C7, 0xFA21F72B);
	r1 = D(r1, s1_1_1, 0x7FD389A4, 0xF029D1E0, 0x03010512, 0x111305DF);
	r2 = D(r2, s1_1_1, 0xE9CB0B81, 0x7F1812B3, 0x1F07CE33, 0xD20E1D5E);
	r3 = D(r3, s1_1_1, 0x1306E844, 0x0F06E815, 0x03F901D0, 0x400C26D9);
	r4 = D(r4, s1_1_1, 0xC11729AC, 0xEAFEB660, 0xFEC21308, 0xFDEFE335);
	r5 = D(r5, s1_1_1, 0xD20D103E, 0xCF38E6F2, 0xFAF11BD8, 0xE51CEBED);
	r0 = D(r0, s1_1_2, 0xD106EF15, 0xCE06F9F7, 0xEE91D5E5, 0xFDFB0EF7);
	r1 = D(r1, s1_1_2, 0xF2F7361D, 0xF50231FC, 0xFC08FF05, 0x0E0807CF);
	r2 = D(r2, s1_1_2, 0x100AFFEB, 0x10DD19E8, 0xDCED3CF6, 0x42D3C69C);
	r3 = D(r3, s1_1_2, 0xDC0C03F5, 0xFC0DE2E7, 0xEF120D4A, 0xF6F6D6D1);
	r4 = D(r4, s1_1_2, 0x1BA305ED, 0xC119FB03, 0xCFFCF011, 0xF8F219F3);
	r5 = D(r5, s1_1_2, 0x03EFF9FA, 0xD9378100, 0x300AFB09, 0x01E42E04);
	r0 = D(r0, s1_2_0, 0xE40800E5, 0x16FAEC11, 0x18010905, 0xFA0705F4);
	r1 = D(r1, s1_2_0, 0x06F4F119, 0xEF2506EC, 0x0AFB01FA, 0x0304FA09);
	r2 = D(r2, s1_2_0, 0x04FAEF15, 0x21E80910, 0xE80E15D1, 0x10EF0306);
	r3 = D(r3, s1_2_0, 0xFBFBFB0A, 0xF3FC0010, 0xFE040100, 0x0EF4FA06);
	r4 = D(r4, s1_2_0, 0xF31913E7, 0xFEE103F4, 0xEEF2FE0E, 0xDA0C0CD8);
	r5 = D(r5, s1_2_0, 0xFE0B0202, 0xE13801E9, 0x0F02E944, 0x04D9F7F5);
	r0 = D(r0, s1_2_1, 0x0CF60F0F, 0xF0C7F23C, 0x3A3A17D5, 0xE6C90EB6);
	r1 = D(r1, s1_2_1, 0x101EF627, 0xDE39EC4D, 0xE60805F4, 0x190301F5);
	r2 = D(r2, s1_2_1, 0x2ECAFCF9, 0xD8F4F8E6, 0xE3E60104, 0xBBE906DD);
	r3 = D(r3, s1_2_1, 0x080203F1, 0xFE1B0EDC, 0xFC000003, 0xE3FCF8F8);
	r4 = D(r4, s1_2_1, 0xFA1F10EB, 0x14E10CF3, 0xF10717F0, 0xEA1006F0);
	r5 = D(r5, s1_2_1, 0x0D1302FE, 0xFDCA180E, 0x34DA0004, 0x06E9310C);
	r0 = D(r0, s1_2_2, 0xF11DF900, 0x81E2FDDF, 0xB927F727, 0x03E1FFF7);
	r1 = D(r1, s1_2_2, 0x18F00AE7, 0x45E0D82C, 0x01040402, 0x2E1EF7FD);
	r2 = D(r2, s1_2_2, 0x0406F50B, 0xD6F80BFD, 0xE61308F9, 0x8111FBEF);
	r3 = D(r3, s1_2_2, 0xF8F8F908, 0x18F20016, 0xFC07FD00, 0xEC0B0BF6);
	r4 = D(r4, s1_2_2, 0xF22611FA, 0xF2BAE224, 0xEFFEFEE4, 0xEDFB0609);
	r5 = D(r5, s1_2_2, 0xFD0803FB, 0x22ECDDFB, 0x260DED12, 0xDB0BF8F9);
	f0 = vec4(r0) * 6.2000124e-05;
	f0 += vec4(3.210e-02, -1.302e-03, -3.719e-03, -1.627e-02);
	f0 = clamp(f0, vec4(0.0), vec4(1.0));
	imageStore(out_image, opos + ivec2(0, 0), f0);
	f1 = vec4(r1) * 6.2000124e-05;
	f1 += vec4(1.581e-02, 1.953e-02, 1.534e-02, 4.019e-03);
	f1 = clamp(f1, vec4(0.0), vec4(1.0));
	imageStore(out_image, opos + ivec2(1, 0), f1);
	f2 = vec4(r2) * 6.2000124e-05;
	f2 += vec4(1.264e-02, 2.790e-03, 3.308e-02, 1.032e-02);
	f2 = clamp(f2, vec4(0.0), vec4(1.0));
	imageStore(out_image, opos + ivec2(2, 0), f2);
	f3 = vec4(r3) * 6.2000124e-05;
	f3 += vec4(4.053e-03, 4.136e-03, 5.057e-03, -9.818e-03);
	f3 = clamp(f3, vec4(0.0), vec4(1.0));
	imageStore(out_image, opos + ivec2(0, 1), f3);
	f4 = vec4(r4) * 6.2000124e-05;
	f4 += vec4(7.191e-03, 2.838e-02, -1.889e-04, 3.577e-02);
	f4 = clamp(f4, vec4(0.0), vec4(1.0));
	imageStore(out_image, opos + ivec2(1, 1), f4);
	f5 = vec4(r5) * 6.2000124e-05;
	f5 += vec4(1.065e-02, 3.263e-02, -1.969e-02, 9.693e-03);
	f5 = clamp(f5, vec4(0.0), vec4(1.0));
	imageStore(out_image, opos + ivec2(2, 1), f5);
}

//!DESC CuNNy-4x24-conv2
//!HOOK LUMA
//!COMPUTE 24 16 8 8
//!BIND conv1
//!BIND LUMA
//!SAVE conv2
//!WIDTH LUMA.w 3 *
//!HEIGHT LUMA.h 2 *
//!COMPONENTS 4
//!WHEN OUTPUT.w LUMA.w / 1.3 > OUTPUT.h LUMA.h / 1.3 > *
#extension GL_EXT_spirv_intrinsics : require
#define l0(x, y) (conv1_mul * texelFetch(conv1_raw, clamp(pos + ivec2(x, y), ivec2(0), sz) * ivec2(3, 2) + ivec2(0, 0), 0))
#define l1(x, y) (conv1_mul * texelFetch(conv1_raw, clamp(pos + ivec2(x, y), ivec2(0), sz) * ivec2(3, 2) + ivec2(1, 0), 0))
#define l2(x, y) (conv1_mul * texelFetch(conv1_raw, clamp(pos + ivec2(x, y), ivec2(0), sz) * ivec2(3, 2) + ivec2(2, 0), 0))
#define l3(x, y) (conv1_mul * texelFetch(conv1_raw, clamp(pos + ivec2(x, y), ivec2(0), sz) * ivec2(3, 2) + ivec2(0, 1), 0))
#define l4(x, y) (conv1_mul * texelFetch(conv1_raw, clamp(pos + ivec2(x, y), ivec2(0), sz) * ivec2(3, 2) + ivec2(1, 1), 0))
#define l5(x, y) (conv1_mul * texelFetch(conv1_raw, clamp(pos + ivec2(x, y), ivec2(0), sz) * ivec2(3, 2) + ivec2(2, 1), 0))
spirv_instruction (extensions = ["SPV_KHR_integer_dot_product"], capabilities = [6019, 6018], id = 4450)
int dp4(int a, int b, spirv_literal int fmt);
#define D(r, s, a, b, c, d) r + ivec4(dp4(s, a, 0), dp4(s, b, 0), dp4(s, c, 0), dp4(s, d, 0))
shared int G[6][10][10];
void hook() {
	ivec2 xy = ivec2(gl_LocalInvocationID.xy);
	ivec2 pos = ivec2(gl_WorkGroupID.xy) * ivec2(8, 8) + xy;
	ivec2 opos = pos * ivec2(3, 2);
	ivec2 sz = ivec2(LUMA_size) - ivec2(1);
	for (int y = 0; y < 10; y += 8) {
		int ay = xy.y + y;
		if (ay >= 10) break;
		for (int x = 0; x < 10; x += 8) {
			int ax = xy.x + x;
			if (ax >= 10) break;
			vec4 v0 = l0(x - 1, y - 1) * 1.0000000e+00;
			vec4 v1 = l1(x - 1, y - 1) * 1.0000000e+00;
			vec4 v2 = l2(x - 1, y - 1) * 1.0000000e+00;
			vec4 v3 = l3(x - 1, y - 1) * 1.0000000e+00;
			vec4 v4 = l4(x - 1, y - 1) * 1.0000000e+00;
			vec4 v5 = l5(x - 1, y - 1) * 1.0000000e+00;
			G[0][ay][ax] = int(packSnorm4x8(v0));
			G[1][ay][ax] = int(packSnorm4x8(v1));
			G[2][ay][ax] = int(packSnorm4x8(v2));
			G[3][ay][ax] = int(packSnorm4x8(v3));
			G[4][ay][ax] = int(packSnorm4x8(v4));
			G[5][ay][ax] = int(packSnorm4x8(v5));
		}
	}
	barrier();
	int s0_0_0, s0_0_1, s0_0_2, s0_1_0, s0_1_1, s0_1_2, s0_2_0, s0_2_1, s0_2_2, s1_0_0, s1_0_1, s1_0_2, s1_1_0, s1_1_1, s1_1_2, s1_2_0, s1_2_1, s1_2_2;
	ivec4 r0, r1, r2, r3, r4, r5;
	vec4 f0, f1, f2, f3, f4, f5;
	r0 = ivec4(0); r1 = ivec4(0); r2 = ivec4(0); r3 = ivec4(0); r4 = ivec4(0); r5 = ivec4(0);
	s0_0_0 = G[0][xy.y+0][xy.x+0]; s0_0_1 = G[0][xy.y+0][xy.x+1];
	s0_0_2 = G[0][xy.y+0][xy.x+2]; s0_1_0 = G[0][xy.y+1][xy.x+0];
	s0_1_1 = G[0][xy.y+1][xy.x+1]; s0_1_2 = G[0][xy.y+1][xy.x+2];
	s0_2_0 = G[0][xy.y+2][xy.x+0]; s0_2_1 = G[0][xy.y+2][xy.x+1];
	s0_2_2 = G[0][xy.y+2][xy.x+2]; s1_0_0 = G[1][xy.y+0][xy.x+0];
	s1_0_1 = G[1][xy.y+0][xy.x+1]; s1_0_2 = G[1][xy.y+0][xy.x+2];
	s1_1_0 = G[1][xy.y+1][xy.x+0]; s1_1_1 = G[1][xy.y+1][xy.x+1];
	s1_1_2 = G[1][xy.y+1][xy.x+2]; s1_2_0 = G[1][xy.y+2][xy.x+0];
	s1_2_1 = G[1][xy.y+2][xy.x+1]; s1_2_2 = G[1][xy.y+2][xy.x+2];
	r0 = D(r0, s0_0_0, 0x0008F5F9, 0x0D08ED0C, 0x25100EDA, 0x1414F911);
	r1 = D(r1, s0_0_0, 0xF5E507ED, 0xE80A02EE, 0x81EC0CE1, 0x0710F0F6);
	r2 = D(r2, s0_0_0, 0x010D0801, 0xF3FD05F8, 0xF5111302, 0xFEFD0001);
	r3 = D(r3, s0_0_0, 0x1200F2F3, 0xF0F817EE, 0x21FBFEF6, 0x04001FFC);
	r4 = D(r4, s0_0_0, 0x0BEDF106, 0xEC3AEBF2, 0xEB040103, 0xEBFC0400);
	r5 = D(r5, s0_0_0, 0x00F2DB09, 0xD902F4F4, 0xF0F21A06, 0xFCFBF806);
	r0 = D(r0, s0_0_1, 0x2328F5FA, 0x171900E4, 0xEC25EB50, 0x0AF3FDF3);
	r1 = D(r1, s0_0_1, 0x81F9FE17, 0x140B0804, 0xA405FFE4, 0xE102FB11);
	r2 = D(r2, s0_0_1, 0x140E02FA, 0xDC090516, 0xF9150FFC, 0x01060100);
	r3 = D(r3, s0_0_1, 0x810EF6FC, 0xDBF2ECFE, 0xF5F317EB, 0xC10DF9D9);
	r4 = D(r4, s0_0_1, 0x25EC0AEA, 0x5B0FEA19, 0x140427F2, 0x04FC05F2);
	r5 = D(r5, s0_0_1, 0x0CC9F3F8, 0x220AFEF6, 0x02F50B3C, 0x12F90109);
	r0 = D(r0, s0_0_2, 0xF00FF6ED, 0x1703FFF3, 0x0517F7DC, 0x0D080CF4);
	r1 = D(r1, s0_0_2, 0xF403FCFA, 0x030501FA, 0xF20704DF, 0xDB0702FA);
	r2 = D(r2, s0_0_2, 0x0802FFF7, 0xF00505F8, 0x04050CF3, 0xFEFFFE04);
	r3 = D(r3, s0_0_2, 0x0E06F905, 0xF2F5F4EF, 0xEDFD18F2, 0xCD13EC1D);
	r4 = D(r4, s0_0_2, 0xF7F8F92C, 0xF619F406, 0x150405F8, 0x09FE0402);
	r5 = D(r5, s0_0_2, 0x11F6EA0C, 0xFA05F114, 0xD7F4EF02, 0xF5FEFA00);
	r0 = D(r0, s0_1_0, 0x14F9F4FA, 0x04FDE7F8, 0xE9E7F60C, 0x06F8E208);
	r1 = D(r1, s0_1_0, 0x0EE4F0EE, 0x0EF8300A, 0x81F61926, 0xE71FF4F6);
	r2 = D(r2, s0_1_0, 0xFA020CF7, 0xFB060217, 0xFE0111FC, 0xFBF9FD01);
	r3 = D(r3, s0_1_0, 0x0C080F0D, 0x090EFC08, 0x184F00F9, 0xF7251517);
	r4 = D(r4, s0_1_0, 0x16FCF30F, 0xFA21F4F3, 0xE9F6EB03, 0xF8F4FFFE);
	r5 = D(r5, s0_1_0, 0xFEFB2020, 0xFCFA1801, 0xFDF0F3F4, 0x020409FC);
	r0 = D(r0, s0_1_1, 0xFC141906, 0x090C01EA, 0xF61615A2, 0x19FC0BFE);
	r1 = D(r1, s0_1_1, 0x0201F106, 0x142BE400, 0x81FE320F, 0xCE05E601);
	r2 = D(r2, s0_1_1, 0x0302F708, 0x0DF802F2, 0xFB1BF1F3, 0x060BF502);
	r3 = D(r3, s0_1_1, 0xF8FA24EE, 0xE6EDF1F4, 0xDD0CF7EA, 0x8125EA06);
	r4 = D(r4, s0_1_1, 0x19F61D20, 0x12038609, 0x011CECFC, 0xFFFCF408);
	r5 = D(r5, s0_1_1, 0x14EAFC02, 0xF7F90A04, 0x08FACBE3, 0x0411FA0F);
	r0 = D(r0, s0_1_2, 0xF400F9FC, 0x0A0805E3, 0xD719CF09, 0x11FE0C23);
	r1 = D(r1, s0_1_2, 0x060015F4, 0xDD11F52E, 0xFD0601C2, 0xF3F6FCF0);
	r2 = D(r2, s0_1_2, 0x0A01F4FB, 0x0A060005, 0x0AFEF502, 0xFAFC07FB);
	r3 = D(r3, s0_1_2, 0xF60202FA, 0x0EEEED07, 0x390F0710, 0xE4E6220A);
	r4 = D(r4, s0_1_2, 0xF30212EC, 0x14FFC705, 0x1D0400EA, 0xFF000108);
	r5 = D(r5, s0_1_2, 0x0AF40012, 0xFFF7EEEE, 0xD1060249, 0xF2FFFF05);
	r0 = D(r0, s0_2_0, 0xFB0D09FB, 0x0A0FFDF5, 0x0B0FFD0D, 0x0A09100A);
	r1 = D(r1, s0_2_0, 0x0111EE10, 0x817F54EB, 0x2B119137, 0xF515F5E3);
	r2 = D(r2, s0_2_0, 0x01000500, 0x06FAE3EE, 0x0504FB06, 0xFE00FDFD);
	r3 = D(r3, s0_2_0, 0xF61908FC, 0x0901F2FE, 0x0515F219, 0x0B11F9FE);
	r4 = D(r4, s0_2_0, 0x03F8F901, 0x0DE5EB12, 0xFD05F90B, 0x02FE0002);
	r5 = D(r5, s0_2_0, 0xFA0DFDFB, 0xF9FB01FA, 0x02F5FF25, 0x0D0F0207);
	r0 = D(r0, s0_2_1, 0x051409FE, 0x0B03F60A, 0x001510EA, 0x110EE422);
	r1 = D(r1, s0_2_1, 0x00161807, 0x1004F6F6, 0x07121BFD, 0xFE06D605);
	r2 = D(r2, s0_2_1, 0x01FE0409, 0xF4060AFD, 0x0A050410, 0xF1F9FFF3);
	r3 = D(r3, s0_2_1, 0xF01808F7, 0xF01AE80B, 0x1C24DE18, 0xFEF909FC);
	r4 = D(r4, s0_2_1, 0xFF10E5EF, 0x17E69502, 0xEA022BD7, 0x01040100);
	r5 = D(r5, s0_2_1, 0x03F6FB0B, 0x0A09D61F, 0xEA0922E7, 0x08F6F913);
	r0 = D(r0, s0_2_2, 0xFB05F40C, 0x00FE0B0F, 0x0D05B91C, 0xFF0A0BFE);
	r1 = D(r1, s0_2_2, 0x03FF0104, 0xE3BCC010, 0x0507EDF9, 0x040307FA);
	r2 = D(r2, s0_2_2, 0xFFFE0202, 0x01FE04FA, 0x02FEF408, 0x0102FFFD);
	r3 = D(r3, s0_2_2, 0xFE0A050E, 0x0206EFF8, 0x1AFEF622, 0x0C11EB00);
	r4 = D(r4, s0_2_2, 0x0703F005, 0xF5F4FF11, 0xED080EF3, 0x01000006);
	r5 = D(r5, s0_2_2, 0x00FC0909, 0xEFF80110, 0x0903C0FF, 0x0A03FAFA);
	r0 = D(r0, s1_0_0, 0x000AEA15, 0xF90A1CF5, 0xEEFAC0E7, 0x02ECD802);
	r1 = D(r1, s1_0_0, 0x21E51609, 0xF6120001, 0x06FBDE26, 0xFDF9E510);
	r2 = D(r2, s1_0_0, 0x0502FC07, 0xFE041905, 0x07F7E405, 0xFE040300);
	r3 = D(r3, s1_0_0, 0x04F80605, 0x0BF6FD09, 0xFFFCDB03, 0x14DFDFF0);
	r4 = D(r4, s1_0_0, 0x0EFE28FC, 0x14E713F4, 0x0005E805, 0x00FA0800);
	r5 = D(r5, s1_0_0, 0x08FDF4FC, 0xF81626FB, 0x120128F2, 0xFE00FBFF);
	r0 = D(r0, s1_0_1, 0xF6E0D7F7, 0x0DFE1E05, 0xFECBD1D6, 0x1401E007);
	r1 = D(r1, s1_0_1, 0xEE11F7FB, 0xF30FFAF9, 0xF0D6BA1A, 0x0BE80217);
	r2 = D(r2, s1_0_1, 0x05F3FC04, 0x01F9030C, 0x01F7EA06, 0xFF04FBFF);
	r3 = D(r3, s1_0_1, 0xF8F30405, 0x02FEF509, 0x14F80CFF, 0x0F0EE00C);
	r4 = D(r4, s1_0_1, 0x18FDEB0E, 0x15E9DC09, 0xFBFEE702, 0x07FDFE07);
	r5 = D(r5, s1_0_1, 0xF21416FE, 0x00FD2404, 0x11F729E9, 0xFE0602F8);
	r0 = D(r0, s1_0_2, 0xFC1000E7, 0xFD01F8FC, 0xFC1BE40A, 0xFBFCE00F);
	r1 = D(r1, s1_0_2, 0x01F9FEF5, 0x051AF8F8, 0x0B10FDFE, 0x06EE0416);
	r2 = D(r2, s1_0_2, 0xFE05FB03, 0x01F90103, 0x0201F3FE, 0x03FF03FD);
	r3 = D(r3, s1_0_2, 0xF9F501F8, 0xFDEFFD0B, 0x04F20EFF, 0x18F7F706);
	r4 = D(r4, s1_0_2, 0x0A1307FA, 0x0010180A, 0x14F6F5FD, 0x0000FC00);
	r5 = D(r5, s1_0_2, 0xF8F72306, 0x11F41EFA, 0x00031901, 0xFA00FAF9);
	r0 = D(r0, s1_1_0, 0xF605061A, 0xF40CF4FD, 0xEEF00409, 0xF00EC00F);
	r1 = D(r1, s1_1_0, 0xC7268111, 0x26F218F0, 0x8930816F, 0xED130E11);
	r2 = D(r2, s1_1_0, 0x0EFBFF04, 0x07FB24F3, 0x25FB0105, 0xFB04FF03);
	r3 = D(r3, s1_1_0, 0xE2FDF3F4, 0xF2F9010E, 0xD536830C, 0xF314D502);
	r4 = D(r4, s1_1_0, 0xD305E801, 0x02E8F9DD, 0x0A18DF04, 0xF30CEF0E);
	r5 = D(r5, s1_1_0, 0x14F2DEF5, 0x22F125DE, 0xFB0A062B, 0x0112EA0E);
	r0 = D(r0, s1_1_1, 0x00EFE026, 0xEED60102, 0xF31B2908, 0xD5F0EFF8);
	r1 = D(r1, s1_1_1, 0x26B230BE, 0x01E4EBCF, 0x1BDDB622, 0xFF01FC70);
	r2 = D(r2, s1_1_1, 0x244BFE08, 0x1B5B1A1F, 0x31F8E4F0, 0xFBFB0DF9);
	r3 = D(r3, s1_1_1, 0xF2E57FE5, 0x1F0F00FE, 0x9A06E04D, 0xFA06213B);
	r4 = D(r4, s1_1_1, 0xF91C2226, 0x1CB8E5D5, 0x2EDEE0CF, 0xFBFA0700);
	r5 = D(r5, s1_1_1, 0xD2EA09F8, 0xF2130DDD, 0xF2E01DE4, 0x19E7F1E9);
	r0 = D(r0, s1_1_2, 0xF10CDFFB, 0x130BFC05, 0xE8D3E010, 0xFFE7EE05);
	r1 = D(r1, s1_1_2, 0x0813ECF8, 0x1339EDE9, 0x02F3F614, 0x1806F706);
	r2 = D(r2, s1_1_2, 0xFE03FA00, 0x0506050B, 0xFD1AE9EB, 0x020802FA);
	r3 = D(r3, s1_1_2, 0xFAF21001, 0xFAEDF926, 0x0406E91A, 0xF5E8F008);
	r4 = D(r4, s1_1_2, 0x05F50B0C, 0x0143E50C, 0x1000F0F4, 0x02FAF8F9);
	r5 = D(r5, s1_1_2, 0x0605EA00, 0x1101F604, 0x0AEF0BF8, 0x03110107);
	r0 = D(r0, s1_2_0, 0xF7000406, 0xFEFFF30C, 0xF90BB909, 0xF6EFD80B);
	r1 = D(r1, s1_2_0, 0xFAF3EA03, 0x81818181, 0x8EEB132D, 0x00F41313);
	r2 = D(r2, s1_2_0, 0xFE02F906, 0xDE070004, 0x01080006, 0xFB00FE03);
	r3 = D(r3, s1_2_0, 0xF7ECF407, 0xEF0105F2, 0xD7D3F204, 0xF5F9E303);
	r4 = D(r4, s1_2_0, 0x02F9FBF7, 0xE7EAD918, 0x1314FAF5, 0x0603FF07);
	r5 = D(r5, s1_2_0, 0x0DF3E4FF, 0x09F10107, 0xFAFB1101, 0x09FA0C01);
	r0 = D(r0, s1_2_1, 0x0000FE03, 0xFC080F12, 0xF408E1E1, 0xD6EABD21);
	r1 = D(r1, s1_2_1, 0xFBE1F2ED, 0x8181E493, 0x36FA2B3B, 0x0FC2FB0D);
	r2 = D(r2, s1_2_1, 0xF7000006, 0x14FD1109, 0xFD090400, 0x08FB05F3);
	r3 = D(r3, s1_2_1, 0xFDF60DF4, 0xF4F504DF, 0xD1E111F6, 0xFEEC02FA);
	r4 = D(r4, s1_2_1, 0xFEFE0CF8, 0xF5FDEC2A, 0x05E4F0DC, 0xF70106F9);
	r5 = D(r5, s1_2_1, 0x0300C112, 0x0408FE19, 0xEE0526F4, 0x0EFCF4FD);
	r0 = D(r0, s1_2_2, 0xFD00F20E, 0xF3FDFE0D, 0x06FED6F0, 0x0CF2FA05);
	r1 = D(r1, s1_2_2, 0x03F7FCFF, 0x39B3E42B, 0x0F11F80C, 0x14FD030E);
	r2 = D(r2, s1_2_2, 0xFEFB0004, 0x010901FF, 0xFB05FBFD, 0x08010C08);
	r3 = D(r3, s1_2_2, 0x0BFE09F8, 0xFE030CF9, 0x27ECFA05, 0x091709F8);
	r4 = D(r4, s1_2_2, 0x02020403, 0xDEDDE21E, 0x0DF008F9, 0x040301FA);
	r5 = D(r5, s1_2_2, 0x0BD8F9FF, 0xF8EE0004, 0x020C0A0A, 0x010DF802);
	s0_0_0 = G[2][xy.y+0][xy.x+0]; s0_0_1 = G[2][xy.y+0][xy.x+1];
	s0_0_2 = G[2][xy.y+0][xy.x+2]; s0_1_0 = G[2][xy.y+1][xy.x+0];
	s0_1_1 = G[2][xy.y+1][xy.x+1]; s0_1_2 = G[2][xy.y+1][xy.x+2];
	s0_2_0 = G[2][xy.y+2][xy.x+0]; s0_2_1 = G[2][xy.y+2][xy.x+1];
	s0_2_2 = G[2][xy.y+2][xy.x+2]; s1_0_0 = G[3][xy.y+0][xy.x+0];
	s1_0_1 = G[3][xy.y+0][xy.x+1]; s1_0_2 = G[3][xy.y+0][xy.x+2];
	s1_1_0 = G[3][xy.y+1][xy.x+0]; s1_1_1 = G[3][xy.y+1][xy.x+1];
	s1_1_2 = G[3][xy.y+1][xy.x+2]; s1_2_0 = G[3][xy.y+2][xy.x+0];
	s1_2_1 = G[3][xy.y+2][xy.x+1]; s1_2_2 = G[3][xy.y+2][xy.x+2];
	r0 = D(r0, s0_0_0, 0x040A0505, 0xF806FEFA, 0xE5F5F4DE, 0xE8F6F401);
	r1 = D(r1, s0_0_0, 0xF70604FF, 0x04F1F6F4, 0x020204F2, 0x08F80209);
	r2 = D(r2, s0_0_0, 0x0BFCFBFC, 0xFB00FFF8, 0x16F800FE, 0xF9FF0500);
	r3 = D(r3, s0_0_0, 0xF00512FE, 0x10FFFFFA, 0x11FA030C, 0x06F900F7);
	r4 = D(r4, s0_0_0, 0xF40A0307, 0x2BDC0F10, 0x160400FF, 0x0001F903);
	r5 = D(r5, s0_0_0, 0x020802FA, 0x080EFCEC, 0xEEEAFAF9, 0x03FEFE01);
	r0 = D(r0, s0_0_1, 0x05EE12F3, 0xEEF8EBEC, 0xC6050119, 0xF409F008);
	r1 = D(r1, s0_0_1, 0xFF000301, 0xFE0D02F8, 0x0CF00A06, 0x0304FC06);
	r2 = D(r2, s0_0_1, 0x02FEFFFA, 0xF909FB00, 0x01FE0B00, 0xFBFC0000);
	r3 = D(r3, s0_0_1, 0xFFF00C00, 0x11EE1306, 0x31F6FFFF, 0x1F13F5F5);
	r4 = D(r4, s0_0_1, 0x0718E3FE, 0x13080811, 0x050207F7, 0x0006F206);
	r5 = D(r5, s0_0_1, 0xD108FAF8, 0x05FD08EE, 0x00EA1804, 0x00FE0502);
	r0 = D(r0, s0_0_2, 0xFDF91D04, 0x02FAFE07, 0xF6F2E509, 0xF207F007);
	r1 = D(r1, s0_0_2, 0x010C10F9, 0xFDFC0406, 0x0DF20D00, 0x00FE0308);
	r2 = D(r2, s0_0_2, 0xFFFFFE01, 0xF9FFFF00, 0xFFFBFD07, 0x06FF06FD);
	r3 = D(r3, s0_0_2, 0xFC021302, 0x02F6F500, 0x04FC09FC, 0x040FF7FE);
	r4 = D(r4, s0_0_2, 0x0402FB09, 0xF706FA0D, 0xFBF2FAFC, 0x01000002);
	r5 = D(r5, s0_0_2, 0xEB0805F2, 0xF7F30BFA, 0x2B090EEB, 0xFFFE08FD);
	r0 = D(r0, s0_1_0, 0xFFF50BFD, 0xFB06FBFD, 0x05CFDD09, 0xE4EEF900);
	r1 = D(r1, s0_1_0, 0xCA111201, 0x09E2FFE5, 0x6838FBCC, 0x0E20F9FF);
	r2 = D(r2, s0_1_0, 0x0402FDFD, 0xF511ED02, 0x08060106, 0x040101FE);
	r3 = D(r3, s0_1_0, 0xE7EA07FA, 0x10EB0C04, 0xF7430E23, 0x0216FB08);
	r4 = D(r4, s0_1_0, 0xE3E9F301, 0xDFFB081D, 0x121105FE, 0xFF0002FA);
	r5 = D(r5, s0_1_0, 0x08FA0DFC, 0x00EBFAF5, 0x3C021303, 0x14050205);
	r0 = D(r0, s0_1_1, 0x06CA2210, 0x07E61CF9, 0xFEBB021E, 0xD9FD0204);
	r1 = D(r1, s0_1_1, 0xFDDD0BEE, 0xE5FB1E08, 0x08D9D881, 0x08060800);
	r2 = D(r2, s0_1_1, 0xFCFEFF0A, 0xFC0BFE07, 0xFDFD0718, 0xF9FA04F6);
	r3 = D(r3, s0_1_1, 0x0D03FFF5, 0xDB2FF30F, 0xD90ABF1A, 0xB13CF5F7);
	r4 = D(r4, s0_1_1, 0x13FDF2C8, 0x0FAED4DF, 0x0AEC0DFA, 0xF50603F1);
	r5 = D(r5, s0_1_1, 0xC810FFFD, 0x29ED17F0, 0x07E408E3, 0x0B050402);
	r0 = D(r0, s0_1_2, 0x1703021F, 0x050508FE, 0x13E5FA16, 0xE406F205);
	r1 = D(r1, s0_1_2, 0xF4070503, 0x0FF51F0F, 0x02F91A03, 0x01F5CF11);
	r2 = D(r2, s0_1_2, 0x00FDFE06, 0x04020708, 0xF7FAF910, 0x000201FE);
	r3 = D(r3, s0_1_2, 0x05060B02, 0x0608E9F6, 0xDD0D92AD, 0xF1160CAD);
	r4 = D(r4, s0_1_2, 0xFC180ED7, 0x26F9EE27, 0x0AFDFEF9, 0xFFFB00FC);
	r5 = D(r5, s0_1_2, 0x08F5F214, 0x07F406FF, 0x140E1BBB, 0x070CFAFB);
	r0 = D(r0, s0_2_0, 0x0001FF00, 0xF40702FD, 0xE30BF00A, 0xDEF3020E);
	r1 = D(r1, s0_2_0, 0x01120AFC, 0x81B09DF7, 0x08EAA1D6, 0x0C16F9FF);
	r2 = D(r2, s0_2_0, 0xFFF7FCFC, 0xFE11E3FF, 0xF9FBF704, 0x030705FE);
	r3 = D(r3, s0_2_0, 0x050C12FD, 0x06F80501, 0x12F20D07, 0x040AE011);
	r4 = D(r4, s0_2_0, 0x04030801, 0x0ED3F81A, 0x0FFDF5FB, 0xFB0202FD);
	r5 = D(r5, s0_2_0, 0xE6F8F4F4, 0x02ED08FE, 0x09F41EFE, 0xF80A0802);
	r0 = D(r0, s0_2_1, 0x060E0CFC, 0xF7F205FA, 0xDEBFFD0C, 0x060CF51F);
	r1 = D(r1, s0_2_1, 0xE8010DE5, 0xF00CAE8B, 0xF5F10081, 0x07FDD903);
	r2 = D(r2, s0_2_1, 0xFFFB01FE, 0xF8F7F1F3, 0x0001FB02, 0xFD04FD04);
	r3 = D(r3, s0_2_1, 0x00FF0AED, 0xED0EF210, 0xE525A507, 0x0F10D4F7);
	r4 = D(r4, s0_2_1, 0xF6F6FB04, 0x12E0E412, 0x10FE03F7, 0xFBFE08F3);
	r5 = D(r5, s0_2_1, 0x0401FF14, 0x0EE70C09, 0x110618FA, 0x06120217);
	r0 = D(r0, s0_2_2, 0x1000020C, 0x05F71304, 0xF9FF140C, 0xE8140015);
	r1 = D(r1, s0_2_2, 0xFAFF08F9, 0x38068121, 0x1CF8F7FA, 0x0602D80B);
	r2 = D(r2, s0_2_2, 0x050306FF, 0xFDF900FA, 0x05060104, 0x04FDFDF5);
	r3 = D(r3, s0_2_2, 0xF80202FD, 0xFC01E319, 0xE6078130, 0xF8FA0401);
	r4 = D(r4, s0_2_2, 0xF9F90003, 0x1B08040E, 0x0CF9ED0A, 0xFE000200);
	r5 = D(r5, s0_2_2, 0xF00D0BEE, 0x0E1E2004, 0x02F40EE4, 0xFF06FC06);
	r0 = D(r0, s1_0_0, 0xF411F601, 0xFDFDE9F9, 0x19221923, 0xF90E0DF0);
	r1 = D(r1, s1_0_0, 0x08D60DFC, 0x0DFBED01, 0x0B050403, 0x05F4020D);
	r2 = D(r2, s1_0_0, 0xFD0B0006, 0x01EF0101, 0xF60400FF, 0x01FBFDFD);
	r3 = D(r3, s1_0_0, 0x00020F0C, 0xFF07090B, 0xF60215F7, 0x07E210FC);
	r4 = D(r4, s1_0_0, 0x0BFA0814, 0xCDE006E8, 0xF803F1FC, 0x04FE0401);
	r5 = D(r5, s1_0_0, 0x05040717, 0x11D9F007, 0x07FF0526, 0x0205FBFC);
	r0 = D(r0, s1_0_1, 0xF2EC11FE, 0xF7D3EE11, 0xE6231CD2, 0xFD13F6F4);
	r1 = D(r1, s1_0_1, 0x0EEEFCFC, 0x05F61109, 0xF71D0AFA, 0xF3FF0701);
	r2 = D(r2, s1_0_1, 0x010EFBF4, 0x03DBFB09, 0xF00103E7, 0x0604FC03);
	r3 = D(r3, s1_0_1, 0x02CF250A, 0xFC110FEC, 0xF40D0EE9, 0x0CEA0634);
	r4 = D(r4, s1_0_1, 0xF3E80834, 0xE9280D27, 0xEB13FFE6, 0x02FF0102);
	r5 = D(r5, s1_0_1, 0xF3E9130C, 0x06E2E617, 0x1400F5FB, 0x07F8F7FF);
	r0 = D(r0, s1_0_2, 0xFB08FBE3, 0xFFFF0704, 0x210B1926, 0x080F0E00);
	r1 = D(r1, s1_0_2, 0xFD06060E, 0xFD0911FF, 0xFB1500FF, 0xF1F702FD);
	r2 = D(r2, s1_0_2, 0x010800FD, 0x00090A13, 0xF91000F4, 0xFDFEFEFE);
	r3 = D(r3, s1_0_2, 0xFCFD0912, 0x01FA11FB, 0x09F11907, 0xFDF0F21E);
	r4 = D(r4, s1_0_2, 0xFEF10B13, 0xEFF50215, 0xF31300FB, 0x03FF00FE);
	r5 = D(r5, s1_0_2, 0xF4CBAC04, 0x00FA03FD, 0xF3F8E71A, 0x020201F2);
	r0 = D(r0, s1_1_0, 0xF902FC00, 0x00F4FC00, 0xFEE41704, 0xEE0B0002);
	r1 = D(r1, s1_1_0, 0xEF81F21C, 0x1D5607F4, 0x168CBE02, 0x098105EC);
	r2 = D(r2, s1_1_0, 0x0205070A, 0x17810421, 0xFE0BFF06, 0xFD06FB09);
	r3 = D(r3, s1_1_0, 0x0005110B, 0x0001FB08, 0xE481FCF7, 0xF281FB1B);
	r4 = D(r4, s1_1_0, 0xF7EE05DD, 0xDAD00400, 0x1321E7EA, 0x0666F9FE);
	r5 = D(r5, s1_1_0, 0xFA16FF15, 0x07272333, 0x07EDE6EA, 0xFE1BFE04);
	r0 = D(r0, s1_1_1, 0x10411D22, 0xFD06FCFA, 0xEA171ACF, 0x02E8E818);
	r1 = D(r1, s1_1_1, 0xF2812012, 0x042EEDCF, 0xF1141205, 0xDAEE2DE5);
	r2 = D(r2, s1_1_1, 0xF80F01F4, 0x0DEDEFE1, 0x1106F504, 0xFE0DFAED);
	r3 = D(r3, s1_1_1, 0xE681FA22, 0xF21110F1, 0xF7AC291D, 0xEE982DF5);
	r4 = D(r4, s1_1_1, 0x0EDFF7B5, 0xC8172E2E, 0x050C11EB, 0x00F8F50F);
	r5 = D(r5, s1_1_1, 0x25D2FD0F, 0xF6FCD9DB, 0x2DE9FFFF, 0x063402C6);
	r0 = D(r0, s1_1_2, 0xFF181C03, 0xFA08FAFE, 0xEB0E141A, 0x11FB13E2);
	r1 = D(r1, s1_1_2, 0x09070112, 0xE51624F7, 0x110C1900, 0xF20C1A0D);
	r2 = D(r2, s1_1_2, 0x090100FB, 0xFAFD02F1, 0x141419F6, 0x0101010A);
	r3 = D(r3, s1_1_2, 0xFCF2F1FF, 0xF7EFF710, 0xF209F70D, 0x03139C23);
	r4 = D(r4, s1_1_2, 0xFDFEE800, 0x08181E10, 0x010AFE28, 0x000507FA);
	r5 = D(r5, s1_1_2, 0xF7F5C7EA, 0xFE1613D5, 0xEAF5E235, 0xFF040305);
	r0 = D(r0, s1_2_0, 0xFEF10401, 0x0902FFF1, 0xFC04F2FC, 0x180C0DFA);
	r1 = D(r1, s1_2_0, 0x05E40000, 0x81811E9C, 0x54F10FC6, 0x05F10503);
	r2 = D(r2, s1_2_0, 0xFA00FF06, 0x09E90506, 0xFEFFFCF6, 0x0BF4FB07);
	r3 = D(r3, s1_2_0, 0xFCF6080A, 0x03F808FA, 0x1D1519EB, 0x0D1707E8);
	r4 = D(r4, s1_2_0, 0x170E09F6, 0xD7F304EC, 0x0702E4D9, 0x00FAFBFB);
	r5 = D(r5, s1_2_0, 0x0BFE1014, 0x01ED0B18, 0x06EAF5E0, 0x050F03E7);
	r0 = D(r0, s1_2_1, 0xE3F60208, 0x01EEF4ED, 0x0FFDF70E, 0xFAF20AE3);
	r1 = D(r1, s1_2_1, 0x19FE18F7, 0xDE2BE381, 0xFFF5BBE0, 0x0C000CF7);
	r2 = D(r2, s1_2_1, 0xFE030102, 0xF7EAF916, 0xF701FFF1, 0xE9FEFF3F);
	r3 = D(r3, s1_2_1, 0xECED0628, 0x08F31514, 0xF706FFD7, 0xFB04EF00);
	r4 = D(r4, s1_2_1, 0x19F502F3, 0x2A03F7FB, 0xDD2CF431, 0xFBF8F207);
	r5 = D(r5, s1_2_1, 0x14F708D6, 0xF8F414ED, 0xD7E0EE23, 0x17100EE4);
	r0 = D(r0, s1_2_2, 0xFF0810F1, 0xFBFF00FA, 0x24192BCC, 0xF7F9F109);
	r1 = D(r1, s1_2_2, 0x0408FDFB, 0x1A1F2CF2, 0x0D1208FA, 0xF3FB08F5);
	r2 = D(r2, s1_2_2, 0xFBFCFF05, 0x03FFFB02, 0x040501F6, 0xFCFB0009);
	r3 = D(r3, s1_2_2, 0xED000921, 0xF7FCF421, 0x1703E7F4, 0x1203F3F7);
	r4 = D(r4, s1_2_2, 0x03FE0309, 0xF3FB000D, 0xE907FE1E, 0xFF01F903);
	r5 = D(r5, s1_2_2, 0xECF2B919, 0xFEF6F70E, 0x0603F9F6, 0x0E0610F6);
	s0_0_0 = G[4][xy.y+0][xy.x+0]; s0_0_1 = G[4][xy.y+0][xy.x+1];
	s0_0_2 = G[4][xy.y+0][xy.x+2]; s0_1_0 = G[4][xy.y+1][xy.x+0];
	s0_1_1 = G[4][xy.y+1][xy.x+1]; s0_1_2 = G[4][xy.y+1][xy.x+2];
	s0_2_0 = G[4][xy.y+2][xy.x+0]; s0_2_1 = G[4][xy.y+2][xy.x+1];
	s0_2_2 = G[4][xy.y+2][xy.x+2]; s1_0_0 = G[5][xy.y+0][xy.x+0];
	s1_0_1 = G[5][xy.y+0][xy.x+1]; s1_0_2 = G[5][xy.y+0][xy.x+2];
	s1_1_0 = G[5][xy.y+1][xy.x+0]; s1_1_1 = G[5][xy.y+1][xy.x+1];
	s1_1_2 = G[5][xy.y+1][xy.x+2]; s1_2_0 = G[5][xy.y+2][xy.x+0];
	s1_2_1 = G[5][xy.y+2][xy.x+1]; s1_2_2 = G[5][xy.y+2][xy.x+2];
	r0 = D(r0, s0_0_0, 0x06FDF708, 0x010905F6, 0x01FCFBD4, 0xF9F807F2);
	r1 = D(r1, s0_0_0, 0x040FFE0A, 0x0D10220A, 0xF7F5FFF4, 0xFF09F6F9);
	r2 = D(r2, s0_0_0, 0xFEFA01FE, 0xFD05030A, 0x00FFFF00, 0x000201FB);
	r3 = D(r3, s0_0_0, 0xFF021612, 0xF809EA0B, 0x0603EEEF, 0xF6080AE8);
	r4 = D(r4, s0_0_0, 0x010815F3, 0xE9F318C4, 0x0202F700, 0x02000A00);
	r5 = D(r5, s0_0_0, 0x0F080707, 0x051509F0, 0x07E709EB, 0x03FC06FD);
	r0 = D(r0, s0_0_1, 0xFDF0EF10, 0x0105F3FE, 0xF0DE4AA9, 0x07FC05F1);
	r1 = D(r1, s0_0_1, 0x00F1FDF3, 0x0E04F10E, 0xFA000508, 0x07121002);
	r2 = D(r2, s0_0_1, 0xFCF9FD00, 0x0C19FFF5, 0xFDFCFC16, 0x040503FA);
	r3 = D(r3, s0_0_1, 0x0705EA07, 0xF4E72411, 0xED0BDC11, 0x1EF1FA02);
	r4 = D(r4, s0_0_1, 0x08FFDAE0, 0x0D00FD1E, 0xFEFBFC04, 0xFCFCFA07);
	r5 = D(r5, s0_0_1, 0xFD18F625, 0x1418EBD8, 0xEDE5290D, 0xFB03F7EE);
	r0 = D(r0, s0_0_2, 0xFCED17F5, 0x15F9F80C, 0xEEE506E2, 0xD40EFF29);
	r1 = D(r1, s0_0_2, 0xF5030C0E, 0x040200E7, 0x0FF503F8, 0x1612FAF7);
	r2 = D(r2, s0_0_2, 0xFBF8FF01, 0x0E08FFFC, 0xFEF7F90E, 0x0200FCFB);
	r3 = D(r3, s0_0_2, 0x11051C0C, 0x06F81211, 0xF6162704, 0x0614EC22);
	r4 = D(r4, s0_0_2, 0x061400DD, 0x0B0FF71A, 0x06FE08FF, 0xFAFE0009);
	r5 = D(r5, s0_0_2, 0x161E16FD, 0x19FF1FEE, 0x01F2FD28, 0x01FF0BFB);
	r0 = D(r0, s0_1_0, 0xFF09FA1C, 0xFCFDF909, 0x22E9E550, 0xF9F0FA21);
	r1 = D(r1, s0_1_0, 0x07F20C11, 0xF8FAFC0A, 0xD819C1DC, 0xFA31FDFB);
	r2 = D(r2, s0_1_0, 0xFD010405, 0x08F907BF, 0xFA05F9F4, 0x01FFF8FF);
	r3 = D(r3, s0_1_0, 0xFDFDF404, 0xFC0A06EE, 0x170DEBD5, 0x05BC03F6);
	r4 = D(r4, s0_1_0, 0x0FF90909, 0x1810EDD7, 0xFD10F1FA, 0x050204FC);
	r5 = D(r5, s0_1_0, 0xFAF0080B, 0x18E50DFC, 0x04FBDF26, 0xF8FB0DF0);
	r0 = D(r0, s0_1_1, 0xF6E6F614, 0xE006FE30, 0xE6FF3130, 0xFD110611);
	r1 = D(r1, s0_1_1, 0x2D0C053B, 0xD0F3F037, 0x03EDE5C6, 0x3E11F2E2);
	r2 = D(r2, s0_1_1, 0xF8F7EF04, 0x8E060418, 0xF8EFEEEC, 0x0CFE04FE);
	r3 = D(r3, s0_1_1, 0x3A130C11, 0xF50B0CFD, 0x81093716, 0xF3310DF4);
	r4 = D(r4, s0_1_1, 0xF423020B, 0x06C9F8F1, 0x0AF1F7F7, 0x040A0A1D);
	r5 = D(r5, s0_1_1, 0xDF071424, 0xABD9E21E, 0x1BDF2504, 0x04F3F00F);
	r0 = D(r0, s0_1_2, 0xFEF0E6D3, 0x0503F40E, 0x1411ED11, 0xF2FA09E7);
	r1 = D(r1, s0_1_2, 0x0C101009, 0x07E1F412, 0xECFC16D8, 0x1605EAEA);
	r2 = D(r2, s0_1_2, 0xFD0103F5, 0xF2F6FF18, 0x06FE00E3, 0x0A00EEFD);
	r3 = D(r3, s0_1_2, 0x25080AF1, 0xEFFD18FE, 0xE7110014, 0x21FF0425);
	r4 = D(r4, s0_1_2, 0xFB051206, 0x27DEDEF5, 0x0CED04F2, 0x020300FF);
	r5 = D(r5, s0_1_2, 0xF7F4E90E, 0xF6ED080B, 0x2BF80526, 0xF1FB07F5);
	r0 = D(r0, s0_2_0, 0x09090508, 0xFE03FA07, 0xF6FCFE31, 0xFBFA2317);
	r1 = D(r1, s0_2_0, 0x0DF6F5F0, 0xC5BF4581, 0x14FF35BB, 0x021907E2);
	r2 = D(r2, s0_2_0, 0x00000203, 0x03F81202, 0x0404FEF4, 0xFFFD0701);
	r3 = D(r3, s0_2_0, 0xFBF8F301, 0x05F10FF1, 0xF8F52110, 0x131CF1F0);
	r4 = D(r4, s0_2_0, 0x02FD0304, 0xE1F8EAFD, 0x0F0800D9, 0xFD070104);
	r5 = D(r5, s0_2_0, 0xF0EC100F, 0x0EF8FC0C, 0x03E9F0E6, 0x03FFFD09);
	r0 = D(r0, s0_2_1, 0xFD080FFF, 0xEF06FAED, 0xF5E63DFE, 0xF8E708E5);
	r1 = D(r1, s0_2_1, 0xFDFD0B18, 0x56B10984, 0xBFE92A17, 0x061C1317);
	r2 = D(r2, s0_2_1, 0xFDFEF905, 0x02070C0B, 0xFCF2FBF4, 0xFD011101);
	r3 = D(r3, s0_2_1, 0x0F072307, 0x03FD36E8, 0x0EE01F31, 0x0FD90302);
	r4 = D(r4, s0_2_1, 0x09120811, 0x12E6DDE8, 0x0DF2EC17, 0xFFFC01F9);
	r5 = D(r5, s0_2_1, 0x1407F9EA, 0xF4F7D4FB, 0x06F0FB1B, 0x00F010FA);
	r0 = D(r0, s0_2_2, 0x13E4FF0C, 0x0AF40608, 0x0BEAD6E3, 0xDB05EC0F);
	r1 = D(r1, s0_2_2, 0xFD1EFD03, 0x26CCFCFB, 0x1AEE020B, 0x0C100200);
	r2 = D(r2, s0_2_2, 0xF8FBFCF8, 0x05020A04, 0x06EDF7F7, 0x06F80211);
	r3 = D(r3, s0_2_2, 0x0409E607, 0x06081515, 0xE405DEED, 0xF5FC073A);
	r4 = D(r4, s0_2_2, 0xFA07FE0D, 0x05DEFFFD, 0x1007E304, 0x06FD00FA);
	r5 = D(r5, s0_2_2, 0x141C0726, 0x23041F00, 0x0EF91216, 0x04060602);
	r0 = D(r0, s1_0_0, 0x050B09FA, 0x12FCF703, 0xFD0DF8D4, 0x31F5F40E);
	r1 = D(r1, s1_0_0, 0x1D0E17FC, 0xF3040C02, 0x1FF911FF, 0xFBF7F8F0);
	r2 = D(r2, s1_0_0, 0x06F7FE00, 0x11020BFF, 0x0AFAF804, 0x03040200);
	r3 = D(r3, s1_0_0, 0x0106FCF8, 0xF805FFFC, 0xFAED0210, 0x05F9F506);
	r4 = D(r4, s1_0_0, 0xFB02F7E5, 0xD3EF022E, 0xF5000101, 0xFD00FEFE);
	r5 = D(r5, s1_0_0, 0xE0020AED, 0x0006FCF3, 0xD90FFEEB, 0xF3070501);
	r0 = D(r0, s1_0_1, 0x1303E30F, 0x100B17FC, 0xF4E8D738, 0x0BF5001A);
	r1 = D(r1, s1_0_1, 0x031B07FC, 0xFC01E500, 0xFEF21813, 0xD90907F0);
	r2 = D(r2, s1_0_1, 0x08FDFD0E, 0xFB0C13EF, 0xF9F8F71D, 0x0201FEFB);
	r3 = D(r3, s1_0_1, 0x0F1A0AEE, 0x08000716, 0x18FA1B0B, 0xD1F3F6C6);
	r4 = D(r4, s1_0_1, 0xF21F07D1, 0xF5C5F3FF, 0xF2EEEF11, 0x020907FB);
	r5 = D(r5, s1_0_1, 0x020316E9, 0x061309EC, 0xD5EBEC08, 0x02FDE2FB);
	r0 = D(r0, s1_0_2, 0x06EF0723, 0x06FF2003, 0x16FB2CD6, 0x0DF5E602);
	r1 = D(r1, s1_0_2, 0xFEFF0EF6, 0x05F2F508, 0xFAF6070C, 0x050EECF9);
	r2 = D(r2, s1_0_2, 0x02F5FD0A, 0x050CFFF0, 0x02F1F311, 0x0001FF02);
	r3 = D(r3, s1_0_2, 0xFE0B04F3, 0x05080EF9, 0x191C07F5, 0xF41414E6);
	r4 = D(r4, s1_0_2, 0x0616FDDF, 0xEE08ECF9, 0xF0FA060E, 0x0001FBFF);
	r5 = D(r5, s1_0_2, 0xFA3108F5, 0xFFFCCE08, 0xF7FA12E7, 0xFD02F908);
	r0 = D(r0, s1_1_0, 0x11FB1C0A, 0x04FF0AF5, 0xDE0C0CC1, 0x2CFAF1FC);
	r1 = D(r1, s1_1_0, 0xF928F0E1, 0x09051821, 0xFEE70B01, 0x0503F6EF);
	r2 = D(r2, s1_1_0, 0xFAF70001, 0x06F6E4E1, 0xF8F4F90D, 0x090000FA);
	r3 = D(r3, s1_1_0, 0x02F907F7, 0x0A0101FE, 0x0BDD1316, 0x04030EF8);
	r4 = D(r4, s1_1_0, 0x170511DF, 0xD00611F0, 0xF4FD041A, 0x0B180AF9);
	r5 = D(r5, s1_1_0, 0x1CF3090A, 0xD8EEE5E3, 0xAA1925FD, 0xF5FDEDFC);
	r0 = D(r0, s1_1_1, 0x11E2F8E9, 0xF2FC0C12, 0x26E60749, 0x16F71119);
	r1 = D(r1, s1_1_1, 0xF91713D0, 0x1EE6813C, 0xFFDF1A24, 0xF326F981);
	r2 = D(r2, s1_1_1, 0x05000302, 0x10152108, 0x0E100D24, 0xF100FE09);
	r3 = D(r3, s1_1_1, 0xF81614D9, 0x02ED0614, 0x12DF058C, 0xDCF1E181);
	r4 = D(r4, s1_1_1, 0x03FDE281, 0xEEE3F24B, 0xF5FA122D, 0xFA050AEC);
	r5 = D(r5, s1_1_1, 0x24F51D0F, 0x1BFFE203, 0xC8084510, 0xF300DC1B);
	r0 = D(r0, s1_1_2, 0x19DD10E3, 0x07FC0FFD, 0x1AEED0DF, 0x0C01C611);
	r1 = D(r1, s1_1_2, 0x05031305, 0xE6E0B213, 0x07E0121B, 0x0BFE05F5);
	r2 = D(r2, s1_1_2, 0x04FB0208, 0x1004FD11, 0x01F1F708, 0x000501F9);
	r3 = D(r3, s1_1_2, 0x081A1CF4, 0x031A05F1, 0xFCFCF0F8, 0xDC13F3CB);
	r4 = D(r4, s1_1_2, 0xE524F5ED, 0xF3CF26FC, 0xFBFCF106, 0xFF01F804);
	r5 = D(r5, s1_1_2, 0xFEF81607, 0xFCEC1D28, 0xBDFC25E3, 0xFCFBEEFC);
	r0 = D(r0, s1_2_0, 0x020205FE, 0xFDFB150E, 0xEC1608EF, 0x14F1F71D);
	r1 = D(r1, s1_2_0, 0x080F10BA, 0x81934D81, 0x09B6EB29, 0x0D00F8FC);
	r2 = D(r2, s1_2_0, 0xFE030F06, 0xF514F9E3, 0x02010D07, 0x050301FB);
	r3 = D(r3, s1_2_0, 0x06060AFA, 0xFE0DECF3, 0xF1F41D2B, 0x07FEF40C);
	r4 = D(r4, s1_2_0, 0xF709E0F0, 0x20F619FB, 0xFAF30318, 0xFCFF08F0);
	r5 = D(r5, s1_2_0, 0x18F71706, 0xF0000BDD, 0xCCF50F0B, 0x1105F4FE);
	r0 = D(r0, s1_2_1, 0x0FEFF215, 0x03FF0C31, 0x1600320B, 0x2B0522EA);
	r1 = D(r1, s1_2_1, 0xF6F3F681, 0x029CFE81, 0xE1A8EC19, 0xF10411F6);
	r2 = D(r2, s1_2_1, 0x00FBFD0A, 0xF111F8D9, 0x02F6FD25, 0xF9F9FA3B);
	r3 = D(r3, s1_2_1, 0xFF090181, 0x020ADAF8, 0x193204E7, 0x011D02E0);
	r4 = D(r4, s1_2_1, 0xF610F6E6, 0x26FE0F32, 0xDFECD708, 0xF201FFEA);
	r5 = D(r5, s1_2_1, 0x17F43F13, 0x17FC2713, 0xE30A0DF1, 0x06050025);
	r0 = D(r0, s1_2_2, 0x1AFE1E18, 0x06FE0511, 0x01E61B2E, 0x0405F0FA);
	r1 = D(r1, s1_2_2, 0x020905F0, 0xE0F858DA, 0x19DC0C0F, 0xFF080A09);
	r2 = D(r2, s1_2_2, 0x01030403, 0x0306FDF9, 0x0104FC0A, 0x06F9000B);
	r3 = D(r3, s1_2_2, 0x09FC12E6, 0x011508D8, 0x0307EAFD, 0xFEF40C21);
	r4 = D(r4, s1_2_2, 0xFDFEFAFB, 0xF5000A11, 0xFFF701E4, 0xFF06F601);
	r5 = D(r5, s1_2_2, 0xF30B01F5, 0xE30FFFFF, 0xE6F4180E, 0x04080805);
	f0 = vec4(r0) * 6.2000124e-05;
	f0 += vec4(4.480e-03, 4.763e-03, -7.706e-03, 6.518e-03);
	f0 = clamp(f0, vec4(0.0), vec4(1.0));
	imageStore(out_image, opos + ivec2(0, 0), f0);
	f1 = vec4(r1) * 6.2000124e-05;
	f1 += vec4(1.230e-02, 5.031e-03, -1.228e-02, -2.936e-02);
	f1 = clamp(f1, vec4(0.0), vec4(1.0));
	imageStore(out_image, opos + ivec2(1, 0), f1);
	f2 = vec4(r2) * 6.2000124e-05;
	f2 += vec4(3.194e-03, -7.714e-03, 2.033e-02, -1.005e-02);
	f2 = clamp(f2, vec4(0.0), vec4(1.0));
	imageStore(out_image, opos + ivec2(2, 0), f2);
	f3 = vec4(r3) * 6.2000124e-05;
	f3 += vec4(-3.068e-02, -2.311e-02, -1.719e-02, 1.893e-03);
	f3 = clamp(f3, vec4(0.0), vec4(1.0));
	imageStore(out_image, opos + ivec2(0, 1), f3);
	f4 = vec4(r4) * 6.2000124e-05;
	f4 += vec4(1.337e-02, -6.779e-04, 5.801e-03, -9.550e-04);
	f4 = clamp(f4, vec4(0.0), vec4(1.0));
	imageStore(out_image, opos + ivec2(1, 1), f4);
	f5 = vec4(r5) * 6.2000124e-05;
	f5 += vec4(-1.374e-02, -2.060e-02, -1.698e-02, -1.385e-03);
	f5 = clamp(f5, vec4(0.0), vec4(1.0));
	imageStore(out_image, opos + ivec2(2, 1), f5);
}

//!DESC CuNNy-4x24-conv3
//!HOOK LUMA
//!COMPUTE 24 16 8 8
//!BIND conv2
//!BIND LUMA
//!SAVE conv3
//!WIDTH LUMA.w 3 *
//!HEIGHT LUMA.h 2 *
//!COMPONENTS 4
//!WHEN OUTPUT.w LUMA.w / 1.3 > OUTPUT.h LUMA.h / 1.3 > *
#extension GL_EXT_spirv_intrinsics : require
#define l0(x, y) (conv2_mul * texelFetch(conv2_raw, clamp(pos + ivec2(x, y), ivec2(0), sz) * ivec2(3, 2) + ivec2(0, 0), 0))
#define l1(x, y) (conv2_mul * texelFetch(conv2_raw, clamp(pos + ivec2(x, y), ivec2(0), sz) * ivec2(3, 2) + ivec2(1, 0), 0))
#define l2(x, y) (conv2_mul * texelFetch(conv2_raw, clamp(pos + ivec2(x, y), ivec2(0), sz) * ivec2(3, 2) + ivec2(2, 0), 0))
#define l3(x, y) (conv2_mul * texelFetch(conv2_raw, clamp(pos + ivec2(x, y), ivec2(0), sz) * ivec2(3, 2) + ivec2(0, 1), 0))
#define l4(x, y) (conv2_mul * texelFetch(conv2_raw, clamp(pos + ivec2(x, y), ivec2(0), sz) * ivec2(3, 2) + ivec2(1, 1), 0))
#define l5(x, y) (conv2_mul * texelFetch(conv2_raw, clamp(pos + ivec2(x, y), ivec2(0), sz) * ivec2(3, 2) + ivec2(2, 1), 0))
spirv_instruction (extensions = ["SPV_KHR_integer_dot_product"], capabilities = [6019, 6018], id = 4450)
int dp4(int a, int b, spirv_literal int fmt);
#define D(r, s, a, b, c, d) r + ivec4(dp4(s, a, 0), dp4(s, b, 0), dp4(s, c, 0), dp4(s, d, 0))
shared int G[6][10][10];
void hook() {
	ivec2 xy = ivec2(gl_LocalInvocationID.xy);
	ivec2 pos = ivec2(gl_WorkGroupID.xy) * ivec2(8, 8) + xy;
	ivec2 opos = pos * ivec2(3, 2);
	ivec2 sz = ivec2(LUMA_size) - ivec2(1);
	for (int y = 0; y < 10; y += 8) {
		int ay = xy.y + y;
		if (ay >= 10) break;
		for (int x = 0; x < 10; x += 8) {
			int ax = xy.x + x;
			if (ax >= 10) break;
			vec4 v0 = l0(x - 1, y - 1) * 1.0000000e+00;
			vec4 v1 = l1(x - 1, y - 1) * 1.0000000e+00;
			vec4 v2 = l2(x - 1, y - 1) * 1.0000000e+00;
			vec4 v3 = l3(x - 1, y - 1) * 1.0000000e+00;
			vec4 v4 = l4(x - 1, y - 1) * 1.0000000e+00;
			vec4 v5 = l5(x - 1, y - 1) * 1.0000000e+00;
			G[0][ay][ax] = int(packSnorm4x8(v0));
			G[1][ay][ax] = int(packSnorm4x8(v1));
			G[2][ay][ax] = int(packSnorm4x8(v2));
			G[3][ay][ax] = int(packSnorm4x8(v3));
			G[4][ay][ax] = int(packSnorm4x8(v4));
			G[5][ay][ax] = int(packSnorm4x8(v5));
		}
	}
	barrier();
	int s0_0_0, s0_0_1, s0_0_2, s0_1_0, s0_1_1, s0_1_2, s0_2_0, s0_2_1, s0_2_2, s1_0_0, s1_0_1, s1_0_2, s1_1_0, s1_1_1, s1_1_2, s1_2_0, s1_2_1, s1_2_2;
	ivec4 r0, r1, r2, r3, r4, r5;
	vec4 f0, f1, f2, f3, f4, f5;
	r0 = ivec4(0); r1 = ivec4(0); r2 = ivec4(0); r3 = ivec4(0); r4 = ivec4(0); r5 = ivec4(0);
	s0_0_0 = G[0][xy.y+0][xy.x+0]; s0_0_1 = G[0][xy.y+0][xy.x+1];
	s0_0_2 = G[0][xy.y+0][xy.x+2]; s0_1_0 = G[0][xy.y+1][xy.x+0];
	s0_1_1 = G[0][xy.y+1][xy.x+1]; s0_1_2 = G[0][xy.y+1][xy.x+2];
	s0_2_0 = G[0][xy.y+2][xy.x+0]; s0_2_1 = G[0][xy.y+2][xy.x+1];
	s0_2_2 = G[0][xy.y+2][xy.x+2]; s1_0_0 = G[1][xy.y+0][xy.x+0];
	s1_0_1 = G[1][xy.y+0][xy.x+1]; s1_0_2 = G[1][xy.y+0][xy.x+2];
	s1_1_0 = G[1][xy.y+1][xy.x+0]; s1_1_1 = G[1][xy.y+1][xy.x+1];
	s1_1_2 = G[1][xy.y+1][xy.x+2]; s1_2_0 = G[1][xy.y+2][xy.x+0];
	s1_2_1 = G[1][xy.y+2][xy.x+1]; s1_2_2 = G[1][xy.y+2][xy.x+2];
	r0 = D(r0, s0_0_0, 0x05FDEEF5, 0x041B1405, 0xFF04F901, 0xFC0A04FB);
	r1 = D(r1, s0_0_0, 0xF805F903, 0xFE10FF00, 0xF608F8FF, 0xFFFEFC03);
	r2 = D(r2, s0_0_0, 0xF70DF701, 0x07FDF603, 0xFFFB0503, 0x020EF808);
	r3 = D(r3, s0_0_0, 0x14F2F4DC, 0x02FFF900, 0xF200EC05, 0x0BEEF9FC);
	r4 = D(r4, s0_0_0, 0x090BF106, 0x02EB06FF, 0xF203ED01, 0xFB0A0CFB);
	r5 = D(r5, s0_0_0, 0xF404F703, 0xFD0C0203, 0xFC04FD08, 0x05FF0AFB);
	r0 = D(r0, s0_0_1, 0xFDE8E5F3, 0x17101302, 0x08FC0802, 0x07F50EFF);
	r1 = D(r1, s0_0_1, 0x0106FF03, 0xF2FAF802, 0xE9F0FC07, 0xF70008FB);
	r2 = D(r2, s0_0_1, 0x0509D415, 0x0F0FF901, 0xF6FC00FC, 0x03FBF50B);
	r3 = D(r3, s0_0_1, 0x00EAEDD1, 0x06070802, 0xED10FD04, 0x03E6FEFC);
	r4 = D(r4, s0_0_1, 0x090E02FC, 0x01FE0207, 0xFEFBFC08, 0x0E0E0AFB);
	r5 = D(r5, s0_0_1, 0x010FFD0D, 0xFAFDFA08, 0x0A110001, 0xF917F40D);
	r0 = D(r0, s0_0_2, 0xEFF9F0FF, 0x0C12E50B, 0xFA0604FE, 0xFD07FAFF);
	r1 = D(r1, s0_0_2, 0x0500FF00, 0xEEFB0B02, 0xEFF20902, 0x0B060308);
	r2 = D(r2, s0_0_2, 0xFDF5FBF8, 0xFC00FC03, 0x02FEF808, 0x010012FB);
	r3 = D(r3, s0_0_2, 0xE2F3FF00, 0x0A0DF806, 0x06070704, 0xFAED03FB);
	r4 = D(r4, s0_0_2, 0x070016F1, 0x0303FC04, 0x0B01F7FD, 0x090A02FD);
	r5 = D(r5, s0_0_2, 0x11110B00, 0x05FE0807, 0xFC0EFB08, 0x1003EA0C);
	r0 = D(r0, s0_1_0, 0xE6021D0F, 0x071C08F3, 0xF8FFFD10, 0x01EFFFFC);
	r1 = D(r1, s0_1_0, 0xF50DF4FE, 0xFBEAFA08, 0xFDE90704, 0x04FE12FA);
	r2 = D(r2, s0_1_0, 0xFB060D0B, 0x04FDFCF7, 0xFC121BFD, 0xFE15F508);
	r3 = D(r3, s0_1_0, 0xEA0B1302, 0xFAF30807, 0xE0F8FB1C, 0xF5F806FA);
	r4 = D(r4, s0_1_0, 0xFE180EFD, 0xFCF9EBF7, 0xED05C706, 0x06FD08F6);
	r5 = D(r5, s0_1_0, 0xFFEDFB14, 0xFEFA0C14, 0x05EAF410, 0xFC2610F9);
	r0 = D(r0, s0_1_1, 0x1A192409, 0x0D1203FE, 0xFEF0FDF4, 0xE7FBFBE6);
	r1 = D(r1, s0_1_1, 0xF2F0E80E, 0xE4EB0E07, 0xEBF9E1FE, 0xE7F1E40C);
	r2 = D(r2, s0_1_1, 0xE9F30D09, 0xEC010414, 0xF4F00EFE, 0x02F90D04);
	r3 = D(r3, s0_1_1, 0xFA0E0F18, 0x011CEBFB, 0xD7FDF602, 0x0AEEFDE9);
	r4 = D(r4, s0_1_1, 0x0A070D09, 0x0E20FD16, 0xF713F8FD, 0xEC080301);
	r5 = D(r5, s0_1_1, 0xD30CF026, 0x1CF9FA0A, 0xDA14FF1E, 0x1BF2FB16);
	r0 = D(r0, s0_1_2, 0xF80A0A0E, 0x09FF0004, 0xFDF5FAF7, 0xF807F7F0);
	r1 = D(r1, s0_1_2, 0xF3F90802, 0x05140BF8, 0xE4FFF30A, 0xD7FAF30E);
	r2 = D(r2, s0_1_2, 0x251202FD, 0x130808FF, 0xEAFB0504, 0x0D0EFE05);
	r3 = D(r3, s0_1_2, 0x1B1E2109, 0x00F2FF06, 0x05010AF6, 0xFFF7FBF9);
	r4 = D(r4, s0_1_2, 0x0E0FFDF6, 0xFCFC060A, 0x13F40801, 0xED01050A);
	r5 = D(r5, s0_1_2, 0xFFE521FD, 0xFCF0090A, 0xFFFD0D0F, 0xE1EF0404);
	r0 = D(r0, s0_2_0, 0xFC010205, 0x0C0802F7, 0xFFF8FB0A, 0xF803030B);
	r1 = D(r1, s0_2_0, 0x02FDFAFE, 0xF2F50A06, 0xF706F5FE, 0xFBF9FE0D);
	r2 = D(r2, s0_2_0, 0x0200FE03, 0x0008FD02, 0x03FFF606, 0x0B04FC0B);
	r3 = D(r3, s0_2_0, 0x080FEF15, 0xF8FC010E, 0xFFFDE410, 0x00F3F70B);
	r4 = D(r4, s0_2_0, 0x0502F50E, 0x0EF011F8, 0x0607FAEF, 0xFEFBFA11);
	r5 = D(r5, s0_2_0, 0xF6E1FE03, 0x08F9FEF4, 0xECF51306, 0x1302FDF6);
	r0 = D(r0, s0_2_1, 0xF10CFE0D, 0x050C0D00, 0x060B0CEE, 0x150607F3);
	r1 = D(r1, s0_2_1, 0xE4F4020C, 0x070D18F9, 0x0B131EF2, 0xF2F811FE);
	r2 = D(r2, s0_2_1, 0xF4FBFBFC, 0xFFFEF804, 0xF5F0060A, 0x0005F0FD);
	r3 = D(r3, s0_2_1, 0xD6D8F908, 0xFA0BF708, 0x0BF412EE, 0xF5F30700);
	r4 = D(r4, s0_2_1, 0xECF5ED09, 0xF0FCE515, 0x06110506, 0xF2FCE015);
	r5 = D(r5, s0_2_1, 0x09DD1CCC, 0xFFFAFCFC, 0x080EF615, 0xF0040C0A);
	r0 = D(r0, s0_2_2, 0xF7FB0508, 0xF0F7EE05, 0xFDFBFDFC, 0xFAFBFEFF);
	r1 = D(r1, s0_2_2, 0x0B01FDFD, 0x0D0B04FC, 0xF8F4FF03, 0xFA0907FE);
	r2 = D(r2, s0_2_2, 0x060B01FF, 0x08FEFE00, 0xEBFCFB06, 0x00FF0303);
	r3 = D(r3, s0_2_2, 0x0CF211FD, 0xF805FB00, 0x191B07F0, 0x00FC0301);
	r4 = D(r4, s0_2_2, 0x150F04FE, 0xF3FAF505, 0xFEFAFB03, 0xF2FB0805);
	r5 = D(r5, s0_2_2, 0x1D1907EF, 0x0403FE00, 0xF9F70205, 0x0313F006);
	r0 = D(r0, s1_0_0, 0xFF2210E0, 0x030A03F2, 0x06F4210B, 0x0BFCFF05);
	r1 = D(r1, s1_0_0, 0x040C00F8, 0x0200FDE9, 0xFDFFF3FE, 0xFB22DEEF);
	r2 = D(r2, s1_0_0, 0x03D84222, 0xF20D03FF, 0xFAF00F0E, 0x07F2E907);
	r3 = D(r3, s1_0_0, 0xE43DC3DA, 0x05FE180C, 0xFA053F10, 0xFA02F6FB);
	r4 = D(r4, s1_0_0, 0x08040CFF, 0x00100A0F, 0x08E437DC, 0xFB0D16FF);
	r5 = D(r5, s1_0_0, 0xFA3553F2, 0x02000109, 0x010DE4F5, 0x07182EFB);
	r0 = D(r0, s1_0_1, 0xB7363A15, 0xFEF6BD28, 0x12032307, 0x0903EE01);
	r1 = D(r1, s1_0_1, 0x02FC0CF3, 0xEE022AFC, 0xE9F7EB01, 0x0C04BBE2);
	r2 = D(r2, s1_0_1, 0xD7DC7730, 0xF7F53C17, 0x00FC4307, 0xF4FCF11A);
	r3 = D(r3, s1_0_1, 0x81156EEE, 0xFEF43006, 0xF6E37F0B, 0xFEF6EAF9);
	r4 = D(r4, s1_0_1, 0xD4F01CFC, 0x08F1E80F, 0xE9DC65FE, 0x0E0500EE);
	r5 = D(r5, s1_0_1, 0x03FC4F1A, 0xEFFEE5E0, 0x09070EF7, 0xFE0D1AEF);
	r0 = D(r0, s1_0_2, 0xFE0EDE06, 0x05FA3C19, 0x0102110E, 0xFEFD4800);
	r1 = D(r1, s1_0_2, 0x0503F0F5, 0x06040303, 0xEFF7C704, 0x0D0A10E0);
	r2 = D(r2, s1_0_2, 0xFAE71121, 0xF1F6380D, 0xFFFC8103, 0x07F53202);
	r3 = D(r3, s1_0_2, 0xE4FDB30B, 0xFBF4E9FE, 0xFEF5FBFA, 0xFC051CF3);
	r4 = D(r4, s1_0_2, 0xFCF9E3F8, 0xFFF1F313, 0xFBFCF204, 0x03F097FC);
	r5 = D(r5, s1_0_2, 0x00FD64FA, 0x00F781FE, 0xFF04C0FF, 0xFDEC3707);
	r0 = D(r0, s1_1_0, 0xFE201CEC, 0x02F7FCF9, 0x10EF08FE, 0x09E10612);
	r1 = D(r1, s1_1_0, 0x0EFD01F1, 0xE90FF9EC, 0xFAF10003, 0xF81803F6);
	r2 = D(r2, s1_1_0, 0x10FE0707, 0xF605FA01, 0x0DEAF9FE, 0x1105FFF7);
	r3 = D(r3, s1_1_0, 0x0A3317FB, 0x0107050C, 0x05D82810, 0xF9F027F9);
	r4 = D(r4, s1_1_0, 0x1A0510F9, 0x1022D4F9, 0xF8DE0681, 0xF9FC12ED);
	r5 = D(r5, s1_1_0, 0x0426E6D5, 0xF412ED11, 0xD317F711, 0x020EF3DF);
	r0 = D(r0, s1_1_1, 0xE8350A0B, 0xF4F1F540, 0x4027F9DC, 0x13063F06);
	r1 = D(r1, s1_1_1, 0xBAFC0A00, 0xF621EED6, 0x12F8C1E9, 0xFE1C0BC1);
	r2 = D(r2, s1_1_1, 0xF7E00E22, 0xE0FF13FC, 0xEC163A09, 0xD6F00FD7);
	r3 = D(r3, s1_1_1, 0xDC0B26C0, 0xD5EC2ED3, 0xF3EBF5EC, 0x350820D4);
	r4 = D(r4, s1_1_1, 0x8B8126F0, 0x051010E9, 0xE5ED06F7, 0xEEF57F06);
	r5 = D(r5, s1_1_1, 0xE600ECE0, 0xFA01EB0A, 0xDEE90C12, 0x8101FD12);
	r0 = D(r0, s1_1_2, 0xF61C21F3, 0xEF000B37, 0x0C0AE305, 0x0904FC06);
	r1 = D(r1, s1_1_2, 0x00F6F6F6, 0x020003EE, 0xF4FE050D, 0xE9FC13E8);
	r2 = D(r2, s1_1_2, 0x07F80014, 0xF6070D00, 0xF8F60AF7, 0xF7F508FE);
	r3 = D(r3, s1_1_2, 0xF4E424C0, 0xF4F501F5, 0x0AE4F4F7, 0x02FB1CFC);
	r4 = D(r4, s1_1_2, 0xEBE40009, 0xF3150FEC, 0xF3FAF615, 0xF5EB1705);
	r5 = D(r5, s1_1_2, 0xFFFDAA02, 0x080FFB05, 0xF2F20FFD, 0xE1E41906);
	r0 = D(r0, s1_2_0, 0x031902F6, 0x06FA000C, 0x00FCFF0C, 0x08E80017);
	r1 = D(r1, s1_2_0, 0x0605FCF7, 0xFE1E05EE, 0x01FC06FF, 0x04FD0505);
	r2 = D(r2, s1_2_0, 0x031B01FD, 0xFC0A00F5, 0xFFFBFF11, 0x02190404);
	r3 = D(r3, s1_2_0, 0xFB2300FD, 0x01FC0213, 0xFDF20510, 0x01F5FDFC);
	r4 = D(r4, s1_2_0, 0x0920FF00, 0xFB1EFE00, 0x030B04E3, 0xFAFC050E);
	r5 = D(r5, s1_2_0, 0xE22C1BF9, 0xFC03FFFF, 0xE60C020B, 0xFB1AFBF3);
	r0 = D(r0, s1_2_1, 0x081D0201, 0x0BFAFE00, 0x0FFDF908, 0x0904F605);
	r1 = D(r1, s1_2_1, 0xFBF20804, 0xFEFD0106, 0xF607FC01, 0xFBF204FD);
	r2 = D(r2, s1_2_1, 0x080200F7, 0xF902FFF7, 0xF10004F2, 0x13F7FDDF);
	r3 = D(r3, s1_2_1, 0x0AF901C1, 0x000103FB, 0x030402FD, 0x13E106FD);
	r4 = D(r4, s1_2_1, 0x02DE05CC, 0x032F03ED, 0xF60402F2, 0xF2F201EB);
	r5 = D(r5, s1_2_1, 0x2632F8F1, 0x05FDFDF2, 0xDF06080D, 0x0B0D03FD);
	r0 = D(r0, s1_2_2, 0x03120308, 0x00F90301, 0x07FFF20A, 0x00FDFD02);
	r1 = D(r1, s1_2_2, 0x08E70202, 0xF601FFFB, 0xF907FEF9, 0xFCEC0205);
	r2 = D(r2, s1_2_2, 0x040106F8, 0xF60501FB, 0xFDFAF902, 0x00E903E3);
	r3 = D(r3, s1_2_2, 0xF52C0AFE, 0x00FD0304, 0xFF14FF06, 0xFFE70507);
	r4 = D(r4, s1_2_2, 0xFCE4FCEF, 0xF91BFEF9, 0xFB0305FB, 0x01FC01E5);
	r5 = D(r5, s1_2_2, 0x0526EDF7, 0xFE010201, 0x0108FDFF, 0xF815090E);
	s0_0_0 = G[2][xy.y+0][xy.x+0]; s0_0_1 = G[2][xy.y+0][xy.x+1];
	s0_0_2 = G[2][xy.y+0][xy.x+2]; s0_1_0 = G[2][xy.y+1][xy.x+0];
	s0_1_1 = G[2][xy.y+1][xy.x+1]; s0_1_2 = G[2][xy.y+1][xy.x+2];
	s0_2_0 = G[2][xy.y+2][xy.x+0]; s0_2_1 = G[2][xy.y+2][xy.x+1];
	s0_2_2 = G[2][xy.y+2][xy.x+2]; s1_0_0 = G[3][xy.y+0][xy.x+0];
	s1_0_1 = G[3][xy.y+0][xy.x+1]; s1_0_2 = G[3][xy.y+0][xy.x+2];
	s1_1_0 = G[3][xy.y+1][xy.x+0]; s1_1_1 = G[3][xy.y+1][xy.x+1];
	s1_1_2 = G[3][xy.y+1][xy.x+2]; s1_2_0 = G[3][xy.y+2][xy.x+0];
	s1_2_1 = G[3][xy.y+2][xy.x+1]; s1_2_2 = G[3][xy.y+2][xy.x+2];
	r0 = D(r0, s0_0_0, 0x15E2F327, 0x090AFA07, 0x0003FE05, 0x020103FA);
	r1 = D(r1, s0_0_0, 0xFEFB0000, 0x090D0103, 0xFEFD04FD, 0xF2F502F1);
	r2 = D(r2, s0_0_0, 0x030AF908, 0xF3FB00FC, 0x0A050101, 0x0EFE0302);
	r3 = D(r3, s0_0_0, 0x14AAFD20, 0x060800F9, 0xFEFAFD04, 0xFC02FDF5);
	r4 = D(r4, s0_0_0, 0x0AFF0207, 0xF0FFF90A, 0xFB010501, 0x00FBFD08);
	r5 = D(r5, s0_0_0, 0x0300F113, 0x1B05FD09, 0x0D030203, 0xF6F6FC06);
	r0 = D(r0, s0_0_1, 0x81E311FF, 0xF505F0F7, 0xDB0002F0, 0xCAFA030B);
	r1 = D(r1, s0_0_1, 0x1EFEF808, 0x07000B02, 0xF30513E9, 0x0407F218);
	r2 = D(r2, s0_0_1, 0xF0E814D6, 0xE307FDE6, 0x040AFBFE, 0xF9FC0CF5);
	r3 = D(r3, s0_0_1, 0x81D00034, 0x10FB060A, 0x09090B00, 0xED080400);
	r4 = D(r4, s0_0_1, 0x02F008FB, 0x1D00F004, 0x28F9FBF9, 0x0FF9F805);
	r5 = D(r5, s0_0_1, 0x1E05FF06, 0x43030D02, 0x02FB0307, 0x241200F8);
	r0 = D(r0, s0_0_2, 0x13FC0E16, 0x09FC11F5, 0xF905FEFC, 0xFB04FDF8);
	r1 = D(r1, s0_0_2, 0x0401FE02, 0xFB0E0DFE, 0xFE04120A, 0x0EF407FE);
	r2 = D(r2, s0_0_2, 0xFF02FA01, 0x07020AFC, 0x06FB0900, 0xFE02F505);
	r3 = D(r3, s0_0_2, 0x0A0B00F7, 0x04F207F8, 0xFEFD08FE, 0xF105F704);
	r4 = D(r4, s0_0_2, 0xF400F103, 0x0CF706FC, 0xF7FCFF07, 0x0BFDFF03);
	r5 = D(r5, s0_0_2, 0x00FC0602, 0x08FB02FA, 0x10F90EFA, 0xF3E60EF9);
	r0 = D(r0, s0_1_0, 0xFEEDEB06, 0x070204FE, 0xFD020808, 0xF5F803F8);
	r1 = D(r1, s0_1_0, 0x08FB0111, 0xF4F608F7, 0xFBF407F8, 0xF6F009F2);
	r2 = D(r2, s0_1_0, 0x0E12FD19, 0xFB020010, 0x06FDFE04, 0x18030514);
	r3 = D(r3, s0_1_0, 0xF1F6E329, 0xFF02FEF7, 0x05F9F6F8, 0x0111FBEA);
	r4 = D(r4, s0_1_0, 0x1C01FB14, 0xE3FDF613, 0x1303F318, 0xF9DEFD10);
	r5 = D(r5, s0_1_0, 0x120C0215, 0xF612F4F6, 0xF3EB0100, 0x15EF080E);
	r0 = D(r0, s0_1_1, 0xFEF004A3, 0xE22303B8, 0xE9E40830, 0x1DF11517);
	r1 = D(r1, s0_1_1, 0x1EFEF4DC, 0x0C07FE57, 0x061E1921, 0x1FEFE71F);
	r2 = D(r2, s0_1_1, 0xF2DAF601, 0x03F70A2F, 0xF214EBE3, 0xF01AE605);
	r3 = D(r3, s0_1_1, 0x0FFCFA0D, 0x173310FC, 0x14F31629, 0x2EDCE741);
	r4 = D(r4, s0_1_1, 0x01CE05C0, 0xE60FE2CC, 0xF51CD8E5, 0xF5FC07CE);
	r5 = D(r5, s0_1_1, 0xD9122BE0, 0xE835FDF3, 0x06111ECF, 0xE82CF5C5);
	r0 = D(r0, s0_1_2, 0x04D80C1A, 0xF8F9161F, 0xFD06F702, 0xFC06FEFA);
	r1 = D(r1, s0_1_2, 0xFD0800F9, 0xF20B06FB, 0xF0F31309, 0x050615E4);
	r2 = D(r2, s0_1_2, 0x06F003FA, 0x0C00FB0C, 0xFE001119, 0xFBFDF9EC);
	r3 = D(r3, s0_1_2, 0x00DF05FA, 0x0BF607FF, 0x0713F4E8, 0x0C04F6F6);
	r4 = D(r4, s0_1_2, 0xF3FBF6E7, 0x0D010A03, 0xFEF31018, 0x18FEFDF1);
	r5 = D(r5, s0_1_2, 0xDA11E60C, 0xF7FE0AFA, 0x12F0100D, 0x0CFF1A1D);
	r0 = D(r0, s0_2_0, 0x0700FFF8, 0x02F90CF6, 0xFFFC04F7, 0xF90C0504);
	r1 = D(r1, s0_2_0, 0x06FDFF07, 0xF607FEF9, 0xFE0B00F7, 0x01FF07F4);
	r2 = D(r2, s0_2_0, 0x0304FE0A, 0xFE0602F9, 0xFFFB0012, 0x01F907F3);
	r3 = D(r3, s0_2_0, 0x000BFA0C, 0xF8FC06EF, 0x0202FD18, 0x0206000D);
	r4 = D(r4, s0_2_0, 0x0402FB0A, 0xFCE40EF8, 0x050301FE, 0xFF02FF13);
	r5 = D(r5, s0_2_0, 0x010FE7F8, 0x02FC0504, 0xF917FAF2, 0x05E901FB);
	r0 = D(r0, s0_2_1, 0x02F20505, 0xF900080F, 0xFA17F9E8, 0x011002EC);
	r1 = D(r1, s0_2_1, 0xFBF9F70B, 0xF71701DD, 0xFE0606DC, 0x030CEC09);
	r2 = D(r2, s0_2_1, 0xFDFF02FA, 0x051101EE, 0xF4EAF94C, 0x0AF60C0C);
	r3 = D(r3, s0_2_1, 0x140D03FD, 0x0501000E, 0xFEF7FFFD, 0xFB1D01FC);
	r4 = D(r4, s0_2_1, 0x06F3041B, 0x02DDFD0D, 0xFCE7FF1A, 0x0F07FC48);
	r5 = D(r5, s0_2_1, 0xF8DDC8B5, 0xFDF405FF, 0x0E03F4ED, 0x0005FB00);
	r0 = D(r0, s0_2_2, 0x05FC06FA, 0x05F60F03, 0xFDF8F8F9, 0xFAFF0203);
	r1 = D(r1, s0_2_2, 0x05FDFDF7, 0x06FFFAFE, 0xFEF400FE, 0x010505FE);
	r2 = D(r2, s0_2_2, 0x02FF03FB, 0x040801FE, 0xFCF40506, 0x06FD0908);
	r3 = D(r3, s0_2_2, 0x05FCF9F2, 0x03FE04F9, 0xFCFBF800, 0x0206F6FC);
	r4 = D(r4, s0_2_2, 0x08060209, 0xFFFA060A, 0xFEFB0705, 0xFE000F0E);
	r5 = D(r5, s0_2_2, 0xFBF5F7F4, 0xFFFE0102, 0xFFFF06F4, 0x02F403FD);
	r0 = D(r0, s1_0_0, 0x0EFEFBF6, 0x05FAF7FE, 0xFE09FD08, 0x070D00F8);
	r1 = D(r1, s1_0_0, 0xFE01FB05, 0xF700FCFC, 0xFA040402, 0x0605FFFA);
	r2 = D(r2, s1_0_0, 0xFEFDFF0B, 0x0000FCF7, 0x0001FF05, 0x00FB0200);
	r3 = D(r3, s1_0_0, 0x1C08DCF0, 0x01FF060C, 0xF9D70C13, 0x00040103);
	r4 = D(r4, s1_0_0, 0x03FDFD04, 0x03F7030C, 0x00F8000C, 0x04070403);
	r5 = D(r5, s1_0_0, 0xFD061413, 0xFEEF06FE, 0x02FA0304, 0x02010202);
	r0 = D(r0, s1_0_1, 0x0511F425, 0x07FB0410, 0xFF11FEFB, 0x080EFFFE);
	r1 = D(r1, s1_0_1, 0x040511EF, 0xF7F70F0B, 0xF4FEF7FE, 0x1806FA05);
	r2 = D(r2, s1_0_1, 0xF8FBF336, 0xF110FC32, 0x03060AFC, 0xEFF5FE15);
	r3 = D(r3, s1_0_1, 0xD7078109, 0x00FE07F6, 0x00EF1106, 0x0200F1F5);
	r4 = D(r4, s1_0_1, 0x02050915, 0x02FC0C09, 0xF8F6FF02, 0x040209F0);
	r5 = D(r5, s1_0_1, 0x08F2211E, 0xF0E90E0F, 0x00FF13F7, 0xFFEBFBFC);
	r0 = D(r0, s1_0_2, 0x081817E3, 0xFCEFFD1D, 0x050BF803, 0xFC0A00FD);
	r1 = D(r1, s1_0_2, 0xFD010700, 0xF0F704FB, 0xFCFE01E9, 0x0DFE0AEC);
	r2 = D(r2, s1_0_2, 0xFFFD05FC, 0xFCFE0215, 0xFBF204F9, 0x0309FEFC);
	r3 = D(r3, s1_0_2, 0x254A05D9, 0x08040104, 0xFCF70616, 0x0202F808);
	r4 = D(r4, s1_0_2, 0x0A0E0002, 0x070A05F6, 0xFF0401FD, 0x020AFDFB);
	r5 = D(r5, s1_0_2, 0x0DF4FB08, 0x0602FD02, 0x02FB0E04, 0xFDFB16E8);
	r0 = D(r0, s1_1_0, 0x03FEFF12, 0x01FEF906, 0x0107FEF6, 0x0B05FEFA);
	r1 = D(r1, s1_1_0, 0xFFFBFFFC, 0xF00C01FE, 0xFA06FFF3, 0x0AF60BFD);
	r2 = D(r2, s1_1_0, 0x05FAFC07, 0x00010006, 0x05FBFAFA, 0xF402FAF8);
	r3 = D(r3, s1_1_0, 0xFBF0F7F5, 0xEFFE0819, 0xF5F6120C, 0x06FC0CF8);
	r4 = D(r4, s1_1_0, 0xF1F5FEF0, 0xF5080D20, 0xFBFDF4BC, 0x02F7F6FD);
	r5 = D(r5, s1_1_0, 0xE8080905, 0xFA03030F, 0x02FE0716, 0xFE03FBFC);
	r0 = D(r0, s1_1_1, 0xFFFD1647, 0xF8F5FD24, 0x15FC0604, 0x11161D67);
	r1 = D(r1, s1_1_1, 0xFBF213CA, 0xE103F7DE, 0xF60EE5FB, 0xF1FD04B3);
	r2 = D(r2, s1_1_1, 0x0CED0A45, 0x0000EEE6, 0xFCF309F1, 0xF7EAF7A1);
	r3 = D(r3, s1_1_1, 0xF609D895, 0xE4F5EAC4, 0xFFF400BE, 0xFC0908CD);
	r4 = D(r4, s1_1_1, 0x05DF19EC, 0xBBEDE319, 0xEDF4F819, 0xEEFBE821);
	r5 = D(r5, s1_1_1, 0xEF06EAE9, 0xF0FEDF22, 0xF0E8FD37, 0xF6070510);
	r0 = D(r0, s1_1_2, 0x01100ACD, 0x06F30BE1, 0x031DF8E7, 0xFF17F3F5);
	r1 = D(r1, s1_1_2, 0xF9F8FD0A, 0xEAFCEC01, 0xFA090102, 0xE6E2FDF8);
	r2 = D(r2, s1_1_2, 0x03E612FE, 0xF9F4F40C, 0x030100EE, 0xFCF3FD1E);
	r3 = D(r3, s1_1_2, 0xF1F406CF, 0x050102E3, 0xFF01EE18, 0x0409F9FA);
	r4 = D(r4, s1_1_2, 0x0504052F, 0x080602EA, 0x05FC10E0, 0xFDFEFEF5);
	r5 = D(r5, s1_1_2, 0xF7FEEDFA, 0x02FD06E5, 0xFBFA02FE, 0xEEEF1081);
	r0 = D(r0, s1_2_0, 0xF9FE010B, 0xFFFFFF05, 0x05010303, 0x0DFCFB0F);
	r1 = D(r1, s1_2_0, 0xF801FC12, 0x01030CFD, 0xFF0107FF, 0x0300FC0D);
	r2 = D(r2, s1_2_0, 0xFBFD0306, 0xFE000105, 0xFF00FCFB, 0xF606FE01);
	r3 = D(r3, s1_2_0, 0xE7F9F219, 0xFD010D0D, 0xFBF5F007, 0x00F704EF);
	r4 = D(r4, s1_2_0, 0xF004FE16, 0xFF05F200, 0xF802FA0B, 0xF101EAEF);
	r5 = D(r5, s1_2_0, 0x050AF120, 0x000304F7, 0xF2030317, 0x02FFED00);
	r0 = D(r0, s1_2_1, 0xF2FADB0C, 0xF9040104, 0x070715E0, 0x07050817);
	r1 = D(r1, s1_2_1, 0xFEF80F1E, 0xF4040E0E, 0xFC0009F9, 0xE4080518);
	r2 = D(r2, s1_2_1, 0x02FBFB02, 0xFD01F611, 0x00FE0DEC, 0xF904E8F7);
	r3 = D(r3, s1_2_1, 0xE7FCD22C, 0xF6FAFE00, 0x09F10A23, 0x06FAF8FA);
	r4 = D(r4, s1_2_1, 0xF7FBF0F4, 0x0219E7EB, 0x02F1FAF2, 0xEB00E7A0);
	r5 = D(r5, s1_2_1, 0x06EF04ED, 0x030515EF, 0xEA00EF2A, 0xEA061400);
	r0 = D(r0, s1_2_2, 0x0001EAFF, 0x0104EFD7, 0x030E1206, 0x060F09FD);
	r1 = D(r1, s1_2_2, 0xFEF509FF, 0xF7FDF4E6, 0xFE0906E8, 0xFDE00511);
	r2 = D(r2, s1_2_2, 0x0201FAF2, 0xFCFDF201, 0x04030805, 0xFCFBF222);
	r3 = D(r3, s1_2_2, 0x07F5DD01, 0x0103FB07, 0x01080FFC, 0x01020000);
	r4 = D(r4, s1_2_2, 0xF9F5F020, 0x0A19FD04, 0x011601EB, 0x00F4ED01);
	r5 = D(r5, s1_2_2, 0x0D28DED8, 0x000204EE, 0x05F7F609, 0x00F6FCEC);
	s0_0_0 = G[4][xy.y+0][xy.x+0]; s0_0_1 = G[4][xy.y+0][xy.x+1];
	s0_0_2 = G[4][xy.y+0][xy.x+2]; s0_1_0 = G[4][xy.y+1][xy.x+0];
	s0_1_1 = G[4][xy.y+1][xy.x+1]; s0_1_2 = G[4][xy.y+1][xy.x+2];
	s0_2_0 = G[4][xy.y+2][xy.x+0]; s0_2_1 = G[4][xy.y+2][xy.x+1];
	s0_2_2 = G[4][xy.y+2][xy.x+2]; s1_0_0 = G[5][xy.y+0][xy.x+0];
	s1_0_1 = G[5][xy.y+0][xy.x+1]; s1_0_2 = G[5][xy.y+0][xy.x+2];
	s1_1_0 = G[5][xy.y+1][xy.x+0]; s1_1_1 = G[5][xy.y+1][xy.x+1];
	s1_1_2 = G[5][xy.y+1][xy.x+2]; s1_2_0 = G[5][xy.y+2][xy.x+0];
	s1_2_1 = G[5][xy.y+2][xy.x+1]; s1_2_2 = G[5][xy.y+2][xy.x+2];
	r0 = D(r0, s0_0_0, 0xF004FBEC, 0x06E90002, 0x01030702, 0x040103FD);
	r1 = D(r1, s0_0_0, 0xFFFE00FF, 0xFDF90503, 0xFC010202, 0xFC08FBFC);
	r2 = D(r2, s0_0_0, 0xFFEFFB04, 0x02080003, 0x01FC0402, 0x04F50201);
	r3 = D(r3, s0_0_0, 0xF1EAF5E4, 0xFC030005, 0xFC0400FF, 0x00090001);
	r4 = D(r4, s0_0_0, 0xFCF4FB01, 0xF802FFFA, 0xFDF80304, 0xFEFFFFF7);
	r5 = D(r5, s0_0_0, 0xF6130102, 0xFEF90205, 0xFAFDFC02, 0xFD06F300);
	r0 = D(r0, s0_0_1, 0xFEF7DFE5, 0xF8FA0009, 0x02110D07, 0xF3FA01FD);
	r1 = D(r1, s0_0_1, 0xFB020402, 0x07051304, 0xF913FF00, 0xD5F4F003);
	r2 = D(r2, s0_0_1, 0x1F0C05FF, 0x06090109, 0xF8020605, 0xFF0E07FE);
	r3 = D(r3, s0_0_1, 0xEE17D7B6, 0x07F60300, 0xF902120B, 0xF7050102);
	r4 = D(r4, s0_0_1, 0xF70004F1, 0x070E02F5, 0x100511FD, 0x03F8F7FD);
	r5 = D(r5, s0_0_1, 0xF60D1409, 0x17F91204, 0xFCF1FD01, 0x01FCFFFE);
	r0 = D(r0, s0_0_2, 0xF80DB4E1, 0x0704180C, 0xFC000300, 0xF9FE0402);
	r1 = D(r1, s0_0_2, 0x04FB0204, 0x0CFD0903, 0x0700FDFC, 0x0BF401FC);
	r2 = D(r2, s0_0_2, 0xDDFDDF03, 0xF9060905, 0xF5000202, 0xF2FBF5FE);
	r3 = D(r3, s0_0_2, 0xBF13B5CF, 0x08000001, 0x13F60403, 0xF000FAFF);
	r4 = D(r4, s0_0_2, 0xE7F0E5F4, 0x0D03F603, 0xFC01FB01, 0x0DF3F8FC);
	r5 = D(r5, s0_0_2, 0x10001706, 0x02070200, 0x14040401, 0x010A1503);
	r0 = D(r0, s0_1_0, 0xFFDE04F7, 0x02E3FEF5, 0x01FF0100, 0x0BFEFDF5);
	r1 = D(r1, s0_1_0, 0xFDEEFCFA, 0x020802F9, 0x071D0201, 0xF8F1FE01);
	r2 = D(r2, s0_1_0, 0x00FE0305, 0xFE0A0005, 0x05F703FB, 0x09ED03FA);
	r3 = D(r3, s0_1_0, 0x07EAFFF6, 0x0400FDFC, 0x06FD03F6, 0xFDF70206);
	r4 = D(r4, s0_1_0, 0x02EEFB06, 0x0BF2F7F5, 0xF5FF0203, 0x01FA03F6);
	r5 = D(r5, s0_1_0, 0x0DF808FE, 0x0C0302FA, 0x0803FBE9, 0xFEEAFEF5);
	r0 = D(r0, s0_1_1, 0xF2CEF6DA, 0x0B03F1FA, 0x02F90806, 0x81F711F1);
	r1 = D(r1, s0_1_1, 0x2B0D03F8, 0xF4000711, 0xFB050315, 0xCF29F6E6);
	r2 = D(r2, s0_1_1, 0x19EB1B04, 0x0114042E, 0x1AF60CF1, 0x1EFC041D);
	r3 = D(r3, s0_1_1, 0x08DC1926, 0xFDF30F0D, 0x11092500, 0x04FB09FB);
	r4 = D(r4, s0_1_1, 0x1FFC0FF5, 0x3BF0D8F3, 0x4FEA0D09, 0x0808FCFC);
	r5 = D(r5, s0_1_1, 0x1108101B, 0xFAECFBFB, 0xE2F9F602, 0x0B0AEC06);
	r0 = D(r0, s0_1_2, 0xF30AE3EE, 0x0B05FD0E, 0xF4FBFDFB, 0xFDF8F8FE);
	r1 = D(r1, s0_1_2, 0x22FCFDFF, 0x1D02100A, 0xEC18F908, 0x24EF1603);
	r2 = D(r2, s0_1_2, 0xF0F7E6FA, 0x21FF100F, 0xEF03F702, 0x1AF30C05);
	r3 = D(r3, s0_1_2, 0xC80903FA, 0xFEF7F8FD, 0x04EFFB05, 0xF5FFFFF9);
	r4 = D(r4, s0_1_2, 0xC9ECD6F9, 0x02FEF9FF, 0xD601E9F1, 0x03F8FAF7);
	r5 = D(r5, s0_1_2, 0xF807D10E, 0xF807F701, 0x1101FF03, 0xD408040F);
	r0 = D(r0, s0_2_0, 0xFD0408F8, 0xFD0503F8, 0x0401FE00, 0x05000309);
	r1 = D(r1, s0_2_0, 0x01FF0300, 0x02F9FCF8, 0xFEFAF902, 0x0204FFFF);
	r2 = D(r2, s0_2_0, 0x00FD0303, 0x0101FF04, 0x020101FC, 0x03F9FDF1);
	r3 = D(r3, s0_2_0, 0xFC020802, 0x00FF00F8, 0x05F50500, 0xF9090604);
	r4 = D(r4, s0_2_0, 0xFF0002FF, 0xFBF603F3, 0xF7F4FF07, 0x01FF0606);
	r5 = D(r5, s0_2_0, 0x04E307F3, 0xFF03FCFF, 0x02F501F9, 0xFCFBFAF3);
	r0 = D(r0, s0_2_1, 0x02050D07, 0x0410F806, 0x12FA09FD, 0xFDFAFFF5);
	r1 = D(r1, s0_2_1, 0x06FE0305, 0xFBFFF902, 0xFC02FAF5, 0xFC03FD0A);
	r2 = D(r2, s0_2_1, 0x03050B06, 0xFCF9000A, 0xF706070B, 0xEF0C030D);
	r3 = D(r3, s0_2_1, 0xEAFF1119, 0xFFFB0402, 0xEDF10BF4, 0xF5050E09);
	r4 = D(r4, s0_2_1, 0xFE040F19, 0x0400F7FB, 0xFB0508F5, 0xF0FE161A);
	r5 = D(r5, s0_2_1, 0x08DEEC81, 0x0C10F509, 0x09F6FC04, 0x04F7E906);
	r0 = D(r0, s0_2_2, 0xFA02F7F9, 0x0508F802, 0x030003FD, 0x070406F3);
	r1 = D(r1, s0_2_2, 0x03FD00FB, 0x0C0804FD, 0x050DF302, 0x05050E06);
	r2 = D(r2, s0_2_2, 0x01F8FF00, 0xFDF90805, 0xF808F3FA, 0x0AF90306);
	r3 = D(r3, s0_2_2, 0xFBFBF700, 0xFAF90902, 0xF5FDF6F5, 0xF10106FC);
	r4 = D(r4, s0_2_2, 0x04FA040A, 0x00F9FEF8, 0xFBF7FBFB, 0x00FC0D04);
	r5 = D(r5, s0_2_2, 0xEAF1CEDF, 0x05FEF2FE, 0x0FF8F60C, 0x07FD0501);
	r0 = D(r0, s1_0_0, 0x1302FD09, 0x00EAFBF9, 0x0302F307, 0x0503FE02);
	r1 = D(r1, s1_0_0, 0x0103F4F8, 0xF5EE0203, 0xFCFFFF09, 0x1311F800);
	r2 = D(r2, s1_0_0, 0xF8EB080A, 0xFE01F4F7, 0x0101F901, 0xF3F8FF01);
	r3 = D(r3, s1_0_0, 0x160706F2, 0x09FBFDFB, 0x0700F307, 0x0E03FBFE);
	r4 = D(r4, s1_0_0, 0x02FBFA09, 0x08FCF8F3, 0x04F507F5, 0xFD050300);
	r5 = D(r5, s1_0_0, 0xF9FFFFFB, 0xF6EF02FD, 0xF8F6FC01, 0x060807FC);
	r0 = D(r0, s1_0_1, 0x0E1AF6F7, 0x0EE503F8, 0xF80206FE, 0xFB000204);
	r1 = D(r1, s1_0_1, 0x0DF90407, 0xE2EBEFF8, 0xF60AE0F9, 0xFAEA09F9);
	r2 = D(r2, s1_0_1, 0xE41FCA16, 0x0A05EDFD, 0x0DFB0404, 0xF804DF12);
	r3 = D(r3, s1_0_1, 0x101EBE12, 0xFAF612FB, 0xD0F913FF, 0x0608FD04);
	r4 = D(r4, s1_0_1, 0x00FBF11B, 0xFCFF05F7, 0xF8130702, 0x1AF81807);
	r5 = D(r5, s1_0_1, 0xE5EB0DEF, 0xDD040300, 0x00ED15FB, 0xFEF40104);
	r0 = D(r0, s1_0_2, 0x100A0D08, 0xF8F4EE0F, 0xFE01FB06, 0x00000211);
	r1 = D(r1, s1_0_2, 0x00FB0302, 0xF8E4F3FD, 0xF5FD0307, 0xF9F50B07);
	r2 = D(r2, s1_0_2, 0x0E03F800, 0xFB060000, 0xEFFD0001, 0x1400FDFB);
	r3 = D(r3, s1_0_2, 0xF60D0B15, 0xFCFE0102, 0xF30304FF, 0x0B01FEF8);
	r4 = D(r4, s1_0_2, 0x1E0506F7, 0xFBF9FAFC, 0x0104FC02, 0x0DFB0107);
	r5 = D(r5, s1_0_2, 0xF802FCF0, 0xF201F902, 0xF2F70601, 0xF7FF13E4);
	r0 = D(r0, s1_1_0, 0x0F05070E, 0xF7EF0400, 0x010205FD, 0x0805E6F9);
	r1 = D(r1, s1_1_0, 0xF9FE0D05, 0x0F04DA0D, 0x0D0AFFFF, 0x050AF30A);
	r2 = D(r2, s1_1_0, 0xF9F80E00, 0xF806F706, 0xFFF50A04, 0xE8E9100A);
	r3 = D(r3, s1_1_0, 0x05E41205, 0x14FFECFE, 0x0BED01F6, 0x0404FAF8);
	r4 = D(r4, s1_1_0, 0xF1DF19FC, 0x000A1B02, 0x070A04FF, 0x05FA01ED);
	r5 = D(r5, s1_1_0, 0x14F911F8, 0xF802F902, 0x0304CA00, 0xFCF72302);
	r0 = D(r0, s1_1_1, 0xF4C517EC, 0xEFECDD10, 0xE5FFF1F2, 0xE907E8F4);
	r1 = D(r1, s1_1_1, 0x140AF707, 0x0D11CE26, 0x180C2707, 0x1603F401);
	r2 = D(r2, s1_1_1, 0xFF010D0A, 0x0CF30E10, 0x0A0A16FF, 0x06F0F9F1);
	r3 = D(r3, s1_1_1, 0x09E21DED, 0x10E412EB, 0x0401FEFC, 0x08F901F4);
	r4 = D(r4, s1_1_1, 0xEFFB09EC, 0x0AFC34F4, 0xF9FD1A01, 0xD808E3FE);
	r5 = D(r5, s1_1_1, 0xFA35F512, 0xEEFEFF02, 0xE4F80B07, 0x14F0F3D2);
	r0 = D(r0, s1_1_2, 0x09FA0900, 0xFCEDC50C, 0x1306F001, 0x12FCFFFE);
	r1 = D(r1, s1_1_2, 0x02FE0802, 0x0807F1FF, 0x0A08F5FB, 0xED062305);
	r2 = D(r2, s1_1_2, 0xFBCF0BF2, 0xFF02FD09, 0xFE07EE0F, 0xF6E80B0C);
	r3 = D(r3, s1_1_2, 0x09FE04E8, 0xFF03F8F9, 0x19FB07FE, 0x010306FA);
	r4 = D(r4, s1_1_2, 0xFCEB05FF, 0xFD08F6FD, 0x010AF0F5, 0xDEFC0BFC);
	r5 = D(r5, s1_1_2, 0x0FF4DDF8, 0x0302F7FF, 0xF907FAF6, 0xFFFAE7E5);
	r0 = D(r0, s1_2_0, 0x14FFFF04, 0x08F3F300, 0xFB050703, 0xFD010006);
	r1 = D(r1, s1_2_0, 0x01F204FF, 0x07EAF506, 0xFD020D09, 0xFB0007FF);
	r2 = D(r2, s1_2_0, 0x050002FF, 0x05FC01FD, 0x00FD07FC, 0x07F2FDFB);
	r3 = D(r3, s1_2_0, 0x14FD0FFC, 0x08FF0100, 0x02020F0B, 0x06020203);
	r4 = D(r4, s1_2_0, 0x01F60AFF, 0x0406FEEC, 0x0B02FAFC, 0xFFFE0A07);
	r5 = D(r5, s1_2_0, 0x0CFC0101, 0xF704F903, 0x08F8F406, 0x05000FF6);
	r0 = D(r0, s1_2_1, 0x0A000AFE, 0xFEF9DF15, 0xEEFBF402, 0xF6F3FCFA);
	r1 = D(r1, s1_2_1, 0x0C06FE0F, 0xFDF8FCF9, 0x050206F6, 0x04F90AFE);
	r2 = D(r2, s1_2_1, 0x0303030D, 0xFD000301, 0xFC0CE7FF, 0xF408EB0D);
	r3 = D(r3, s1_2_1, 0xFB0A0C00, 0xFBFD0BEF, 0xFA05FFF6, 0x070806FC);
	r4 = D(r4, s1_2_1, 0xFE0FED0F, 0xFD0806EC, 0x01FEF502, 0xF8FAFEF8);
	r5 = D(r5, s1_2_1, 0xE900F2EB, 0x0016FC13, 0xF5E11FFC, 0xF7F80902);
	r0 = D(r0, s1_2_2, 0x03000901, 0x0106E415, 0xFE030400, 0xFF03040E);
	r1 = D(r1, s1_2_2, 0xFEF806F6, 0xFBF9F7F4, 0x0005F508, 0x08F8FDFD);
	r2 = D(r2, s1_2_2, 0x020306FB, 0x01F7FDFE, 0xFFFBFD00, 0x04FFF809);
	r3 = D(r3, s1_2_2, 0x02FE0AE8, 0xFFF907FB, 0x02F807F3, 0xFCF90BF9);
	r4 = D(r4, s1_2_2, 0x000101F3, 0x00020D00, 0x040BFB08, 0x0409F502);
	r5 = D(r5, s1_2_2, 0xFE0F01EA, 0x03FEFEFB, 0x070000FC, 0x0B0501D0);
	f0 = vec4(r0) * 6.2000124e-05;
	f0 += vec4(1.551e-02, -5.188e-03, -6.721e-03, 5.532e-03);
	f0 = clamp(f0, vec4(0.0), vec4(1.0));
	imageStore(out_image, opos + ivec2(0, 0), f0);
	f1 = vec4(r1) * 6.2000124e-05;
	f1 += vec4(3.630e-03, -3.121e-03, 9.552e-03, -1.774e-02);
	f1 = clamp(f1, vec4(0.0), vec4(1.0));
	imageStore(out_image, opos + ivec2(1, 0), f1);
	f2 = vec4(r2) * 6.2000124e-05;
	f2 += vec4(1.962e-03, -3.336e-04, 8.212e-03, -2.618e-02);
	f2 = clamp(f2, vec4(0.0), vec4(1.0));
	imageStore(out_image, opos + ivec2(2, 0), f2);
	f3 = vec4(r3) * 6.2000124e-05;
	f3 += vec4(-2.195e-02, -1.425e-02, -2.132e-02, -2.561e-03);
	f3 = clamp(f3, vec4(0.0), vec4(1.0));
	imageStore(out_image, opos + ivec2(0, 1), f3);
	f4 = vec4(r4) * 6.2000124e-05;
	f4 += vec4(-7.348e-03, -1.333e-02, -1.893e-02, -2.780e-02);
	f4 = clamp(f4, vec4(0.0), vec4(1.0));
	imageStore(out_image, opos + ivec2(1, 1), f4);
	f5 = vec4(r5) * 6.2000124e-05;
	f5 += vec4(-1.115e-02, -2.243e-02, -1.338e-02, -1.862e-02);
	f5 = clamp(f5, vec4(0.0), vec4(1.0));
	imageStore(out_image, opos + ivec2(2, 1), f5);
}

//!DESC CuNNy-4x24-conv4
//!HOOK LUMA
//!COMPUTE 24 16 8 8
//!BIND conv3
//!BIND LUMA
//!SAVE conv4
//!WIDTH LUMA.w 3 *
//!HEIGHT LUMA.h 2 *
//!COMPONENTS 4
//!WHEN OUTPUT.w LUMA.w / 1.3 > OUTPUT.h LUMA.h / 1.3 > *
#extension GL_EXT_spirv_intrinsics : require
#define l0(x, y) (conv3_mul * texelFetch(conv3_raw, clamp(pos + ivec2(x, y), ivec2(0), sz) * ivec2(3, 2) + ivec2(0, 0), 0))
#define l1(x, y) (conv3_mul * texelFetch(conv3_raw, clamp(pos + ivec2(x, y), ivec2(0), sz) * ivec2(3, 2) + ivec2(1, 0), 0))
#define l2(x, y) (conv3_mul * texelFetch(conv3_raw, clamp(pos + ivec2(x, y), ivec2(0), sz) * ivec2(3, 2) + ivec2(2, 0), 0))
#define l3(x, y) (conv3_mul * texelFetch(conv3_raw, clamp(pos + ivec2(x, y), ivec2(0), sz) * ivec2(3, 2) + ivec2(0, 1), 0))
#define l4(x, y) (conv3_mul * texelFetch(conv3_raw, clamp(pos + ivec2(x, y), ivec2(0), sz) * ivec2(3, 2) + ivec2(1, 1), 0))
#define l5(x, y) (conv3_mul * texelFetch(conv3_raw, clamp(pos + ivec2(x, y), ivec2(0), sz) * ivec2(3, 2) + ivec2(2, 1), 0))
spirv_instruction (extensions = ["SPV_KHR_integer_dot_product"], capabilities = [6019, 6018], id = 4450)
int dp4(int a, int b, spirv_literal int fmt);
#define D(r, s, a, b, c, d) r + ivec4(dp4(s, a, 0), dp4(s, b, 0), dp4(s, c, 0), dp4(s, d, 0))
shared int G[6][10][10];
void hook() {
	ivec2 xy = ivec2(gl_LocalInvocationID.xy);
	ivec2 pos = ivec2(gl_WorkGroupID.xy) * ivec2(8, 8) + xy;
	ivec2 opos = pos * ivec2(3, 2);
	ivec2 sz = ivec2(LUMA_size) - ivec2(1);
	for (int y = 0; y < 10; y += 8) {
		int ay = xy.y + y;
		if (ay >= 10) break;
		for (int x = 0; x < 10; x += 8) {
			int ax = xy.x + x;
			if (ax >= 10) break;
			vec4 v0 = l0(x - 1, y - 1) * 1.0000000e+00;
			vec4 v1 = l1(x - 1, y - 1) * 1.0000000e+00;
			vec4 v2 = l2(x - 1, y - 1) * 1.0000000e+00;
			vec4 v3 = l3(x - 1, y - 1) * 1.0000000e+00;
			vec4 v4 = l4(x - 1, y - 1) * 1.0000000e+00;
			vec4 v5 = l5(x - 1, y - 1) * 1.0000000e+00;
			G[0][ay][ax] = int(packSnorm4x8(v0));
			G[1][ay][ax] = int(packSnorm4x8(v1));
			G[2][ay][ax] = int(packSnorm4x8(v2));
			G[3][ay][ax] = int(packSnorm4x8(v3));
			G[4][ay][ax] = int(packSnorm4x8(v4));
			G[5][ay][ax] = int(packSnorm4x8(v5));
		}
	}
	barrier();
	int s0_0_0, s0_0_1, s0_0_2, s0_1_0, s0_1_1, s0_1_2, s0_2_0, s0_2_1, s0_2_2, s1_0_0, s1_0_1, s1_0_2, s1_1_0, s1_1_1, s1_1_2, s1_2_0, s1_2_1, s1_2_2;
	ivec4 r0, r1, r2, r3, r4, r5;
	vec4 f0, f1, f2, f3, f4, f5;
	r0 = ivec4(0); r1 = ivec4(0); r2 = ivec4(0); r3 = ivec4(0); r4 = ivec4(0); r5 = ivec4(0);
	s0_0_0 = G[0][xy.y+0][xy.x+0]; s0_0_1 = G[0][xy.y+0][xy.x+1];
	s0_0_2 = G[0][xy.y+0][xy.x+2]; s0_1_0 = G[0][xy.y+1][xy.x+0];
	s0_1_1 = G[0][xy.y+1][xy.x+1]; s0_1_2 = G[0][xy.y+1][xy.x+2];
	s0_2_0 = G[0][xy.y+2][xy.x+0]; s0_2_1 = G[0][xy.y+2][xy.x+1];
	s0_2_2 = G[0][xy.y+2][xy.x+2]; s1_0_0 = G[1][xy.y+0][xy.x+0];
	s1_0_1 = G[1][xy.y+0][xy.x+1]; s1_0_2 = G[1][xy.y+0][xy.x+2];
	s1_1_0 = G[1][xy.y+1][xy.x+0]; s1_1_1 = G[1][xy.y+1][xy.x+1];
	s1_1_2 = G[1][xy.y+1][xy.x+2]; s1_2_0 = G[1][xy.y+2][xy.x+0];
	s1_2_1 = G[1][xy.y+2][xy.x+1]; s1_2_2 = G[1][xy.y+2][xy.x+2];
	r0 = D(r0, s0_0_0, 0x01FEF902, 0x0102FBFC, 0x00FE0000, 0x14FCE907);
	r1 = D(r1, s0_0_0, 0xFDFB0DFF, 0x01FF0AFB, 0x02F6FF03, 0x00000001);
	r2 = D(r2, s0_0_0, 0xF903EA06, 0xFCFA030C, 0x03FD0000, 0x02031BFE);
	r3 = D(r3, s0_0_0, 0x0402FB01, 0x05FE0301, 0x11F9F004, 0x00FE00FE);
	r4 = D(r4, s0_0_0, 0xFFFCF9FC, 0x00000001, 0xFEFB0AFE, 0xFBF10CFF);
	r5 = D(r5, s0_0_0, 0x030B10F6, 0x000F1703, 0x01F1F204, 0xED03E1EC);
	r0 = D(r0, s0_0_1, 0xFF000903, 0xF3010401, 0xFF01FFFF, 0x050A090A);
	r1 = D(r1, s0_0_1, 0xF907FD08, 0xFDF10404, 0x06FAFB01, 0x00FD0101);
	r2 = D(r2, s0_0_1, 0xDFCF0FBC, 0x0BF5F800, 0xF604FA0D, 0x18BAFCBB);
	r3 = D(r3, s0_0_1, 0x010002FD, 0x0EFDFEFB, 0x09FB0102, 0xFD030307);
	r4 = D(r4, s0_0_1, 0x0BE8FC07, 0xFEF2FF05, 0x0D06F002, 0x1FC1EFFB);
	r5 = D(r5, s0_0_1, 0xECDBFFC0, 0xEEBFDEED, 0x0AFF01FD, 0xE2C0E7C0);
	r0 = D(r0, s0_0_2, 0x0403FEFF, 0xF8060005, 0xFF02FEFF, 0x04FA050C);
	r1 = D(r1, s0_0_2, 0xFA0700FF, 0xFE00FA04, 0xFF0105FE, 0x030000FA);
	r2 = D(r2, s0_0_2, 0x0D0DED04, 0xFDFC0203, 0xFB030508, 0xF8DF070C);
	r3 = D(r3, s0_0_2, 0x010000FB, 0x04FB0101, 0x08F600FE, 0x0504FCFF);
	r4 = D(r4, s0_0_2, 0x12FC01FE, 0xFDFE0100, 0xF9FE0703, 0x020904FC);
	r5 = D(r5, s0_0_2, 0xADEC06A4, 0x1FFA02CF, 0xF0F7F3F5, 0x07FB0DF3);
	r0 = D(r0, s0_1_0, 0x020608F4, 0x00FB02FE, 0x01000004, 0xEAFC1AFC);
	r1 = D(r1, s0_1_0, 0x00F6F907, 0xFAFF0005, 0x00F90805, 0x00FF01FF);
	r2 = D(r2, s0_1_0, 0x0E04E70D, 0xF1F30B08, 0x03F50100, 0x17D412FD);
	r3 = D(r3, s0_1_0, 0xFF0002FA, 0x00F900FE, 0xF5F506EC, 0xFB04F6FF);
	r4 = D(r4, s0_1_0, 0xFEFCFDF8, 0x0002FF01, 0x0403F705, 0x02F6F601);
	r5 = D(r5, s0_1_0, 0x07F7EDFC, 0xFEAA0505, 0xFDF5FF03, 0xF8061AEE);
	r0 = D(r0, s0_1_1, 0x00CBD7D3, 0x13EAF1EB, 0x0003F8F7, 0xF0B8E383);
	r1 = D(r1, s0_1_1, 0xFFBEF1EF, 0x07D9E6DC, 0x13DBF501, 0xFFF10204);
	r2 = D(r2, s0_1_1, 0xB485E3BC, 0x03FBFD15, 0x26F7FEDD, 0x07D8DCCA);
	r3 = D(r3, s0_1_1, 0xFCE7FBEA, 0x01DD00DC, 0xF5C40702, 0x04CBF8DD);
	r4 = D(r4, s0_1_1, 0xEA0A02FE, 0xF90E02F9, 0xDECF0AE6, 0xE00201F4);
	r5 = D(r5, s0_1_1, 0xFFF9EDC1, 0xF381E50F, 0x0BF3E8FF, 0xF8100081);
	r0 = D(r0, s0_1_2, 0xF4010304, 0xEAFF0002, 0xE7F8FFEF, 0x1CE8F3CF);
	r1 = D(r1, s0_1_2, 0x06FF02FF, 0x00FFFFF0, 0x0603F9FD, 0x0D0502FD);
	r2 = D(r2, s0_1_2, 0x00C907E2, 0x0606F4E8, 0x15F402F6, 0xF8EEFAE1);
	r3 = D(r3, s0_1_2, 0xF503F801, 0x06F9FFFF, 0x0BF1FBFF, 0xE910FD05);
	r4 = D(r4, s0_1_2, 0x0608FAFF, 0xFD0401FB, 0x1505F4DF, 0x0D00F5F3);
	r5 = D(r5, s0_1_2, 0xF5EE03F1, 0x0807F3F6, 0xFBEDF9F5, 0xFD00D2F6);
	r0 = D(r0, s0_2_0, 0x02FBFDF9, 0x01FFFCFE, 0x01FF0101, 0xFFFBF3FC);
	r1 = D(r1, s0_2_0, 0xFCFFFD03, 0x0503F903, 0xFEF5FA09, 0x0000FF01);
	r2 = D(r2, s0_2_0, 0x000D0D06, 0xF9EDDB08, 0x03EAFD03, 0x10E5F10B);
	r3 = D(r3, s0_2_0, 0xFFFD06F8, 0xFF00FFFF, 0x07F6FFFD, 0x070001F1);
	r4 = D(r4, s0_2_0, 0xFF0202FA, 0x00FF01FF, 0xFE01FB00, 0xFFFFFD00);
	r5 = D(r5, s0_2_0, 0x0100FFFF, 0x100CF5F6, 0xEAF8F002, 0x0306F5F5);
	r0 = D(r0, s0_2_1, 0xFEFD00F1, 0x000902F4, 0x01FFFEEF, 0x06E9FE02);
	r1 = D(r1, s0_2_1, 0xFE030601, 0xF00CF4E3, 0xFAF5FE02, 0xFFFD01FD);
	r2 = D(r2, s0_2_1, 0xD617ABBE, 0xEDE701E4, 0xE0C9EFEB, 0xF5071DF4);
	r3 = D(r3, s0_2_1, 0x01F7F6F9, 0xFE010201, 0x03F7F801, 0xF204ECE5);
	r4 = D(r4, s0_2_1, 0x030000FF, 0x02FFFEFD, 0xFFFFFBED, 0x00FE01FA);
	r5 = D(r5, s0_2_1, 0xFB020904, 0xE4EC1702, 0x0DF2FBF4, 0x08F709FC);
	r0 = D(r0, s0_2_2, 0x0308FB00, 0x02010102, 0xFE0203F5, 0x07FF0505);
	r1 = D(r1, s0_2_2, 0x0504F800, 0x03F9F8ED, 0x03F60301, 0x01FDFDFB);
	r2 = D(r2, s0_2_2, 0x0C00130A, 0xF2FBFEFE, 0xEFE9FBEF, 0xF6EFBDE2);
	r3 = D(r3, s0_2_2, 0xFB020D08, 0x02010104, 0x01F9FDFB, 0x02000302);
	r4 = D(r4, s0_2_2, 0x04FFFD00, 0xFF0100FF, 0x0AFDFD02, 0x0301FC02);
	r5 = D(r5, s0_2_2, 0xFCFF00FC, 0xFBFCC9E0, 0xFBEBF4F9, 0x030212FF);
	r0 = D(r0, s1_0_0, 0xF5F804F8, 0x04FD01FB, 0xFF00FFFF, 0xE7FDFBEF);
	r1 = D(r1, s1_0_0, 0x0604FD00, 0xFF03FDFA, 0xF8F901FE, 0x000000FF);
	r2 = D(r2, s1_0_0, 0xF6F5FDFA, 0x0DFC08FE, 0x0702FDFA, 0xF6F7FCFA);
	r3 = D(r3, s1_0_0, 0xFCFF00FC, 0xF102FFFF, 0xE8F603F2, 0x05FC00FB);
	r4 = D(r4, s1_0_0, 0xF506FB07, 0x040000FD, 0x0702FDFE, 0x0203F6FF);
	r5 = D(r5, s1_0_0, 0x020308FA, 0x1411F8FB, 0x0D06FEFC, 0x04E408EA);
	r0 = D(r0, s1_0_1, 0x0803F0FE, 0xFDF90013, 0x02FF0102, 0xE100F8E6);
	r1 = D(r1, s1_0_1, 0xFFFE03FC, 0x010400FF, 0xFE0504FA, 0xFD02FDFE);
	r2 = D(r2, s1_0_1, 0x11FB1410, 0x0404FEEB, 0x0801FE02, 0xFBF208EA);
	r3 = D(r3, s1_0_1, 0x00FFFDFC, 0x12010103, 0x0DFAFF08, 0x0001FEF3);
	r4 = D(r4, s1_0_1, 0x01090FC7, 0xF300F801, 0xF604FEF0, 0x0107FFEF);
	r5 = D(r5, s1_0_1, 0x1B0508F3, 0x05D7FD07, 0xF7F2F8ED, 0xF000EFE6);
	r0 = D(r0, s1_0_2, 0x00FC02FA, 0xF9FE03FB, 0xFEFD0103, 0xFB04F900);
	r1 = D(r1, s1_0_2, 0x04FE01FE, 0x0502FCF8, 0x0000FF03, 0x01000002);
	r2 = D(r2, s1_0_2, 0x14FFF8E3, 0xF8FB0106, 0xFF00FDFD, 0xFEEBF9E7);
	r3 = D(r3, s1_0_2, 0x06FFFEFC, 0x02FB0100, 0x04010104, 0x03FE02FD);
	r4 = D(r4, s1_0_2, 0x01FFFAF5, 0x01FFFFFC, 0x0300FEFB, 0x020002FB);
	r5 = D(r5, s1_0_2, 0x0C1401F9, 0xFC140F10, 0xFDEDFA09, 0xFD0BF3F5);
	r0 = D(r0, s1_1_0, 0x0804F5F5, 0xFCFA0800, 0xFC01FA02, 0x0600030E);
	r1 = D(r1, s1_1_0, 0xFAF1FCFC, 0x1102FDF8, 0xFFFFF601, 0x08FF01FD);
	r2 = D(r2, s1_1_0, 0xE4E304FF, 0x0B020EE8, 0xF7FF00F3, 0x1115E911);
	r3 = D(r3, s1_1_0, 0xFE0504FA, 0x0CFB0203, 0x1D01F8F8, 0xF2F501F6);
	r4 = D(r4, s1_1_0, 0xF90DFF01, 0x0502FFFE, 0xFEF9FAF2, 0x04FA03F5);
	r5 = D(r5, s1_1_0, 0x00FBF602, 0x0A12F9F9, 0xFF00EBFD, 0x051E0905);
	r0 = D(r0, s1_1_1, 0xDC0A0122, 0xECFAFA37, 0x1EF903F9, 0xFDF32C1E);
	r1 = D(r1, s1_1_1, 0x091BEDF9, 0x04FCE2F8, 0x0D111506, 0xFD08F403);
	r2 = D(r2, s1_1_1, 0xBB12E31B, 0xFC10FE02, 0x05F809EB, 0xD2DA3007);
	r3 = D(r3, s1_1_1, 0x1210F236, 0xEDF4FE11, 0x12F51334, 0x0B12D825);
	r4 = D(r4, s1_1_1, 0x0B091218, 0x090801FE, 0x0720E60E, 0x020DF008);
	r5 = D(r5, s1_1_1, 0x00E5FF03, 0xF4D1EF07, 0xF6F1F2FC, 0xFC141304);
	r0 = D(r0, s1_1_2, 0x04FAF2F7, 0xFDF9F9F6, 0xEAFCF30D, 0x14F90AFD);
	r1 = D(r1, s1_1_2, 0xFFFD0206, 0x0506EF00, 0x01FC020E, 0x0003FE07);
	r2 = D(r2, s1_1_2, 0xFF02EE10, 0xF8F611FE, 0x06F9FEFA, 0xF2F00535);
	r3 = D(r3, s1_1_2, 0x07FD02FA, 0x02FC0200, 0xFF02F80D, 0x06FBFEF3);
	r4 = D(r4, s1_1_2, 0x00FC0603, 0xFEFE01FE, 0xFCFF04F7, 0xFE00FDFF);
	r5 = D(r5, s1_1_2, 0x0FFFF1FE, 0x0D1E06F3, 0xFAFE0BFA, 0xFD020F0D);
	r0 = D(r0, s1_2_0, 0x03FFFB01, 0xFB01FF00, 0xFB010000, 0x00EB0604);
	r1 = D(r1, s1_2_0, 0x060801FF, 0x0103EFFC, 0xF2F80802, 0x02FFFFFF);
	r2 = D(r2, s1_2_0, 0x17F9EAE3, 0x12EC0CED, 0x01FF0505, 0x05F6F9EE);
	r3 = D(r3, s1_2_0, 0x07FEFC06, 0xFDFBFF01, 0x03FCFDF8, 0x0A08F2FB);
	r4 = D(r4, s1_2_0, 0xF9000400, 0xFD000000, 0x0402FFFD, 0xFC010000);
	r5 = D(r5, s1_2_0, 0xFF0E0303, 0xFDFE0A01, 0x01F70BFF, 0x0BF4FC05);
	r0 = D(r0, s1_2_1, 0xFFFEF8F7, 0xF7F91014, 0x04FAFD07, 0xE9FCF9F3);
	r1 = D(r1, s1_2_1, 0x08070EFD, 0xE909020B, 0x0300FAFB, 0xFC04FCFE);
	r2 = D(r2, s1_2_1, 0xED12171C, 0x0C0A04E6, 0xE906F609, 0xE00A0CF6);
	r3 = D(r3, s1_2_1, 0xECF4F805, 0xFF0004FE, 0xF7000202, 0xEDF50300);
	r4 = D(r4, s1_2_1, 0x02FC0302, 0xFFFFFDFE, 0xFC0000FB, 0xFEFD00FD);
	r5 = D(r5, s1_2_1, 0xFC130707, 0xEA04EF1D, 0x01FEFFF4, 0x04FBFE03);
	r0 = D(r0, s1_2_2, 0xFD02FF04, 0x03FEFE04, 0xFAFEF906, 0xF8FDF505);
	r1 = D(r1, s1_2_2, 0xFD000401, 0x08FEEEF7, 0xF8000AFE, 0xFE01FEFD);
	r2 = D(r2, s1_2_2, 0x0D0AF204, 0xFB05F9FC, 0xFEFDF704, 0xE506FB0F);
	r3 = D(r3, s1_2_2, 0x06FAFAF8, 0x000003FE, 0xF8050200, 0x0100F503);
	r4 = D(r4, s1_2_2, 0x02FFFB02, 0x0100FE02, 0x00FFF602, 0xFF01FE01);
	r5 = D(r5, s1_2_2, 0x000706F9, 0xFF0BF902, 0x0304F1FD, 0x0801F8FE);
	s0_0_0 = G[2][xy.y+0][xy.x+0]; s0_0_1 = G[2][xy.y+0][xy.x+1];
	s0_0_2 = G[2][xy.y+0][xy.x+2]; s0_1_0 = G[2][xy.y+1][xy.x+0];
	s0_1_1 = G[2][xy.y+1][xy.x+1]; s0_1_2 = G[2][xy.y+1][xy.x+2];
	s0_2_0 = G[2][xy.y+2][xy.x+0]; s0_2_1 = G[2][xy.y+2][xy.x+1];
	s0_2_2 = G[2][xy.y+2][xy.x+2]; s1_0_0 = G[3][xy.y+0][xy.x+0];
	s1_0_1 = G[3][xy.y+0][xy.x+1]; s1_0_2 = G[3][xy.y+0][xy.x+2];
	s1_1_0 = G[3][xy.y+1][xy.x+0]; s1_1_1 = G[3][xy.y+1][xy.x+1];
	s1_1_2 = G[3][xy.y+1][xy.x+2]; s1_2_0 = G[3][xy.y+2][xy.x+0];
	s1_2_1 = G[3][xy.y+2][xy.x+1]; s1_2_2 = G[3][xy.y+2][xy.x+2];
	r0 = D(r0, s0_0_0, 0x08FF0302, 0x01090101, 0x06010100, 0x21020300);
	r1 = D(r1, s0_0_0, 0xFF00FEFE, 0xFF0402FF, 0x030503FD, 0xFF0100FF);
	r2 = D(r2, s0_0_0, 0xD1100304, 0x0BF8FEDF, 0xFFFF04FE, 0x08F700F6);
	r3 = D(r3, s0_0_0, 0xFD000202, 0x00020000, 0xFA0C07FD, 0x03030301);
	r4 = D(r4, s0_0_0, 0x0101040C, 0x0C02FF00, 0x06FEFFFE, 0x0EFDFB01);
	r5 = D(r5, s0_0_0, 0xE1FDFBFE, 0x1E1DF405, 0xF4F1F7FB, 0x21240D05);
	r0 = D(r0, s0_0_1, 0x05FC02FC, 0xEE04FFFF, 0x0AFE01FF, 0x11E80001);
	r1 = D(r1, s0_0_1, 0xED06FDF7, 0xF5FEFE06, 0x0BFD05FC, 0xFF01FFFF);
	r2 = D(r2, s0_0_1, 0x31FDDC1A, 0x12F208F6, 0xF8FCFE02, 0xFEB306FA);
	r3 = D(r3, s0_0_1, 0x03060201, 0x03F904FD, 0x000202FD, 0xFF03FFFE);
	r4 = D(r4, s0_0_1, 0x242604EE, 0x010B0201, 0x090AFF03, 0xF71409F7);
	r5 = D(r5, s0_0_1, 0xD1090406, 0xD91421F3, 0x06F6F712, 0x2F050509);
	r0 = D(r0, s0_0_2, 0x0404FE02, 0x0402FCFF, 0xF2030101, 0x05F70105);
	r1 = D(r1, s0_0_2, 0x0006FD03, 0xFE0403FE, 0x03FDFD06, 0xFB0401FF);
	r2 = D(r2, s0_0_2, 0xEF2D0B1A, 0x09EDFEFF, 0x070100FD, 0xF73107F6);
	r3 = D(r3, s0_0_2, 0x00FE01FE, 0xFF01FF02, 0xFEFF010B, 0x04010001);
	r4 = D(r4, s0_0_2, 0xFB0709F9, 0xFC0301FF, 0x01F900FE, 0x0CFBFDFA);
	r5 = D(r5, s0_0_2, 0xF423FFFD, 0x0FE9DF16, 0x06FC05FB, 0x12F70E03);
	r0 = D(r0, s0_1_0, 0xF8FEFFFD, 0xFA060900, 0x03010000, 0x1C04F8E7);
	r1 = D(r1, s0_1_0, 0x0A1501FA, 0x0D07FDF9, 0x0508F4FC, 0x01000000);
	r2 = D(r2, s0_1_0, 0xBAFEF7F8, 0x210404DB, 0x0902FA01, 0x3611FA02);
	r3 = D(r3, s0_1_0, 0xF50100FE, 0x0000FAFD, 0xF90104EE, 0x01090400);
	r4 = D(r4, s0_1_0, 0x0EFF02FC, 0xF7050101, 0x150901FE, 0xFF09FC04);
	r5 = D(r5, s0_1_0, 0x0DFEFDEF, 0x34FFEDF9, 0xFFF8F600, 0x0DF1E4E4);
	r0 = D(r0, s0_1_1, 0x3DFAFAFB, 0x3B071C05, 0x09FD09FB, 0xF60FECE3);
	r1 = D(r1, s0_1_1, 0x342424FC, 0x19111101, 0x0C0CFEDC, 0x0D0EFFFA);
	r2 = D(r2, s0_1_1, 0x2EC5DFF8, 0xE8E00CB7, 0x250A06FA, 0x14E413BD);
	r3 = D(r3, s0_1_1, 0x0AE5EAFD, 0x2003C5F2, 0x33FF00CB, 0x2AF60904);
	r4 = D(r4, s0_1_1, 0xE6EDE9D7, 0xF9FF12FA, 0xF7F901F1, 0x1BF605D2);
	r5 = D(r5, s0_1_1, 0x2B02E2EC, 0xD8220CC5, 0xF4F4DDFA, 0xDB0EE9B1);
	r0 = D(r0, s0_1_2, 0xFC050500, 0xF40EFD08, 0x0A09FD07, 0x05FAFA09);
	r1 = D(r1, s0_1_2, 0x0D060002, 0x0BF3070A, 0x0AFEFE00, 0x08FD03FC);
	r2 = D(r2, s0_1_2, 0xBEFA00FF, 0x06F9F106, 0x05F403FB, 0xD5D9DE36);
	r3 = D(r3, s0_1_2, 0xEE0F0005, 0x0100FFFD, 0x00020505, 0xFB060001);
	r4 = D(r4, s0_1_2, 0xFE0000FB, 0x0D00FDFE, 0x12FFFE03, 0x05010006);
	r5 = D(r5, s0_1_2, 0x12EAEBFE, 0x15DCF20A, 0x0DF6F3FA, 0xF608F701);
	r0 = D(r0, s0_2_0, 0x0500FDFF, 0x05FBF9FD, 0x0000FF00, 0xFD03EFF5);
	r1 = D(r1, s0_2_0, 0x0204FEF6, 0xFA0504FB, 0xFF02FAF8, 0xFE000100);
	r2 = D(r2, s0_2_0, 0x04FE0BF6, 0xEB0E0ED9, 0x0DFBEE01, 0x0505F0E5);
	r3 = D(r3, s0_2_0, 0x03FFFA02, 0xFEFFFDFF, 0xFD00FD01, 0x04FCFBFC);
	r4 = D(r4, s0_2_0, 0x040106FA, 0x00FFFF00, 0xFB020303, 0x01FEFF00);
	r5 = D(r5, s0_2_0, 0xFFFDF40D, 0x0CFDEA15, 0x0702F1ED, 0x00FD00FF);
	r0 = D(r0, s0_2_1, 0x02FD05F4, 0xFBF80BE6, 0xEFFCFB04, 0x230BEBE2);
	r1 = D(r1, s0_2_1, 0xF0F5FCFA, 0xE5F2F3CD, 0x1604FAF6, 0x000300FD);
	r2 = D(r2, s0_2_1, 0x18FF08F7, 0x2102F0F4, 0x291601F7, 0x1D0503C6);
	r3 = D(r3, s0_2_1, 0x1B0AFCE3, 0xFC000400, 0x0506FDFC, 0x0FFD0AC1);
	r4 = D(r4, s0_2_1, 0x00FEFCFF, 0x0301FF01, 0x13FFF6E9, 0xFF010205);
	r5 = D(r5, s0_2_1, 0xFE03FA09, 0xFBFEE5D1, 0xFFF503F6, 0x0D040101);
	r0 = D(r0, s0_2_2, 0x09FC0205, 0x050407FF, 0x08000601, 0x15FDF5F7);
	r1 = D(r1, s0_2_2, 0x0802FEFA, 0x0001FF01, 0x0203F7FA, 0xF900FEFD);
	r2 = D(r2, s0_2_2, 0xEAFAF4FA, 0x0FF800E3, 0xF705F607, 0xFFE60C16);
	r3 = D(r3, s0_2_2, 0xF9FF0202, 0x06FFFE00, 0x0102FF00, 0x0CFCFF05);
	r4 = D(r4, s0_2_2, 0xFC0003FC, 0x010101FF, 0x03FE0604, 0x04FFFFFD);
	r5 = D(r5, s0_2_2, 0x06FEF709, 0x0E0A0710, 0xF5F8FC02, 0x0CFBF5FF);
	r0 = D(r0, s1_0_0, 0x0006FEFD, 0xFEFE0300, 0x0001FDFE, 0x0F02EE0F);
	r1 = D(r1, s1_0_0, 0x0901FFFF, 0xFB03FFFA, 0x08FFFEFE, 0xFF0100FB);
	r2 = D(r2, s1_0_0, 0xEC11030E, 0x0603FB15, 0xFD00FF06, 0xFE031222);
	r3 = D(r3, s1_0_0, 0x0004FEFD, 0x03FF0201, 0xFD04F7FA, 0x000004FF);
	r4 = D(r4, s1_0_0, 0x0000FFF9, 0xFD02FD01, 0x000004FA, 0x0302FDFB);
	r5 = D(r5, s1_0_0, 0xF808FE0D, 0xFA07ECF5, 0x08F703F2, 0xEE04EF0E);
	r0 = D(r0, s1_0_1, 0x11F00006, 0xFF0101FE, 0xFBFC0402, 0xFCFFF904);
	r1 = D(r1, s1_0_1, 0xE5F90FFC, 0xFF0DFEF9, 0x0FF90005, 0xFE0202FC);
	r2 = D(r2, s1_0_1, 0xE52115FA, 0x11FA0013, 0xEF0704FA, 0xDA070803);
	r3 = D(r3, s1_0_1, 0x08FFFA04, 0x10FDF9EA, 0x05F9FCF5, 0x00FA01FE);
	r4 = D(r4, s1_0_1, 0x06E51EE7, 0xF8F6060C, 0xFEF80400, 0xD7F72204);
	r5 = D(r5, s1_0_1, 0xF818000C, 0xDF0C2D00, 0x0BF2F904, 0xD306F21D);
	r0 = D(r0, s1_0_2, 0xF40400FB, 0xF5F900FD, 0xFD06FEFA, 0xF700FEFB);
	r1 = D(r1, s1_0_2, 0x01FE0102, 0xFF050B04, 0x08F8FC05, 0x01FF0603);
	r2 = D(r2, s1_0_2, 0xE6F504EA, 0x13FAFA11, 0x02F700FF, 0xFEFC1E27);
	r3 = D(r3, s1_0_2, 0xFE01FE00, 0x03050204, 0xFDFFFDFF, 0xFD020103);
	r4 = D(r4, s1_0_2, 0xF5F0F6F4, 0x00050006, 0x050A0202, 0x0603FA02);
	r5 = D(r5, s1_0_2, 0xF624FD08, 0xE628F318, 0xF9F70603, 0xE907F608);
	r0 = D(r0, s1_1_0, 0x07F70307, 0x06F70F08, 0xFC06FC00, 0xF11205FE);
	r1 = D(r1, s1_1_0, 0xF708EC0E, 0xF808F0FB, 0xFF00FDFC, 0x02FE01FB);
	r2 = D(r2, s1_1_0, 0x05F01D19, 0x0604FDFD, 0x0001FF0D, 0xF109EA0C);
	r3 = D(r3, s1_1_0, 0x0CF80608, 0x0002F608, 0x08FD1109, 0x01FEFF03);
	r4 = D(r4, s1_1_0, 0x000500F2, 0xFFFEFF02, 0x0001F505, 0xFD080002);
	r5 = D(r5, s1_1_0, 0x0401EEF1, 0xED2BFB01, 0xFDF6F8F6, 0xFE0CF9F0);
	r0 = D(r0, s1_1_1, 0xEF250CE3, 0xF80C0F04, 0x09F30AFD, 0xCC2223DF);
	r1 = D(r1, s1_1_1, 0xFF093003, 0x09E11D12, 0xD5FF41F6, 0xEBF70808);
	r2 = D(r2, s1_1_1, 0xD52627E2, 0xF3FD0CE0, 0x1AFB0513, 0xE4F218B7);
	r3 = D(r3, s1_1_1, 0xE81508F4, 0xEF09162E, 0x02341AF6, 0x021504FF);
	r4 = D(r4, s1_1_1, 0xFBFE3011, 0x031001EE, 0xF8082FF5, 0x050319F9);
	r5 = D(r5, s1_1_1, 0x01F5D7E3, 0xCD082DF5, 0xF3F6F803, 0x0C18F803);
	r0 = D(r0, s1_1_2, 0x06F00006, 0xF8F6030C, 0xF2110606, 0xF82BFB14);
	r1 = D(r1, s1_1_2, 0x08F9FD06, 0xF614F7F8, 0x0CF802FD, 0x071FFCFD);
	r2 = D(r2, s1_1_2, 0xE3F1F51A, 0xF2180616, 0xF904FC0D, 0xE6CF1D39);
	r3 = D(r3, s1_1_2, 0xFA03FFF3, 0x03050605, 0x08F20306, 0xFCF602FD);
	r4 = D(r4, s1_1_2, 0xFAE8F7F2, 0xFDFEFC01, 0xFFFBFAFA, 0xFEF6F9FB);
	r5 = D(r5, s1_1_2, 0x08F7E5E8, 0xEC15FCED, 0x03ECF9F8, 0x041AFBEC);
	r0 = D(r0, s1_2_0, 0xFE04FCFF, 0x04F80002, 0x00FF0201, 0x01F80600);
	r1 = D(r1, s1_2_0, 0x0401FDF8, 0x04020705, 0xFD0301F9, 0xFF02FF02);
	r2 = D(r2, s1_2_0, 0x06E819D3, 0xF60B000F, 0xFE06F5F9, 0xEF19190A);
	r3 = D(r3, s1_2_0, 0x0502FCFC, 0x010304FC, 0xFCF8FC0A, 0x0202FDFE);
	r4 = D(r4, s1_2_0, 0x020204FA, 0x0000FFFF, 0x00030303, 0x01FE0100);
	r5 = D(r5, s1_2_0, 0xFE08FF02, 0xF005030A, 0x0AF6F400, 0xF90600FE);
	r0 = D(r0, s1_2_1, 0x03F5FDFF, 0xFD010800, 0xFFFD01EF, 0x11EF01F5);
	r1 = D(r1, s1_2_1, 0x04020DFD, 0x0311F7DF, 0x06FC0DFF, 0x02FC00F5);
	r2 = D(r2, s1_2_1, 0xE725FECC, 0x05E3F4DD, 0x03FBF1E7, 0xFFB816F2);
	r3 = D(r3, s1_2_1, 0x0605F3EF, 0xFE03FDF6, 0x01F90714, 0x0405FEF4);
	r4 = D(r4, s1_2_1, 0xFDFF0107, 0x01FEFF03, 0x02FFF9F9, 0x00FEFAFE);
	r5 = D(r5, s1_2_1, 0x01100403, 0x18021AE3, 0xFCF103F7, 0x02FF03FB);
	r0 = D(r0, s1_2_2, 0xFCF80101, 0xFDF4FBFB, 0x00F7F7F7, 0x0809FE01);
	r1 = D(r1, s1_2_2, 0x00FAFB00, 0x0002FCFD, 0x03FB0601, 0x010905FC);
	r2 = D(r2, s1_2_2, 0xFE06031D, 0xF704FDFC, 0x0311FEFD, 0xF2F80CD8);
	r3 = D(r3, s1_2_2, 0xFC0103FB, 0x00FE05FE, 0xFFFFF905, 0xFCFCFC00);
	r4 = D(r4, s1_2_2, 0x000A01FF, 0x000000FF, 0xFEFDFFFF, 0xFF010100);
	r5 = D(r5, s1_2_2, 0xFE130F00, 0xF92AEFE8, 0xEAF3F7F6, 0xFC000304);
	s0_0_0 = G[4][xy.y+0][xy.x+0]; s0_0_1 = G[4][xy.y+0][xy.x+1];
	s0_0_2 = G[4][xy.y+0][xy.x+2]; s0_1_0 = G[4][xy.y+1][xy.x+0];
	s0_1_1 = G[4][xy.y+1][xy.x+1]; s0_1_2 = G[4][xy.y+1][xy.x+2];
	s0_2_0 = G[4][xy.y+2][xy.x+0]; s0_2_1 = G[4][xy.y+2][xy.x+1];
	s0_2_2 = G[4][xy.y+2][xy.x+2]; s1_0_0 = G[5][xy.y+0][xy.x+0];
	s1_0_1 = G[5][xy.y+0][xy.x+1]; s1_0_2 = G[5][xy.y+0][xy.x+2];
	s1_1_0 = G[5][xy.y+1][xy.x+0]; s1_1_1 = G[5][xy.y+1][xy.x+1];
	s1_1_2 = G[5][xy.y+1][xy.x+2]; s1_2_0 = G[5][xy.y+2][xy.x+0];
	s1_2_1 = G[5][xy.y+2][xy.x+1]; s1_2_2 = G[5][xy.y+2][xy.x+2];
	r0 = D(r0, s0_0_0, 0x01FF0003, 0x0302FE05, 0xFFFF00FF, 0x140000FF);
	r1 = D(r1, s0_0_0, 0xFCFD0019, 0xFF0208FB, 0x06FF0102, 0xFC01FF01);
	r2 = D(r2, s0_0_0, 0xFBFAECF1, 0xF10911D2, 0x04000500, 0xFF05FEE3);
	r3 = D(r3, s0_0_0, 0x02FFFD02, 0x07FFFF04, 0x0707FE03, 0x01FF0402);
	r4 = D(r4, s0_0_0, 0x06FF0104, 0x110000FB, 0xF400FF03, 0x08FFFFFC);
	r5 = D(r5, s0_0_0, 0xFBFEFEDF, 0xD5FB02CA, 0x0AFEFA0B, 0x050905DE);
	r0 = D(r0, s0_0_1, 0x1B07FF14, 0xF608FC05, 0x0100FDFD, 0x1208FFFA);
	r1 = D(r1, s0_0_1, 0x18030708, 0x1901FFF4, 0xFD010007, 0x0101FAFE);
	r2 = D(r2, s0_0_1, 0x17FBF0E0, 0xDD0CEFEE, 0x0403F7FE, 0x251BF9F9);
	r3 = D(r3, s0_0_1, 0x0A04F90D, 0x34F70910, 0x26FF0A22, 0x180601FA);
	r4 = D(r4, s0_0_1, 0xC8133812, 0x2C03FD0C, 0x1C020903, 0xF40B05F7);
	r5 = D(r5, s0_0_1, 0x19F2E9CE, 0xFE130AD0, 0x080BF8FE, 0xE70AEFC7);
	r0 = D(r0, s0_0_2, 0x050BFCE8, 0x0CFF0BF4, 0x0A0305FC, 0x1203FBFB);
	r1 = D(r1, s0_0_2, 0x03FE02F6, 0x1302FFEE, 0x02F900FA, 0xFDFF0001);
	r2 = D(r2, s0_0_2, 0xF6FE11E7, 0xF3F60204, 0x0902FFFF, 0xEC0A0CFA);
	r3 = D(r3, s0_0_2, 0x0306FDFC, 0xFF05F2FF, 0x05FEF7F1, 0x0805FDFB);
	r4 = D(r4, s0_0_2, 0x01FEF716, 0x0802FC01, 0x0204FBF8, 0x01FFFA0C);
	r5 = D(r5, s0_0_2, 0x2BCDE6D7, 0x08E6F808, 0xF6F9FC06, 0x08F1EFFC);
	r0 = D(r0, s0_1_0, 0x020708FA, 0xFEFF0105, 0x02FE00FE, 0x1C08F0D7);
	r1 = D(r1, s0_1_0, 0xFFFFFCF4, 0x16FB07F9, 0x05F8FAFE, 0x04FF0105);
	r2 = D(r2, s0_1_0, 0xFB1800D1, 0xF5F31AD8, 0x0303FFE6, 0x11E31EC4);
	r3 = D(r3, s0_1_0, 0xFC0907F3, 0x04FFFBFA, 0xFFFE0E1A, 0x060403ED);
	r4 = D(r4, s0_1_0, 0x060102F5, 0xF7010100, 0x000002F6, 0xFA00FF03);
	r5 = D(r5, s0_1_0, 0x0204FF04, 0x19FFFCDB, 0x0306FAF6, 0x07F5FDE5);
	r0 = D(r0, s0_1_1, 0x06FBF4C6, 0xF2DC0ACF, 0xFB05FBFB, 0x38E3C3F1);
	r1 = D(r1, s0_1_1, 0xE60CE4D5, 0xEC18FEE2, 0x0DFFEB29, 0xFD00FEEE);
	r2 = D(r2, s0_1_1, 0x35EA31A1, 0x1504F25C, 0x1BF3EEC4, 0x2337E0EC);
	r3 = D(r3, s0_1_1, 0x29EDFEE4, 0x0410ECE6, 0xFBCA0B01, 0xF8FE021B);
	r4 = D(r4, s0_1_1, 0x0B060AFE, 0x05F30404, 0x001EE6DE, 0x040500EB);
	r5 = D(r5, s0_1_1, 0xF00E0DF7, 0xE924B31E, 0x050601F9, 0x13F3CBC5);
	r0 = D(r0, s0_1_2, 0xF916F60B, 0x0B03FAFA, 0x031F1B12, 0x11FFECFD);
	r1 = D(r1, s0_1_2, 0xFCF6FF08, 0x120C0507, 0x02F702FF, 0xF9020807);
	r2 = D(r2, s0_1_2, 0x1D10110A, 0x000217F0, 0x10FEFF04, 0x110FD3DA);
	r3 = D(r3, s0_1_2, 0x031EECF6, 0x020D00F9, 0xFAFBF1F5, 0x0A18F3F6);
	r4 = D(r4, s0_1_2, 0x0404FA0E, 0xFB0600FF, 0x011EEC14, 0xFF13F8FD);
	r5 = D(r5, s0_1_2, 0x03F619E3, 0x17FF1DDF, 0xF8FDFAF4, 0x071106FF);
	r0 = D(r0, s0_2_0, 0x010400FD, 0x0402FD04, 0xFE0100FE, 0xFBFF0C03);
	r1 = D(r1, s0_2_0, 0xFF010101, 0xF5050106, 0xFAFB0103, 0x01FFFF02);
	r2 = D(r2, s0_2_0, 0xFE0CFB13, 0xEF052212, 0x03FE01F9, 0x06F90C11);
	r3 = D(r3, s0_2_0, 0xFF03F8FC, 0xFB000405, 0xFD000404, 0x05040106);
	r4 = D(r4, s0_2_0, 0x0107FE01, 0x01FE0200, 0xFF030004, 0x020100FE);
	r5 = D(r5, s0_2_0, 0x04010400, 0x06F406F3, 0xF6F41208, 0xFA020709);
	r0 = D(r0, s0_2_1, 0x01110008, 0x04FA0107, 0x03FCFA04, 0xF7FF0AFE);
	r1 = D(r1, s0_2_1, 0x07FFFC05, 0x1B04E8D4, 0xFB0CF4F9, 0xFB02FCFD);
	r2 = D(r2, s0_2_1, 0xF90B10F8, 0xFBFC1DD8, 0xF10101EF, 0xEA3BE8E9);
	r3 = D(r3, s0_2_1, 0xF814F8F4, 0x00FA0607, 0xF600FE0A, 0x0015F5F6);
	r4 = D(r4, s0_2_1, 0x02FFF9FA, 0xFF0303FB, 0x00FF04FB, 0xFE020004);
	r5 = D(r5, s0_2_1, 0x0102FA03, 0xFB0BF6CC, 0xF7FA0EF2, 0xFEFB0B02);
	r0 = D(r0, s0_2_2, 0x000102FE, 0xFD050009, 0x010F07FF, 0xFFFEF8EF);
	r1 = D(r1, s0_2_2, 0xFEFC00F5, 0xF2120303, 0xFBF3FCF7, 0x0003FE03);
	r2 = D(r2, s0_2_2, 0x1212F0F3, 0x01F80FEB, 0x00FF01F4, 0x18FCE90D);
	r3 = D(r3, s0_2_2, 0xFDF90308, 0x01FEFEFB, 0x02FBFAFD, 0xFD0400FF);
	r4 = D(r4, s0_2_2, 0xFFFDFE07, 0xFF0002FF, 0x0005FFF4, 0x01FD01FD);
	r5 = D(r5, s0_2_2, 0xFF03FD05, 0x06121715, 0xFDFE04EE, 0xFEFA05F1);
	r0 = D(r0, s1_0_0, 0x090A00F8, 0xFE0300FE, 0x02FF01FE, 0xFD0302EE);
	r1 = D(r1, s1_0_0, 0x06FA03FF, 0xF4FA01FF, 0x03FFFFFE, 0x01FE0001);
	r2 = D(r2, s1_0_0, 0x310A09EB, 0x03FBFEF7, 0x01FF03FC, 0x1AF3FE0C);
	r3 = D(r3, s1_0_0, 0x010400FE, 0xFC010201, 0x0407FE03, 0xFEFD01FC);
	r4 = D(r4, s1_0_0, 0xFA0BFFFF, 0x01FFFFF8, 0x050200FD, 0x14030703);
	r5 = D(r5, s1_0_0, 0x060C03FB, 0x10F4FF05, 0xFD000BFA, 0xFB05FFE4);
	r0 = D(r0, s1_0_1, 0xFEC506FF, 0x00F8FBFE, 0x000400FF, 0x05C812F4);
	r1 = D(r1, s1_0_1, 0xFFECF8F9, 0x0913FFF1, 0x050205FB, 0x0504FFF9);
	r2 = D(r2, s1_0_1, 0x2A9ED2EA, 0x0E03FBE3, 0x0C17FDF9, 0x15D304C2);
	r3 = D(r3, s1_0_1, 0x00EC09FD, 0xFAF1FFEB, 0x00DE0402, 0xFCFFFFF5);
	r4 = D(r4, s1_0_1, 0xEBF001F0, 0x03EDFFF8, 0xFFF8FDF5, 0xEDE9ECD7);
	r5 = D(r5, s1_0_1, 0x042300EB, 0xF1F708CE, 0xF909F2FD, 0x0DC606DF);
	r0 = D(r0, s1_0_2, 0x00FCFE02, 0xFFF6FD00, 0xFFF8FFFB, 0x03E502F1);
	r1 = D(r1, s1_0_2, 0x01F6FFF7, 0xF505F9ED, 0x04FB03FC, 0xFAE7FFF9);
	r2 = D(r2, s1_0_2, 0xEF060409, 0x0BE408F3, 0x00FFFFFB, 0xE7F8FEFF);
	r3 = D(r3, s1_0_2, 0x00020101, 0x0400F801, 0xFF0605FD, 0x01040102);
	r4 = D(r4, s1_0_2, 0x03F80CF6, 0x02F300F0, 0x00F003F4, 0x09EF03FF);
	r5 = D(r5, s1_0_2, 0x01FFF8F2, 0x1DE9D707, 0xF60F0103, 0x04D413ED);
	r0 = D(r0, s1_1_0, 0x08060604, 0xF704FFF7, 0x08FE02FF, 0xFD090FF7);
	r1 = D(r1, s1_1_0, 0x0F0B04F8, 0x0A0400F2, 0x1AFD0C0C, 0xFBFC00FE);
	r2 = D(r2, s1_1_0, 0x1EF8150B, 0x0ED80306, 0xFBFFFDF3, 0x22FBFC17);
	r3 = D(r3, s1_1_0, 0x000305FF, 0x0B000BFF, 0x0D040400, 0x0D1206EE);
	r4 = D(r4, s1_1_0, 0xF1040703, 0xFE01FF03, 0x11FF03FD, 0x08FAF7F4);
	r5 = D(r5, s1_1_0, 0xF6F81708, 0x2101FDE4, 0xF6F6FEF5, 0x1008FA08);
	r0 = D(r0, s1_1_1, 0x21F6E3FE, 0x15D0F4F9, 0x0E0002F7, 0xE7E5DAE6);
	r1 = D(r1, s1_1_1, 0xF1FAF6E5, 0xE7F01DEA, 0xF4DFE701, 0x1B0E0CFA);
	r2 = D(r2, s1_1_1, 0x3B8A8FDC, 0xFC090707, 0xE0D405DB, 0xF2FEEDD9);
	r3 = D(r3, s1_1_1, 0x12FFEDF3, 0x0B101618, 0x14E5D6FF, 0x119A06DB);
	r4 = D(r4, s1_1_1, 0xE7160CFF, 0xF905F9EE, 0xE2130DEF, 0x07061D07);
	r5 = D(r5, s1_1_1, 0x02ED240E, 0xD1F117CE, 0xFCFEFA01, 0xED142805);
	r0 = D(r0, s1_1_2, 0xF5000F04, 0xF9F604F5, 0xFBF0F508, 0x0D0CF9FE);
	r1 = D(r1, s1_1_2, 0x020105F2, 0x10C3EB02, 0x06F8FF06, 0x06E8EFF7);
	r2 = D(r2, s1_1_2, 0xFF0100FD, 0x09E1F20C, 0x07CDF8F0, 0xFFC5DC81);
	r3 = D(r3, s1_1_2, 0xFBF3030A, 0xF8041000, 0xFD0D08FF, 0xFCEFF90D);
	r4 = D(r4, s1_1_2, 0x09F5FEFF, 0x0203F904, 0x0AF2EF0B, 0xFE09FEFF);
	r5 = D(r5, s1_1_2, 0x04F71208, 0x20D3C421, 0xFA00F303, 0xF9251101);
	r0 = D(r0, s1_2_0, 0x030000FE, 0xFFFD00FC, 0x0101FFFE, 0xEA0C06FA);
	r1 = D(r1, s1_2_0, 0xF9FF00F7, 0x000805FD, 0xF6F504F6, 0x08FE0000);
	r2 = D(r2, s1_2_0, 0x0F1EF401, 0x24EB0800, 0xF8010900, 0x08000AC6);
	r3 = D(r3, s1_2_0, 0xFE030404, 0xFAFB0901, 0xFFFAFBFB, 0x07FD01FC);
	r4 = D(r4, s1_2_0, 0xF8040401, 0x00FEFF01, 0x0605FB01, 0x04010005);
	r5 = D(r5, s1_2_0, 0x0203FCFC, 0x2EF1F1FB, 0x020500FF, 0xF90209FB);
	r0 = D(r0, s1_2_1, 0xFA030604, 0xFA0001FF, 0x0400FF02, 0x04F81AF3);
	r1 = D(r1, s1_2_1, 0xFB04FBFE, 0x0B16FB06, 0x080531FB, 0x0D00FCFC);
	r2 = D(r2, s1_2_1, 0x19CA1F0C, 0x27DDF9FA, 0x1107250B, 0x20FDEA01);
	r3 = D(r3, s1_2_1, 0xFD06140A, 0x00F801FD, 0x05F914F6, 0x0716FD0D);
	r4 = D(r4, s1_2_1, 0xFF00FFF9, 0x01FD0203, 0x0B020B05, 0x02010000);
	r5 = D(r5, s1_2_1, 0x0108FB00, 0xF120F4E1, 0xFC09F501, 0xFDFA06F6);
	r0 = D(r0, s1_2_2, 0x0403FE03, 0xFEFDFEFB, 0xFB020401, 0xFA0F2114);
	r1 = D(r1, s1_2_2, 0x0301FC01, 0xF7090504, 0x01041100, 0x01030802);
	r2 = D(r2, s1_2_2, 0xF30FEFFE, 0x03F31108, 0xFC130607, 0x2DF7DB10);
	r3 = D(r3, s1_2_2, 0x00FE07F6, 0x03FC0702, 0x02040503, 0xFD0406FB);
	r4 = D(r4, s1_2_2, 0xFF040AF8, 0xFFFF0100, 0xFF0703FC, 0x02FC00FF);
	r5 = D(r5, s1_2_2, 0x0806F8FC, 0xF7010108, 0x0FFDF306, 0x05F7FFFF);
	f0 = vec4(r0) * 6.2000124e-05;
	f0 += vec4(-5.721e-03, -1.534e-02, 4.270e-04, -7.011e-03);
	f0 = clamp(f0, vec4(0.0), vec4(1.0));
	imageStore(out_image, opos + ivec2(0, 0), f0);
	f1 = vec4(r1) * 6.2000124e-05;
	f1 += vec4(-1.997e-02, -1.378e-02, -7.023e-03, -5.821e-03);
	f1 = clamp(f1, vec4(0.0), vec4(1.0));
	imageStore(out_image, opos + ivec2(1, 0), f1);
	f2 = vec4(r2) * 6.2000124e-05;
	f2 += vec4(-4.268e-03, -8.486e-03, -1.592e-02, -2.210e-02);
	f2 = clamp(f2, vec4(0.0), vec4(1.0));
	imageStore(out_image, opos + ivec2(2, 0), f2);
	f3 = vec4(r3) * 6.2000124e-05;
	f3 += vec4(-3.520e-03, 5.835e-03, -8.453e-03, -6.019e-03);
	f3 = clamp(f3, vec4(0.0), vec4(1.0));
	imageStore(out_image, opos + ivec2(0, 1), f3);
	f4 = vec4(r4) * 6.2000124e-05;
	f4 += vec4(-1.139e-02, -5.072e-03, -9.528e-03, -9.590e-03);
	f4 = clamp(f4, vec4(0.0), vec4(1.0));
	imageStore(out_image, opos + ivec2(1, 1), f4);
	f5 = vec4(r5) * 6.2000124e-05;
	f5 += vec4(-1.108e-02, -1.539e-02, -1.107e-01, -1.593e-02);
	f5 = clamp(f5, vec4(0.0), vec4(1.0));
	imageStore(out_image, opos + ivec2(2, 1), f5);
}

//!DESC CuNNy-4x24-out-shuffle
//!HOOK LUMA
//!COMPUTE 16 16 8 8
//!BIND conv4
//!BIND LUMA
//!WIDTH LUMA.w 2 *
//!HEIGHT LUMA.h 2 *
//!COMPONENTS 1
//!WHEN OUTPUT.w LUMA.w / 1.3 > OUTPUT.h LUMA.h / 1.3 > *
#extension GL_EXT_shader_explicit_arithmetic_types_float16 : enable
#ifdef GL_EXT_shader_explicit_arithmetic_types_float16
#	define V4 f16vec4
#	define M4 f16mat4
#	define F float16_t
#else
#	define V4 vec4
#	define M4 mat4
#	define F float
#endif
#define l0(x, y) V4((conv4_mul * texelFetch(conv4_raw, clamp(pos + ivec2(x, y), ivec2(0), sz) * ivec2(3, 2) + ivec2(0, 0), 0)))
#define l1(x, y) V4((conv4_mul * texelFetch(conv4_raw, clamp(pos + ivec2(x, y), ivec2(0), sz) * ivec2(3, 2) + ivec2(1, 0), 0)))
#define l2(x, y) V4((conv4_mul * texelFetch(conv4_raw, clamp(pos + ivec2(x, y), ivec2(0), sz) * ivec2(3, 2) + ivec2(2, 0), 0)))
#define l3(x, y) V4((conv4_mul * texelFetch(conv4_raw, clamp(pos + ivec2(x, y), ivec2(0), sz) * ivec2(3, 2) + ivec2(0, 1), 0)))
#define l4(x, y) V4((conv4_mul * texelFetch(conv4_raw, clamp(pos + ivec2(x, y), ivec2(0), sz) * ivec2(3, 2) + ivec2(1, 1), 0)))
#define l5(x, y) V4((conv4_mul * texelFetch(conv4_raw, clamp(pos + ivec2(x, y), ivec2(0), sz) * ivec2(3, 2) + ivec2(2, 1), 0)))
shared V4 G[6][10][10];
void hook() {
	ivec2 xy = ivec2(gl_LocalInvocationID.xy);
	ivec2 pos = ivec2(gl_WorkGroupID.xy) * ivec2(8, 8) + xy;
	ivec2 opos = pos * ivec2(2, 2);
	ivec2 sz = ivec2(LUMA_size) - ivec2(1);
	for (int y = 0; y < 10; y += 8) {
		int ay = xy.y + y;
		if (ay >= 10) break;
		for (int x = 0; x < 10; x += 8) {
			int ax = xy.x + x;
			if (ax >= 10) break;
			G[0][ay][ax] = l0(x - 1, y - 1);
			G[1][ay][ax] = l1(x - 1, y - 1);
			G[2][ay][ax] = l2(x - 1, y - 1);
			G[3][ay][ax] = l3(x - 1, y - 1);
			G[4][ay][ax] = l4(x - 1, y - 1);
			G[5][ay][ax] = l5(x - 1, y - 1);
		}
	}
	barrier();
	V4 s0_0_0, s0_0_1, s0_0_2, s0_1_0, s0_1_1, s0_1_2, s0_2_0, s0_2_1, s0_2_2, s1_0_0, s1_0_1, s1_0_2, s1_1_0, s1_1_1, s1_1_2, s1_2_0, s1_2_1, s1_2_2;
	V4 r0;
	r0 = V4(0.0);
	s0_0_0 = G[0][xy.y+0][xy.x+0]; s0_0_1 = G[0][xy.y+0][xy.x+1];
	s0_0_2 = G[0][xy.y+0][xy.x+2]; s0_1_0 = G[0][xy.y+1][xy.x+0];
	s0_1_1 = G[0][xy.y+1][xy.x+1]; s0_1_2 = G[0][xy.y+1][xy.x+2];
	s0_2_0 = G[0][xy.y+2][xy.x+0]; s0_2_1 = G[0][xy.y+2][xy.x+1];
	s0_2_2 = G[0][xy.y+2][xy.x+2]; s1_0_0 = G[1][xy.y+0][xy.x+0];
	s1_0_1 = G[1][xy.y+0][xy.x+1]; s1_0_2 = G[1][xy.y+0][xy.x+2];
	s1_1_0 = G[1][xy.y+1][xy.x+0]; s1_1_1 = G[1][xy.y+1][xy.x+1];
	s1_1_2 = G[1][xy.y+1][xy.x+2]; s1_2_0 = G[1][xy.y+2][xy.x+0];
	s1_2_1 = G[1][xy.y+2][xy.x+1]; s1_2_2 = G[1][xy.y+2][xy.x+2];
	r0 += M4(-1.362e-03, 3.175e-04, -2.495e-03, 1.751e-04, 1.074e-02, -4.273e-05, 1.008e-03, -4.322e-04, 2.997e-02, -1.637e-03, 3.352e-03, -2.827e-04, 1.804e-02, 2.715e-03, -1.897e-03, 2.026e-03) * s0_0_0;
	r0 += M4(2.031e-02, -2.264e-02, -4.425e-03, -1.805e-03, -3.845e-02, 4.335e-03, 3.773e-03, 4.620e-05, 5.407e-03, -3.430e-02, -4.775e-04, -1.107e-03, -8.936e-03, 2.143e-02, -3.775e-03, -2.299e-03) * s0_0_1;
	r0 += M4(1.041e-03, 7.141e-03, -3.706e-04, 1.217e-03, 2.074e-04, -1.549e-02, -4.421e-04, -1.122e-04, -1.044e-05, 1.189e-04, 7.590e-05, -3.481e-04, 2.151e-03, 5.398e-04, -3.523e-05, -4.003e-04) * s0_0_2;
	r0 += M4(9.455e-04, -2.938e-03, -1.417e-02, 2.125e-03, 4.724e-02, 2.513e-04, 4.578e-02, 1.776e-03, 1.792e-01, 2.124e-03, 1.717e-01, 3.189e-03, -2.203e-02, 7.176e-03, -2.761e-03, -2.512e-03) * s0_1_0;
	r0 += M4(-3.017e-01, 3.048e-01, 1.233e-01, -9.106e-02, 3.568e-03, 1.626e-01, -1.323e-01, 5.710e-02, -5.455e-03, -1.782e-01, -6.858e-03, -1.783e-01, -2.075e-01, -1.729e-01, 2.026e-01, 1.352e-01) * s0_1_1;
	r0 += M4(7.320e-03, -2.398e-02, -1.410e-03, 1.997e-02, -4.014e-03, -2.436e-02, -4.208e-03, -4.059e-02, 1.106e-04, 4.154e-04, 1.075e-04, 3.733e-04, 6.209e-03, -5.097e-02, 2.468e-04, 6.616e-02) * s0_1_2;
	r0 += M4(2.705e-04, 1.465e-04, -1.012e-02, 1.113e-03, -3.717e-05, -3.067e-05, 1.714e-02, -6.973e-04, 3.969e-03, -7.565e-05, 3.915e-02, -1.983e-03, 2.596e-03, 4.586e-05, -8.635e-04, -5.496e-03) * s0_2_0;
	r0 += M4(1.746e-04, -1.674e-03, 2.333e-02, -5.631e-04, 2.065e-03, -3.277e-04, 3.918e-02, 5.334e-02, -2.044e-04, 6.586e-04, 6.782e-03, -3.356e-02, 1.464e-02, 6.288e-03, 2.211e-03, 1.749e-02) * s0_2_1;
	r0 += M4(-8.697e-05, 5.484e-03, -5.031e-03, -1.615e-02, -1.301e-05, -8.641e-04, 3.278e-03, 6.407e-03, -9.268e-06, -2.494e-04, 4.644e-05, 5.903e-05, -1.812e-03, 9.797e-03, -7.840e-03, -2.075e-02) * s0_2_2;
	r0 += M4(-1.508e-02, -2.012e-04, 2.865e-04, -8.616e-05, 3.307e-02, 7.132e-04, 6.033e-04, 1.346e-04, 6.088e-03, 3.621e-04, -2.532e-03, -3.441e-04, -3.452e-02, 4.268e-03, -5.774e-03, 6.244e-04) * s1_0_0;
	r0 += M4(2.182e-03, -2.533e-02, -3.876e-03, 1.892e-04, -8.526e-02, -8.053e-03, -5.745e-03, 1.703e-03, 5.602e-02, 3.647e-02, 1.290e-04, 1.073e-03, -6.504e-04, 2.618e-02, -4.163e-04, 5.653e-04) * s1_0_1;
	r0 += M4(3.554e-04, 2.400e-03, -1.329e-05, -3.329e-04, 1.558e-03, 3.674e-03, -2.151e-04, -2.364e-04, 9.981e-05, 2.460e-02, -2.566e-05, -6.610e-05, 3.348e-07, 6.095e-06, -8.124e-06, 7.413e-06) * s1_0_2;
	r0 += M4(6.699e-03, -1.328e-03, -2.215e-02, -3.662e-04, -3.994e-02, -4.586e-04, 2.153e-02, 3.894e-03, -2.620e-02, 1.244e-03, 9.251e-03, -1.078e-03, -2.017e-01, -2.923e-03, -1.919e-01, -5.318e-03) * s1_1_0;
	r0 += M4(1.878e-01, 8.476e-02, -1.524e-03, -1.312e-01, 7.475e-02, 1.220e-01, 5.842e-02, -3.018e-01, 6.707e-03, -7.075e-02, 1.723e-01, 8.325e-02, 8.971e-05, 2.124e-01, 6.570e-03, 1.890e-01) * s1_1_1;
	r0 += M4(-5.114e-04, 4.561e-02, 7.004e-04, 2.337e-02, 1.366e-03, 5.161e-03, -5.704e-04, 6.030e-02, 3.766e-03, 3.068e-02, 2.961e-04, 6.214e-02, -4.988e-07, -1.041e-05, 1.175e-05, -1.781e-05) * s1_1_2;
	r0 += M4(-1.257e-03, 4.759e-05, -5.317e-04, 1.247e-03, -7.495e-04, -3.254e-04, 5.473e-03, 8.211e-03, 1.785e-03, -7.313e-04, -7.305e-03, 9.092e-04, -5.158e-03, -2.258e-03, -4.309e-02, 4.023e-03) * s1_2_0;
	r0 += M4(-9.466e-05, 1.428e-04, 5.481e-02, 3.498e-02, -5.984e-05, -8.338e-05, -2.568e-04, 4.695e-02, 7.711e-04, 1.988e-03, -9.707e-03, -1.523e-02, 5.714e-04, 3.373e-05, -5.981e-03, 4.870e-02) * s1_2_1;
	r0 += M4(-3.385e-07, 2.835e-04, -4.352e-04, 1.714e-02, 9.406e-07, -2.187e-04, 1.937e-04, -1.597e-04, -1.375e-04, 3.258e-04, 7.518e-04, 3.337e-03, 2.980e-07, 1.295e-06, -1.957e-06, 1.044e-05) * s1_2_2;
	s0_0_0 = G[2][xy.y+0][xy.x+0]; s0_0_1 = G[2][xy.y+0][xy.x+1];
	s0_0_2 = G[2][xy.y+0][xy.x+2]; s0_1_0 = G[2][xy.y+1][xy.x+0];
	s0_1_1 = G[2][xy.y+1][xy.x+1]; s0_1_2 = G[2][xy.y+1][xy.x+2];
	s0_2_0 = G[2][xy.y+2][xy.x+0]; s0_2_1 = G[2][xy.y+2][xy.x+1];
	s0_2_2 = G[2][xy.y+2][xy.x+2]; s1_0_0 = G[3][xy.y+0][xy.x+0];
	s1_0_1 = G[3][xy.y+0][xy.x+1]; s1_0_2 = G[3][xy.y+0][xy.x+2];
	s1_1_0 = G[3][xy.y+1][xy.x+0]; s1_1_1 = G[3][xy.y+1][xy.x+1];
	s1_1_2 = G[3][xy.y+1][xy.x+2]; s1_2_0 = G[3][xy.y+2][xy.x+0];
	s1_2_1 = G[3][xy.y+2][xy.x+1]; s1_2_2 = G[3][xy.y+2][xy.x+2];
	r0 += M4(4.067e-04, -1.109e-03, 8.686e-04, -2.327e-04, -7.550e-03, -3.042e-03, -1.096e-02, -3.182e-03, 3.479e-02, -1.522e-02, -8.363e-03, 1.923e-03, -3.846e-02, 4.118e-02, -3.712e-02, 3.354e-02) * s0_0_0;
	r0 += M4(-3.854e-02, 3.332e-02, -1.305e-03, 7.717e-03, -3.200e-02, -1.799e-02, -1.821e-02, -2.133e-02, 1.187e-01, 1.615e-01, 5.194e-03, -5.682e-03, 3.207e-02, -1.940e-02, -9.461e-04, 1.714e-02) * s0_0_1;
	r0 += M4(2.296e-03, -6.485e-03, 8.416e-04, -4.289e-03, -6.818e-03, -2.692e-02, 1.792e-04, -1.142e-02, 1.360e-03, 5.170e-03, 1.352e-03, 1.345e-03, 7.937e-04, -9.293e-03, 3.133e-04, -2.544e-03) * s0_0_2;
	r0 += M4(2.884e-03, 4.429e-05, 5.893e-04, -9.617e-04, 1.165e-02, 3.121e-03, 2.549e-03, -6.926e-03, 2.338e-02, -3.358e-03, -4.751e-02, 3.622e-03, 6.062e-02, -1.700e-03, 2.546e-02, 2.989e-02) * s0_1_0;
	r0 += M4(-1.612e-01, 1.129e-01, -1.362e-01, 1.010e-01, 7.294e-02, 8.126e-02, 9.570e-03, 6.421e-02, 6.730e-03, 4.017e-02, -1.682e-01, -2.080e-01, 1.730e-02, -1.181e-01, 8.756e-02, -1.253e-01) * s0_1_1;
	r0 += M4(-2.083e-04, 1.306e-02, 3.999e-03, 3.662e-03, -1.883e-02, -2.612e-03, -1.811e-02, -2.790e-02, -4.345e-03, -5.742e-03, 1.692e-04, -1.736e-02, -5.524e-03, 4.043e-02, -4.520e-03, -6.936e-04) * s0_1_2;
	r0 += M4(1.059e-02, -7.145e-04, 1.313e-02, -6.324e-04, 7.617e-03, -2.293e-03, 1.550e-02, 8.986e-03, -9.571e-04, 9.398e-04, 4.073e-03, -4.726e-04, 1.606e-04, -5.972e-03, 2.723e-02, -1.018e-02) * s0_2_0;
	r0 += M4(-3.743e-02, 3.286e-02, -1.031e-01, 8.323e-02, 4.630e-03, 1.860e-02, 1.633e-02, 1.238e-02, -3.253e-04, -1.674e-03, 4.623e-03, 3.976e-03, -3.206e-02, 1.609e-02, -6.449e-02, 1.461e-02) * s0_2_1;
	r0 += M4(9.358e-04, -5.214e-03, -6.917e-05, 6.651e-03, -4.189e-03, -6.914e-03, -1.629e-02, -2.768e-03, 1.953e-04, 2.605e-04, -2.293e-03, 2.372e-03, 5.255e-03, 1.588e-02, -1.321e-03, 4.633e-02) * s0_2_2;
	r0 += M4(1.414e-02, -4.812e-04, 1.028e-03, -6.787e-05, -3.017e-07, 6.043e-06, 4.907e-07, -1.637e-07, 1.072e-03, 6.330e-05, 1.989e-03, 1.934e-04, -5.372e-03, 1.520e-03, 1.477e-03, -5.822e-04) * s1_0_0;
	r0 += M4(5.627e-02, 5.530e-02, 5.513e-03, -9.633e-04, -3.712e-05, -5.914e-05, -4.298e-06, -1.038e-06, -9.195e-03, -1.114e-03, 7.876e-04, 1.623e-03, 5.971e-03, -2.634e-02, 8.611e-03, -1.564e-03) * s1_0_1;
	r0 += M4(-3.929e-04, -8.136e-03, 7.068e-05, 7.517e-04, 4.708e-06, 4.103e-05, 9.782e-07, 1.743e-06, -7.251e-04, -7.218e-03, 2.822e-04, 2.477e-04, -1.097e-03, 1.070e-02, 2.605e-03, -3.165e-03) * s1_0_2;
	r0 += M4(6.519e-02, -8.421e-04, 5.435e-02, -1.820e-03, 1.310e-02, 1.214e-03, -3.429e-03, -2.046e-06, -4.704e-03, 2.133e-03, -1.635e-03, 1.309e-03, -2.550e-03, 1.216e-04, 2.388e-02, -1.146e-03) * s1_1_0;
	r0 += M4(-1.676e-01, -4.606e-03, 8.399e-02, 2.783e-01, 1.048e-01, 1.021e-01, 6.788e-03, 2.610e-03, -1.274e-01, -8.560e-02, -7.397e-02, -4.213e-02, 1.333e-01, -5.357e-03, -3.975e-01, 2.026e-01) * s1_1_1;
	r0 += M4(5.230e-04, -2.483e-02, -5.749e-03, -4.421e-02, 8.479e-04, 1.923e-02, -1.466e-04, -3.545e-04, 2.191e-03, -4.407e-02, -5.047e-04, -3.782e-02, -1.908e-03, 6.349e-03, 1.082e-02, 1.767e-02) * s1_1_2;
	r0 += M4(1.334e-03, -3.218e-04, 1.108e-02, -9.987e-04, 4.320e-03, 8.432e-04, -9.978e-03, -1.781e-03, 1.136e-03, -1.005e-04, -3.915e-03, 2.712e-04, -1.215e-04, 5.229e-05, -1.911e-04, 6.289e-05) * s1_2_0;
	r0 += M4(3.206e-04, -2.356e-03, -2.709e-02, -3.638e-02, -5.782e-03, -5.140e-03, -1.042e-01, -9.887e-02, 5.319e-04, 7.257e-04, -3.821e-02, -3.008e-02, -8.209e-04, 2.051e-05, 2.204e-02, -1.219e-02) * s1_2_1;
	r0 += M4(2.428e-06, -1.061e-04, -4.323e-04, -1.887e-03, 1.986e-05, -3.806e-04, -3.455e-03, -1.077e-02, -2.113e-05, 1.741e-04, 6.127e-04, -1.548e-02, 8.347e-05, 6.604e-04, 2.714e-03, -8.331e-03) * s1_2_2;
	s0_0_0 = G[4][xy.y+0][xy.x+0]; s0_0_1 = G[4][xy.y+0][xy.x+1];
	s0_0_2 = G[4][xy.y+0][xy.x+2]; s0_1_0 = G[4][xy.y+1][xy.x+0];
	s0_1_1 = G[4][xy.y+1][xy.x+1]; s0_1_2 = G[4][xy.y+1][xy.x+2];
	s0_2_0 = G[4][xy.y+2][xy.x+0]; s0_2_1 = G[4][xy.y+2][xy.x+1];
	s0_2_2 = G[4][xy.y+2][xy.x+2]; s1_0_0 = G[5][xy.y+0][xy.x+0];
	s1_0_1 = G[5][xy.y+0][xy.x+1]; s1_0_2 = G[5][xy.y+0][xy.x+2];
	s1_1_0 = G[5][xy.y+1][xy.x+0]; s1_1_1 = G[5][xy.y+1][xy.x+1];
	s1_1_2 = G[5][xy.y+1][xy.x+2]; s1_2_0 = G[5][xy.y+2][xy.x+0];
	s1_2_1 = G[5][xy.y+2][xy.x+1]; s1_2_2 = G[5][xy.y+2][xy.x+2];
	r0 += M4(6.748e-04, -2.559e-05, -2.135e-07, -7.910e-07, 1.503e-03, -5.661e-04, 2.356e-05, 4.731e-05, 9.146e-04, 3.814e-05, -3.816e-04, 5.995e-04, 1.662e-03, 7.111e-04, 7.939e-05, -1.710e-04) * s0_0_0;
	r0 += M4(-3.941e-04, 1.495e-04, -3.258e-06, -2.910e-08, -1.337e-03, 1.329e-03, -6.112e-05, -6.987e-05, -3.452e-03, 4.212e-02, 3.462e-04, 3.883e-04, 8.582e-04, 1.995e-04, 9.185e-05, 1.802e-06) * s0_0_1;
	r0 += M4(-1.842e-04, -4.346e-05, -2.325e-05, -2.214e-06, 1.176e-04, -4.659e-04, 1.862e-05, 2.298e-05, -4.907e-04, -2.268e-04, 5.391e-05, 1.066e-04, 1.340e-04, -4.189e-05, 9.139e-06, -1.208e-05) * s0_0_2;
	r0 += M4(-1.776e-02, -1.653e-04, 3.731e-04, -1.303e-06, -3.236e-02, -8.238e-04, 9.166e-03, -1.046e-03, -2.067e-02, 9.120e-03, -2.460e-02, 1.017e-03, -3.183e-02, -4.150e-03, 2.558e-03, 7.515e-07) * s0_1_0;
	r0 += M4(-3.796e-02, -5.041e-02, -1.050e-03, 1.102e-03, -1.890e-01, -2.046e-01, -8.083e-03, -1.188e-03, 1.750e-01, -4.463e-01, 5.980e-03, 9.196e-02, 1.184e-02, 3.067e-02, 9.114e-05, -4.339e-03) * s0_1_1;
	r0 += M4(1.441e-03, 5.777e-04, 2.163e-04, 1.368e-03, -2.159e-03, -2.173e-02, -9.466e-04, 1.481e-03, -3.199e-03, 3.650e-02, 1.202e-03, -2.705e-03, -9.886e-04, -1.695e-02, -5.085e-04, -2.631e-04) * s0_1_2;
	r0 += M4(-1.893e-02, 8.008e-04, -3.381e-02, 2.179e-06, -3.642e-03, -8.073e-05, 2.562e-02, 1.931e-03, -2.817e-04, 2.794e-03, 7.628e-03, -3.522e-03, 1.619e-02, -8.002e-03, -4.094e-02, 4.397e-03) * s0_2_0;
	r0 += M4(-4.210e-02, -5.139e-02, -8.714e-02, -1.038e-01, 4.955e-03, 1.843e-03, 1.919e-01, 2.031e-01, 3.563e-03, 1.547e-02, -4.480e-02, -6.728e-03, -3.686e-02, 6.140e-02, 2.839e-01, -2.884e-01) * s0_2_1;
	r0 += M4(1.699e-03, 3.149e-03, 5.509e-03, 9.954e-03, -1.021e-03, -1.192e-03, 1.805e-03, 1.507e-02, 4.520e-04, 7.723e-05, -1.702e-03, 1.154e-02, -2.267e-03, -8.509e-03, -5.604e-03, -2.189e-02) * s0_2_2;
	r0 += M4(3.519e-05, 1.314e-06, 7.849e-09, 9.721e-08, -7.133e-04, 9.194e-04, -7.971e-03, 3.644e-04, 7.899e-02, 7.319e-02, 8.088e-02, 9.015e-02, -4.729e-04, 4.225e-04, 2.971e-05, 2.637e-05) * s1_0_0;
	r0 += M4(-4.871e-05, 6.098e-05, 4.669e-06, 1.321e-06, 2.452e-02, -5.124e-02, 5.004e-03, -1.002e-02, 1.484e-01, 1.475e-01, 1.427e-01, 1.383e-01, 3.155e-04, -5.815e-04, -4.823e-06, -3.725e-05) * s1_0_1;
	r0 += M4(8.726e-06, -1.051e-04, -2.565e-06, -1.965e-06, -2.619e-04, 2.025e-02, -1.780e-04, 9.879e-03, 5.929e-02, 6.052e-02, 6.579e-02, 6.071e-02, 1.653e-04, 1.930e-04, 6.467e-06, 1.094e-05) * s1_0_2;
	r0 += M4(7.988e-03, 6.563e-03, -3.961e-04, -2.069e-03, 9.292e-03, 3.011e-03, 1.654e-02, -5.657e-04, -1.077e-01, -9.791e-02, -1.029e-01, -1.078e-01, -1.672e-02, -4.617e-03, 2.040e-03, 4.117e-04) * s1_1_0;
	r0 += M4(3.308e-02, 2.060e-02, 9.676e-04, -1.858e-03, 1.338e-01, -1.794e-01, 1.025e-01, -1.274e-01, -5.652e-02, -5.449e-02, -5.627e-02, -4.879e-02, 1.155e-02, -6.604e-03, -2.117e-03, 1.718e-03) * s1_1_1;
	r0 += M4(3.248e-04, 9.062e-03, 1.555e-03, 8.225e-04, -5.917e-04, 2.226e-03, -5.779e-04, 2.070e-02, -4.878e-03, -5.507e-03, 1.543e-02, -2.479e-03, -1.352e-02, -1.291e-02, 4.525e-04, 1.904e-05) * s1_1_2;
	r0 += M4(-2.397e-01, -8.005e-02, 1.899e-01, 4.333e-02, -1.018e-02, 4.419e-03, -6.503e-03, 6.188e-03, 4.153e-02, 4.481e-02, 4.379e-02, 4.855e-02, 2.483e-02, -5.463e-04, -3.993e-02, 9.704e-03) * s1_2_0;
	r0 += M4(-3.068e-03, -1.839e-01, 3.728e-03, 1.409e-01, 2.875e-02, -2.013e-02, 8.035e-02, -1.042e-01, 9.502e-03, 1.305e-03, -4.188e-03, -1.298e-03, 1.383e-01, 1.440e-01, -2.269e-01, -1.965e-01) * s1_2_1;
	r0 += M4(5.411e-04, 3.817e-03, 2.003e-03, -1.020e-02, -4.410e-04, 3.256e-03, 7.169e-05, -1.282e-03, -4.584e-02, -4.368e-02, -4.989e-02, -5.514e-02, -1.259e-03, 3.224e-02, 1.374e-02, -5.708e-02) * s1_2_2;
	r0 += V4(1.040e-10, 1.034e-10, 3.557e-15, -5.932e-11);
	r0 = r0;
	vec2 opt = 0.5 * LUMA_pt;
	vec2 fpos = (vec2(opos) + vec2(0.5)) * opt;
	imageStore(out_image, opos + ivec2(0, 0), vec4(r0.x + LUMA_tex(fpos + vec2(0.0, 0.0) * opt).r, 0.0, 0.0, 1.0));
	imageStore(out_image, opos + ivec2(1, 0), vec4(r0.y + LUMA_tex(fpos + vec2(1.0, 0.0) * opt).r, 0.0, 0.0, 1.0));
	imageStore(out_image, opos + ivec2(0, 1), vec4(r0.z + LUMA_tex(fpos + vec2(0.0, 1.0) * opt).r, 0.0, 0.0, 1.0));
	imageStore(out_image, opos + ivec2(1, 1), vec4(r0.w + LUMA_tex(fpos + vec2(1.0, 1.0) * opt).r, 0.0, 0.0, 1.0));
}
