// CuNNy 4x12
// Copyright (c) 2024 funnyplanter

// This program is free software; you can redistribute it and/or
// modify it under the terms of the GNU Lesser General Public
// License as published by the Free Software Foundation; either
// version 3.0 of the License, or (at your option) any later version.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
// Lesser General Public License for more details.
//
// You should have received a copy of the GNU Lesser General Public
// License along with this program.  If not, see <https://www.gnu.org/licenses/>.
/* ------------------------------------------------------------------- */


//!DESC CuNNy-4x12-in
//!HOOK LUMA
//!COMPUTE 24 8 8 8
//!BIND LUMA
//!SAVE in
//!WIDTH LUMA.w 3 *
//!HEIGHT LUMA.h
//!COMPONENTS 4
//!WHEN OUTPUT.w LUMA.w / 1.3 > OUTPUT.h LUMA.h / 1.3 > *
#extension GL_EXT_shader_explicit_arithmetic_types_float16 : enable
#ifdef GL_EXT_shader_explicit_arithmetic_types_float16
#	define V4 f16vec4
#	define M4 f16mat4
#	define F float16_t
#else
#	define V4 vec4
#	define M4 mat4
#	define F float
#endif
#define l0(x, y) F((LUMA_mul * texelFetch(LUMA_raw, clamp(pos + ivec2(x, y), ivec2(0), sz) * ivec2(1, 1) + ivec2(0, 0), 0)).r)
shared F G[1][10][10];
void hook() {
	ivec2 xy = ivec2(gl_LocalInvocationID.xy);
	ivec2 pos = ivec2(gl_WorkGroupID.xy) * ivec2(8, 8) + xy;
	ivec2 opos = pos * ivec2(3, 1);
	ivec2 sz = ivec2(LUMA_size) - ivec2(1);
	for (int y = 0; y < 10; y += 8) {
		int ay = xy.y + y;
		if (ay >= 10) break;
		for (int x = 0; x < 10; x += 8) {
			int ax = xy.x + x;
			if (ax >= 10) break;
			G[0][ay][ax] = l0(x - 1, y - 1);
		}
	}
	barrier();
	F s0_0_0, s0_0_1, s0_0_2, s0_1_0, s0_1_1, s0_1_2, s0_2_0, s0_2_1, s0_2_2;
	V4 r0, r1, r2;
	r0 = V4(0.0); r1 = V4(0.0); r2 = V4(0.0);
	s0_0_0 = G[0][xy.y+0][xy.x+0]; s0_0_1 = G[0][xy.y+0][xy.x+1];
	s0_0_2 = G[0][xy.y+0][xy.x+2]; s0_1_0 = G[0][xy.y+1][xy.x+0];
	s0_1_1 = G[0][xy.y+1][xy.x+1]; s0_1_2 = G[0][xy.y+1][xy.x+2];
	s0_2_0 = G[0][xy.y+2][xy.x+0]; s0_2_1 = G[0][xy.y+2][xy.x+1];
	s0_2_2 = G[0][xy.y+2][xy.x+2];
	r0 += V4(-2.112e-02, -1.544e-02, -2.704e-02, -7.520e-03) * s0_0_0;
	r1 += V4(2.740e-02, -1.137e-03, 1.662e-02, -1.469e-02) * s0_0_0;
	r2 += V4(3.224e-02, 2.582e-02, -5.569e-02, -1.683e-02) * s0_0_0;
	r0 += V4(6.700e-01, -7.346e-02, -8.053e-01, -1.984e-02) * s0_0_1;
	r1 += V4(-4.508e-02, 8.288e-04, 2.851e-03, 5.234e-02) * s0_0_1;
	r2 += V4(2.837e-02, 1.488e+00, -1.124e-01, 1.196e-01) * s0_0_1;
	r0 += V4(2.955e-01, -7.147e-03, 1.351e-01, 2.011e-02) * s0_0_2;
	r1 += V4(6.127e-02, -3.987e-03, -1.342e-02, -3.306e-02) * s0_0_2;
	r2 += V4(-9.165e-02, 1.438e-02, -3.430e-02, 7.140e-02) * s0_0_2;
	r0 += V4(3.123e-02, -1.062e-01, 4.892e-04, 1.809e-02) * s0_1_0;
	r1 += V4(8.906e-02, 1.465e-03, -5.441e-02, 7.902e-02) * s0_1_0;
	r2 += V4(-6.041e-02, -2.523e-02, -2.485e-01, 5.020e-02) * s0_1_0;
	r0 += V4(-1.163e-01, 7.457e-01, 7.414e-01, 9.434e-01) * s0_1_1;
	r1 += V4(-9.460e-01, -7.732e-01, 8.008e-01, 6.258e-01) * s0_1_1;
	r2 += V4(8.680e-01, 1.527e-02, 6.066e-01, 9.284e-02) * s0_1_1;
	r0 += V4(-8.457e-01, -6.246e-02, -3.140e-02, -1.030e-01) * s0_1_2;
	r1 += V4(1.931e-01, 4.819e-03, -8.157e-04, -7.052e-01) * s0_1_2;
	r2 += V4(-7.765e-01, -1.577e-02, 1.368e-02, -1.395e+00) * s0_1_2;
	r0 += V4(-1.562e-02, 3.186e-02, 9.132e-03, -2.619e-02) * s0_2_0;
	r1 += V4(5.846e-02, -4.804e-04, -7.950e-01, -6.580e-02) * s0_2_0;
	r2 += V4(2.917e-02, -4.981e-03, -2.065e-01, -4.764e-03) * s0_2_0;
	r0 += V4(-1.811e-02, -1.666e-01, -2.846e-03, -7.733e-01) * s0_2_1;
	r1 += V4(2.192e-01, 1.058e-02, 3.009e-02, -6.738e-01) * s0_2_1;
	r2 += V4(5.749e-02, 1.023e-03, 7.463e-02, 6.158e-02) * s0_2_1;
	r0 += V4(1.835e-02, 4.880e-02, -2.191e-02, -4.936e-02) * s0_2_2;
	r1 += V4(2.008e-01, 7.598e-01, 1.518e-02, 7.389e-01) * s0_2_2;
	r2 += V4(-8.574e-02, -9.801e-03, 9.699e-03, 7.865e-02) * s0_2_2;
	r0 += V4(3.645e-03, 6.797e-03, 4.457e-03, 1.489e-02);
	r0 = clamp(r0, V4(0.0), V4(1.0));
	imageStore(out_image, opos + ivec2(0, 0), vec4(r0));
	r1 += V4(-1.605e-02, 6.707e-04, 2.307e-05, 2.531e-04);
	r1 = clamp(r1, V4(0.0), V4(1.0));
	imageStore(out_image, opos + ivec2(1, 0), vec4(r1));
	r2 += V4(6.144e-03, -1.462e+00, 5.950e-03, 5.919e-03);
	r2 = clamp(r2, V4(0.0), V4(1.0));
	imageStore(out_image, opos + ivec2(2, 0), vec4(r2));
}

//!DESC CuNNy-4x12-conv1
//!HOOK LUMA
//!COMPUTE 24 8 8 8
//!BIND in
//!BIND LUMA
//!SAVE conv1
//!WIDTH LUMA.w 3 *
//!HEIGHT LUMA.h
//!COMPONENTS 4
//!WHEN OUTPUT.w LUMA.w / 1.3 > OUTPUT.h LUMA.h / 1.3 > *
#extension GL_EXT_shader_explicit_arithmetic_types_float16 : enable
#ifdef GL_EXT_shader_explicit_arithmetic_types_float16
#	define V4 f16vec4
#	define M4 f16mat4
#	define F float16_t
#else
#	define V4 vec4
#	define M4 mat4
#	define F float
#endif
#define l0(x, y) V4((in_mul * texelFetch(in_raw, clamp(pos + ivec2(x, y), ivec2(0), sz) * ivec2(3, 1) + ivec2(0, 0), 0)))
#define l1(x, y) V4((in_mul * texelFetch(in_raw, clamp(pos + ivec2(x, y), ivec2(0), sz) * ivec2(3, 1) + ivec2(1, 0), 0)))
#define l2(x, y) V4((in_mul * texelFetch(in_raw, clamp(pos + ivec2(x, y), ivec2(0), sz) * ivec2(3, 1) + ivec2(2, 0), 0)))
shared V4 G[3][10][10];
void hook() {
	ivec2 xy = ivec2(gl_LocalInvocationID.xy);
	ivec2 pos = ivec2(gl_WorkGroupID.xy) * ivec2(8, 8) + xy;
	ivec2 opos = pos * ivec2(3, 1);
	ivec2 sz = ivec2(LUMA_size) - ivec2(1);
	for (int y = 0; y < 10; y += 8) {
		int ay = xy.y + y;
		if (ay >= 10) break;
		for (int x = 0; x < 10; x += 8) {
			int ax = xy.x + x;
			if (ax >= 10) break;
			G[0][ay][ax] = l0(x - 1, y - 1);
			G[1][ay][ax] = l1(x - 1, y - 1);
			G[2][ay][ax] = l2(x - 1, y - 1);
		}
	}
	barrier();
	V4 s0_0_0, s0_0_1, s0_0_2, s0_1_0, s0_1_1, s0_1_2, s0_2_0, s0_2_1, s0_2_2, s1_0_0, s1_0_1, s1_0_2, s1_1_0, s1_1_1, s1_1_2, s1_2_0, s1_2_1, s1_2_2;
	V4 r0, r1, r2;
	r0 = V4(0.0); r1 = V4(0.0); r2 = V4(0.0);
	s0_0_0 = G[0][xy.y+0][xy.x+0]; s0_0_1 = G[0][xy.y+0][xy.x+1];
	s0_0_2 = G[0][xy.y+0][xy.x+2]; s0_1_0 = G[0][xy.y+1][xy.x+0];
	s0_1_1 = G[0][xy.y+1][xy.x+1]; s0_1_2 = G[0][xy.y+1][xy.x+2];
	s0_2_0 = G[0][xy.y+2][xy.x+0]; s0_2_1 = G[0][xy.y+2][xy.x+1];
	s0_2_2 = G[0][xy.y+2][xy.x+2]; s1_0_0 = G[1][xy.y+0][xy.x+0];
	s1_0_1 = G[1][xy.y+0][xy.x+1]; s1_0_2 = G[1][xy.y+0][xy.x+2];
	s1_1_0 = G[1][xy.y+1][xy.x+0]; s1_1_1 = G[1][xy.y+1][xy.x+1];
	s1_1_2 = G[1][xy.y+1][xy.x+2]; s1_2_0 = G[1][xy.y+2][xy.x+0];
	s1_2_1 = G[1][xy.y+2][xy.x+1]; s1_2_2 = G[1][xy.y+2][xy.x+2];
	r0 += M4(1.019e-02, -6.443e-02, -1.207e-02, 1.469e-02, -2.028e-01, -1.446e-01, 1.463e-01, -1.310e-02, 4.644e-02, 7.992e-02, 1.526e-01, 3.578e-02, 1.422e-01, 3.933e-01, -2.265e-01, -4.271e-02) * s0_0_0;
	r1 += M4(-8.886e-03, -4.117e-02, 6.643e-02, -5.554e-01, 6.006e-02, 2.354e-01, 7.177e-02, 3.747e-02, 6.126e-02, -2.147e-02, 4.628e-02, -8.806e-02, -4.318e-01, 1.404e-01, -2.456e-01, 1.668e-01) * s0_0_0;
	r2 += M4(-2.745e-03, 2.831e-02, -5.082e-02, -6.717e-02, -2.778e-01, 1.227e-01, -3.662e-01, -3.932e-01, 1.540e-02, 1.219e-01, 2.815e-02, 1.067e-01, -4.760e-02, -3.027e-02, 1.460e-01, -8.096e-02) * s0_0_0;
	r0 += M4(-3.034e-02, -2.125e-02, 1.136e-01, 6.013e-02, -7.817e-01, 2.861e-01, -2.454e-01, -1.426e-01, 1.716e-01, 5.960e-02, -1.415e-02, 3.329e-02, -1.000e+00, 5.165e-02, -2.475e-01, 1.200e-01) * s0_0_1;
	r1 += M4(5.445e-02, -1.957e-02, -2.878e-03, -2.651e-01, -2.837e-01, -3.443e-01, -6.252e-01, -9.295e-04, -8.286e-02, 1.392e-01, 1.393e-02, -2.281e-02, 3.050e-01, 4.713e-01, 1.873e-01, 1.716e-01) * s0_0_1;
	r2 += M4(-5.613e-02, -8.560e-02, 5.103e-02, 1.629e-01, -3.311e-01, -2.809e-03, -6.990e-02, 5.519e-01, 9.252e-02, -6.890e-02, 6.917e-02, -4.713e-03, 2.167e-01, 4.822e-01, 2.239e-01, -1.778e-01) * s0_0_1;
	r0 += M4(-3.279e-02, 1.174e-01, -3.357e-02, 2.229e-02, -3.603e-01, -2.732e-02, 2.308e-01, 1.890e-01, 3.209e-02, 1.067e-01, -1.399e-01, -1.067e-02, -2.838e-02, 1.053e-02, 4.812e-02, -1.013e-02) * s0_0_2;
	r1 += M4(2.152e-02, 5.603e-02, 5.206e-03, -1.860e-01, -1.477e-01, -5.736e-01, -6.646e-02, -3.402e-01, 1.778e-01, 1.363e-01, 1.026e-01, 5.551e-03, 1.776e-01, 6.912e-02, -4.746e-02, -2.458e-02) * s0_0_2;
	r2 += M4(3.461e-02, 8.057e-02, 1.150e-02, 7.082e-02, -6.175e-02, -3.756e-02, 6.951e-02, 6.248e-01, 2.901e-02, -6.021e-03, -5.861e-02, -1.393e-01, -6.656e-02, -3.579e-01, -6.924e-02, -3.740e-01) * s0_0_2;
	r0 += M4(-2.705e-01, -5.458e-01, -1.015e-01, 1.416e-01, -7.610e-02, 1.353e-01, -1.941e-02, -3.279e-01, -2.291e-01, -4.378e-01, 2.923e-01, 1.382e-01, 2.547e-01, 5.399e-02, 6.394e-03, -1.347e-02) * s0_1_0;
	r1 += M4(1.450e-01, 2.138e-02, 2.999e-01, 1.792e-01, -9.228e-02, 1.998e-01, 5.995e-02, 3.246e-01, 4.015e-01, 4.670e-03, 7.140e-02, -2.782e-01, -3.427e-02, -1.626e-01, -1.470e-01, 1.707e-02) * s0_1_0;
	r2 += M4(2.032e-01, -3.174e-01, -5.803e-02, 7.012e-01, 3.968e-01, -2.123e-01, -5.615e-02, 5.983e-02, -1.753e-01, 2.065e-01, -1.537e-01, -2.184e-01, 3.270e-01, -7.255e-02, -1.764e-01, 4.240e-02) * s0_1_0;
	r0 += M4(-1.333e-01, -1.796e-01, -3.034e-01, 7.763e-02, 5.415e-01, -6.128e-01, -5.187e-02, 7.320e-01, 9.083e-01, 8.652e-01, -2.335e-01, 1.350e-01, 1.561e-01, -1.000e+00, 1.102e-01, 1.358e-03) * s0_1_1;
	r1 += M4(-2.836e-01, -2.685e-02, -7.787e-02, -1.748e-01, 2.962e-01, -2.280e-01, 3.936e-01, 2.510e-01, -6.738e-01, 2.581e-02, 1.686e-01, -4.615e-01, 9.447e-01, 8.510e-02, 1.554e-01, -1.773e-01) * s0_1_1;
	r2 += M4(5.813e-02, -1.000e+00, -8.679e-02, 4.594e-01, 6.336e-02, -4.047e-01, -4.307e-01, -5.258e-02, -2.137e-01, -5.289e-01, -1.441e-01, 3.019e-01, -2.022e-01, -3.760e-01, -1.475e-01, 1.091e-01) * s0_1_1;
	r0 += M4(1.248e-02, 2.914e-01, 2.930e-02, 3.789e-02, -1.838e-01, 1.978e-01, -2.884e-01, -2.291e-01, -1.203e-01, -1.080e-01, 9.842e-02, 6.255e-02, 2.674e-01, 1.166e-01, -7.507e-02, -9.498e-02) * s0_1_2;
	r1 += M4(2.307e-01, 1.399e-01, 1.267e-02, 2.181e-01, -8.809e-01, -8.892e-02, -4.166e-03, 3.471e-02, 3.002e-01, -1.707e-02, 1.666e-01, -1.223e-01, -1.000e+00, -1.183e-01, -3.795e-02, -3.467e-01) * s0_1_2;
	r2 += M4(8.179e-02, 9.705e-02, 3.544e-02, 1.488e-01, 1.415e-01, 6.480e-01, 9.869e-01, 4.845e-01, 2.172e-01, 2.305e-01, 1.266e-02, 1.903e-01, -1.948e-01, 2.284e-03, 3.119e-02, 5.259e-01) * s0_1_2;
	r0 += M4(8.541e-02, 1.935e-02, -1.222e-01, 2.723e-01, 2.445e-01, -1.057e-01, -1.170e-02, 1.184e-01, -3.281e-02, 2.272e-01, -1.274e-01, -3.082e-02, -5.687e-02, -6.233e-02, -4.107e-02, -4.393e-02) * s0_2_0;
	r1 += M4(-3.283e-02, -4.478e-02, -1.563e-01, 6.916e-02, 4.407e-01, 5.883e-01, -1.160e-01, 1.851e-03, -3.724e-01, 2.581e-01, 2.327e-02, -7.358e-02, -3.147e-01, 1.812e-01, 8.495e-03, -9.676e-02) * s0_2_0;
	r2 += M4(-3.409e-01, 1.595e-01, 1.204e-01, 1.999e-01, 1.184e-01, 3.736e-02, -1.141e-01, -2.864e-01, -5.444e-01, 1.273e-01, 6.524e-03, -3.905e-01, -7.641e-02, -3.924e-03, 3.651e-02, 1.268e-01) * s0_2_0;
	r0 += M4(-5.964e-03, -1.000e+00, 1.665e-01, 4.092e-01, 4.755e-01, 3.958e-01, 7.782e-02, -2.907e-01, -2.310e-01, 2.888e-01, -6.335e-02, 1.140e-01, -2.068e-02, 1.045e-01, 2.046e-02, 5.374e-02) * s0_2_1;
	r1 += M4(-1.000e+00, -8.052e-02, 6.015e-02, -2.200e-01, 5.809e-01, 4.212e-01, 1.155e-01, -1.942e-01, -9.991e-01, 8.030e-02, -8.671e-02, 2.599e-01, 6.998e-02, 7.530e-02, 4.038e-02, 1.448e-01) * s0_2_1;
	r2 += M4(9.928e-03, 2.452e-01, -1.471e-03, -4.089e-01, -2.177e-02, -8.999e-02, -1.945e-01, -2.357e-01, 2.998e-01, 5.206e-02, -2.093e-02, -2.694e-02, -3.370e-02, -3.770e-02, 2.350e-02, 2.537e-02) * s0_2_1;
	r0 += M4(-5.361e-02, 1.026e-01, 7.245e-02, 3.679e-02, 3.308e-01, -9.420e-02, 1.691e-01, -2.399e-02, -2.199e-01, -1.000e+00, 6.237e-02, 1.025e-03, -3.584e-02, 7.594e-02, -9.373e-03, 5.964e-02) * s0_2_2;
	r1 += M4(4.108e-01, 3.251e-02, 1.237e-03, 2.417e-01, 7.370e-02, -1.587e-01, 1.639e-01, -2.504e-02, 5.236e-01, 1.512e-01, 1.772e-01, 3.464e-01, -2.938e-02, -1.279e-01, -2.149e-02, -4.414e-02) * s0_2_2;
	r2 += M4(-4.714e-02, 9.824e-02, -3.165e-02, 5.146e-02, -3.541e-02, -8.852e-02, 1.433e-01, -8.320e-01, 1.001e-01, -1.000e+00, -2.251e-01, 9.985e-02, -2.112e-02, 1.831e-01, 3.803e-03, 2.193e-01) * s0_2_2;
	r0 += M4(-7.206e-02, 2.484e-01, -1.003e-01, 3.131e-02, 1.879e-01, 4.307e-01, 3.152e-01, -3.154e-02, -6.880e-02, 1.372e-01, 1.490e-02, -2.419e-02, 1.005e-02, 1.805e-01, 1.003e-01, 3.399e-02) * s1_0_0;
	r1 += M4(5.022e-02, -1.315e-01, 4.760e-02, -1.486e-01, -1.616e-01, -4.994e-02, 2.665e-01, 3.735e-01, 1.831e-01, 3.500e-02, -1.009e-02, -1.574e-01, 6.163e-02, -1.066e-01, -3.578e-02, 1.717e-01) * s1_0_0;
	r2 += M4(9.291e-03, 8.294e-02, -9.527e-03, -1.549e-01, -1.739e-01, -8.020e-03, 1.614e-02, 1.091e-01, -5.138e-02, -4.883e-02, 9.872e-03, -8.052e-02, 5.118e-02, 2.497e-02, -4.681e-03, 2.029e-01) * s1_0_0;
	r0 += M4(-2.102e-01, -1.540e-01, -8.506e-03, -6.822e-02, -8.651e-02, -1.696e-02, 2.958e-01, 1.102e-01, 3.347e-02, 5.359e-02, 2.535e-01, 1.771e-04, -7.246e-03, 4.517e-02, -2.766e-01, 6.688e-02) * s1_0_1;
	r1 += M4(7.104e-02, 5.731e-02, 1.923e-02, -3.034e-01, 4.169e-01, 7.256e-02, 4.847e-02, -1.000e+00, -2.213e-01, -3.476e-01, -1.030e-02, 3.345e-01, 2.864e-01, 3.965e-01, 1.103e-02, 3.185e-02) * s1_0_1;
	r2 += M4(-1.787e-01, 2.839e-01, -3.449e-02, 1.020e-01, -2.933e-01, -3.207e-01, 7.478e-02, -3.170e-01, 2.089e-01, 4.427e-02, -5.628e-02, 2.492e-03, 1.083e-01, -4.315e-01, 4.347e-02, -4.477e-01) * s1_0_1;
	r0 += M4(-3.018e-02, 2.167e-01, 1.250e-01, 3.667e-02, 4.031e-02, -3.260e-01, -6.739e-02, 7.076e-02, 1.759e-01, -4.703e-02, -3.904e-01, -1.199e-01, 8.585e-02, 3.473e-01, 3.553e-03, 2.242e-02) * s1_0_2;
	r1 += M4(-3.257e-02, -6.749e-02, -5.684e-02, 2.374e-02, -2.834e-02, -4.836e-02, 7.692e-02, -2.391e-01, -2.395e-02, 9.402e-01, 1.778e-01, -7.179e-01, 1.380e-01, -4.946e-02, 1.745e-01, 1.341e-01) * s1_0_2;
	r2 += M4(3.250e-02, 3.037e-01, 7.270e-02, 9.358e-02, -2.215e-02, -2.422e-01, -1.971e-01, 7.603e-02, 3.797e-01, -4.565e-01, 7.561e-02, -1.000e+00, 1.111e-01, -2.966e-01, 3.283e-02, 1.709e-02) * s1_0_2;
	r0 += M4(8.946e-02, -4.871e-02, 1.518e-02, -1.010e-01, -3.168e-01, -6.833e-02, 1.195e-01, 2.667e-01, 3.782e-02, 1.499e-01, 5.749e-02, -1.273e-01, -6.604e-02, -2.963e-02, -6.026e-02, 2.390e-01) * s1_1_0;
	r1 += M4(2.822e-01, -2.309e-01, 8.927e-02, -3.934e-02, 9.691e-02, -9.697e-02, 2.065e-01, -1.123e-02, -1.952e-02, -6.028e-03, 7.946e-02, -9.030e-02, -1.032e-01, 1.460e-01, -8.030e-02, 7.195e-02) * s1_1_0;
	r2 += M4(6.250e-02, -3.275e-01, -2.547e-02, -9.240e-02, 6.491e-02, 1.603e-01, 3.905e-02, 2.086e-01, -8.035e-02, -4.154e-02, -3.504e-03, 5.766e-03, -2.416e-01, 2.011e-01, 1.286e-01, -9.098e-02) * s1_1_0;
	r0 += M4(3.622e-01, -2.082e-01, 4.132e-02, -2.209e-01, -2.330e-02, 5.856e-01, -1.465e-01, 4.340e-03, -1.302e-01, 1.388e-01, 9.753e-03, 1.061e-01, 6.122e-02, -5.062e-02, -4.510e-02, 3.365e-01) * s1_1_1;
	r1 += M4(-1.662e-01, 2.024e-01, -3.302e-01, -2.785e-01, -1.449e-01, -1.161e-01, -1.284e-01, -6.351e-02, -1.476e-01, 3.484e-01, -6.699e-02, 1.576e-01, -6.385e-01, -2.345e-02, -9.097e-02, -6.706e-02) * s1_1_1;
	r2 += M4(3.047e-01, -3.562e-02, -3.672e-02, 2.284e-01, -1.614e-01, -2.342e-01, 2.095e-01, 5.641e-01, -9.779e-02, 1.678e-01, 3.955e-02, -6.111e-01, -7.054e-02, 2.300e-01, -6.835e-02, -3.140e-01) * s1_1_1;
	r0 += M4(-1.716e-02, -1.358e-02, -9.657e-02, -2.477e-01, -1.090e-02, -4.157e-01, 7.520e-03, 7.884e-02, -2.275e-01, -4.685e-01, 7.419e-02, 1.329e-01, -2.399e-02, -5.331e-01, -2.089e-02, -1.572e-02) * s1_1_2;
	r1 += M4(-1.966e-01, 3.152e-02, -2.289e-01, 2.378e-01, -5.642e-02, 2.038e-02, 4.811e-02, -9.333e-02, 1.000e+00, 3.350e-01, 2.722e-02, 4.671e-01, 2.500e-01, -1.720e-01, 8.629e-02, 1.619e-01) * s1_1_2;
	r2 += M4(1.407e-01, 1.000e+00, 3.259e-01, -1.054e-01, -2.063e-02, -1.000e+00, -9.016e-02, 2.934e-01, 1.298e-01, 2.009e-01, 1.390e-01, -1.000e+00, 1.154e-02, -2.169e-02, -6.617e-02, 2.595e-01) * s1_1_2;
	r0 += M4(2.867e-02, 8.584e-02, -5.118e-02, 3.407e-03, 1.114e-01, -1.848e-01, 8.230e-02, 8.886e-02, 7.092e-03, -3.158e-02, 2.663e-03, -8.013e-03, 2.112e-02, 2.451e-01, 2.572e-03, 2.837e-02) * s1_2_0;
	r1 += M4(3.508e-01, 1.329e-01, -1.751e-02, 2.097e-02, -1.684e-01, -3.661e-01, 5.215e-02, 4.010e-02, -2.114e-02, 9.205e-02, -3.583e-03, 1.756e-02, -2.452e-02, -2.446e-01, -6.042e-03, 5.739e-02) * s1_2_0;
	r2 += M4(-1.382e-02, 2.409e-01, -2.495e-02, -1.557e-01, -6.405e-02, 6.283e-02, -1.932e-02, -1.995e-01, 1.403e-02, 4.381e-02, 5.274e-03, 1.450e-01, -4.826e-02, 7.739e-02, 2.249e-02, -2.356e-02) * s1_2_0;
	r0 += M4(-7.667e-03, 1.973e-01, -1.109e-01, -3.451e-01, -4.042e-04, -1.376e-01, 2.861e-02, 1.141e-01, 1.459e-02, -1.824e-01, 4.505e-02, 5.351e-02, -4.323e-02, -6.555e-01, 2.204e-03, 1.096e-01) * s1_2_1;
	r1 += M4(-2.904e-01, 9.646e-01, -1.258e-01, -7.628e-02, 1.467e-01, -3.448e-01, 7.670e-02, -5.062e-02, 2.764e-01, -2.718e-01, -5.101e-02, 6.592e-02, -3.398e-02, -8.351e-02, 1.462e-02, 9.092e-02) * s1_2_1;
	r2 += M4(3.669e-02, -2.329e-01, -1.439e-01, 2.471e-01, 5.019e-03, 2.183e-01, 7.249e-02, 1.134e-01, 1.280e-01, 3.429e-02, 6.181e-03, -1.663e-01, -1.426e-03, 2.940e-01, 8.322e-03, 1.300e-01) * s1_2_1;
	r0 += M4(1.222e-01, 1.907e-01, 8.201e-03, -1.375e-01, -3.791e-02, -4.851e-01, -1.933e-02, 5.946e-02, 8.021e-03, -2.272e-01, -4.894e-02, -5.430e-02, -4.116e-02, -1.140e-01, 1.319e-02, -6.023e-03) * s1_2_2;
	r1 += M4(2.675e-01, 3.291e-01, -1.480e-01, 2.599e-01, -3.093e-01, -4.520e-02, 4.066e-02, -3.285e-02, -1.401e-01, -9.534e-02, 2.670e-02, -9.179e-03, 1.211e-01, -3.217e-02, 6.650e-02, 8.599e-03) * s1_2_2;
	r2 += M4(1.570e-02, 2.562e-02, 8.029e-02, -3.999e-01, 5.769e-03, -1.708e-01, -2.721e-02, 3.627e-02, 6.955e-02, -6.242e-02, -4.438e-02, -2.629e-01, 3.881e-02, 1.051e-01, -3.960e-03, 1.554e-01) * s1_2_2;
	s0_0_0 = G[2][xy.y+0][xy.x+0]; s0_0_1 = G[2][xy.y+0][xy.x+1];
	s0_0_2 = G[2][xy.y+0][xy.x+2]; s0_1_0 = G[2][xy.y+1][xy.x+0];
	s0_1_1 = G[2][xy.y+1][xy.x+1]; s0_1_2 = G[2][xy.y+1][xy.x+2];
	s0_2_0 = G[2][xy.y+2][xy.x+0]; s0_2_1 = G[2][xy.y+2][xy.x+1];
	s0_2_2 = G[2][xy.y+2][xy.x+2];
	r0 += M4(1.979e-01, 1.284e-01, 3.977e-01, 7.215e-02, 2.541e-02, 7.757e-01, 4.325e-01, 7.345e-02, 1.186e-01, 6.476e-02, -2.114e-02, 2.896e-04, 2.815e-01, 2.037e-01, 1.907e-01, -2.602e-02) * s0_0_0;
	r1 += M4(3.836e-02, -4.014e-01, -1.154e-02, 1.647e-01, -1.327e-01, -1.000e+00, -4.284e-01, -2.028e-01, -2.025e-01, -1.180e-01, -7.401e-02, 1.119e-03, 2.779e-01, 3.629e-01, 2.309e-01, -3.102e-01) * s0_0_0;
	r2 += M4(1.781e-01, 1.460e-01, 9.715e-02, 1.008e-01, 1.506e-01, 2.389e-01, 2.658e-02, -7.351e-03, 2.993e-02, -7.858e-02, 9.299e-03, 1.433e-01, -1.000e-01, -2.761e-01, -4.397e-02, -1.012e-01) * s0_0_0;
	r0 += M4(1.494e-01, 2.195e-01, -1.171e-01, 1.224e-01, -9.885e-01, -2.946e-01, 1.527e-01, 3.022e-02, -1.604e-01, -3.556e-01, -2.939e-01, -9.160e-02, -7.245e-02, 1.802e-01, 6.241e-02, -1.379e-01) * s0_0_1;
	r1 += M4(-1.121e-01, -2.531e-01, 1.726e-02, -1.787e-01, 7.220e-01, -3.250e-03, 3.446e-01, -3.736e-01, 3.255e-02, 2.623e-01, -8.337e-02, 3.178e-01, 2.783e-01, 3.174e-01, -2.351e-02, -1.000e+00) * s0_0_1;
	r2 += M4(1.829e-01, -1.070e-01, -4.104e-02, 2.418e-01, -7.159e-02, -1.000e+00, 5.872e-02, 7.914e-01, -7.919e-02, -9.163e-02, -2.213e-02, -9.079e-02, 8.313e-02, -8.651e-02, 7.252e-03, -5.114e-01) * s0_0_1;
	r0 += M4(1.956e-02, -1.292e-01, -4.815e-03, 1.892e-02, -6.602e-02, 1.036e-01, 4.014e-02, 1.122e-01, -6.071e-02, -5.279e-01, 1.631e-01, -9.862e-02, 7.648e-02, -3.598e-01, 5.691e-02, -5.834e-02) * s0_0_2;
	r1 += M4(-1.168e-01, 4.838e-02, -2.704e-02, 1.130e-01, 4.480e-01, 2.707e-01, 2.553e-01, -3.730e-01, -9.349e-02, -5.914e-01, -1.232e-01, 1.680e-01, -1.739e-01, -7.643e-02, -5.870e-02, -1.271e-01) * s0_0_2;
	r2 += M4(2.970e-02, 3.863e-01, -1.507e-02, 1.367e-01, 3.254e-01, -3.046e-01, 6.992e-02, -5.254e-01, 1.010e-01, -2.665e-02, 8.975e-02, -2.836e-01, -1.301e-01, -1.226e-01, -4.833e-03, -4.643e-01) * s0_0_2;
	r0 += M4(1.110e-01, 3.500e-01, 6.866e-01, 1.550e-01, 1.000e+00, 5.268e-01, -3.538e-01, -3.240e-01, -1.652e-02, -5.214e-01, -1.701e-01, 2.332e-01, -1.477e-01, -2.144e-01, 4.803e-02, 6.975e-02) * s0_1_0;
	r1 += M4(-1.909e-01, -5.312e-02, -2.314e-01, 8.871e-02, -9.602e-01, 2.928e-01, 4.039e-02, 1.000e+00, -2.382e-01, -6.471e-02, -6.552e-02, 3.641e-01, -1.000e+00, 1.000e+00, -8.866e-01, -1.000e+00) * s0_1_0;
	r2 += M4(4.229e-01, -7.570e-02, 1.224e-01, -3.252e-01, -5.128e-01, -1.509e-01, 8.011e-02, -5.846e-02, 1.545e-01, 3.122e-01, 1.206e-01, 1.661e-01, 3.897e-01, 2.577e-01, 2.351e-01, 1.588e-01) * s0_1_0;
	r0 += M4(-2.837e-02, -1.000e+00, 1.100e-01, 1.699e-01, -1.000e+00, -7.356e-01, 5.777e-01, -9.723e-02, 1.745e-01, -6.082e-01, 4.211e-03, 7.967e-03, 5.482e-02, -8.484e-01, 1.990e-01, -6.186e-02) * s0_1_1;
	r1 += M4(1.448e-01, -4.040e-02, 1.536e-01, 5.830e-02, 2.606e-01, 9.976e-01, -6.440e-01, 1.000e+00, 2.650e-01, 1.421e-01, 2.706e-01, -7.675e-01, -1.889e-01, 3.221e-02, 1.778e-01, -7.419e-01) * s0_1_1;
	r2 += M4(5.160e-02, -1.000e+00, -1.000e+00, -7.881e-01, -8.838e-02, 1.000e+00, -6.338e-02, 7.422e-02, 1.765e-01, 3.584e-01, -1.863e-01, 6.446e-01, -1.762e-02, -1.000e+00, -1.000e+00, 1.698e-01) * s0_1_1;
	r0 += M4(-6.933e-03, -9.388e-02, -5.722e-02, 6.076e-02, 1.341e-01, -5.529e-01, -1.000e+00, -7.993e-02, 1.620e-01, 4.307e-01, 7.700e-02, -7.269e-02, -1.077e-01, 5.615e-01, 8.120e-02, -1.103e-01) * s0_1_2;
	r1 += M4(1.219e-01, -5.438e-02, 6.962e-02, 1.012e-01, 2.604e-01, -2.417e-01, 3.317e-03, 1.000e+00, -5.966e-01, -2.338e-01, 2.035e-01, -4.057e-01, -7.590e-02, -1.628e-01, -8.225e-02, -5.835e-02) * s0_1_2;
	r2 += M4(9.929e-02, -8.896e-02, -2.247e-01, -1.910e-01, 2.635e-01, -1.000e+00, -2.160e-01, -1.000e+00, 8.570e-02, 4.682e-01, 3.080e-01, -1.646e-01, -1.155e-01, -4.716e-01, 3.435e-01, -2.897e-01) * s0_1_2;
	r0 += M4(-1.474e-02, -1.717e-01, 1.370e-01, 2.754e-01, 2.727e-01, -6.106e-01, -1.000e+00, -2.279e-01, -5.824e-02, 4.822e-02, 6.140e-02, 6.026e-02, -4.251e-01, -1.000e+00, -3.666e-01, -7.017e-02) * s0_2_0;
	r1 += M4(1.746e-01, -2.909e-01, -3.677e-02, 1.656e-01, -5.376e-01, -1.000e+00, -7.047e-01, 1.764e-01, 1.588e-01, -2.091e-01, 2.467e-02, -3.391e-02, -7.276e-01, 2.527e-01, 1.841e-01, 7.258e-01) * s0_2_0;
	r2 += M4(3.300e-01, 1.889e-01, 3.473e-02, -1.264e-01, 7.036e-01, -3.439e-01, -2.432e-01, -3.788e-01, -8.308e-03, -1.397e-01, -5.207e-02, -3.029e-01, -2.872e-01, -1.535e-01, 4.314e-02, -7.671e-02) * s0_2_0;
	r0 += M4(6.269e-02, -7.086e-01, -7.502e-02, -5.242e-02, 4.002e-01, -1.000e+00, -2.778e-01, 8.652e-01, 7.684e-02, 8.574e-01, -3.557e-02, -3.304e-01, -1.182e-01, -5.581e-01, 1.898e-02, -1.525e-01) * s0_2_1;
	r1 += M4(-1.949e-02, -1.855e-01, 1.612e-01, 7.187e-02, 1.000e+00, -1.000e+00, 1.000e+00, 3.397e-01, -5.466e-03, 3.054e-01, 6.015e-02, -2.905e-02, 9.548e-02, 1.851e-01, 1.567e-01, 3.753e-01) * s0_2_1;
	r2 += M4(4.360e-02, 2.510e-01, 7.034e-02, 1.045e-01, -9.292e-01, -3.765e-01, 1.546e-01, -3.791e-01, -2.351e-01, -5.481e-01, -6.622e-02, 1.509e-01, -3.467e-02, -6.620e-01, 2.140e-01, 7.576e-02) * s0_2_1;
	r0 += M4(1.956e-02, -2.065e-01, -6.350e-02, -5.880e-02, 2.243e-01, 1.000e+00, -1.000e+00, -1.681e-01, -4.591e-02, 7.243e-01, 1.159e-01, 9.956e-02, -2.579e-02, 6.002e-02, 1.122e-01, 1.892e-03) * s0_2_2;
	r1 += M4(-1.627e-01, 1.492e-02, 6.811e-02, -1.459e-01, 1.000e+00, -1.000e+00, 1.485e-01, 3.660e-01, 3.552e-01, -3.920e-02, -2.004e-01, -1.252e-01, 1.056e-01, -1.188e-04, -1.435e-01, -2.317e-01) * s0_2_2;
	r2 += M4(2.321e-03, -2.594e-01, 6.949e-02, 3.404e-02, 2.825e-03, 5.950e-01, 3.239e-01, 1.000e+00, -1.241e-01, 4.310e-02, -2.440e-02, 3.080e-01, -1.287e-01, 3.933e-02, -2.032e-02, 3.093e-01) * s0_2_2;
	r0 += V4(5.541e-03, -2.474e-02, 5.547e-03, -3.326e-03);
	r0 = clamp(r0, V4(0.0), V4(1.0));
	imageStore(out_image, opos + ivec2(0, 0), vec4(r0));
	r1 += V4(-4.390e-03, -4.099e-03, 2.687e-03, -3.581e-03);
	r1 = clamp(r1, V4(0.0), V4(1.0));
	imageStore(out_image, opos + ivec2(1, 0), vec4(r1));
	r2 += V4(9.665e-03, 1.349e-02, 3.283e-03, -1.162e-03);
	r2 = clamp(r2, V4(0.0), V4(1.0));
	imageStore(out_image, opos + ivec2(2, 0), vec4(r2));
}

//!DESC CuNNy-4x12-conv2
//!HOOK LUMA
//!COMPUTE 24 8 8 8
//!BIND conv1
//!BIND LUMA
//!SAVE conv2
//!WIDTH LUMA.w 3 *
//!HEIGHT LUMA.h
//!COMPONENTS 4
//!WHEN OUTPUT.w LUMA.w / 1.3 > OUTPUT.h LUMA.h / 1.3 > *
#extension GL_EXT_shader_explicit_arithmetic_types_float16 : enable
#ifdef GL_EXT_shader_explicit_arithmetic_types_float16
#	define V4 f16vec4
#	define M4 f16mat4
#	define F float16_t
#else
#	define V4 vec4
#	define M4 mat4
#	define F float
#endif
#define l0(x, y) V4((conv1_mul * texelFetch(conv1_raw, clamp(pos + ivec2(x, y), ivec2(0), sz) * ivec2(3, 1) + ivec2(0, 0), 0)))
#define l1(x, y) V4((conv1_mul * texelFetch(conv1_raw, clamp(pos + ivec2(x, y), ivec2(0), sz) * ivec2(3, 1) + ivec2(1, 0), 0)))
#define l2(x, y) V4((conv1_mul * texelFetch(conv1_raw, clamp(pos + ivec2(x, y), ivec2(0), sz) * ivec2(3, 1) + ivec2(2, 0), 0)))
shared V4 G[3][10][10];
void hook() {
	ivec2 xy = ivec2(gl_LocalInvocationID.xy);
	ivec2 pos = ivec2(gl_WorkGroupID.xy) * ivec2(8, 8) + xy;
	ivec2 opos = pos * ivec2(3, 1);
	ivec2 sz = ivec2(LUMA_size) - ivec2(1);
	for (int y = 0; y < 10; y += 8) {
		int ay = xy.y + y;
		if (ay >= 10) break;
		for (int x = 0; x < 10; x += 8) {
			int ax = xy.x + x;
			if (ax >= 10) break;
			G[0][ay][ax] = l0(x - 1, y - 1);
			G[1][ay][ax] = l1(x - 1, y - 1);
			G[2][ay][ax] = l2(x - 1, y - 1);
		}
	}
	barrier();
	V4 s0_0_0, s0_0_1, s0_0_2, s0_1_0, s0_1_1, s0_1_2, s0_2_0, s0_2_1, s0_2_2, s1_0_0, s1_0_1, s1_0_2, s1_1_0, s1_1_1, s1_1_2, s1_2_0, s1_2_1, s1_2_2;
	V4 r0, r1, r2;
	r0 = V4(0.0); r1 = V4(0.0); r2 = V4(0.0);
	s0_0_0 = G[0][xy.y+0][xy.x+0]; s0_0_1 = G[0][xy.y+0][xy.x+1];
	s0_0_2 = G[0][xy.y+0][xy.x+2]; s0_1_0 = G[0][xy.y+1][xy.x+0];
	s0_1_1 = G[0][xy.y+1][xy.x+1]; s0_1_2 = G[0][xy.y+1][xy.x+2];
	s0_2_0 = G[0][xy.y+2][xy.x+0]; s0_2_1 = G[0][xy.y+2][xy.x+1];
	s0_2_2 = G[0][xy.y+2][xy.x+2]; s1_0_0 = G[1][xy.y+0][xy.x+0];
	s1_0_1 = G[1][xy.y+0][xy.x+1]; s1_0_2 = G[1][xy.y+0][xy.x+2];
	s1_1_0 = G[1][xy.y+1][xy.x+0]; s1_1_1 = G[1][xy.y+1][xy.x+1];
	s1_1_2 = G[1][xy.y+1][xy.x+2]; s1_2_0 = G[1][xy.y+2][xy.x+0];
	s1_2_1 = G[1][xy.y+2][xy.x+1]; s1_2_2 = G[1][xy.y+2][xy.x+2];
	r0 += M4(-4.982e-02, 6.062e-02, -1.430e-02, -1.499e-02, 7.739e-02, 1.820e-01, 1.995e-01, -5.805e-02, -1.823e-03, -1.329e-01, 2.789e-01, 3.924e-02, 8.279e-03, -1.295e-01, 3.375e-02, 7.349e-02) * s0_0_0;
	r1 += M4(-1.466e-01, 1.084e-02, -4.867e-03, 9.513e-02, 1.436e-01, -1.548e-01, -6.323e-02, 3.819e-03, 1.145e-01, 4.853e-02, -2.042e-02, -1.700e-01, 1.889e-01, 1.297e-01, -6.002e-02, 3.248e-01) * s0_0_0;
	r2 += M4(7.923e-03, 3.819e-01, 3.559e-02, -7.389e-02, 5.661e-02, -2.437e-01, 5.118e-02, 1.922e-02, -2.409e-02, -1.940e-01, -5.811e-02, 1.233e-01, -1.882e-01, -1.387e-01, -2.065e-01, -7.021e-02) * s0_0_0;
	r0 += M4(2.189e-02, -6.571e-02, 2.325e-01, 5.040e-02, 9.591e-02, 8.862e-02, 2.539e-03, 8.812e-02, -1.029e-01, 2.084e-01, 9.700e-02, -2.841e-02, 1.638e-02, -9.376e-01, 4.146e-01, 1.619e-02) * s0_0_1;
	r1 += M4(2.185e-01, 2.312e-02, -2.520e-02, -8.026e-02, 2.025e-01, -1.866e-01, -2.056e-01, 1.409e-01, -3.226e-01, 5.839e-02, 3.292e-02, -4.977e-02, 2.570e-01, 3.111e-01, -8.624e-02, -2.375e-01) * s0_0_1;
	r2 += M4(-2.900e-02, -6.714e-02, -1.197e-01, 6.387e-03, -2.698e-01, -1.797e-01, -2.018e-01, -3.982e-01, 8.899e-02, 2.832e-03, 1.972e-01, 1.039e-01, -9.134e-02, 6.253e-01, -1.007e-01, 2.456e-01) * s0_0_1;
	r0 += M4(-2.669e-02, -1.782e-01, -2.324e-01, 5.243e-02, 4.747e-03, 2.666e-02, 3.438e-01, -3.501e-02, -8.877e-04, 2.056e-01, 4.869e-01, 2.902e-02, 4.285e-02, -4.987e-01, -1.280e-01, 7.220e-02) * s0_0_2;
	r1 += M4(-9.134e-02, -5.254e-02, -9.321e-03, 1.039e-01, 4.747e-02, -2.320e-01, -3.392e-03, 7.444e-02, 1.481e-01, 5.705e-02, 3.350e-02, 8.385e-03, -2.242e-01, -1.915e-02, -5.494e-03, 9.497e-02) * s0_0_2;
	r2 += M4(8.890e-03, 1.976e-02, -1.594e-01, 1.171e-02, 1.739e-02, -2.573e-01, -8.063e-02, -2.459e-02, 4.971e-02, 8.263e-02, 1.378e-01, 1.573e-02, 1.106e-01, -1.527e-01, -3.281e-01, 1.460e-01) * s0_0_2;
	r0 += M4(1.327e-03, 7.901e-02, 3.783e-01, 1.567e-02, 7.893e-02, 1.539e-01, -1.640e-01, 1.723e-01, -2.484e-02, -5.957e-02, 1.822e-04, 4.255e-02, 4.942e-02, -4.196e-02, -2.790e-01, -7.358e-03) * s0_1_0;
	r1 += M4(-2.066e-01, 6.985e-02, -3.768e-03, -1.962e-02, 3.935e-01, 5.663e-03, -2.933e-01, 1.181e-02, -7.687e-03, -1.248e-01, 8.858e-02, -2.891e-02, 7.153e-02, -3.162e-02, 1.205e-01, -1.577e-01) * s0_1_0;
	r2 += M4(-5.952e-02, 4.201e-01, 1.211e-01, -1.458e-01, -5.083e-03, -2.516e-01, -3.760e-01, -2.843e-01, -1.452e-01, 2.144e-01, 3.065e-02, -2.297e-01, 3.027e-03, -1.286e-01, 2.571e-02, -1.906e-01) * s0_1_0;
	r0 += M4(-6.078e-02, -7.781e-01, 7.688e-01, 1.714e-01, -1.072e-01, 1.241e-01, -8.356e-01, 7.670e-03, 5.140e-02, -8.379e-02, -6.518e-02, 6.877e-02, -4.033e-01, 9.733e-01, 7.794e-01, 1.697e-01) * s0_1_1;
	r1 += M4(2.090e-01, 3.017e-01, -8.947e-02, 5.884e-02, 3.487e-01, -1.035e-01, -2.520e-03, -2.497e-01, -7.209e-02, -2.676e-01, 5.559e-02, 1.538e-02, -2.862e-01, -1.289e-01, 1.000e+00, 4.795e-01) * s0_1_1;
	r2 += M4(3.742e-02, 3.247e-01, -2.795e-01, -2.043e-01, -2.284e-02, -1.058e-01, -1.715e-01, -1.071e-01, 2.714e-01, 4.129e-01, -2.011e-01, 1.685e-01, 4.230e-01, 2.037e-01, 1.851e-01, -1.000e+00) * s0_1_1;
	r0 += M4(-7.241e-02, 1.185e-01, -2.010e-01, -6.859e-02, -6.817e-02, 8.857e-02, 4.940e-01, 3.794e-02, 5.085e-02, -5.983e-01, -2.445e-01, 1.744e-01, 9.684e-02, 3.292e-01, 4.402e-02, 2.305e-03) * s0_1_2;
	r1 += M4(-3.252e-01, -6.079e-02, 1.596e-01, -2.099e-02, 6.642e-02, -1.144e-01, 5.571e-02, 1.731e-01, 1.746e-01, -1.264e-01, 1.164e-01, 3.719e-01, 6.932e-02, 1.281e-01, 8.365e-02, -2.621e-01) * s0_1_2;
	r2 += M4(4.323e-02, -3.365e-02, -2.282e-01, -1.346e-01, 9.397e-02, -1.741e-01, 8.477e-02, 4.228e-02, 1.714e-01, -1.451e-01, -1.740e-01, -1.286e-01, 1.585e-01, 2.731e-01, 1.596e-01, -5.967e-02) * s0_1_2;
	r0 += M4(6.167e-02, -9.821e-02, -2.456e-01, -7.148e-02, -4.378e-02, 2.251e-01, 4.288e-01, -1.096e-01, -8.030e-02, 4.844e-02, 9.077e-01, 1.906e-02, 2.895e-02, -5.134e-02, -6.109e-01, -1.237e-02) * s0_2_0;
	r1 += M4(-9.968e-02, -8.369e-02, -1.397e-01, -8.816e-02, 8.805e-02, -8.191e-04, 1.008e-01, 1.350e-01, -1.754e-01, -1.121e-01, -5.690e-02, -1.387e-02, 1.357e-01, 3.378e-02, -4.328e-02, -1.565e-02) * s0_2_0;
	r2 += M4(-9.839e-02, 1.537e-01, 1.664e-01, 1.520e-01, 1.172e-01, -4.070e-01, -1.077e-01, -1.915e-01, -1.097e-01, 3.961e-01, 1.564e-01, -1.940e-01, 1.452e-02, -2.861e-01, -8.750e-03, 1.749e-01) * s0_2_0;
	r0 += M4(4.703e-01, -1.843e-01, 2.450e-01, 1.391e-01, -1.766e-01, 1.667e-01, 2.659e-01, 4.682e-02, 3.117e-02, 2.161e-01, 4.381e-01, 7.681e-02, 1.391e-01, -2.315e-01, 6.885e-01, 1.015e-01) * s0_2_1;
	r1 += M4(1.395e-01, 9.220e-02, -1.000e+00, -3.251e-01, -3.132e-02, 4.620e-03, 1.523e-01, 2.245e-01, 5.175e-01, 6.524e-02, -2.554e-01, 9.734e-02, -1.528e-01, 1.611e-03, -2.310e-01, -1.276e-01) * s0_2_1;
	r2 += M4(-7.255e-03, 3.419e-01, 4.298e-01, -8.512e-01, 8.662e-02, -3.371e-01, -7.707e-02, 2.004e-01, 3.577e-02, -1.128e-02, -2.122e-01, 9.683e-01, -9.465e-02, 1.447e-01, 2.158e-01, -3.419e-01) * s0_2_1;
	r0 += M4(1.604e-01, 4.854e-02, -5.307e-01, 1.565e-01, 6.811e-02, -1.593e-02, 2.825e-01, -6.688e-03, 2.026e-01, 1.752e-02, -7.247e-01, 3.661e-01, -9.882e-02, 1.147e-01, 3.760e-01, -6.319e-02) * s0_2_2;
	r1 += M4(-1.397e-01, -1.087e-01, -7.373e-02, -1.478e-01, 1.597e-01, 9.834e-03, 4.229e-03, -5.735e-02, -2.476e-01, -2.975e-03, -2.056e-01, 2.367e-01, 9.517e-03, 2.192e-04, 1.066e-01, -9.855e-02) * s0_2_2;
	r2 += M4(-5.601e-02, 1.761e-02, 1.126e-01, 4.126e-02, -2.995e-02, -6.491e-02, -4.240e-02, 6.025e-02, 4.282e-02, -1.943e-01, 2.640e-02, -8.325e-02, 8.190e-02, 7.765e-02, -4.136e-02, -4.742e-02) * s0_2_2;
	r0 += M4(5.192e-02, 2.937e-01, -5.787e-03, 7.901e-02, 1.548e-02, -5.947e-02, 2.376e-01, -1.728e-02, 1.204e-01, 8.990e-02, -1.078e-01, 1.022e-02, 4.889e-03, -1.434e-02, -3.668e-01, -2.733e-03) * s1_0_0;
	r1 += M4(9.503e-02, 1.030e-01, -2.390e-01, 3.517e-01, 1.433e-01, 1.284e-01, -2.960e-02, -6.868e-02, 1.720e-01, -1.254e-01, -7.616e-03, -1.243e-01, 2.175e-02, -4.035e-02, -7.213e-04, 5.036e-03) * s1_0_0;
	r2 += M4(-4.953e-02, 1.094e-01, -6.943e-02, -1.303e-02, -1.082e-03, -5.968e-02, -7.887e-02, -2.517e-02, 9.742e-02, -4.912e-01, -2.581e-03, 9.705e-02, -2.719e-02, 1.305e-01, 2.080e-02, 1.215e-01) * s1_0_0;
	r0 += M4(2.252e-02, -1.360e-02, 1.509e-01, 6.864e-02, -1.047e-01, -2.605e-03, -2.888e-01, 6.860e-04, -5.727e-02, 3.293e-01, -4.302e-01, -5.748e-02, 1.689e-02, -1.120e-01, -1.621e-01, -9.644e-03) * s1_0_1;
	r1 += M4(-9.682e-02, -3.096e-02, -9.316e-02, -9.186e-02, -1.804e-01, -4.923e-02, -2.107e-02, 5.792e-02, -3.111e-01, -2.778e-02, 6.083e-02, 1.523e-01, 1.053e-01, -1.279e-01, 8.510e-02, -8.633e-02) * s1_0_1;
	r2 += M4(-6.452e-02, 2.466e-01, -7.175e-02, -8.044e-02, 7.660e-03, 9.383e-02, 1.923e-01, 1.663e-01, 8.994e-02, -6.215e-02, 1.955e-01, 8.948e-02, -1.722e-01, 3.909e-02, -1.204e-02, 1.228e-01) * s1_0_1;
	r0 += M4(-3.967e-02, 1.121e-01, -2.261e-01, -4.313e-03, -3.685e-03, -1.334e-01, 6.916e-02, 4.579e-02, 3.275e-02, 1.690e-01, -2.312e-02, -1.317e-01, -4.145e-03, -2.375e-01, -2.001e-01, 4.126e-02) * s1_0_2;
	r1 += M4(1.410e-02, 3.825e-02, -3.091e-03, 1.595e-02, 1.185e-01, -1.948e-03, -1.796e-02, 1.291e-01, 9.520e-02, -2.725e-02, 7.758e-02, -1.812e-01, 5.563e-02, 2.601e-02, -1.609e-02, -4.028e-02) * s1_0_2;
	r2 += M4(2.030e-01, 9.666e-03, -8.159e-02, 1.440e-01, -4.286e-02, -9.401e-02, -4.276e-02, -5.302e-02, -1.940e-01, -6.432e-02, 2.037e-01, -1.711e-01, -9.344e-02, -8.568e-02, -5.531e-02, 7.022e-02) * s1_0_2;
	r0 += M4(-1.751e-02, -1.185e-01, 5.965e-01, 4.069e-02, 4.645e-02, 1.389e-01, 4.410e-01, -5.530e-02, -9.740e-02, 4.542e-02, -2.958e-01, -7.687e-02, -5.457e-02, -2.493e-02, 2.577e-01, 5.780e-02) * s1_1_0;
	r1 += M4(-1.360e-01, -6.791e-03, 9.379e-02, 1.838e-01, 2.755e-02, 1.110e-01, 2.505e-01, -5.414e-02, -1.661e-01, -1.781e-01, -1.338e-01, -1.566e-01, 1.660e-02, 1.832e-02, -3.359e-02, -2.801e-02) * s1_1_0;
	r2 += M4(6.952e-02, 3.980e-01, -3.254e-02, -5.823e-01, 7.790e-02, -4.424e-01, -3.714e-02, -1.290e-01, 4.628e-02, -1.229e-01, -3.167e-02, 3.702e-01, 1.221e-01, -5.464e-01, 6.517e-03, 4.762e-02) * s1_1_0;
	r0 += M4(-2.472e-02, 1.370e-01, 5.153e-01, 4.064e-02, 2.386e-02, 2.045e-01, -2.373e-01, -1.348e-02, 1.729e-01, 3.304e-01, -1.000e+00, -5.054e-02, -1.261e-01, 4.234e-01, -2.497e-01, 5.046e-03) * s1_1_1;
	r1 += M4(2.122e-01, 3.120e-01, -2.129e-01, 8.189e-02, -1.408e-02, -3.663e-01, -8.815e-02, -4.654e-01, 8.340e-01, 1.922e-01, -2.266e-01, 1.701e-01, -3.841e-04, 4.526e-02, -5.337e-02, -2.401e-01) * s1_1_1;
	r2 += M4(2.148e-01, 1.156e-01, -7.071e-01, 2.706e-01, -1.625e-01, -8.332e-03, 9.581e-02, 4.319e-01, 1.790e-01, -5.809e-01, -6.728e-01, 1.000e+00, -9.894e-02, 2.018e-02, 1.628e-01, -2.981e-01) * s1_1_1;
	r0 += M4(-6.056e-02, 4.594e-02, 1.712e-01, 1.588e-02, 9.890e-02, -7.416e-03, -4.656e-01, -2.825e-03, 1.848e-01, -3.103e-01, -1.606e-02, 3.301e-02, 6.523e-03, -1.147e-01, 1.894e-01, -1.647e-02) * s1_1_2;
	r1 += M4(-7.056e-02, 4.918e-02, -2.178e-02, -6.681e-02, 1.284e-03, -4.977e-02, 4.517e-02, 2.738e-03, 8.137e-02, -1.733e-01, -1.923e-01, 2.586e-01, -9.804e-02, -6.348e-02, 4.131e-02, -2.767e-02) * s1_1_2;
	r2 += M4(9.474e-02, 7.796e-02, -9.083e-02, 2.367e-01, -7.141e-02, 1.206e-01, 1.725e-01, -2.440e-01, -5.835e-01, -2.271e-01, 5.810e-02, -2.666e-01, 1.226e-01, 1.147e-01, 6.425e-02, 9.421e-02) * s1_1_2;
	r0 += M4(2.077e-02, 8.681e-02, -8.057e-02, -4.871e-02, -5.328e-03, 8.892e-02, 8.297e-02, -4.445e-02, 2.041e-02, -6.609e-02, -1.097e-01, -7.972e-02, -7.566e-02, -2.485e-02, -3.359e-01, -2.240e-02) * s1_2_0;
	r1 += M4(-2.293e-01, 9.593e-02, -1.663e-01, 4.254e-02, -9.103e-02, -3.934e-02, 2.029e-02, 5.742e-02, 1.666e-02, -4.074e-03, -6.516e-02, -7.277e-03, 5.359e-02, -9.729e-02, -7.574e-03, -1.895e-02) * s1_2_0;
	r2 += M4(8.463e-03, 2.430e-01, 1.158e-01, -1.378e-01, 2.520e-03, 3.146e-01, 1.006e-01, -8.675e-02, 3.528e-02, -3.624e-01, -2.671e-02, -2.242e-01, 3.523e-02, -2.858e-01, -1.491e-01, -2.741e-01) * s1_2_0;
	r0 += M4(-4.419e-02, 9.775e-02, 7.241e-01, -6.552e-02, -5.378e-02, 1.800e-01, -8.411e-01, 5.244e-02, 2.161e-01, -7.292e-02, 9.786e-02, -2.265e-02, -1.667e-01, 1.006e-01, -1.863e-01, -1.353e-01) * s1_2_1;
	r1 += M4(-1.808e-01, 8.749e-02, -8.205e-02, 2.266e-02, 1.233e-01, -1.612e-02, 2.091e-01, 5.127e-03, -1.570e-01, -8.617e-02, -3.956e-01, -3.086e-02, 8.093e-02, -1.053e-01, 8.996e-03, 1.897e-01) * s1_2_1;
	r2 += M4(1.310e-01, 2.491e-01, 1.342e-01, -1.012e-01, -2.983e-02, -1.921e-01, -2.064e-01, 2.971e-01, -6.307e-02, -9.275e-02, 1.383e-01, 3.900e-01, -2.076e-01, 3.855e-02, -1.109e-01, 2.935e-02) * s1_2_1;
	r0 += M4(-1.177e-02, 9.526e-02, 9.029e-01, -2.705e-02, 2.291e-02, 7.132e-02, 2.302e-01, 2.009e-01, -9.234e-02, 1.557e-02, -2.871e-01, -1.665e-01, 4.724e-02, 8.979e-02, -2.852e-01, -2.548e-02) * s1_2_2;
	r1 += M4(-5.854e-02, 6.802e-03, -3.421e-02, -1.215e-01, -4.773e-02, 1.822e-02, 4.916e-02, 1.041e-01, 5.588e-02, 4.348e-02, 5.532e-02, -4.468e-02, 8.816e-03, -2.395e-02, 8.762e-02, -4.939e-02) * s1_2_2;
	r2 += M4(-2.819e-02, 6.877e-02, -6.240e-02, 8.398e-02, -1.306e-02, -1.344e-01, 4.952e-02, -5.393e-02, 8.333e-02, 2.708e-02, -3.268e-02, 2.523e-01, 4.372e-02, -3.610e-02, 1.278e-01, -2.140e-01) * s1_2_2;
	s0_0_0 = G[2][xy.y+0][xy.x+0]; s0_0_1 = G[2][xy.y+0][xy.x+1];
	s0_0_2 = G[2][xy.y+0][xy.x+2]; s0_1_0 = G[2][xy.y+1][xy.x+0];
	s0_1_1 = G[2][xy.y+1][xy.x+1]; s0_1_2 = G[2][xy.y+1][xy.x+2];
	s0_2_0 = G[2][xy.y+2][xy.x+0]; s0_2_1 = G[2][xy.y+2][xy.x+1];
	s0_2_2 = G[2][xy.y+2][xy.x+2];
	r0 += M4(5.092e-03, 1.868e-01, -1.340e-01, -3.843e-02, 2.378e-03, 3.839e-01, 5.560e-01, -4.907e-02, -5.044e-02, -2.009e-01, -2.229e-01, -8.930e-03, 3.141e-02, -6.870e-02, -3.228e-01, -2.889e-02) * s0_0_0;
	r1 += M4(-7.339e-02, -1.109e-01, 7.013e-02, 1.295e-01, -2.449e-01, 1.628e-01, 2.890e-03, -2.563e-03, -1.281e-01, 2.366e-01, -1.086e-02, 4.799e-01, -1.290e-01, -1.724e-01, -6.037e-02, -1.364e-01) * s0_0_0;
	r2 += M4(5.088e-02, 5.131e-03, 6.958e-02, -1.150e-01, 5.279e-02, 9.670e-02, 2.444e-01, 6.217e-03, -5.625e-02, 9.006e-03, -1.722e-01, -1.782e-01, 8.174e-03, -4.354e-01, 5.318e-02, 2.710e-02) * s0_0_0;
	r0 += M4(5.887e-02, 2.813e-01, 3.332e-01, -1.035e-02, -2.684e-02, 4.655e-02, 3.883e-01, 2.732e-02, -3.949e-02, -3.484e-01, 2.564e-01, -5.736e-02, -3.688e-02, 3.840e-01, -2.345e-02, 4.160e-03) * s0_0_1;
	r1 += M4(3.528e-02, -5.039e-02, 4.043e-02, -4.258e-01, 5.392e-02, 1.202e-01, 2.913e-02, 3.500e-02, 8.087e-02, 1.127e-01, 6.489e-02, 7.345e-02, -1.274e-01, -2.298e-01, -7.319e-02, -2.130e-01) * s0_0_1;
	r2 += M4(-9.938e-02, 5.585e-03, 1.304e-01, -1.381e-01, 4.840e-02, 2.040e-01, 1.054e-01, 1.346e-01, -1.223e-01, 1.439e-01, -9.308e-02, 7.443e-02, 1.465e-01, 7.808e-02, 2.752e-01, 6.385e-02) * s0_0_1;
	r0 += M4(-4.410e-02, 1.478e-01, 1.160e-01, 3.977e-02, -1.373e-02, -2.314e-02, -2.296e-01, -3.751e-02, 8.022e-02, -1.508e-01, -1.915e-02, -1.438e-02, 3.206e-02, 1.277e-01, 2.235e-02, -5.209e-02) * s0_0_2;
	r1 += M4(-1.879e-02, 1.082e-01, -9.548e-02, 5.219e-02, -1.371e-01, -6.397e-03, 5.901e-02, 6.465e-02, 2.091e-02, 1.508e-02, -2.539e-02, 3.114e-03, 1.557e-01, -1.297e-02, 4.810e-02, -4.231e-02) * s0_0_2;
	r2 += M4(1.165e-01, -2.203e-02, 2.791e-02, 1.062e-01, 4.185e-02, -6.211e-02, 1.138e-02, -1.161e-02, -6.182e-02, 3.263e-02, -6.613e-02, 1.436e-01, -4.244e-02, -1.404e-01, 1.402e-02, -1.061e-01) * s0_0_2;
	r0 += M4(-2.207e-02, 7.755e-02, -8.031e-01, -1.333e-01, 3.788e-02, 3.976e-01, -5.564e-01, -7.094e-02, -6.211e-02, -2.899e-01, 4.749e-02, 3.096e-01, -3.946e-02, 1.017e-01, -1.032e-01, -3.619e-02) * s0_1_0;
	r1 += M4(7.962e-03, 1.212e-01, -4.030e-02, -6.772e-02, -2.393e-01, -9.092e-02, 7.145e-02, 4.317e-02, -6.222e-02, 3.618e-01, 2.886e-01, -1.770e-02, -1.256e-01, -3.295e-01, -4.392e-02, 8.616e-02) * s0_1_0;
	r2 += M4(3.141e-01, -2.232e-01, 9.933e-03, 3.504e-01, 1.540e-01, 1.538e-02, -2.318e-02, 2.481e-01, -2.192e-01, -1.010e-01, 8.010e-02, -1.000e+00, 1.132e-01, -4.193e-01, 4.163e-02, -2.463e-02) * s0_1_0;
	r0 += M4(2.256e-02, -9.944e-02, -9.970e-02, -2.783e-01, 1.464e-01, 2.915e-02, 1.684e-01, 9.309e-02, 6.855e-01, -3.907e-01, 2.861e-01, -3.428e-02, -3.545e-02, -6.714e-02, -9.585e-01, -1.083e-01) * s0_1_1;
	r1 += M4(1.229e-02, -4.560e-01, -4.585e-01, -2.308e-01, 1.344e-01, 1.727e-01, 1.292e-01, 9.926e-02, -1.602e-01, 4.145e-01, 9.006e-03, -6.426e-01, 5.050e-02, -2.970e-01, 3.349e-02, 1.945e-02) * s0_1_1;
	r2 += M4(-2.972e-01, -2.024e-01, 2.095e-01, 1.425e-01, -4.678e-01, 2.266e-02, 9.579e-02, -6.715e-01, -5.115e-01, 2.336e-01, 1.080e-02, -6.426e-01, -3.507e-01, -2.850e-01, -9.108e-02, 1.849e-01) * s0_1_1;
	r0 += M4(-1.594e-01, 1.695e-01, 4.114e-01, 6.756e-02, 4.665e-02, 9.148e-02, 1.765e-01, 6.142e-02, -2.678e-02, -3.238e-02, 1.048e-01, 3.006e-02, 1.085e-02, -7.254e-02, -2.904e-02, 1.261e-02) * s0_1_2;
	r1 += M4(-2.781e-01, -1.109e-01, 6.271e-02, -1.606e-02, -1.786e-01, -9.442e-03, 1.135e-01, -4.895e-03, -2.024e-01, 6.436e-02, 6.841e-02, -7.865e-02, 5.380e-02, -6.940e-02, 7.529e-03, 4.140e-02) * s0_1_2;
	r2 += M4(3.667e-01, 1.823e-02, 8.642e-03, 6.412e-02, -1.221e-01, -1.397e-02, 5.800e-02, 1.082e-01, 1.805e-02, 4.455e-02, 4.279e-03, 1.441e-01, -5.458e-02, -2.781e-01, 7.448e-02, -6.862e-03) * s0_1_2;
	r0 += M4(8.895e-02, -1.160e-01, -8.549e-01, 5.921e-02, -5.012e-03, 2.448e-01, 2.841e-02, 2.553e-02, -2.424e-02, 9.835e-03, -8.461e-01, -1.107e-02, -3.311e-02, -1.468e-01, -9.315e-01, -7.340e-03) * s0_2_0;
	r1 += M4(9.077e-02, 1.126e-01, -8.743e-02, 9.945e-02, -6.836e-02, -4.616e-02, 2.797e-01, 1.365e-01, -9.120e-02, 3.993e-02, -1.957e-01, -7.986e-02, -2.633e-02, -1.678e-01, -1.626e-01, 2.418e-02) * s0_2_0;
	r2 += M4(-1.681e-02, -4.235e-01, -1.580e-01, 2.538e-01, 1.388e-01, 5.166e-02, -3.595e-02, 1.243e-01, -7.519e-02, -8.355e-02, -1.130e-02, -3.916e-01, 5.264e-02, -1.240e-01, -1.028e-01, 2.783e-01) * s0_2_0;
	r0 += M4(-4.392e-02, -6.144e-01, -9.254e-01, 6.658e-02, 1.001e-02, 1.778e-01, -4.648e-01, 2.066e-02, 1.913e-01, 3.976e-04, -1.214e-01, -2.596e-01, -4.128e-02, -2.376e-02, -6.764e-01, 9.469e-02) * s0_2_1;
	r1 += M4(-3.486e-01, 2.666e-01, 2.040e-01, 1.643e-01, 1.396e-01, 1.079e-01, 1.420e-02, 1.058e-01, -5.813e-03, 4.536e-02, -1.641e-01, -5.141e-02, 9.779e-03, 1.203e-02, 1.379e-02, 1.604e-01) * s0_2_1;
	r2 += M4(-7.925e-02, -1.868e-01, -2.920e-01, -4.184e-01, -2.456e-03, -3.510e-02, 1.562e-02, 9.359e-02, -1.528e-01, 2.195e-01, 5.066e-03, 2.627e-01, -1.710e-02, -1.211e-01, -6.255e-02, 3.971e-01) * s0_2_1;
	r0 += M4(-3.040e-02, -3.820e-04, -3.338e-01, 3.044e-01, 7.020e-02, 2.864e-02, 3.462e-01, 6.235e-02, -3.902e-03, 1.244e-01, 5.433e-02, -2.445e-02, -5.623e-03, 2.423e-02, -2.276e-01, 8.421e-02) * s0_2_2;
	r1 += M4(1.699e-01, 3.547e-02, -1.859e-01, 2.529e-01, -2.326e-02, -1.333e-02, 2.827e-02, -2.524e-02, 4.213e-02, 1.954e-02, 3.717e-02, 5.673e-03, 3.403e-04, 3.547e-02, -2.600e-02, 5.661e-03) * s0_2_2;
	r2 += M4(9.101e-02, -5.753e-03, -8.442e-02, 3.621e-01, -8.213e-02, 7.267e-02, 9.264e-02, 3.840e-02, 2.474e-02, 4.742e-02, -6.517e-03, -9.140e-02, 5.684e-02, -6.513e-02, -5.854e-02, -7.003e-02) * s0_2_2;
	r0 += V4(-2.887e-03, -1.102e-02, -2.625e-02, -4.158e-03);
	r0 = clamp(r0, V4(0.0), V4(1.0));
	imageStore(out_image, opos + ivec2(0, 0), vec4(r0));
	r1 += V4(-3.549e-03, -9.179e-03, 5.907e-03, -1.126e-02);
	r1 = clamp(r1, V4(0.0), V4(1.0));
	imageStore(out_image, opos + ivec2(1, 0), vec4(r1));
	r2 += V4(-9.801e-03, -8.412e-03, -7.580e-03, -1.980e-02);
	r2 = clamp(r2, V4(0.0), V4(1.0));
	imageStore(out_image, opos + ivec2(2, 0), vec4(r2));
}

//!DESC CuNNy-4x12-conv3
//!HOOK LUMA
//!COMPUTE 24 8 8 8
//!BIND conv2
//!BIND LUMA
//!SAVE conv3
//!WIDTH LUMA.w 3 *
//!HEIGHT LUMA.h
//!COMPONENTS 4
//!WHEN OUTPUT.w LUMA.w / 1.3 > OUTPUT.h LUMA.h / 1.3 > *
#extension GL_EXT_shader_explicit_arithmetic_types_float16 : enable
#ifdef GL_EXT_shader_explicit_arithmetic_types_float16
#	define V4 f16vec4
#	define M4 f16mat4
#	define F float16_t
#else
#	define V4 vec4
#	define M4 mat4
#	define F float
#endif
#define l0(x, y) V4((conv2_mul * texelFetch(conv2_raw, clamp(pos + ivec2(x, y), ivec2(0), sz) * ivec2(3, 1) + ivec2(0, 0), 0)))
#define l1(x, y) V4((conv2_mul * texelFetch(conv2_raw, clamp(pos + ivec2(x, y), ivec2(0), sz) * ivec2(3, 1) + ivec2(1, 0), 0)))
#define l2(x, y) V4((conv2_mul * texelFetch(conv2_raw, clamp(pos + ivec2(x, y), ivec2(0), sz) * ivec2(3, 1) + ivec2(2, 0), 0)))
shared V4 G[3][10][10];
void hook() {
	ivec2 xy = ivec2(gl_LocalInvocationID.xy);
	ivec2 pos = ivec2(gl_WorkGroupID.xy) * ivec2(8, 8) + xy;
	ivec2 opos = pos * ivec2(3, 1);
	ivec2 sz = ivec2(LUMA_size) - ivec2(1);
	for (int y = 0; y < 10; y += 8) {
		int ay = xy.y + y;
		if (ay >= 10) break;
		for (int x = 0; x < 10; x += 8) {
			int ax = xy.x + x;
			if (ax >= 10) break;
			G[0][ay][ax] = l0(x - 1, y - 1);
			G[1][ay][ax] = l1(x - 1, y - 1);
			G[2][ay][ax] = l2(x - 1, y - 1);
		}
	}
	barrier();
	V4 s0_0_0, s0_0_1, s0_0_2, s0_1_0, s0_1_1, s0_1_2, s0_2_0, s0_2_1, s0_2_2, s1_0_0, s1_0_1, s1_0_2, s1_1_0, s1_1_1, s1_1_2, s1_2_0, s1_2_1, s1_2_2;
	V4 r0, r1, r2;
	r0 = V4(0.0); r1 = V4(0.0); r2 = V4(0.0);
	s0_0_0 = G[0][xy.y+0][xy.x+0]; s0_0_1 = G[0][xy.y+0][xy.x+1];
	s0_0_2 = G[0][xy.y+0][xy.x+2]; s0_1_0 = G[0][xy.y+1][xy.x+0];
	s0_1_1 = G[0][xy.y+1][xy.x+1]; s0_1_2 = G[0][xy.y+1][xy.x+2];
	s0_2_0 = G[0][xy.y+2][xy.x+0]; s0_2_1 = G[0][xy.y+2][xy.x+1];
	s0_2_2 = G[0][xy.y+2][xy.x+2]; s1_0_0 = G[1][xy.y+0][xy.x+0];
	s1_0_1 = G[1][xy.y+0][xy.x+1]; s1_0_2 = G[1][xy.y+0][xy.x+2];
	s1_1_0 = G[1][xy.y+1][xy.x+0]; s1_1_1 = G[1][xy.y+1][xy.x+1];
	s1_1_2 = G[1][xy.y+1][xy.x+2]; s1_2_0 = G[1][xy.y+2][xy.x+0];
	s1_2_1 = G[1][xy.y+2][xy.x+1]; s1_2_2 = G[1][xy.y+2][xy.x+2];
	r0 += M4(-2.973e-02, 4.554e-03, -8.237e-03, -2.402e-01, -2.230e-02, -2.555e-02, 2.594e-02, 1.047e-01, -1.337e-02, 1.536e-01, 7.560e-02, 1.626e-01, -1.280e-01, -1.045e-01, -6.272e-02, -3.336e-01) * s0_0_0;
	r1 += M4(2.286e-02, 1.481e-02, -6.264e-03, -7.092e-02, 3.963e-02, 7.479e-03, -6.067e-02, -7.845e-03, 1.356e-01, 2.992e-02, 5.594e-02, 5.657e-02, -7.794e-02, -9.046e-02, 1.443e-02, -6.082e-02) * s0_0_0;
	r2 += M4(-1.445e-01, 1.990e-02, 6.808e-03, -1.051e-01, 4.369e-02, -9.518e-02, -3.009e-02, -2.988e-02, 1.146e-01, -3.260e-01, 7.495e-02, -2.618e-02, 4.137e-03, -2.555e-02, -1.121e-01, -1.223e-01) * s0_0_0;
	r0 += M4(1.379e-01, -6.239e-02, 2.152e-02, 2.529e-01, 8.756e-02, 2.852e-02, 3.204e-03, 1.405e-01, -1.053e-01, 2.303e-01, 4.239e-02, 9.228e-02, -1.414e-01, -4.701e-02, 3.206e-03, -3.544e-01) * s0_0_1;
	r1 += M4(-2.640e-02, -1.649e-01, 1.642e-01, 1.142e-01, 3.678e-01, 1.087e-01, -1.294e-01, 8.606e-02, 1.748e-01, -8.149e-02, 3.518e-02, -2.341e-02, -1.874e-01, -2.403e-01, 5.468e-02, 1.176e-01) * s0_0_1;
	r2 += M4(-1.842e-01, -6.352e-02, -2.151e-03, -2.458e-02, 2.410e-01, -6.166e-02, 2.002e-02, 4.785e-02, -1.236e-01, -2.835e-02, -6.206e-01, 2.543e-01, -6.385e-01, -7.655e-02, -1.183e-01, 1.706e-01) * s0_0_1;
	r0 += M4(1.373e-04, 9.309e-02, -9.699e-03, 5.962e-02, 9.145e-02, -1.049e-03, 5.926e-02, 8.182e-02, 7.160e-02, 9.038e-02, 1.864e-02, 9.799e-02, -7.193e-02, 1.294e-01, 5.703e-02, -2.230e-01) * s0_0_2;
	r1 += M4(-6.784e-02, -4.519e-02, 9.136e-02, -3.828e-02, 3.578e-02, 1.248e-02, 6.215e-03, 4.584e-02, 1.486e-02, 1.726e-02, 4.331e-02, 3.094e-02, 1.023e-01, 1.746e-01, 1.200e-02, -6.900e-03) * s0_0_2;
	r2 += M4(1.453e-01, -3.404e-02, -2.958e-02, -3.088e-02, 7.504e-02, 3.703e-03, 2.264e-02, -4.352e-03, -1.619e-01, 7.089e-03, 1.615e-02, -9.677e-03, 1.981e-02, 1.338e-02, 3.776e-02, -8.722e-02) * s0_0_2;
	r0 += M4(-1.288e-01, 7.079e-02, -2.002e-05, 5.046e-02, 6.003e-03, -1.193e-01, -4.238e-02, -2.330e-01, 1.394e-01, -1.122e-01, 1.457e-02, 1.647e-01, -5.567e-01, 6.866e-02, -1.103e-01, -2.782e-01) * s0_1_0;
	r1 += M4(-1.829e-01, 6.231e-02, 7.150e-02, 2.434e-02, -4.292e-02, -5.381e-02, 1.394e-02, -1.249e-01, 8.507e-02, 6.521e-02, 1.011e-01, -8.168e-03, -5.449e-01, -6.280e-02, 3.791e-02, -6.864e-03) * s0_1_0;
	r2 += M4(-1.675e-01, -1.182e-01, -1.306e-01, -2.536e-01, 6.599e-04, 6.954e-04, -4.099e-02, 8.144e-02, 2.477e-01, -1.525e-01, 1.598e-01, -5.697e-03, -4.867e-02, -1.322e-01, 1.082e-01, -2.901e-01) * s0_1_0;
	r0 += M4(2.277e-01, -7.645e-02, 6.189e-01, 3.289e-01, -2.177e-01, 5.070e-01, -3.243e-01, 1.216e-01, -1.236e-02, -1.812e-01, 4.282e-02, -2.056e-02, -9.794e-01, -1.908e-01, -1.818e-01, -3.975e-01) * s0_1_1;
	r1 += M4(-1.000e+00, -8.961e-02, -2.505e-02, 7.135e-02, 6.289e-01, -1.239e-01, -6.132e-03, -3.146e-02, 6.588e-02, 2.588e-01, 6.860e-02, 6.009e-02, -4.200e-01, -1.212e-01, 2.724e-01, -9.909e-02) * s0_1_1;
	r2 += M4(-1.534e-01, 1.297e-01, 3.162e-02, -6.108e-02, 3.647e-01, -2.097e-02, -5.463e-01, -3.319e-01, 9.484e-02, -7.245e-02, -2.119e-01, 1.787e-01, 1.869e-01, 2.953e-02, -1.392e-01, 6.298e-01) * s0_1_1;
	r0 += M4(2.015e-01, 2.677e-03, -2.938e-02, -2.835e-02, 1.861e-01, 1.346e-01, -5.813e-03, 2.244e-01, 1.025e-01, 2.765e-01, 4.584e-02, 7.200e-02, 9.513e-02, 2.802e-01, 4.905e-02, 3.978e-01) * s0_1_2;
	r1 += M4(-6.317e-02, -1.203e-01, 2.706e-02, 1.867e-02, 1.302e-01, -3.396e-02, 1.912e-02, -1.289e-02, 1.700e-01, 2.657e-01, 9.158e-02, 6.612e-02, 2.550e-01, 1.870e-01, 2.760e-02, -1.025e-02) * s0_1_2;
	r2 += M4(1.002e-01, -1.685e-01, -7.491e-03, -2.705e-01, 2.212e-01, 2.526e-01, 3.316e-02, 1.149e-01, 1.300e-01, 1.676e-01, -2.700e-02, -2.925e-01, 1.921e-02, 1.057e-01, 3.277e-02, -2.821e-01) * s0_1_2;
	r0 += M4(9.515e-02, -6.372e-02, -5.798e-02, -1.091e-01, -1.982e-01, -1.103e-01, -3.862e-02, -5.690e-02, 1.794e-01, -8.464e-03, 3.110e-02, 2.056e-01, 3.906e-02, 1.891e-02, 3.527e-02, 1.142e-01) * s0_2_0;
	r1 += M4(-2.569e-01, 5.607e-02, -2.162e-02, -9.065e-03, 6.743e-03, 2.844e-03, 1.450e-02, -2.302e-03, 7.142e-02, -4.993e-03, 2.364e-03, 3.522e-02, -6.278e-02, 2.002e-02, -1.070e-02, 3.440e-02) * s0_2_0;
	r2 += M4(-8.999e-02, -3.211e-02, 6.273e-02, -6.025e-03, 4.114e-02, 2.149e-02, -1.208e-01, 1.984e-01, 6.426e-02, -6.875e-02, 3.207e-02, -3.195e-02, 1.692e-02, 1.146e-01, 1.190e-01, -1.801e-01) * s0_2_0;
	r0 += M4(-1.897e-01, -4.912e-01, 6.873e-03, -3.408e-01, 1.460e-01, 3.038e-01, -7.407e-02, -2.369e-01, 7.452e-02, -9.643e-02, -2.130e-02, 1.597e-01, 2.500e-01, 1.945e-01, -6.217e-02, 2.016e-01) * s0_2_1;
	r1 += M4(-4.212e-01, 1.037e-01, -2.468e-02, -3.099e-03, -2.650e-02, -5.981e-02, -9.096e-03, -1.730e-02, 1.281e-01, 1.669e-03, 1.495e-02, 3.727e-02, -4.136e-02, 4.018e-03, 4.981e-02, 1.925e-02) * s0_2_1;
	r2 += M4(7.671e-02, 1.781e-01, -5.529e-02, -4.465e-03, 2.779e-02, 2.530e-01, 1.696e-01, 2.142e-01, 1.241e-01, -1.922e-02, -5.978e-02, 3.507e-01, 5.182e-02, -1.408e-01, -1.045e-02, 4.873e-01) * s0_2_1;
	r0 += M4(4.802e-02, 2.691e-02, 2.084e-02, 2.213e-01, 6.165e-02, 9.620e-02, 6.541e-02, 1.762e-01, 1.401e-01, 1.187e-01, -1.716e-02, 2.086e-01, -1.594e-02, -2.730e-01, -9.615e-03, -3.533e-02) * s0_2_2;
	r1 += M4(1.192e-02, 7.526e-02, 2.331e-03, 1.643e-02, 1.126e-01, 3.094e-02, 1.378e-02, 5.248e-03, 1.290e-01, 2.245e-02, 3.651e-02, 1.966e-02, -3.382e-02, -6.201e-02, -1.980e-02, 2.726e-02) * s0_2_2;
	r2 += M4(-4.413e-02, 3.424e-02, -2.371e-02, -9.678e-02, 8.765e-02, 5.088e-02, -5.499e-02, -1.950e-01, 2.098e-02, 1.050e-01, -7.573e-03, -2.484e-01, 1.263e-04, 3.312e-02, 8.211e-05, -4.267e-01) * s0_2_2;
	r0 += M4(6.089e-02, 3.482e-02, 1.431e-02, 1.891e-01, -5.481e-02, -7.270e-02, 2.942e-02, -8.480e-02, -7.901e-02, 4.158e-02, -3.736e-02, 4.010e-02, -1.049e-02, 1.397e-01, 4.089e-02, 5.490e-02) * s1_0_0;
	r1 += M4(-1.081e-01, -2.630e-02, -3.307e-02, 2.814e-02, -1.775e-01, -1.476e-02, 1.459e-02, -4.913e-02, -1.046e-02, 4.383e-02, 3.224e-02, 8.286e-02, 1.101e-01, 3.546e-03, 4.079e-03, 6.857e-02) * s1_0_0;
	r2 += M4(1.157e-01, 5.267e-02, 5.523e-02, -1.082e-02, 1.756e-01, 1.205e-01, 1.202e-02, 1.194e-01, -4.147e-02, 3.928e-02, -8.822e-02, -1.431e-01, -1.121e-01, -6.303e-02, 9.929e-02, 6.268e-02) * s1_0_0;
	r0 += M4(3.478e-02, 1.068e-01, -5.383e-02, 5.412e-02, -1.033e-01, -3.142e-02, -6.555e-02, 1.599e-01, 7.036e-03, 1.278e-01, 9.483e-03, 3.924e-02, 5.562e-03, 1.989e-02, 7.725e-02, 1.605e-01) * s1_0_1;
	r1 += M4(1.740e-01, 1.336e-01, -2.402e-02, -8.629e-02, -6.976e-02, -2.134e-01, 2.307e-02, 2.107e-01, -1.000e+00, 3.691e-01, 5.136e-02, 5.410e-01, 1.328e-02, -1.900e-02, -7.117e-02, 7.719e-04) * s1_0_1;
	r2 += M4(1.862e-01, -6.939e-02, -1.528e-02, -1.746e-01, 1.091e-01, -2.642e-02, 2.710e-02, 4.126e-02, -3.472e-02, -3.569e-03, 2.105e-02, -3.557e-02, 1.084e-01, 1.022e-01, 9.887e-02, 1.390e-01) * s1_0_1;
	r0 += M4(2.438e-02, -1.278e-02, -4.791e-02, 4.134e-02, -5.838e-02, 1.812e-02, -1.132e-02, 1.830e-02, -1.115e-02, 9.791e-02, 2.771e-02, -2.188e-02, 7.273e-02, 9.665e-02, 4.395e-02, 1.057e-01) * s1_0_2;
	r1 += M4(2.808e-02, 7.162e-02, -2.645e-02, 5.361e-02, -7.670e-03, -2.269e-01, -3.299e-03, -2.281e-02, -6.909e-02, 1.238e-01, -8.479e-02, 6.537e-02, -7.711e-04, -3.611e-03, -8.161e-03, 7.574e-02) * s1_0_2;
	r2 += M4(-1.158e-01, -8.563e-02, -4.527e-02, -1.245e-01, -1.325e-01, 1.026e-01, -4.508e-02, 8.806e-02, -4.436e-01, -4.679e-02, 5.822e-03, -1.075e-01, 2.744e-01, 2.080e-02, 3.294e-02, 7.251e-02) * s1_0_2;
	r0 += M4(1.123e-01, -6.463e-02, -2.656e-02, -2.487e-02, 5.765e-02, -1.186e-01, -3.327e-02, -2.506e-01, -6.996e-02, -1.519e-01, 1.815e-02, -4.117e-02, 1.981e-01, 1.345e-01, -1.165e-03, 3.932e-01) * s1_1_0;
	r1 += M4(2.122e-01, -7.384e-03, -1.354e-02, -3.020e-02, 8.882e-02, -1.372e-01, 6.570e-02, 1.314e-01, 8.075e-02, 5.815e-02, -6.036e-02, 5.056e-02, 2.934e-01, 1.579e-01, 2.203e-02, 2.451e-01) * s1_1_0;
	r2 += M4(-6.867e-02, 7.350e-02, -1.893e-02, 2.535e-01, -1.691e-01, -3.962e-03, -5.888e-03, 2.783e-01, 4.916e-02, 3.098e-02, 1.596e-01, -1.034e-01, 1.061e-01, -1.469e-01, 1.642e-01, -3.820e-02) * s1_1_0;
	r0 += M4(-1.815e-01, 1.689e-01, -2.488e-02, -2.250e-01, 1.251e-01, 1.688e-01, 1.056e-01, -4.964e-02, 1.188e-01, -8.630e-01, 1.581e-02, 2.510e-01, 8.532e-03, 2.239e-01, 8.610e-02, -2.803e-01) * s1_1_1;
	r1 += M4(2.966e-01, -3.698e-01, 1.203e-01, -1.629e-01, -1.022e-01, 3.010e-01, 6.989e-02, 2.739e-03, -2.422e-01, 1.353e-01, 1.513e-01, -7.538e-02, 6.097e-01, 2.720e-02, -8.601e-02, -1.784e-01) * s1_1_1;
	r2 += M4(3.115e-01, -5.370e-01, 2.075e-01, -6.076e-01, 1.000e+00, -4.458e-01, 4.520e-02, -2.033e-02, 4.878e-02, -6.282e-01, -1.909e-01, -2.995e-01, -2.708e-01, -2.522e-01, -1.052e-01, 8.201e-03) * s1_1_1;
	r0 += M4(3.020e-02, 1.195e-01, 8.525e-02, 7.982e-02, -2.841e-01, -3.076e-01, 7.790e-02, -6.036e-01, 9.543e-02, -6.009e-01, 1.735e-01, 1.362e-01, 2.912e-01, 1.992e-01, 5.209e-02, 2.440e-01) * s1_1_2;
	r1 += M4(-6.007e-02, -3.543e-01, -1.312e-02, -4.537e-02, -2.567e-01, 1.516e-01, -1.992e-01, 8.127e-02, -1.135e-01, 1.428e-01, -6.925e-02, -4.598e-02, 1.121e-02, 7.910e-02, -6.664e-02, 9.038e-02) * s1_1_2;
	r2 += M4(-3.570e-01, -6.512e-02, -1.077e-01, 1.741e-01, -4.162e-01, 3.113e-01, -2.239e-02, 1.683e-03, -2.692e-01, 7.333e-02, -2.484e-02, -2.355e-01, 3.428e-01, 3.159e-01, 6.566e-02, 3.235e-01) * s1_1_2;
	r0 += M4(-8.454e-02, 9.384e-03, 2.130e-02, 7.053e-02, -3.291e-01, -3.064e-02, 2.491e-02, -2.457e-01, 9.897e-02, -6.448e-02, -2.920e-02, 1.019e-01, 3.625e-01, 9.175e-02, 9.598e-02, 3.142e-01) * s1_2_0;
	r1 += M4(-8.198e-02, 3.186e-02, -3.088e-02, 6.702e-03, 2.337e-02, 1.823e-02, -6.326e-02, -3.427e-02, 1.121e-02, -4.633e-02, -2.371e-02, 1.628e-02, 1.526e-01, 9.852e-02, 4.999e-02, 5.084e-02) * s1_2_0;
	r2 += M4(3.464e-02, -4.371e-02, -5.419e-02, 1.363e-01, 1.724e-01, -5.297e-02, 4.007e-02, 1.554e-01, -5.217e-02, 1.088e-01, 3.547e-02, -6.432e-02, 6.129e-02, 1.242e-02, 1.787e-01, -1.121e-01) * s1_2_0;
	r0 += M4(3.626e-01, -2.040e-01, 1.331e-01, 3.058e-01, 2.178e-01, -9.460e-02, -7.133e-02, 4.309e-01, 7.408e-02, -2.181e-01, -1.515e-02, 1.186e-02, 1.285e-01, 3.175e-01, 2.206e-01, 3.819e-01) * s1_2_1;
	r1 += M4(-4.465e-01, 4.632e-02, -3.034e-02, -1.985e-02, 2.389e-01, -9.534e-02, 9.283e-02, -1.144e-02, -2.518e-02, 5.778e-02, -1.703e-02, -1.734e-02, 8.538e-02, -4.787e-02, 3.890e-02, 6.090e-02) * s1_2_1;
	r2 += M4(-5.047e-02, -1.525e-01, 2.661e-02, -6.036e-01, -1.331e-01, -9.461e-01, 1.902e-02, 1.076e-01, -7.008e-02, -7.295e-02, -1.111e-01, -1.366e-01, 1.185e-01, 1.410e-02, 1.525e-01, 1.791e-01) * s1_2_1;
	r0 += M4(-9.354e-03, -3.643e-01, -7.817e-02, 8.440e-02, -1.578e-01, -2.199e-01, 6.115e-02, -5.768e-02, -4.059e-02, -3.439e-01, -3.675e-02, -1.894e-01, 1.239e-01, 5.192e-01, 2.319e-01, -2.225e-02) * s1_2_2;
	r1 += M4(2.625e-01, 1.375e-01, -1.180e-02, -4.803e-04, 1.602e-01, -7.956e-02, 5.668e-03, -3.095e-02, -4.803e-02, 5.279e-02, -4.048e-02, -1.346e-02, 2.139e-02, -1.241e-01, 4.581e-02, 8.452e-02) * s1_2_2;
	r2 += M4(-1.081e-01, -7.727e-02, -5.375e-02, 1.556e-01, -1.248e-01, 2.820e-01, -4.224e-02, 3.187e-01, -3.712e-02, 4.262e-03, 4.518e-02, -9.743e-02, 2.332e-01, 2.162e-01, -7.700e-02, 2.805e-01) * s1_2_2;
	s0_0_0 = G[2][xy.y+0][xy.x+0]; s0_0_1 = G[2][xy.y+0][xy.x+1];
	s0_0_2 = G[2][xy.y+0][xy.x+2]; s0_1_0 = G[2][xy.y+1][xy.x+0];
	s0_1_1 = G[2][xy.y+1][xy.x+1]; s0_1_2 = G[2][xy.y+1][xy.x+2];
	s0_2_0 = G[2][xy.y+2][xy.x+0]; s0_2_1 = G[2][xy.y+2][xy.x+1];
	s0_2_2 = G[2][xy.y+2][xy.x+2];
	r0 += M4(1.101e-01, -6.420e-02, 3.133e-02, 1.908e-01, 6.351e-03, -6.867e-02, -1.267e-02, -1.471e-01, -2.964e-02, -4.789e-03, 1.381e-02, -5.250e-02, -3.843e-02, -9.102e-03, -4.638e-03, -3.679e-02) * s0_0_0;
	r1 += M4(-4.431e-03, -4.545e-02, 7.083e-02, 1.952e-01, -1.332e-01, -3.384e-02, 2.207e-02, -1.406e-02, -9.976e-02, 1.067e-01, 8.255e-02, -6.961e-02, 6.011e-02, -1.604e-02, 1.148e-02, -2.671e-02) * s0_0_0;
	r2 += M4(-3.102e-02, 7.142e-04, 1.400e-01, 1.344e-01, -1.073e-01, 7.686e-03, -6.630e-02, 9.408e-02, 2.943e-01, 1.315e-02, -2.750e-02, 6.737e-02, 2.103e-02, 4.336e-02, -6.053e-02, 3.544e-03) * s0_0_0;
	r0 += M4(7.262e-02, 4.508e-02, -2.235e-03, 2.124e-01, -6.762e-02, 1.101e-02, -1.264e-01, -3.467e-01, -1.828e-01, 1.882e-01, -1.433e-02, 1.987e-01, 7.594e-04, 4.592e-02, 1.121e-01, -7.101e-02) * s0_0_1;
	r1 += M4(8.625e-02, -3.994e-01, -6.864e-02, 3.875e-02, 1.200e-01, 8.290e-02, -5.618e-02, -5.025e-02, -1.503e-01, -3.040e-01, 3.426e-01, 2.036e-01, 4.289e-02, 1.983e-02, -5.372e-02, -1.028e-01) * s0_0_1;
	r2 += M4(-5.463e-01, 1.729e-02, -1.775e-02, -3.346e-01, 1.187e-01, 5.202e-02, -1.210e-01, -1.076e-01, -1.000e+00, -2.547e-01, -1.763e-01, -4.469e-02, 1.876e-01, 1.302e-01, 8.073e-02, -8.456e-02) * s0_0_1;
	r0 += M4(6.468e-02, -6.362e-02, -4.503e-02, 1.116e-01, 1.679e-02, -5.876e-02, 2.350e-02, -2.348e-01, 6.491e-02, 8.104e-02, 3.995e-03, 2.788e-01, -5.979e-03, 3.487e-02, -2.199e-02, -7.573e-03) * s0_0_2;
	r1 += M4(-5.796e-03, -1.098e-01, 1.303e-02, -2.580e-02, 7.394e-02, 3.216e-01, -1.761e-01, -4.613e-02, 1.582e-01, -1.038e-02, 3.623e-02, -3.554e-02, 6.334e-03, -1.683e-02, -2.634e-02, -1.100e-02) * s0_0_2;
	r2 += M4(-9.088e-02, 2.249e-02, -2.353e-02, -7.435e-02, 7.053e-02, -6.233e-02, 2.673e-02, -2.068e-02, -4.444e-02, 6.425e-02, 4.616e-02, 3.131e-02, 2.828e-03, 8.277e-02, 2.401e-02, 5.459e-02) * s0_0_2;
	r0 += M4(3.997e-01, 8.967e-02, 1.530e-02, 1.845e-01, -3.094e-02, -3.671e-02, 8.039e-03, -1.017e-01, 1.078e-01, -1.106e-01, 2.265e-02, 1.266e-01, -6.326e-04, 3.382e-02, -9.099e-03, -2.154e-01) * s0_1_0;
	r1 += M4(-3.212e-01, -7.589e-02, 2.950e-02, 2.686e-01, -8.489e-03, -4.016e-02, 4.821e-03, -9.494e-02, -7.149e-02, -1.287e-01, 2.004e-02, -1.087e-01, -1.976e-01, -1.579e-01, 2.820e-02, -2.726e-02) * s0_1_0;
	r2 += M4(5.673e-02, -4.081e-02, 3.337e-01, 3.795e-01, -9.709e-02, -3.842e-02, -7.256e-02, 1.023e-01, 5.152e-02, 8.857e-02, -2.849e-01, -5.993e-02, -1.402e-01, 1.333e-01, -1.580e-01, 4.397e-02) * s0_1_0;
	r0 += M4(2.364e-01, 1.622e-01, 1.080e-01, 3.346e-02, -3.858e-01, 1.818e-01, 1.504e-01, -1.776e-01, 1.000e-01, 9.294e-02, -3.180e-01, -6.561e-01, -1.133e-01, 1.255e-01, -1.952e-01, -1.741e-01) * s0_1_1;
	r1 += M4(6.637e-03, 6.306e-01, 3.445e-01, -1.887e-02, -4.128e-01, 1.102e-01, -7.810e-02, 2.339e-01, 1.417e-03, -3.403e-02, -1.619e-01, -1.133e-01, 7.514e-01, -4.808e-01, -5.383e-02, 3.341e-02) * s0_1_1;
	r2 += M4(-8.838e-02, -1.427e-01, -4.729e-01, -4.892e-01, 5.181e-02, -5.724e-02, -1.933e-01, 1.312e-01, 4.103e-01, -7.487e-03, 3.200e-02, 1.966e-01, 8.171e-02, 8.720e-02, 2.036e-01, 1.705e-02) * s0_1_1;
	r0 += M4(-8.807e-02, -3.231e-01, -1.408e-02, -1.465e-01, -1.460e-01, 4.678e-01, -4.840e-02, -7.342e-02, 3.099e-02, -9.140e-02, -5.709e-03, -1.188e-01, -6.564e-02, -1.189e-01, -6.387e-02, -1.284e-01) * s0_1_2;
	r1 += M4(-1.657e-01, -1.329e-01, -5.018e-02, 3.669e-02, -4.144e-02, -5.644e-01, 1.607e-01, -1.342e-01, 1.324e-01, 5.217e-02, -3.918e-02, -1.553e-02, -7.954e-02, -2.391e-01, -1.313e-02, -1.988e-02) * s0_1_2;
	r2 += M4(-3.975e-01, -2.129e-02, -2.484e-02, 1.164e-01, -4.404e-01, -3.144e-01, -4.471e-03, -2.450e-01, 6.774e-02, -9.523e-02, -6.786e-02, -1.664e-01, 3.143e-02, 9.134e-03, -2.218e-02, 1.419e-02) * s0_1_2;
	r0 += M4(-9.215e-02, -1.014e-01, 2.243e-02, -1.417e-01, -1.976e-01, 4.336e-02, -2.698e-02, -2.913e-01, -1.150e-01, 4.876e-02, 4.986e-02, -3.068e-02, -2.124e-01, 6.653e-02, 3.107e-02, -1.470e-01) * s0_2_0;
	r1 += M4(1.852e-02, -1.814e-02, -6.587e-02, 6.521e-02, 2.009e-02, 3.701e-02, -1.518e-02, 2.733e-02, 1.263e-01, -4.625e-02, 1.651e-02, -1.922e-02, -1.202e-02, 3.171e-02, -2.633e-02, 4.779e-03) * s0_2_0;
	r2 += M4(1.048e-01, -8.660e-02, -1.825e-02, 1.662e-01, 4.798e-02, 6.296e-02, -8.640e-02, 2.504e-01, 9.071e-02, 5.995e-02, -5.939e-02, -1.026e-01, -2.147e-02, 2.357e-01, 6.567e-02, 5.451e-02) * s0_2_0;
	r0 += M4(6.074e-01, -7.409e-01, -1.243e-01, 2.339e-01, -1.929e-01, 4.795e-02, -8.166e-02, -5.029e-01, -2.534e-01, 3.256e-01, 5.481e-02, 1.761e-01, 1.471e-02, -1.942e-01, 8.632e-02, -3.024e-01) * s0_2_1;
	r1 += M4(3.267e-01, -1.313e-01, 6.084e-05, 1.404e-02, -1.104e-01, -2.406e-02, 3.546e-02, -9.860e-02, 4.680e-01, -3.909e-02, -1.826e-02, 3.536e-02, 3.437e-02, 9.423e-02, 1.993e-02, -3.568e-03) * s0_2_1;
	r2 += M4(-1.451e-01, -1.828e-01, -1.391e-01, -4.772e-01, -2.435e-02, -2.920e-02, 2.842e-01, -2.663e-02, -1.800e-01, -4.694e-02, 5.010e-02, -6.230e-01, 1.391e-01, 1.489e-01, 1.024e-01, -5.066e-01) * s0_2_1;
	r0 += M4(-1.305e-01, -3.795e-02, -2.125e-02, -1.178e-01, -4.264e-01, -4.138e-01, -8.447e-02, -4.968e-01, -1.563e-01, 1.953e-01, -6.736e-04, -2.952e-03, -1.099e-01, 4.448e-02, 9.776e-04, -2.163e-02) * s0_2_2;
	r1 += M4(-2.162e-02, -4.378e-02, 5.730e-03, -2.615e-02, -4.635e-01, 2.297e-01, -4.985e-02, 1.223e-02, 1.095e-01, -7.632e-02, 2.942e-02, 5.023e-03, 1.573e-01, 1.105e-01, -6.952e-03, 1.212e-02) * s0_2_2;
	r2 += M4(-1.661e-01, -2.203e-02, -5.302e-02, 1.976e-01, 1.172e-01, -1.583e-01, -9.475e-02, 1.286e-01, 1.399e-03, -9.898e-02, 5.589e-02, 2.616e-01, 9.116e-02, 5.822e-02, -2.275e-03, 1.228e-01) * s0_2_2;
	r0 += V4(-1.970e-02, -5.568e-05, -1.482e-03, -2.748e-02);
	r0 = clamp(r0, V4(0.0), V4(1.0));
	imageStore(out_image, opos + ivec2(0, 0), vec4(r0));
	r1 += V4(-2.409e-03, -8.275e-03, -1.861e-03, -1.444e-03);
	r1 = clamp(r1, V4(0.0), V4(1.0));
	imageStore(out_image, opos + ivec2(1, 0), vec4(r1));
	r2 += V4(-1.986e-03, 6.477e-04, -8.860e-05, -7.055e-03);
	r2 = clamp(r2, V4(0.0), V4(1.0));
	imageStore(out_image, opos + ivec2(2, 0), vec4(r2));
}

//!DESC CuNNy-4x12-conv4
//!HOOK LUMA
//!COMPUTE 24 8 8 8
//!BIND conv3
//!BIND LUMA
//!SAVE conv4
//!WIDTH LUMA.w 3 *
//!HEIGHT LUMA.h
//!COMPONENTS 4
//!WHEN OUTPUT.w LUMA.w / 1.3 > OUTPUT.h LUMA.h / 1.3 > *
#extension GL_EXT_shader_explicit_arithmetic_types_float16 : enable
#ifdef GL_EXT_shader_explicit_arithmetic_types_float16
#	define V4 f16vec4
#	define M4 f16mat4
#	define F float16_t
#else
#	define V4 vec4
#	define M4 mat4
#	define F float
#endif
#define l0(x, y) V4((conv3_mul * texelFetch(conv3_raw, clamp(pos + ivec2(x, y), ivec2(0), sz) * ivec2(3, 1) + ivec2(0, 0), 0)))
#define l1(x, y) V4((conv3_mul * texelFetch(conv3_raw, clamp(pos + ivec2(x, y), ivec2(0), sz) * ivec2(3, 1) + ivec2(1, 0), 0)))
#define l2(x, y) V4((conv3_mul * texelFetch(conv3_raw, clamp(pos + ivec2(x, y), ivec2(0), sz) * ivec2(3, 1) + ivec2(2, 0), 0)))
shared V4 G[3][10][10];
void hook() {
	ivec2 xy = ivec2(gl_LocalInvocationID.xy);
	ivec2 pos = ivec2(gl_WorkGroupID.xy) * ivec2(8, 8) + xy;
	ivec2 opos = pos * ivec2(3, 1);
	ivec2 sz = ivec2(LUMA_size) - ivec2(1);
	for (int y = 0; y < 10; y += 8) {
		int ay = xy.y + y;
		if (ay >= 10) break;
		for (int x = 0; x < 10; x += 8) {
			int ax = xy.x + x;
			if (ax >= 10) break;
			G[0][ay][ax] = l0(x - 1, y - 1);
			G[1][ay][ax] = l1(x - 1, y - 1);
			G[2][ay][ax] = l2(x - 1, y - 1);
		}
	}
	barrier();
	V4 s0_0_0, s0_0_1, s0_0_2, s0_1_0, s0_1_1, s0_1_2, s0_2_0, s0_2_1, s0_2_2, s1_0_0, s1_0_1, s1_0_2, s1_1_0, s1_1_1, s1_1_2, s1_2_0, s1_2_1, s1_2_2;
	V4 r0, r1, r2;
	r0 = V4(0.0); r1 = V4(0.0); r2 = V4(0.0);
	s0_0_0 = G[0][xy.y+0][xy.x+0]; s0_0_1 = G[0][xy.y+0][xy.x+1];
	s0_0_2 = G[0][xy.y+0][xy.x+2]; s0_1_0 = G[0][xy.y+1][xy.x+0];
	s0_1_1 = G[0][xy.y+1][xy.x+1]; s0_1_2 = G[0][xy.y+1][xy.x+2];
	s0_2_0 = G[0][xy.y+2][xy.x+0]; s0_2_1 = G[0][xy.y+2][xy.x+1];
	s0_2_2 = G[0][xy.y+2][xy.x+2]; s1_0_0 = G[1][xy.y+0][xy.x+0];
	s1_0_1 = G[1][xy.y+0][xy.x+1]; s1_0_2 = G[1][xy.y+0][xy.x+2];
	s1_1_0 = G[1][xy.y+1][xy.x+0]; s1_1_1 = G[1][xy.y+1][xy.x+1];
	s1_1_2 = G[1][xy.y+1][xy.x+2]; s1_2_0 = G[1][xy.y+2][xy.x+0];
	s1_2_1 = G[1][xy.y+2][xy.x+1]; s1_2_2 = G[1][xy.y+2][xy.x+2];
	r0 += M4(-7.887e-02, 1.108e-01, -3.154e-02, 2.450e-02, -1.127e-01, -1.103e-01, -1.440e-01, -4.627e-02, -6.113e-02, -8.814e-02, -5.334e-02, -2.588e-02, -9.266e-03, -6.619e-02, 3.940e-02, -1.598e-02) * s0_0_0;
	r1 += M4(5.030e-02, 7.852e-02, 8.101e-02, -1.786e-01, -1.258e-01, -9.785e-02, -1.251e-01, 6.960e-02, -8.924e-02, -9.179e-02, -9.359e-02, -5.846e-02, 7.338e-02, 7.002e-02, 6.850e-02, 1.145e-01) * s0_0_0;
	r2 += M4(2.543e-02, -1.000e+00, 1.241e-01, 6.337e-02, -1.431e-01, -1.000e+00, -7.654e-02, -7.544e-02, -3.285e-02, -1.000e+00, 4.089e-02, 2.376e-02, -1.101e-02, -1.000e+00, -4.146e-02, 3.806e-02) * s0_0_0;
	r0 += M4(-2.076e-01, -2.484e-01, -3.350e-01, 6.451e-02, -9.888e-02, -7.203e-02, -7.820e-02, -4.878e-02, -1.211e-01, -5.169e-02, 1.256e-02, -3.334e-03, 1.160e-01, 7.922e-02, -5.376e-02, -4.339e-03) * s0_0_1;
	r1 += M4(-4.260e-02, -5.079e-02, -7.124e-03, 2.678e-01, -4.811e-02, -5.679e-02, -5.827e-02, -7.419e-02, 2.784e-02, 2.647e-02, 1.881e-02, -2.359e-01, -1.082e-02, -1.721e-02, -2.760e-02, -1.840e-01) * s0_0_1;
	r2 += M4(-4.092e-01, -1.107e-01, 7.456e-03, -1.919e-01, -1.626e-01, -9.769e-02, -6.522e-02, -1.284e-01, 4.672e-02, 2.588e-02, 4.041e-02, 8.911e-02, 1.937e-01, 8.481e-02, 5.146e-02, 9.223e-02) * s0_0_1;
	r0 += M4(-7.957e-02, -1.480e-02, 5.481e-02, 1.178e-02, -3.929e-02, 4.714e-02, 5.876e-03, 1.808e-02, -1.012e-01, 2.035e-03, 1.572e-02, 1.676e-02, 2.497e-03, 2.909e-02, -5.880e-03, 2.630e-02) * s0_0_2;
	r1 += M4(9.468e-02, 9.589e-02, 1.019e-01, 1.683e-01, -4.886e-02, -4.294e-02, -4.759e-02, 1.659e-02, 1.732e-02, 4.295e-02, 4.156e-02, -2.087e-01, -6.033e-02, -4.632e-02, -6.244e-02, -2.792e-02) * s0_0_2;
	r2 += M4(1.698e-02, -6.422e-02, 2.121e-02, -6.714e-02, 7.521e-03, 5.527e-03, 2.873e-02, 5.027e-02, -5.457e-03, -4.528e-02, 1.414e-02, 3.070e-02, 2.488e-02, 3.175e-02, 1.368e-02, 1.485e-02) * s0_0_2;
	r0 += M4(8.527e-02, 1.175e-02, 1.476e-02, 4.564e-02, 1.860e-02, -2.138e-01, -5.409e-02, -3.740e-01, -4.057e-02, 1.265e-01, -2.672e-02, 5.554e-02, -3.896e-03, 2.627e-02, 4.858e-02, 1.410e-02) * s0_1_0;
	r1 += M4(-1.060e-01, -6.916e-02, -7.113e-02, 1.933e-02, 1.648e-02, 3.023e-02, 3.177e-02, -7.899e-02, 7.322e-03, 1.887e-02, 3.881e-03, 9.339e-02, -4.143e-02, -2.334e-02, -3.099e-02, 5.940e-02) * s0_1_0;
	r2 += M4(1.162e-02, 4.946e-02, -2.587e-01, -1.256e-01, -1.837e-01, 2.783e-02, -4.456e-01, -4.951e-01, -1.030e-02, 6.453e-02, 7.317e-02, 2.848e-01, -2.044e-02, -1.679e-02, 2.207e-02, -2.040e-01) * s0_1_0;
	r0 += M4(-1.910e-01, 2.877e-01, -2.182e-01, -1.704e-01, -4.548e-01, -3.941e-01, -2.124e-01, -3.238e-01, 4.250e-01, 4.608e-01, 1.000e+00, 8.588e-02, -8.200e-02, -2.970e-01, 2.300e-01, -2.007e-01) * s0_1_1;
	r1 += M4(-1.078e-01, -8.699e-02, -6.031e-02, -2.605e-01, 1.782e-02, 1.321e-02, 1.977e-02, -5.476e-02, -9.921e-02, -1.068e-01, -9.924e-02, 1.484e-01, -1.298e-01, -1.456e-01, -1.153e-01, 1.753e-01) * s0_1_1;
	r2 += M4(-1.097e-02, -9.691e-02, 3.369e-01, 3.109e-01, -5.513e-01, -2.358e-02, -3.239e-01, -3.269e-01, 7.910e-01, 1.214e-01, 3.232e-01, 6.117e-01, -1.255e-01, 4.139e-02, -1.569e-01, 9.157e-02) * s0_1_1;
	r0 += M4(5.838e-02, -6.739e-02, -1.899e-01, 3.650e-02, -2.264e-01, 6.519e-02, 4.184e-03, 1.450e-02, 7.247e-02, 6.835e-02, 1.098e-01, -1.215e-03, 5.855e-02, 3.843e-02, 9.456e-02, -3.024e-02) * s0_1_2;
	r1 += M4(-8.035e-02, -5.061e-02, -3.506e-02, -1.256e-01, 5.202e-02, 3.850e-02, 4.445e-02, 8.683e-03, -5.684e-02, -5.936e-02, -5.826e-02, 1.242e-01, -1.553e-01, -1.692e-01, -1.539e-01, 1.164e-02) * s0_1_2;
	r2 += M4(-1.743e-01, -1.677e-02, -1.581e-01, -9.709e-02, -4.159e-02, 1.130e-02, 5.902e-02, 8.262e-02, 5.383e-02, 5.289e-03, 3.641e-02, 7.252e-02, 1.421e-01, -2.395e-02, -4.214e-02, -3.355e-02) * s0_1_2;
	r0 += M4(3.619e-02, -3.969e-02, 7.097e-03, 3.337e-03, 2.165e-02, -4.360e-02, 1.412e-02, 4.040e-02, -1.582e-03, -8.531e-02, 1.201e-02, -5.985e-02, 1.539e-02, 3.095e-02, 7.711e-03, -2.599e-02) * s0_2_0;
	r1 += M4(-8.992e-02, -7.213e-02, -5.448e-02, 6.072e-02, -1.667e-02, -6.631e-02, -5.471e-02, 2.944e-02, 7.111e-02, 4.863e-02, 7.301e-02, -9.046e-02, -1.115e-01, -1.003e-01, -1.033e-01, -8.123e-03) * s0_2_0;
	r2 += M4(1.251e-02, 5.987e-03, -6.731e-02, -6.433e-02, 6.835e-02, -1.120e-02, -2.036e-03, 1.299e-02, -7.869e-03, -3.304e-02, 1.373e-01, -7.709e-02, 1.702e-02, 6.038e-03, -1.495e-02, 9.760e-02) * s0_2_0;
	r0 += M4(-2.706e-02, -7.692e-02, 5.852e-03, -6.271e-02, 7.485e-02, 4.177e-02, 2.740e-02, -1.601e-01, -2.973e-02, -2.804e-02, 9.046e-03, 1.430e-01, -2.478e-02, 6.960e-02, 2.484e-02, 1.977e-01) * s0_2_1;
	r1 += M4(-4.070e-05, -5.841e-03, 4.397e-02, 2.969e-02, 7.255e-02, 4.593e-02, 4.696e-02, 4.077e-02, -7.839e-02, -9.457e-02, -7.560e-02, -6.707e-02, -1.022e-01, -6.540e-02, -7.793e-02, -4.241e-02) * s0_2_1;
	r2 += M4(1.200e-02, 5.915e-03, -2.075e-01, -5.729e-02, 7.104e-02, -2.084e-03, -1.358e-01, -1.217e-03, 1.517e-02, 1.396e-02, 2.319e-01, 4.334e-02, 6.748e-02, 9.297e-03, 3.464e-01, 2.276e-02) * s0_2_1;
	r0 += M4(2.290e-02, 4.945e-02, -4.192e-03, -2.474e-02, 8.762e-03, 3.307e-02, 3.193e-03, 4.810e-03, -4.882e-02, -1.099e-02, -2.182e-02, -8.773e-03, 4.119e-03, -4.727e-02, -2.534e-02, -2.530e-02) * s0_2_2;
	r1 += M4(-3.486e-02, -4.592e-02, 7.548e-03, 6.618e-02, 2.119e-02, -5.006e-04, 5.405e-02, -4.541e-03, -5.110e-02, -7.636e-02, -4.308e-02, -3.043e-03, -1.105e-01, -7.176e-02, -7.031e-02, 3.457e-03) * s0_2_2;
	r2 += M4(-1.671e-02, 3.277e-03, -3.971e-03, 3.435e-02, -4.784e-03, -4.918e-04, 3.089e-02, 5.546e-02, -1.250e-02, -5.689e-04, -3.941e-02, -2.568e-02, -2.672e-02, -5.005e-03, -4.213e-02, -5.265e-02) * s0_2_2;
	r0 += M4(6.909e-02, 7.261e-02, 8.762e-02, 5.116e-02, -7.153e-02, -5.115e-02, -1.973e-02, -1.752e-02, 5.854e-03, 7.226e-02, 2.741e-02, 1.943e-02, -1.391e-02, -1.167e-02, -2.166e-02, -8.591e-03) * s1_0_0;
	r1 += M4(5.564e-02, 4.962e-02, 6.200e-02, -7.594e-02, -2.509e-02, -6.377e-02, -4.350e-02, 4.553e-02, -1.641e-01, -1.471e-01, -1.320e-01, -5.346e-02, -7.374e-02, -2.578e-02, -6.653e-02, 3.623e-02) * s1_0_0;
	r2 += M4(8.763e-02, -1.000e+00, 5.634e-02, 9.661e-02, -8.629e-02, -1.000e+00, -7.020e-03, -7.042e-02, 2.370e-02, -1.000e+00, 2.885e-02, 5.041e-02, -2.695e-02, -1.000e+00, -1.758e-03, -9.029e-03) * s1_0_0;
	r0 += M4(1.146e-01, 5.357e-02, -1.014e-01, 4.444e-02, -1.381e-02, -1.331e-02, 3.516e-02, 3.427e-02, 6.360e-02, 3.659e-02, -2.229e-02, 1.814e-03, 6.580e-03, 6.762e-02, 4.417e-02, 3.459e-02) * s1_0_1;
	r1 += M4(-5.826e-02, -5.807e-02, -5.008e-02, -5.678e-01, 2.781e-02, 8.232e-03, 1.849e-02, -8.050e-02, -2.090e-01, -2.376e-01, -2.550e-01, -5.270e-03, -1.178e-01, -7.089e-02, -1.053e-01, -1.242e-01) * s1_0_1;
	r2 += M4(1.295e-01, -2.033e-01, 4.461e-02, 4.298e-02, -2.339e-02, 3.995e-02, 6.203e-03, -1.309e-02, 6.275e-02, -1.894e-01, -5.936e-03, 2.775e-02, 5.500e-02, 9.961e-02, 3.045e-02, 4.776e-02) * s1_0_1;
	r0 += M4(5.228e-02, -5.506e-03, -1.362e-02, 1.637e-02, -1.632e-02, 1.434e-03, -1.308e-02, -1.066e-03, 4.920e-02, -2.118e-03, 3.420e-02, 1.659e-02, 7.589e-02, 1.821e-03, 5.729e-03, -4.136e-03) * s1_0_2;
	r1 += M4(-1.225e-02, 9.023e-03, -1.655e-02, -1.311e-01, 1.997e-02, 2.567e-02, 3.939e-02, 8.543e-02, -1.426e-01, -1.928e-01, -1.269e-01, 5.655e-02, -4.890e-02, -1.901e-02, -3.622e-02, 2.890e-02) * s1_0_2;
	r2 += M4(1.190e-02, 3.233e-02, 2.223e-02, 2.279e-03, -2.156e-02, -2.114e-03, 2.338e-03, 1.114e-03, 4.763e-04, -4.598e-03, 1.792e-02, -7.782e-03, 6.198e-03, -3.284e-02, -7.573e-03, -1.141e-02) * s1_0_2;
	r0 += M4(6.384e-02, 9.253e-02, -1.190e-02, 5.457e-02, 1.724e-01, 2.289e-03, -4.533e-02, 1.691e-02, 6.788e-02, 1.926e-01, 1.724e-01, 7.210e-02, -1.070e-01, -1.075e-01, -1.145e-01, -4.658e-02) * s1_1_0;
	r1 += M4(-1.979e-01, -2.002e-01, -1.993e-01, -2.759e-01, -1.397e-01, -1.181e-01, -1.198e-01, 2.158e-01, -1.645e-01, -1.312e-01, -1.371e-01, 2.520e-01, 2.075e-02, 1.762e-02, 7.155e-04, -4.749e-03) * s1_1_0;
	r2 += M4(-6.161e-03, -4.940e-01, 4.299e-02, -2.352e-01, 1.822e-01, -1.083e-01, 9.156e-02, 8.464e-02, 3.722e-02, -2.316e-03, -5.719e-02, -8.374e-02, -7.682e-02, 1.675e-01, -1.652e-02, 4.105e-02) * s1_1_0;
	r0 += M4(-1.652e-01, -5.114e-01, -5.319e-01, -1.821e-01, 1.802e-01, 9.357e-02, -1.885e-01, 6.666e-02, 3.582e-01, -1.241e-01, 2.529e-01, 4.080e-02, 6.270e-02, 2.046e-01, 1.646e-01, 5.186e-02) * s1_1_1;
	r1 += M4(4.437e-02, 3.534e-02, 3.880e-02, -1.736e-03, -2.807e-02, 4.250e-03, -1.033e-02, 1.754e-01, -1.755e-01, -1.676e-01, -2.386e-01, -4.118e-02, -2.454e-01, -2.362e-01, -2.479e-01, -2.696e-02) * s1_1_1;
	r2 += M4(-4.271e-01, -1.683e-01, -3.200e-01, -6.434e-01, 2.364e-01, -2.996e-02, 7.107e-03, 7.408e-02, -9.798e-02, -4.186e-02, 3.757e-02, -1.949e-01, 2.016e-01, 7.044e-02, -1.372e-04, 5.261e-02) * s1_1_1;
	r0 += M4(-1.374e-01, -1.814e-01, -2.287e-01, -5.742e-02, 6.937e-03, -2.956e-02, 9.772e-03, 1.782e-02, -2.143e-01, -2.356e-02, -4.346e-02, 4.118e-02, 2.394e-01, -8.374e-03, -4.538e-02, -6.820e-04) * s1_1_2;
	r1 += M4(-2.444e-04, 4.475e-03, -8.791e-03, -1.030e-01, -1.158e-01, -1.217e-01, -1.315e-01, 9.016e-03, -2.432e-01, -1.392e-01, -1.771e-01, -8.608e-02, -1.240e-01, -1.190e-01, -1.125e-01, 4.449e-02) * s1_1_2;
	r2 += M4(-2.069e-01, 8.396e-03, -4.172e-02, -1.845e-02, -1.702e-02, 4.174e-03, 2.899e-02, -1.152e-02, -6.595e-02, 7.509e-03, 2.208e-02, 5.763e-02, 2.643e-02, -1.305e-02, -1.776e-02, -3.973e-02) * s1_1_2;
	r0 += M4(6.183e-02, 7.618e-02, 5.676e-02, 6.063e-02, 4.561e-02, -3.574e-02, 1.643e-02, -1.500e-02, -3.111e-02, -9.894e-02, 8.530e-03, -1.154e-01, 2.957e-02, -7.259e-02, -1.536e-02, -3.770e-02) * s1_2_0;
	r1 += M4(3.967e-02, 4.392e-02, 2.324e-02, 4.679e-02, -1.218e-01, -5.796e-02, -5.232e-02, 1.281e-01, -1.400e-01, -1.051e-01, -9.618e-02, 9.137e-03, -2.358e-01, -2.146e-01, -2.035e-01, -3.601e-02) * s1_2_0;
	r2 += M4(1.236e-02, 3.799e-02, -3.729e-01, -6.360e-02, -3.547e-02, 2.106e-02, -2.510e-01, -1.638e-01, -3.210e-02, -1.854e-02, -1.712e-01, -9.595e-02, 3.647e-02, -4.252e-03, 1.111e-01, -6.413e-03) * s1_2_0;
	r0 += M4(-2.957e-02, -2.670e-01, 1.622e-02, -3.467e-01, -1.029e-01, -3.475e-01, 7.355e-02, -2.247e-01, 3.634e-02, 6.258e-01, 1.474e-02, 2.128e-01, -2.452e-03, 4.360e-01, -9.722e-02, 7.246e-01) * s1_2_1;
	r1 += M4(-4.982e-02, -5.850e-02, -6.491e-02, 2.027e-02, -1.308e-01, -8.194e-02, -1.196e-01, 3.031e-01, -5.064e-02, -1.228e-01, -1.178e-01, 1.684e-01, -1.175e-01, -6.801e-02, -7.585e-02, -1.779e-01) * s1_2_1;
	r2 += M4(-2.113e-01, 2.827e-02, -6.198e-01, -2.549e-01, -6.019e-02, -7.397e-05, -3.503e-02, -1.958e-01, -6.867e-02, -1.206e-02, 3.429e-02, 5.382e-01, 1.665e-01, -3.349e-02, 7.675e-01, 4.688e-01) * s1_2_1;
	r0 += M4(-9.349e-02, -6.799e-03, 6.784e-03, -7.397e-02, -8.332e-02, -2.764e-02, -1.454e-03, 1.676e-02, 4.309e-02, 9.302e-02, 1.455e-02, -1.255e-01, 1.536e-01, -2.085e-01, -3.560e-02, -4.243e-02) * s1_2_2;
	r1 += M4(-1.143e-02, 4.297e-03, 1.686e-02, 1.275e-02, -1.237e-01, -1.604e-01, -1.222e-01, 1.074e-01, -1.796e-01, -8.071e-02, -1.127e-01, 7.496e-02, 2.323e-02, -8.586e-03, 1.908e-02, -1.292e-01) * s1_2_2;
	r2 += M4(1.057e-02, -1.075e-02, 4.679e-02, 2.915e-03, -1.354e-02, 1.117e-02, 1.412e-02, 7.560e-03, -3.679e-02, 6.309e-04, -4.249e-02, 6.473e-02, 1.896e-02, 3.425e-02, -1.793e-01, -3.019e-01) * s1_2_2;
	s0_0_0 = G[2][xy.y+0][xy.x+0]; s0_0_1 = G[2][xy.y+0][xy.x+1];
	s0_0_2 = G[2][xy.y+0][xy.x+2]; s0_1_0 = G[2][xy.y+1][xy.x+0];
	s0_1_1 = G[2][xy.y+1][xy.x+1]; s0_1_2 = G[2][xy.y+1][xy.x+2];
	s0_2_0 = G[2][xy.y+2][xy.x+0]; s0_2_1 = G[2][xy.y+2][xy.x+1];
	s0_2_2 = G[2][xy.y+2][xy.x+2];
	r0 += M4(2.157e-02, -3.412e-02, 7.286e-02, -4.265e-02, -2.184e-02, -1.028e-02, -3.242e-02, -5.679e-03, 2.813e-02, 1.899e-03, 2.258e-02, 2.671e-03, -4.092e-02, -5.723e-02, -6.882e-02, 3.132e-02) * s0_0_0;
	r1 += M4(-1.505e-02, -2.634e-02, -4.232e-04, 1.557e-01, 8.245e-03, -2.516e-03, 1.883e-03, 1.439e-02, 2.484e-04, -1.256e-02, 2.689e-03, -7.856e-02, -3.198e-02, -3.224e-02, -3.196e-02, 1.206e-02) * s0_0_0;
	r2 += M4(7.792e-02, -1.000e+00, -3.231e-02, 2.136e-02, -5.850e-02, -1.000e+00, -1.023e-02, -1.565e-02, 3.137e-02, -1.000e+00, -1.457e-02, -2.836e-02, -3.044e-02, -1.000e+00, 8.229e-02, 9.138e-02) * s0_0_0;
	r0 += M4(-1.710e-02, -1.336e-02, 2.582e-02, -2.934e-02, -1.552e-01, -6.635e-02, -8.632e-02, -1.111e-02, 1.700e-02, 1.052e-02, -2.443e-02, -6.282e-03, 1.637e-01, -6.109e-03, 9.478e-02, -4.253e-02) * s0_0_1;
	r1 += M4(-6.490e-02, -7.382e-02, -2.960e-02, -1.356e-04, -6.154e-02, -6.828e-02, -6.870e-02, 1.964e-01, -7.443e-02, -6.359e-02, -2.557e-02, 1.773e-01, 4.664e-02, 4.523e-02, 4.528e-02, 3.624e-01) * s0_0_1;
	r2 += M4(1.975e-02, 1.758e-02, 7.408e-03, 1.647e-02, -1.304e-01, -1.416e-01, -5.285e-02, -8.646e-02, -2.953e-02, -1.000e+00, 1.547e-03, -6.569e-02, 4.121e-02, -1.404e-02, -5.334e-02, -2.095e-01) * s0_0_1;
	r0 += M4(-1.744e-02, 2.187e-02, 8.556e-03, 4.804e-02, 7.781e-04, -1.586e-02, -4.598e-02, -4.295e-02, -1.421e-02, 2.397e-02, -3.192e-02, 6.222e-02, -1.635e-01, 6.211e-02, -4.875e-02, 4.869e-02) * s0_0_2;
	r1 += M4(-4.488e-02, -6.849e-02, -1.848e-02, 1.285e-02, 5.137e-02, 5.468e-02, 8.099e-02, 1.803e-01, -4.421e-02, -1.233e-02, -1.335e-02, 1.714e-03, -1.804e-02, -1.879e-02, -2.081e-02, -2.145e-01) * s0_0_2;
	r2 += M4(6.663e-03, -2.523e-02, 4.353e-02, 2.455e-02, -5.654e-02, -1.000e+00, -4.500e-02, -3.294e-02, -4.065e-02, 6.140e-03, 5.480e-02, 1.255e-02, 3.065e-02, 1.890e-02, 3.870e-02, 6.370e-02) * s0_0_2;
	r0 += M4(-1.556e-01, -1.155e-01, -2.314e-01, -7.786e-02, -4.051e-02, -1.965e-01, -7.268e-02, -1.039e-01, 3.842e-02, 4.516e-02, 6.280e-02, 4.418e-02, 4.710e-02, -8.639e-02, 1.159e-02, -1.664e-01) * s0_1_0;
	r1 += M4(-9.901e-02, -7.000e-02, -6.041e-02, 1.098e-02, 7.871e-03, -5.276e-03, 8.612e-03, 2.508e-02, -1.001e-01, -1.051e-01, -9.017e-02, -1.860e-02, 3.526e-02, 3.714e-02, 3.094e-02, -4.939e-02) * s0_1_0;
	r2 += M4(-1.869e-01, -8.211e-02, -2.182e-02, -2.057e-01, -1.574e-02, -3.909e-03, 4.134e-02, 1.157e-01, 3.179e-02, -5.505e-02, -1.305e-02, -1.585e-02, -1.536e-02, -7.081e-02, -3.383e-02, -1.060e-01) * s0_1_0;
	r0 += M4(-3.798e-01, -9.088e-02, -3.994e-01, 8.481e-02, -4.777e-03, -5.582e-01, 2.711e-02, -5.176e-01, -2.216e-01, -6.543e-01, -2.489e-01, -4.832e-01, -2.515e-01, 1.635e-01, -3.503e-02, 2.130e-01) * s0_1_1;
	r1 += M4(-7.394e-02, -7.502e-02, -3.777e-02, -4.799e-01, -8.162e-02, -7.487e-02, -3.097e-02, -1.403e-01, -6.433e-02, -3.574e-02, -1.171e-02, 2.226e-02, -4.050e-02, -4.270e-02, -4.406e-02, 3.390e-02) * s0_1_1;
	r2 += M4(-2.482e-01, 5.274e-02, 1.147e-01, 1.274e-01, 9.929e-02, -8.819e-02, -6.760e-01, -7.356e-01, -3.438e-01, 1.670e-01, -5.407e-01, -3.550e-01, 5.562e-02, -5.333e-03, -2.368e-01, -5.395e-02) * s0_1_1;
	r0 += M4(7.898e-02, 7.105e-02, 6.762e-02, 3.844e-03, -1.257e-01, 4.806e-03, -9.443e-02, 2.354e-02, 4.581e-01, 1.946e-01, 3.701e-02, 3.962e-02, 1.930e-02, -1.352e-01, -8.185e-02, -6.938e-02) * s0_1_2;
	r1 += M4(3.069e-02, 2.151e-02, 7.008e-02, -1.721e-02, -9.885e-02, -5.273e-02, -5.744e-02, -9.017e-02, -1.690e-02, 3.246e-03, 8.560e-03, 3.799e-02, -6.684e-02, -7.286e-02, -7.355e-02, 9.603e-02) * s0_1_2;
	r2 += M4(6.029e-02, -1.936e-02, -3.800e-03, 5.543e-03, -6.320e-02, 2.039e-02, 5.327e-03, -1.212e-02, 1.985e-01, -5.955e-02, -1.223e-01, -2.478e-01, -1.705e-01, 4.237e-03, 1.470e-01, 1.459e-01) * s0_1_2;
	r0 += M4(-2.353e-02, -1.938e-01, -1.865e-02, -1.382e-01, 1.703e-02, -4.220e-02, -1.083e-03, -9.439e-02, -2.467e-02, 6.374e-02, -1.810e-02, 2.088e-02, -1.524e-02, 3.505e-02, 2.246e-03, 2.411e-02) * s0_2_0;
	r1 += M4(1.659e-02, 4.332e-02, 5.335e-02, 7.962e-03, -5.931e-03, -2.384e-02, 2.968e-03, -4.181e-02, -7.561e-02, -8.387e-02, -5.284e-02, -6.380e-02, -2.273e-02, -2.388e-02, -2.347e-02, -4.857e-03) * s0_2_0;
	r2 += M4(1.052e-02, -2.019e-01, -2.098e-01, -1.268e-01, -1.027e-02, -6.166e-04, 5.800e-02, -3.019e-02, -2.487e-02, 4.014e-03, -1.420e-02, 4.102e-02, -6.003e-03, 9.588e-03, -3.940e-02, 3.045e-02) * s0_2_0;
	r0 += M4(-2.742e-01, -5.021e-01, -1.636e-01, -4.692e-01, -1.038e-01, -1.223e-01, -6.616e-02, -2.032e-02, -4.196e-02, -3.258e-02, -1.898e-02, -1.301e-01, -6.171e-02, 1.509e-02, 2.838e-02, -1.761e-02) * s0_2_1;
	r1 += M4(-1.139e-01, -8.455e-02, -7.921e-02, 1.009e-02, -1.037e-01, -6.362e-02, -6.577e-02, -9.980e-02, 1.547e-02, 5.676e-02, 5.259e-02, 9.369e-02, 1.461e-01, 1.416e-01, 1.414e-01, 5.027e-02) * s0_2_1;
	r2 += M4(-2.626e-01, 1.405e-02, -1.230e-01, -1.489e-01, -3.749e-02, -5.988e-03, -9.297e-02, -8.722e-02, -2.020e-03, 1.835e-02, -6.055e-02, -9.470e-02, -1.181e-03, -7.740e-03, 5.996e-02, 9.347e-03) * s0_2_1;
	r0 += M4(5.123e-02, -2.653e-02, 2.836e-02, 4.602e-02, 2.867e-02, 1.706e-02, 3.411e-03, 1.432e-02, 6.725e-02, -5.593e-02, -2.546e-02, 8.455e-02, -2.662e-02, -3.877e-02, 8.673e-03, -9.615e-02) * s0_2_2;
	r1 += M4(1.536e-02, 4.760e-02, 5.273e-02, -9.727e-02, -1.253e-01, -8.355e-02, -8.529e-02, -5.007e-02, -1.450e-01, -1.447e-01, -1.137e-01, 6.123e-02, -6.948e-02, -6.576e-02, -6.508e-02, 4.824e-02) * s0_2_2;
	r2 += M4(2.322e-02, -7.329e-04, -2.434e-02, -1.000e-02, 1.594e-02, -7.730e-03, 2.200e-02, 6.251e-03, -3.589e-02, 3.005e-02, -1.723e-01, -6.412e-02, 8.449e-03, -4.552e-04, -1.813e-02, -6.622e-02) * s0_2_2;
	r0 += V4(-1.856e-03, -3.778e-03, -3.381e-03, -2.631e-03);
	r0 = clamp(r0, V4(0.0), V4(1.0));
	imageStore(out_image, opos + ivec2(0, 0), vec4(r0));
	r1 += V4(-1.466e-01, -1.426e-01, -1.450e-01, -9.908e-03);
	r1 = clamp(r1, V4(0.0), V4(1.0));
	imageStore(out_image, opos + ivec2(1, 0), vec4(r1));
	r2 += V4(-1.820e-03, -4.958e-03, -2.848e-03, -3.746e-03);
	r2 = clamp(r2, V4(0.0), V4(1.0));
	imageStore(out_image, opos + ivec2(2, 0), vec4(r2));
}

//!DESC CuNNy-4x12-out-shuffle
//!HOOK LUMA
//!COMPUTE 16 16 8 8
//!BIND conv4
//!BIND LUMA
//!WIDTH LUMA.w 2 *
//!HEIGHT LUMA.h 2 *
//!COMPONENTS 1
//!WHEN OUTPUT.w LUMA.w / 1.3 > OUTPUT.h LUMA.h / 1.3 > *
#extension GL_EXT_shader_explicit_arithmetic_types_float16 : enable
#ifdef GL_EXT_shader_explicit_arithmetic_types_float16
#	define V4 f16vec4
#	define M4 f16mat4
#	define F float16_t
#else
#	define V4 vec4
#	define M4 mat4
#	define F float
#endif
#define l0(x, y) V4((conv4_mul * texelFetch(conv4_raw, clamp(pos + ivec2(x, y), ivec2(0), sz) * ivec2(3, 1) + ivec2(0, 0), 0)))
#define l1(x, y) V4((conv4_mul * texelFetch(conv4_raw, clamp(pos + ivec2(x, y), ivec2(0), sz) * ivec2(3, 1) + ivec2(1, 0), 0)))
#define l2(x, y) V4((conv4_mul * texelFetch(conv4_raw, clamp(pos + ivec2(x, y), ivec2(0), sz) * ivec2(3, 1) + ivec2(2, 0), 0)))
shared V4 G[3][10][10];
void hook() {
	ivec2 xy = ivec2(gl_LocalInvocationID.xy);
	ivec2 pos = ivec2(gl_WorkGroupID.xy) * ivec2(8, 8) + xy;
	ivec2 opos = pos * ivec2(2, 2);
	ivec2 sz = ivec2(LUMA_size) - ivec2(1);
	for (int y = 0; y < 10; y += 8) {
		int ay = xy.y + y;
		if (ay >= 10) break;
		for (int x = 0; x < 10; x += 8) {
			int ax = xy.x + x;
			if (ax >= 10) break;
			G[0][ay][ax] = l0(x - 1, y - 1);
			G[1][ay][ax] = l1(x - 1, y - 1);
			G[2][ay][ax] = l2(x - 1, y - 1);
		}
	}
	barrier();
	V4 s0_0_0, s0_0_1, s0_0_2, s0_1_0, s0_1_1, s0_1_2, s0_2_0, s0_2_1, s0_2_2, s1_0_0, s1_0_1, s1_0_2, s1_1_0, s1_1_1, s1_1_2, s1_2_0, s1_2_1, s1_2_2;
	V4 r0;
	r0 = V4(0.0);
	s0_0_0 = G[0][xy.y+0][xy.x+0]; s0_0_1 = G[0][xy.y+0][xy.x+1];
	s0_0_2 = G[0][xy.y+0][xy.x+2]; s0_1_0 = G[0][xy.y+1][xy.x+0];
	s0_1_1 = G[0][xy.y+1][xy.x+1]; s0_1_2 = G[0][xy.y+1][xy.x+2];
	s0_2_0 = G[0][xy.y+2][xy.x+0]; s0_2_1 = G[0][xy.y+2][xy.x+1];
	s0_2_2 = G[0][xy.y+2][xy.x+2]; s1_0_0 = G[1][xy.y+0][xy.x+0];
	s1_0_1 = G[1][xy.y+0][xy.x+1]; s1_0_2 = G[1][xy.y+0][xy.x+2];
	s1_1_0 = G[1][xy.y+1][xy.x+0]; s1_1_1 = G[1][xy.y+1][xy.x+1];
	s1_1_2 = G[1][xy.y+1][xy.x+2]; s1_2_0 = G[1][xy.y+2][xy.x+0];
	s1_2_1 = G[1][xy.y+2][xy.x+1]; s1_2_2 = G[1][xy.y+2][xy.x+2];
	r0 += M4(-9.741e-02, -1.439e-03, 1.035e-02, 1.380e-02, -1.297e-02, 2.215e-02, 3.315e-03, 1.187e-02, 2.811e-02, -1.049e-04, -6.212e-03, -1.966e-03, -4.063e-02, -2.820e-03, -3.814e-02, -7.968e-03) * s0_0_0;
	r0 += M4(-1.304e-02, 6.538e-02, -8.742e-03, 8.349e-03, 9.364e-02, 1.217e-01, -5.739e-03, 6.741e-03, 4.724e-02, 5.209e-02, -6.799e-03, -1.141e-02, 3.447e-01, -4.588e-01, -2.918e-02, -9.156e-02) * s0_0_1;
	r0 += M4(-3.177e-05, -1.802e-03, -9.762e-08, -2.610e-04, -1.316e-03, 2.368e-02, -1.523e-03, -1.919e-03, -1.938e-03, 1.630e-02, -6.071e-06, -3.935e-03, -1.837e-02, 3.192e-02, -8.693e-03, -1.058e-02) * s0_0_2;
	r0 += M4(-9.221e-02, -8.016e-03, -2.093e-01, -2.350e-02, -3.082e-02, -1.863e-03, -8.091e-02, -9.824e-04, 3.467e-02, 1.775e-02, 1.130e-01, 1.825e-02, -6.987e-03, 3.755e-04, 3.719e-02, 9.991e-03) * s0_1_0;
	r0 += M4(1.587e-02, 1.401e-01, 1.753e-02, 1.724e-01, -6.100e-02, -9.201e-02, 2.725e-01, -3.521e-01, -2.549e-01, -3.453e-01, 2.036e-01, 2.455e-01, 3.172e-03, 4.806e-03, 1.294e-01, 1.087e-01) * s0_1_1;
	r0 += M4(1.641e-05, 1.421e-03, 2.440e-07, 1.501e-04, 8.943e-03, 4.846e-02, -2.789e-04, 8.521e-02, 1.156e-02, 1.194e-02, 5.658e-03, 5.264e-02, -1.826e-03, -1.120e-03, 6.985e-04, 1.925e-02) * s0_1_2;
	r0 += M4(-1.929e-05, 6.556e-04, 2.338e-04, 5.488e-03, -9.794e-05, -4.408e-04, -9.353e-03, 1.020e-03, -1.858e-03, -8.158e-04, -1.482e-02, -1.240e-03, 1.579e-05, 2.735e-04, 3.103e-04, 1.061e-03) * s0_2_0;
	r0 += M4(9.636e-04, 3.891e-03, -3.562e-03, 2.789e-02, 4.992e-03, -9.949e-04, -2.031e-02, -1.225e-02, 1.158e-03, 2.876e-04, -7.398e-02, -1.017e-01, 5.385e-04, -1.220e-03, 8.671e-04, -4.457e-03) * s0_2_1;
	r0 += M4(1.245e-05, -5.754e-06, -3.118e-07, -7.122e-05, -1.256e-03, -1.186e-03, -1.094e-03, 7.014e-03, -7.088e-04, 1.940e-03, -1.490e-03, -6.511e-03, -2.196e-05, -4.202e-05, 6.778e-06, 6.187e-05) * s0_2_2;
	r0 += M4(3.753e-02, -1.532e-02, 2.121e-02, -2.017e-02, -1.095e-01, -1.039e-01, -4.153e-02, -4.972e-02, 2.535e-02, 2.866e-02, 5.431e-02, 3.229e-02, 9.169e-03, 2.173e-04, 5.293e-03, -1.785e-03) * s1_0_0;
	r0 += M4(2.716e-02, 1.147e-01, 3.609e-02, 9.121e-02, 1.824e-02, 6.244e-03, -1.239e-03, 5.618e-02, -2.622e-03, -1.246e-02, -3.120e-02, -5.108e-03, 6.839e-02, 6.470e-02, 1.124e-02, 2.364e-02) * s1_0_1;
	r0 += M4(-2.583e-02, 1.467e-02, 3.196e-02, 3.447e-02, 1.956e-02, 2.180e-02, 2.443e-02, 2.413e-02, -4.811e-02, -4.326e-02, -4.573e-02, -4.198e-02, 3.221e-03, 1.673e-02, 1.395e-03, 2.150e-03) * s1_0_2;
	r0 += M4(-1.883e-02, 5.528e-02, 1.624e-02, 3.337e-02, 3.200e-02, 5.002e-02, -1.842e-02, -1.969e-02, -5.106e-02, -4.939e-02, -7.944e-02, -7.260e-02, -3.107e-02, 2.567e-03, -2.305e-02, 1.548e-03) * s1_1_0;
	r0 += M4(-3.041e-02, -1.560e-02, -8.780e-03, -1.713e-03, -3.201e-02, -2.961e-02, -5.273e-02, -6.193e-02, -1.207e-01, -1.084e-01, -1.249e-01, -1.226e-01, -1.150e-01, -1.042e-01, -1.335e-02, -4.671e-02) * s1_1_1;
	r0 += M4(-1.214e-02, -8.727e-03, -7.567e-03, -2.183e-03, -9.814e-03, -8.272e-03, -3.107e-02, -2.885e-02, 1.879e-02, 2.143e-02, 1.732e-02, 1.734e-02, 1.453e-02, -2.160e-02, 1.162e-02, 2.177e-02) * s1_1_2;
	r0 += M4(-2.398e-02, 5.129e-02, -2.388e-02, 2.714e-02, -1.149e-03, 3.734e-02, 3.293e-02, 1.244e-02, 3.152e-02, 4.031e-02, 3.761e-02, 4.167e-02, 2.033e-03, 3.860e-04, -1.187e-02, 7.240e-04) * s1_2_0;
	r0 += M4(-1.562e-02, 1.569e-03, -1.363e-02, -1.534e-02, -1.281e-01, -1.270e-01, -1.269e-01, -1.306e-01, 9.635e-02, 1.144e-01, 9.599e-02, 1.019e-01, -5.948e-05, -2.525e-03, -3.674e-02, -3.607e-02) * s1_2_1;
	r0 += M4(1.224e-02, 1.282e-02, 1.143e-02, 1.877e-02, -9.009e-02, -9.522e-02, -8.248e-02, -8.009e-02, -5.332e-02, -5.232e-02, -5.087e-02, -4.624e-02, 5.844e-03, 7.294e-03, 5.892e-03, -3.987e-03) * s1_2_2;
	s0_0_0 = G[2][xy.y+0][xy.x+0]; s0_0_1 = G[2][xy.y+0][xy.x+1];
	s0_0_2 = G[2][xy.y+0][xy.x+2]; s0_1_0 = G[2][xy.y+1][xy.x+0];
	s0_1_1 = G[2][xy.y+1][xy.x+1]; s0_1_2 = G[2][xy.y+1][xy.x+2];
	s0_2_0 = G[2][xy.y+2][xy.x+0]; s0_2_1 = G[2][xy.y+2][xy.x+1];
	s0_2_2 = G[2][xy.y+2][xy.x+2];
	r0 += M4(4.599e-02, -1.201e-02, -8.655e-03, -1.605e-02, -2.526e-02, -1.321e-02, 1.921e-03, 3.210e-03, 5.111e-02, -6.547e-03, 2.387e-02, -4.771e-03, 1.010e-02, 8.127e-05, 2.465e-03, 4.279e-04) * s0_0_0;
	r0 += M4(-4.912e-02, -1.333e-01, 1.004e-02, -2.843e-03, 7.236e-02, 2.603e-02, 1.273e-02, 1.016e-02, -5.526e-01, 1.597e-01, 3.796e-02, 7.780e-02, 1.214e-01, 7.739e-02, -3.115e-04, -2.870e-03) * s0_0_1;
	r0 += M4(1.433e-03, -1.517e-02, -8.760e-05, 4.516e-03, 1.691e-02, 2.604e-02, -1.213e-02, -3.308e-02, 1.002e-02, -9.496e-03, 2.590e-03, 2.329e-02, 1.261e-02, -1.882e-02, 6.876e-03, -7.449e-03) * s0_0_2;
	r0 += M4(1.140e-01, -1.937e-03, 1.101e-01, 4.996e-03, 1.942e-01, -1.016e-02, -1.909e-03, -6.324e-02, 2.779e-03, -5.411e-04, 2.667e-02, 2.358e-03, 3.430e-02, 2.430e-03, 3.673e-02, -1.929e-03) * s0_1_0;
	r0 += M4(2.558e-01, 2.104e-01, -2.108e-01, -4.268e-01, -1.481e+00, 4.561e-01, 2.562e-01, 2.440e-01, 4.975e-03, 4.628e-03, 6.275e-02, 8.814e-02, 5.896e-02, 9.448e-02, -4.708e-01, 1.489e-01) * s0_1_1;
	r0 += M4(-1.070e-02, -1.402e-02, -5.051e-03, -5.359e-02, 5.530e-01, -1.005e+00, 5.979e-02, 7.249e-02, 5.728e-05, -6.160e-03, 4.045e-03, 3.528e-02, -6.855e-03, -3.844e-02, 1.270e-03, -1.183e-01) * s0_1_2;
	r0 += M4(5.461e-04, -8.961e-04, 2.496e-02, -2.793e-03, -4.893e-02, -8.989e-03, 6.566e-02, -6.144e-03, 3.676e-05, -7.491e-06, 3.901e-04, 6.974e-05, 1.487e-04, -9.950e-05, 1.028e-02, -4.236e-04) * s0_2_0;
	r0 += M4(-3.358e-03, -3.818e-03, 7.009e-02, 6.274e-02, 3.505e-01, 2.643e-01, -1.303e+00, 5.445e-01, -7.226e-04, 5.085e-04, -1.771e-03, 1.776e-03, -2.704e-03, 3.577e-03, 2.277e-02, 1.812e-02) * s0_2_1;
	r0 += M4(4.883e-04, -9.306e-04, 8.811e-04, 6.209e-03, 2.497e-02, -2.548e-02, -2.837e-02, -3.596e-02, 2.259e-04, 4.681e-04, 1.360e-04, 4.553e-04, 5.357e-04, 3.680e-04, 2.108e-03, -6.166e-03) * s0_2_2;
	r0 += V4(-1.439e-11, -8.409e-11, 2.110e-09, 3.189e-11);
	r0 = r0;
	vec2 opt = 0.5 * LUMA_pt;
	vec2 fpos = (vec2(opos) + vec2(0.5)) * opt;
	imageStore(out_image, opos + ivec2(0, 0), vec4(r0.x + LUMA_tex(fpos + vec2(0.0, 0.0) * opt).r, 0.0, 0.0, 1.0));
	imageStore(out_image, opos + ivec2(1, 0), vec4(r0.y + LUMA_tex(fpos + vec2(1.0, 0.0) * opt).r, 0.0, 0.0, 1.0));
	imageStore(out_image, opos + ivec2(0, 1), vec4(r0.z + LUMA_tex(fpos + vec2(0.0, 1.0) * opt).r, 0.0, 0.0, 1.0));
	imageStore(out_image, opos + ivec2(1, 1), vec4(r0.w + LUMA_tex(fpos + vec2(1.0, 1.0) * opt).r, 0.0, 0.0, 1.0));
}
