// CuNNy 3x12
// Copyright (c) 2024 funnyplanter

// This program is free software; you can redistribute it and/or
// modify it under the terms of the GNU Lesser General Public
// License as published by the Free Software Foundation; either
// version 3.0 of the License, or (at your option) any later version.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
// Lesser General Public License for more details.
//
// You should have received a copy of the GNU Lesser General Public
// License along with this program.  If not, see <https://www.gnu.org/licenses/>.
/* ------------------------------------------------------------------- */


//!DESC CuNNy-3x12-in
//!HOOK LUMA
//!COMPUTE 24 8 8 8
//!BIND LUMA
//!SAVE in
//!WIDTH LUMA.w 3 *
//!HEIGHT LUMA.h
//!COMPONENTS 4
//!WHEN OUTPUT.w LUMA.w / 1.3 > OUTPUT.h LUMA.h / 1.3 > *
#extension GL_EXT_shader_explicit_arithmetic_types_float16 : enable
#ifdef GL_EXT_shader_explicit_arithmetic_types_float16
#	define V4 f16vec4
#	define M4 f16mat4
#	define F float16_t
#else
#	define V4 vec4
#	define M4 mat4
#	define F float
#endif
#define l0(x, y) F((LUMA_mul * texelFetch(LUMA_raw, clamp(pos + ivec2(x, y), ivec2(0), sz) * ivec2(1, 1) + ivec2(0, 0), 0)).r)
shared F G[1][10][10];
void hook() {
	ivec2 xy = ivec2(gl_LocalInvocationID.xy);
	ivec2 pos = ivec2(gl_WorkGroupID.xy) * ivec2(8, 8) + xy;
	ivec2 opos = pos * ivec2(3, 1);
	ivec2 sz = ivec2(LUMA_size) - ivec2(1);
	for (int y = 0; y < 10; y += 8) {
		int ay = xy.y + y;
		if (ay >= 10) break;
		for (int x = 0; x < 10; x += 8) {
			int ax = xy.x + x;
			if (ax >= 10) break;
			G[0][ay][ax] = l0(x - 1, y - 1);
		}
	}
	barrier();
	F s0_0_0, s0_0_1, s0_0_2, s0_1_0, s0_1_1, s0_1_2, s0_2_0, s0_2_1, s0_2_2;
	V4 r0, r1, r2;
	r0 = V4(0.0); r1 = V4(0.0); r2 = V4(0.0);
	s0_0_0 = G[0][xy.y+0][xy.x+0]; s0_0_1 = G[0][xy.y+0][xy.x+1];
	s0_0_2 = G[0][xy.y+0][xy.x+2]; s0_1_0 = G[0][xy.y+1][xy.x+0];
	s0_1_1 = G[0][xy.y+1][xy.x+1]; s0_1_2 = G[0][xy.y+1][xy.x+2];
	s0_2_0 = G[0][xy.y+2][xy.x+0]; s0_2_1 = G[0][xy.y+2][xy.x+1];
	s0_2_2 = G[0][xy.y+2][xy.x+2];
	r0 += V4(-2.641e-02, -1.353e-01, 7.065e-01, -9.857e-03) * s0_0_0;
	r1 += V4(-6.666e-02, 1.384e-02, 1.474e-01, -8.756e-03) * s0_0_0;
	r2 += V4(7.809e-02, -1.218e-01, 1.166e-05, 7.255e-03) * s0_0_0;
	r0 += V4(1.539e-01, -1.179e-01, 3.238e-01, 2.648e-02) * s0_0_1;
	r1 += V4(1.668e-02, -1.265e-01, -2.529e-01, 5.193e-03) * s0_0_1;
	r2 += V4(-7.264e-01, -2.781e-01, -1.027e+00, -6.373e-03) * s0_0_1;
	r0 += V4(1.788e-01, -4.406e-02, -6.757e-03, -1.946e-02) * s0_0_2;
	r1 += V4(7.242e-02, -4.132e-02, 1.386e-01, -5.778e-03) * s0_0_2;
	r2 += V4(2.319e-01, -4.297e-03, -1.578e-04, -2.129e-03) * s0_0_2;
	r0 += V4(7.541e-02, -1.462e-01, -8.418e-01, -4.660e-02) * s0_1_0;
	r1 += V4(-2.823e-01, 1.356e-02, -1.899e-01, -6.786e-02) * s0_1_0;
	r2 += V4(-1.017e-01, 8.192e-01, -4.901e-05, 9.004e-01) * s0_1_0;
	r0 += V4(-9.538e-02, 6.085e-01, -1.672e-01, 5.200e-01) * s0_1_1;
	r1 += V4(-6.286e-01, 5.082e-01, 3.993e-01, 7.897e-02) * s0_1_1;
	r2 += V4(3.916e-02, -4.170e-01, 1.021e+00, -8.981e-01) * s0_1_1;
	r0 += V4(-3.745e-01, 3.717e-02, 2.154e-02, -1.021e-01) * s0_1_2;
	r1 += V4(-1.147e-01, -1.484e-01, 4.427e-03, -1.072e-02) * s0_1_2;
	r2 += V4(4.756e-01, -2.165e-02, 1.131e-04, -1.458e-03) * s0_1_2;
	r0 += V4(-1.255e-02, -9.723e-02, 1.863e-02, 2.364e-02) * s0_2_0;
	r1 += V4(3.193e-01, -2.688e-02, 5.510e-02, -9.130e-01) * s0_2_0;
	r2 += V4(1.113e-02, 5.091e-02, 4.554e-06, 3.799e-03) * s0_2_0;
	r0 += V4(-1.282e-02, -1.740e-02, -4.465e-02, -3.184e-01) * s0_2_1;
	r1 += V4(6.382e-01, -1.888e-02, -4.642e-02, 9.160e-01) * s0_2_1;
	r2 += V4(4.519e-02, 4.140e-02, 5.868e-05, -5.348e-03) * s0_2_1;
	r0 += V4(6.345e-03, -7.274e-03, -1.071e-02, 3.236e-02) * s0_2_2;
	r1 += V4(3.943e-02, -1.360e-03, -2.384e-02, 5.356e-03) * s0_2_2;
	r2 += V4(-5.239e-02, -5.589e-02, 3.031e-06, 8.610e-04) * s0_2_2;
	r0 += V4(1.092e-01, 4.188e-03, 4.987e-03, -4.346e-04);
	r0 = clamp(r0, V4(0.0), V4(1.0));
	imageStore(out_image, opos + ivec2(0, 0), vec4(r0));
	r1 += V4(1.910e-02, 8.148e-03, 4.262e-02, 6.877e-03);
	r1 = clamp(r1, V4(0.0), V4(1.0));
	imageStore(out_image, opos + ivec2(1, 0), vec4(r1));
	r2 += V4(1.221e-03, 2.740e-02, -3.096e-05, 7.607e-04);
	r2 = clamp(r2, V4(0.0), V4(1.0));
	imageStore(out_image, opos + ivec2(2, 0), vec4(r2));
}

//!DESC CuNNy-3x12-conv1
//!HOOK LUMA
//!COMPUTE 24 8 8 8
//!BIND in
//!BIND LUMA
//!SAVE conv1
//!WIDTH LUMA.w 3 *
//!HEIGHT LUMA.h
//!COMPONENTS 4
//!WHEN OUTPUT.w LUMA.w / 1.3 > OUTPUT.h LUMA.h / 1.3 > *
#extension GL_EXT_shader_explicit_arithmetic_types_float16 : enable
#ifdef GL_EXT_shader_explicit_arithmetic_types_float16
#	define V4 f16vec4
#	define M4 f16mat4
#	define F float16_t
#else
#	define V4 vec4
#	define M4 mat4
#	define F float
#endif
#define l0(x, y) V4((in_mul * texelFetch(in_raw, clamp(pos + ivec2(x, y), ivec2(0), sz) * ivec2(3, 1) + ivec2(0, 0), 0)))
#define l1(x, y) V4((in_mul * texelFetch(in_raw, clamp(pos + ivec2(x, y), ivec2(0), sz) * ivec2(3, 1) + ivec2(1, 0), 0)))
#define l2(x, y) V4((in_mul * texelFetch(in_raw, clamp(pos + ivec2(x, y), ivec2(0), sz) * ivec2(3, 1) + ivec2(2, 0), 0)))
shared V4 G[3][10][10];
void hook() {
	ivec2 xy = ivec2(gl_LocalInvocationID.xy);
	ivec2 pos = ivec2(gl_WorkGroupID.xy) * ivec2(8, 8) + xy;
	ivec2 opos = pos * ivec2(3, 1);
	ivec2 sz = ivec2(LUMA_size) - ivec2(1);
	for (int y = 0; y < 10; y += 8) {
		int ay = xy.y + y;
		if (ay >= 10) break;
		for (int x = 0; x < 10; x += 8) {
			int ax = xy.x + x;
			if (ax >= 10) break;
			G[0][ay][ax] = l0(x - 1, y - 1);
			G[1][ay][ax] = l1(x - 1, y - 1);
			G[2][ay][ax] = l2(x - 1, y - 1);
		}
	}
	barrier();
	V4 s0_0_0, s0_0_1, s0_0_2, s0_1_0, s0_1_1, s0_1_2, s0_2_0, s0_2_1, s0_2_2, s1_0_0, s1_0_1, s1_0_2, s1_1_0, s1_1_1, s1_1_2, s1_2_0, s1_2_1, s1_2_2;
	V4 r0, r1, r2;
	r0 = V4(0.0); r1 = V4(0.0); r2 = V4(0.0);
	s0_0_0 = G[0][xy.y+0][xy.x+0]; s0_0_1 = G[0][xy.y+0][xy.x+1];
	s0_0_2 = G[0][xy.y+0][xy.x+2]; s0_1_0 = G[0][xy.y+1][xy.x+0];
	s0_1_1 = G[0][xy.y+1][xy.x+1]; s0_1_2 = G[0][xy.y+1][xy.x+2];
	s0_2_0 = G[0][xy.y+2][xy.x+0]; s0_2_1 = G[0][xy.y+2][xy.x+1];
	s0_2_2 = G[0][xy.y+2][xy.x+2]; s1_0_0 = G[1][xy.y+0][xy.x+0];
	s1_0_1 = G[1][xy.y+0][xy.x+1]; s1_0_2 = G[1][xy.y+0][xy.x+2];
	s1_1_0 = G[1][xy.y+1][xy.x+0]; s1_1_1 = G[1][xy.y+1][xy.x+1];
	s1_1_2 = G[1][xy.y+1][xy.x+2]; s1_2_0 = G[1][xy.y+2][xy.x+0];
	s1_2_1 = G[1][xy.y+2][xy.x+1]; s1_2_2 = G[1][xy.y+2][xy.x+2];
	r0 += M4(1.701e-01, 1.000e+00, 2.112e-01, -4.795e-02, -8.121e-02, -3.031e-01, -1.594e-02, -1.490e-02, 3.106e-04, -2.303e-01, -2.718e-02, 3.654e-02, -8.292e-01, 8.013e-01, -1.176e-01, 2.321e-01) * s0_0_0;
	r1 += M4(-1.291e-01, -4.546e-01, 9.448e-03, -2.442e-02, 2.948e-01, 3.562e-01, -8.119e-02, 1.525e-01, 8.674e-02, 1.688e-01, -1.476e-01, -4.562e-03, -2.903e-01, -6.894e-01, -5.274e-02, 3.419e-01) * s0_0_0;
	r2 += M4(4.865e-01, 4.045e-02, 1.495e-01, -2.045e-01, 6.402e-01, -3.071e-01, 2.488e-01, 7.901e-02, -1.068e-01, -7.888e-02, -4.356e-02, 4.862e-02, -1.072e-01, 1.432e-01, 1.815e-01, 1.812e-02) * s0_0_0;
	r0 += M4(-2.337e-01, -2.172e-01, 1.608e-01, 6.274e-02, 1.373e-02, 2.008e-01, 1.489e-01, 3.169e-02, -2.847e-01, -8.520e-01, -2.362e-02, 4.515e-02, -2.999e-01, -2.078e-01, 2.394e-02, -3.382e-01) * s0_0_1;
	r1 += M4(6.287e-02, 3.868e-02, 2.060e-01, -2.876e-01, -4.005e-01, 1.513e-01, 2.235e-01, -4.169e-01, -3.281e-02, 2.595e-02, 4.802e-02, 1.210e-01, 5.213e-02, 2.812e-01, -2.935e-01, -6.932e-02) * s0_0_1;
	r2 += M4(5.920e-02, -1.281e-01, -1.013e-01, 1.556e-01, -1.377e-01, 1.762e-01, 1.214e-01, -3.694e-02, 2.345e-01, -1.049e-01, -5.605e-02, 1.233e-01, -5.784e-01, -1.413e-01, -3.121e-01, -1.274e-01) * s0_0_1;
	r0 += M4(3.982e-02, 2.597e-01, -8.338e-02, 1.455e-02, -8.024e-02, 2.995e-01, 4.957e-03, 1.133e-01, 3.634e-01, -1.000e+00, -1.847e-02, -1.355e-02, 2.810e-01, -4.087e-01, 4.375e-02, -4.362e-02) * s0_0_2;
	r1 += M4(3.300e-02, 1.411e-01, 3.719e-02, 1.784e-01, -2.553e-01, -1.725e-01, 7.865e-04, -1.496e-01, -2.250e-03, 2.305e-01, -5.236e-02, 7.409e-02, 2.321e-01, -7.760e-02, 2.678e-01, 2.103e-01) * s0_0_2;
	r2 += M4(3.317e-03, 7.245e-02, 9.506e-02, 7.987e-03, 7.976e-02, 1.282e-01, -1.449e-01, 4.877e-02, -1.231e-01, 1.952e-01, 3.858e-02, -1.182e-02, 1.733e-01, -2.081e-01, 1.206e-01, 2.792e-02) * s0_0_2;
	r0 += M4(9.210e-01, -3.340e-01, -3.740e-01, 5.365e-03, -1.598e-01, 1.325e-01, -1.268e-01, 6.363e-01, -1.669e-02, -3.780e-01, 1.985e-02, -7.465e-02, -1.703e-01, 8.987e-01, -2.374e-01, 2.105e-01) * s0_1_0;
	r1 += M4(3.779e-01, 1.827e-01, -2.933e-02, -2.900e-02, -3.072e-01, -3.629e-01, -1.857e-01, 3.985e-01, 1.733e-01, 6.153e-02, -1.401e-02, 4.419e-02, -7.591e-02, 1.000e+00, -3.318e-02, -6.489e-02) * s0_1_0;
	r2 += M4(-5.125e-01, 2.640e-02, -3.620e-01, -6.885e-02, 8.235e-01, -2.585e-01, -3.272e-01, 1.458e-01, 1.954e-01, -1.831e-01, 8.566e-02, 3.969e-02, -9.189e-02, 1.477e-01, 1.313e-01, -1.934e-01) * s0_1_0;
	r0 += M4(-3.717e-01, -4.780e-01, 3.109e-02, 6.003e-02, 1.803e-01, -1.000e+00, -5.998e-02, -2.391e-01, 4.104e-01, 1.801e-01, 1.853e-01, -3.993e-02, 9.012e-01, 2.738e-01, 2.988e-01, -2.116e-01) * s0_1_1;
	r1 += M4(-2.610e-01, 4.191e-01, -1.416e-01, 8.361e-02, 1.685e-01, -3.595e-01, -4.861e-01, 4.072e-02, 9.984e-02, 3.041e-01, 3.428e-01, -7.880e-02, -3.913e-01, -4.374e-01, 1.787e-01, -1.529e-01) * s0_1_1;
	r2 += M4(9.486e-03, 4.054e-01, -7.814e-02, 2.015e-02, 1.327e-01, 7.601e-01, -2.336e-01, -6.554e-02, 3.164e-01, -6.226e-02, 2.270e-02, 3.581e-02, 2.522e-01, 1.574e-01, -1.997e-01, -1.989e-01) * s0_1_1;
	r0 += M4(-3.565e-02, -1.663e-01, -1.034e-01, 3.390e-02, 1.557e-01, 1.836e-01, 1.666e-01, -2.764e-01, 1.234e-01, 1.428e-01, -3.172e-02, 8.989e-02, -1.025e-01, -9.793e-01, -1.032e-02, 9.155e-02) * s0_1_2;
	r1 += M4(-6.471e-02, -2.680e-01, -5.317e-02, -1.849e-02, 6.961e-01, -3.986e-01, 2.969e-01, 1.765e-02, -8.796e-02, 5.579e-03, -1.898e-01, -1.707e-01, 2.048e-01, 1.289e-01, 3.095e-01, 2.776e-02) * s0_1_2;
	r2 += M4(-3.270e-02, -1.233e-01, 1.393e-01, -1.187e-01, -3.280e-01, -2.167e-01, 5.206e-02, -1.876e-02, -2.464e-01, 2.848e-01, -2.751e-01, 1.645e-01, 7.476e-02, -4.596e-01, 2.113e-01, 8.471e-02) * s0_1_2;
	r0 += M4(-2.323e-01, 3.511e-01, 1.163e-03, 6.584e-02, -2.072e-01, 3.718e-01, 1.841e-01, 9.475e-03, -2.690e-01, 1.670e-01, 9.094e-03, -1.471e-01, 3.116e-01, -4.195e-01, 1.417e-01, -1.342e-01) * s0_2_0;
	r1 += M4(1.148e-01, -1.885e-01, -3.272e-01, -5.692e-02, -3.134e-01, -5.300e-01, 3.719e-01, -4.915e-02, 1.743e-01, -1.365e-02, 1.283e-01, 7.418e-02, -4.909e-02, -2.381e-01, 1.646e-01, 5.316e-02) * s0_2_0;
	r2 += M4(1.738e-01, -2.550e-01, 5.245e-02, 1.220e-01, 1.693e-01, 3.659e-01, -1.320e-01, 5.348e-02, 5.809e-02, -5.213e-02, 3.739e-02, -9.040e-03, -2.980e-02, -4.053e-01, -1.258e-01, 1.045e-01) * s0_2_0;
	r0 += M4(1.183e-01, -3.556e-01, 2.238e-01, -1.302e-01, 1.788e-01, -2.815e-01, -1.500e-01, -2.876e-01, -1.023e-01, -3.297e-01, 6.139e-01, -1.292e-02, 3.059e-01, -3.605e-01, -4.732e-02, 1.857e-01) * s0_2_1;
	r1 += M4(-3.074e-01, -1.208e-01, 3.504e-01, 2.397e-01, 2.347e-02, 2.391e-01, 2.412e-01, -4.218e-02, -5.367e-01, -6.194e-01, 3.171e-01, 9.557e-02, 2.563e-01, 5.879e-01, -2.958e-01, -1.323e-01) * s0_2_1;
	r2 += M4(2.266e-01, 4.897e-01, 9.647e-02, 8.090e-02, -3.722e-01, -8.772e-01, 8.779e-03, -1.811e-01, 5.199e-02, 4.906e-01, -5.297e-02, 1.332e-01, 1.767e-01, 2.937e-01, 2.038e-01, 2.224e-02) * s0_2_1;
	r0 += M4(-1.437e-01, 1.322e-02, -2.294e-02, 2.536e-02, -4.943e-01, 5.042e-01, -1.515e-02, 8.658e-02, -2.286e-01, 5.428e-01, 9.668e-02, 1.688e-01, -2.492e-01, 4.152e-01, 2.517e-02, 4.691e-02) * s0_2_2;
	r1 += M4(8.777e-02, 1.542e-01, -5.021e-02, 1.601e-02, 4.872e-01, 1.925e-01, -2.661e-01, 1.053e-01, -1.000e+00, -1.297e-01, -7.251e-02, -3.179e-02, 2.129e-02, -7.591e-02, 1.113e-01, -2.153e-02) * s0_2_2;
	r2 += M4(-1.789e-01, -1.665e-01, 1.755e-02, -1.157e-01, -4.105e-01, 1.905e-01, -1.253e-01, -9.194e-02, -1.181e-01, -4.955e-01, 4.580e-02, -1.636e-01, 2.169e-01, 3.521e-01, 5.289e-02, 1.991e-01) * s0_2_2;
	r0 += M4(-2.840e-01, 3.056e-01, 2.033e-01, -1.979e-01, 1.459e-01, 3.006e-01, 2.307e-01, -1.902e-01, -2.804e-01, 1.169e-01, 1.484e-01, -1.815e-01, 5.658e-02, 1.899e-01, 1.052e-03, -2.316e-01) * s1_0_0;
	r1 += M4(3.369e-02, -5.226e-02, 2.816e-01, -2.916e-02, 1.586e-01, -3.731e-03, 3.449e-01, 1.247e-02, 8.305e-03, 5.473e-02, 1.010e-01, 8.365e-02, 1.326e-01, -8.519e-02, 1.501e-01, -1.314e-01) * s1_0_0;
	r2 += M4(-1.460e-01, 2.229e-02, -1.440e-01, 7.690e-03, 2.642e-01, 2.996e-01, 1.457e-01, 1.115e-01, -1.370e-01, -3.580e-02, 1.139e-01, 7.837e-02, -6.031e-01, 9.011e-02, 3.457e-02, -9.448e-02) * s1_0_0;
	r0 += M4(3.625e-01, -1.000e+00, -9.463e-02, 2.358e-01, 4.015e-01, 3.655e-01, 1.036e-01, 1.213e-01, -7.388e-02, 9.942e-01, 6.485e-02, -2.091e-02, -1.000e+00, -8.718e-01, 3.070e-01, -1.000e+00) * s1_0_1;
	r1 += M4(1.470e-01, -2.542e-02, -1.694e-01, 1.447e-01, 3.168e-01, 6.797e-02, -5.538e-01, 5.999e-03, -3.099e-01, 4.690e-01, 7.269e-02, 1.765e-01, -1.067e-01, -3.407e-01, 1.061e-01, 3.641e-01) * s1_0_1;
	r2 += M4(1.961e-01, -4.513e-01, 3.569e-02, 9.930e-02, 1.704e-01, 2.170e-01, 8.266e-01, 2.685e-01, 4.796e-02, -9.586e-02, 2.791e-01, 1.014e-01, -8.530e-01, -2.930e-01, 1.088e-01, 3.817e-02) * s1_0_1;
	r0 += M4(1.352e-01, -7.984e-01, -5.345e-02, -9.258e-02, -2.808e-01, -4.271e-01, -8.072e-02, -3.106e-02, -8.786e-02, -6.637e-02, 7.701e-02, 6.662e-02, -1.303e-01, -1.008e-01, 1.164e-01, 5.449e-02) * s1_0_2;
	r1 += M4(9.711e-02, 2.050e-01, -2.588e-01, -1.065e-01, -4.554e-01, 3.961e-03, 9.073e-02, -9.617e-03, -6.793e-02, -1.233e-01, 6.042e-02, -2.558e-02, -2.131e-01, -8.850e-03, -3.172e-01, 9.367e-02) * s1_0_2;
	r2 += M4(-2.364e-01, 5.566e-01, -5.218e-02, -1.972e-01, -8.038e-02, -2.686e-01, 5.389e-02, 7.372e-02, 2.651e-01, 2.913e-02, -1.034e-02, 7.570e-02, 1.000e+00, -3.928e-01, -1.461e-01, 4.450e-01) * s1_0_2;
	r0 += M4(1.854e-01, -1.637e-01, 1.053e-01, -4.804e-02, -3.270e-01, 1.555e-02, 2.528e-01, 2.093e-01, -8.000e-01, 1.595e-01, -4.478e-02, 5.326e-01, 1.577e-01, -1.710e-01, -7.926e-02, -2.056e-02) * s1_1_0;
	r1 += M4(-2.549e-01, -9.728e-02, 1.166e-01, 1.253e-01, 3.952e-01, 4.264e-01, -5.880e-01, -2.528e-01, -1.911e-01, -2.262e-01, 1.000e+00, 2.427e-01, -7.094e-02, 1.734e-01, -1.616e-01, -5.783e-02) * s1_1_0;
	r2 += M4(2.955e-01, 3.168e-01, 6.127e-02, 7.029e-02, 1.058e-01, 2.378e-01, 3.908e-01, 7.278e-02, 2.167e-01, -3.044e-01, -5.129e-02, 7.541e-02, -6.371e-02, 6.890e-02, -1.060e-03, -3.745e-02) * s1_1_0;
	r0 += M4(-3.166e-01, -8.139e-01, -3.857e-01, 4.287e-01, 2.658e-01, -6.193e-01, -8.661e-02, -4.015e-01, -3.318e-01, -3.564e-01, 2.534e-01, -5.346e-01, 7.426e-02, -5.504e-02, -1.978e-01, 1.925e-01) * s1_1_1;
	r1 += M4(9.398e-02, -2.783e-01, 6.787e-01, -2.739e-02, -1.767e-01, -5.451e-01, 4.658e-01, 7.458e-02, 9.607e-02, -2.701e-01, -1.000e+00, 1.205e-01, 2.305e-01, 2.946e-01, -4.135e-01, -5.845e-02) * s1_1_1;
	r2 += M4(2.064e-01, -1.000e+00, -2.665e-01, -8.136e-02, -2.327e-01, 2.188e-01, -7.854e-01, -1.905e-01, -2.842e-01, 2.433e-01, -2.685e-01, -2.055e-01, -4.686e-02, 3.841e-02, -1.178e-01, 9.325e-02) * s1_1_1;
	r0 += M4(5.294e-01, 2.454e-01, -5.583e-02, -1.713e-02, 5.853e-01, -4.585e-01, 6.205e-02, 2.026e-01, 3.036e-01, 1.504e-01, 1.152e-02, 7.211e-02, -2.979e-02, -2.394e-01, 2.358e-01, 2.653e-02) * s1_1_2;
	r1 += M4(1.462e-01, 4.219e-02, -4.827e-01, -2.929e-01, 2.016e-01, 6.203e-02, -2.350e-01, -3.193e-01, -1.566e-01, -1.491e-02, 1.100e-01, -2.517e-01, -3.197e-01, 4.911e-02, 2.875e-01, 7.806e-02) * s1_1_2;
	r2 += M4(-5.317e-04, 1.836e-01, -4.073e-01, 1.190e-01, 2.463e-01, 1.879e-01, -2.939e-01, 1.137e-01, -3.611e-01, -2.173e-01, -1.158e-03, 2.221e-01, 9.632e-04, 6.367e-01, 2.150e-01, 5.123e-01) * s1_1_2;
	r0 += M4(-9.064e-02, 1.479e-01, 1.760e-02, 3.674e-02, -5.477e-01, -1.392e-01, -4.401e-01, 4.660e-01, 4.342e-02, 1.157e-01, 1.967e-01, 2.238e-01, 3.139e-02, -7.395e-02, 5.135e-02, 2.110e-02) * s1_2_0;
	r1 += M4(-8.721e-04, 1.183e-01, -1.022e-01, -1.265e-02, -5.751e-04, 2.847e-02, -1.760e-02, -7.078e-02, -1.708e-01, 7.291e-02, 1.183e-02, 1.323e-02, 4.813e-02, 7.555e-02, -1.588e-02, -3.316e-02) * s1_2_0;
	r2 += M4(1.040e-01, 6.399e-02, 4.830e-02, 4.562e-03, -3.491e-01, -2.536e-01, -1.975e-01, -2.531e-01, -6.429e-02, 1.981e-01, 4.794e-02, -1.002e-02, -1.021e-02, -3.968e-02, 2.367e-02, 9.140e-03) * s1_2_0;
	r0 += M4(-1.224e-02, 4.941e-02, -3.244e-02, -4.944e-02, 1.728e-01, 3.626e-01, -1.313e-01, -1.249e-01, 4.747e-01, -1.693e-01, -7.860e-01, 5.296e-02, 1.996e-02, 1.045e-01, -8.682e-02, 1.116e-03) * s1_2_1;
	r1 += M4(-3.033e-01, -2.871e-01, 1.905e-01, 6.348e-02, 2.782e-01, 4.511e-02, 6.299e-02, 2.399e-01, 5.078e-01, 5.131e-02, -2.119e-01, -2.230e-01, -3.334e-02, 9.005e-02, -8.710e-03, -2.722e-02) * s1_2_1;
	r2 += M4(-1.285e-01, 3.006e-01, -2.620e-02, -1.235e-01, 4.159e-03, -7.316e-01, -1.580e-01, 1.020e-01, 2.326e-02, -5.860e-02, 4.540e-02, -1.650e-01, 3.631e-02, 2.637e-01, 1.489e-01, -2.483e-02) * s1_2_1;
	r0 += M4(3.589e-02, 4.039e-05, 2.616e-02, 6.864e-05, 1.059e-01, 5.941e-01, 5.776e-02, -2.765e-01, 5.215e-01, -1.000e+00, 2.054e-02, -2.297e-01, -8.425e-03, 4.773e-02, -8.119e-02, 1.548e-02) * s1_2_2;
	r1 += M4(-1.007e-01, 3.951e-02, 1.189e-01, -4.037e-03, -5.393e-01, -1.627e-01, 2.381e-02, -1.202e-02, -2.318e-02, 1.216e-01, -5.988e-02, 1.135e-01, 8.472e-02, 1.236e-01, 4.201e-03, -2.136e-02) * s1_2_2;
	r2 += M4(-4.592e-02, -3.900e-01, 9.226e-02, 2.340e-02, -2.748e-02, 4.010e-01, 1.225e-01, -1.801e-01, 4.679e-02, 2.636e-01, -1.297e-01, -2.564e-01, 5.318e-02, 1.676e-01, 9.983e-02, -1.098e-02) * s1_2_2;
	s0_0_0 = G[2][xy.y+0][xy.x+0]; s0_0_1 = G[2][xy.y+0][xy.x+1];
	s0_0_2 = G[2][xy.y+0][xy.x+2]; s0_1_0 = G[2][xy.y+1][xy.x+0];
	s0_1_1 = G[2][xy.y+1][xy.x+1]; s0_1_2 = G[2][xy.y+1][xy.x+2];
	s0_2_0 = G[2][xy.y+2][xy.x+0]; s0_2_1 = G[2][xy.y+2][xy.x+1];
	s0_2_2 = G[2][xy.y+2][xy.x+2];
	r0 += M4(-2.913e-02, 1.013e-02, -3.634e-02, 3.201e-02, 4.202e-03, 3.289e-01, 3.580e-02, 2.104e-02, 4.137e-02, 4.212e-02, -3.586e-02, -1.712e-02, 1.966e-01, -4.191e-01, 8.780e-03, 8.899e-03) * s0_0_0;
	r1 += M4(1.653e-01, 2.965e-02, -1.375e-01, 1.909e-01, -6.897e-02, -2.299e-01, 2.350e-01, 3.313e-02, -1.470e-01, 1.372e-01, -4.179e-02, -6.250e-02, 5.295e-02, 2.200e-01, -3.304e-01, -1.712e-01) * s0_0_0;
	r2 += M4(1.051e-01, -1.377e-01, 2.043e-02, 1.324e-01, 1.861e-01, 5.894e-02, -3.812e-02, -3.333e-02, -3.972e-01, 1.205e-01, -8.519e-02, -1.154e-01, -2.712e-01, 1.378e-01, 1.509e-02, 2.514e-02) * s0_0_0;
	r0 += M4(1.024e-01, -4.214e-02, -1.242e-02, -6.199e-02, 3.146e-01, -3.107e-01, 1.384e-01, 2.070e-01, -2.945e-01, -1.860e-01, -8.961e-02, -4.481e-02, 6.189e-01, -1.000e+00, -1.805e-01, -8.546e-02) * s0_0_1;
	r1 += M4(6.510e-02, 3.348e-03, -9.136e-03, 2.455e-01, 3.468e-02, -4.752e-01, 1.871e-01, -3.406e-01, 1.359e-01, -3.037e-02, -1.326e-02, 5.800e-02, 9.395e-02, 2.466e-01, -9.185e-02, 9.600e-02) * s0_0_1;
	r2 += M4(1.057e-02, -5.280e-02, 7.879e-02, 1.178e-01, 3.851e-01, -9.898e-02, 4.555e-02, -8.507e-02, -1.405e-01, -1.323e-01, -2.056e-01, 4.110e-02, -8.934e-01, -7.216e-02, -1.466e-01, 5.415e-03) * s0_0_1;
	r0 += M4(-2.990e-02, -6.890e-02, -2.976e-02, -1.703e-02, 2.382e-01, 4.760e-01, 1.501e-01, -1.877e-02, 2.512e-02, -6.014e-02, -5.047e-02, -2.363e-02, -3.050e-01, -7.360e-01, -7.935e-02, -2.737e-02) * s0_0_2;
	r1 += M4(-1.093e-01, -2.443e-01, -7.352e-02, 1.212e-01, -1.835e-02, -1.010e-02, 2.117e-01, -1.121e-01, 9.638e-02, 2.009e-01, -1.308e-01, 7.441e-02, 1.822e-01, -1.405e-01, -1.890e-01, 1.953e-01) * s0_0_2;
	r2 += M4(6.468e-02, 8.172e-02, 2.435e-02, 4.188e-04, 1.966e-01, -1.207e-02, 1.360e-02, -3.434e-02, -4.877e-02, 5.579e-02, -3.381e-03, -4.872e-02, -1.024e-01, -1.228e-01, -2.417e-02, 8.691e-02) * s0_0_2;
	r0 += M4(-8.811e-01, 1.797e-01, 7.405e-02, 1.080e-02, -1.069e-01, -2.779e-01, 4.558e-02, 2.861e-01, 9.688e-01, -1.000e+00, -1.593e-02, -2.778e-01, 2.053e-01, -5.155e-01, 1.368e-01, -1.831e-01) * s0_1_0;
	r1 += M4(3.033e-01, 2.831e-01, -2.485e-01, 7.168e-01, -9.304e-02, -4.624e-01, -4.046e-02, -5.558e-02, 7.081e-02, 9.540e-02, -1.089e-01, -7.090e-01, 6.705e-02, 2.179e-01, 3.641e-02, 1.384e-01) * s0_1_0;
	r2 += M4(-3.102e-01, 8.746e-02, 4.167e-01, 2.225e-02, 3.077e-01, 1.279e-01, -1.925e-01, -8.792e-02, -1.000e+00, 1.798e-02, -6.811e-02, -7.336e-02, -2.485e-02, -2.664e-01, 2.042e-01, 1.211e-01) * s0_1_0;
	r0 += M4(-3.630e-01, 5.269e-01, -2.460e-02, 1.194e-01, -1.691e-01, 3.349e-01, -3.797e-01, 3.270e-01, -8.746e-01, -1.000e+00, 3.019e-01, -1.161e-01, 1.000e+00, 2.603e-01, 1.118e-01, 9.555e-01) * s0_1_1;
	r1 += M4(-9.915e-03, -1.760e-01, 8.170e-02, -1.087e-02, -3.350e-01, -7.994e-02, -2.348e-01, -6.100e-01, 1.293e-01, 2.734e-01, 4.600e-01, 5.785e-01, 3.463e-01, 3.016e-01, -9.420e-02, 2.584e-01) * s0_1_1;
	r2 += M4(-2.791e-01, 2.190e-01, 1.821e-01, 4.721e-02, -1.924e-01, 1.351e-01, 7.627e-02, -2.495e-01, -2.643e-02, -4.900e-01, 5.695e-01, 1.802e-01, 7.407e-01, -5.653e-01, 6.006e-01, 2.397e-01) * s0_1_1;
	r0 += M4(-3.260e-02, 1.962e-01, -5.358e-02, 3.297e-02, 3.172e-01, -6.272e-01, -8.283e-02, -1.704e-01, -4.682e-01, 7.385e-01, 4.916e-03, 6.458e-02, -7.144e-01, 1.000e+00, -1.077e-01, 3.298e-01) * s0_1_2;
	r1 += M4(-1.014e-01, -1.315e-01, 2.565e-02, 2.463e-02, -1.913e-01, -1.133e-01, 5.638e-02, 7.818e-02, -3.704e-01, 3.349e-01, 7.267e-02, 1.588e-01, -1.000e+00, -1.000e+00, -1.141e-01, 1.871e-01) * s0_1_2;
	r2 += M4(1.167e-01, -1.499e-01, -3.622e-02, 2.487e-02, 4.964e-02, 6.813e-01, -5.110e-01, -8.482e-02, 2.145e-01, -1.226e-01, 1.101e-01, 1.757e-01, -1.929e-01, -1.000e+00, 8.832e-01, -2.163e-03) * s0_1_2;
	r0 += M4(9.125e-02, 4.154e-01, 2.165e-01, -4.733e-01, -4.967e-02, -2.470e-01, -8.549e-03, -5.629e-02, 1.806e-01, 2.091e-01, -1.646e-01, -4.699e-03, -9.154e-02, 1.782e-01, 9.639e-02, -3.916e-02) * s0_2_0;
	r1 += M4(6.623e-02, -4.363e-01, 1.253e-01, 3.208e-01, -2.329e-02, -1.389e-01, 9.488e-02, -1.290e-01, 6.621e-01, 1.891e-01, -5.489e-01, -3.480e-01, 1.378e-01, 3.551e-01, -6.844e-02, 8.709e-02) * s0_2_0;
	r2 += M4(8.094e-02, 5.899e-01, 6.791e-02, -1.952e-02, -6.579e-02, 7.497e-02, -1.783e-01, -1.825e-02, -1.567e-01, -2.326e-01, 1.785e-01, -6.690e-02, -1.137e-02, -9.407e-02, 1.440e-01, 9.819e-03) * s0_2_0;
	r0 += M4(3.195e-01, -4.649e-01, -2.723e-01, -1.435e-01, 4.036e-01, -1.010e-01, -4.327e-01, -2.048e-02, -6.780e-01, 3.603e-01, 1.000e+00, -1.143e-01, -4.001e-01, 3.432e-01, 5.871e-01, -3.093e-01) * s0_2_1;
	r1 += M4(3.608e-01, -6.561e-01, -2.164e-04, 2.155e-02, 1.641e-01, 2.607e-01, -4.384e-01, -2.264e-02, -6.842e-01, -1.000e+00, 1.000e+00, 6.111e-02, -4.449e-01, -1.929e-01, 5.019e-01, 6.861e-02) * s0_2_1;
	r2 += M4(2.007e-01, -6.895e-01, 9.067e-02, -1.280e-01, -2.635e-01, -4.010e-01, -4.571e-02, -4.752e-02, 4.656e-01, -1.000e+00, 1.000e+00, 9.986e-01, 3.547e-01, 1.000e+00, 3.103e-01, 2.471e-01) * s0_2_1;
	r0 += M4(-1.244e-01, 1.325e-01, 1.299e-02, -3.832e-03, 2.877e-01, 1.337e-01, 2.311e-01, -3.578e-03, -1.317e-01, 1.292e-01, 9.219e-02, 1.126e-01, -2.218e-01, 1.494e-02, -1.242e-01, -1.606e-01) * s0_2_2;
	r1 += M4(-3.921e-02, 3.404e-01, 2.450e-02, 1.080e-01, 1.000e+00, 2.972e-01, -2.592e-01, 3.812e-02, -6.239e-01, -1.000e+00, 3.987e-01, 9.066e-02, -1.000e+00, -1.000e+00, 2.271e-01, -5.427e-02) * s0_2_2;
	r2 += M4(-1.630e-02, -1.133e-01, 1.083e-01, -3.911e-02, -3.225e-01, -3.355e-01, -2.723e-01, 1.996e-01, 2.726e-01, -1.000e+00, 3.681e-01, 1.301e-01, 4.473e-01, -1.000e+00, 2.144e-01, -1.045e-01) * s0_2_2;
	r0 += V4(-6.420e-02, -9.667e-03, 1.158e-02, -2.135e-02);
	r0 = clamp(r0, V4(0.0), V4(1.0));
	imageStore(out_image, opos + ivec2(0, 0), vec4(r0));
	r1 += V4(-2.275e-03, 6.474e-02, -7.463e-03, 1.522e-02);
	r1 = clamp(r1, V4(0.0), V4(1.0));
	imageStore(out_image, opos + ivec2(1, 0), vec4(r1));
	r2 += V4(-1.713e-02, -4.283e-02, 3.805e-02, 4.800e-02);
	r2 = clamp(r2, V4(0.0), V4(1.0));
	imageStore(out_image, opos + ivec2(2, 0), vec4(r2));
}

//!DESC CuNNy-3x12-conv2
//!HOOK LUMA
//!COMPUTE 24 8 8 8
//!BIND conv1
//!BIND LUMA
//!SAVE conv2
//!WIDTH LUMA.w 3 *
//!HEIGHT LUMA.h
//!COMPONENTS 4
//!WHEN OUTPUT.w LUMA.w / 1.3 > OUTPUT.h LUMA.h / 1.3 > *
#extension GL_EXT_shader_explicit_arithmetic_types_float16 : enable
#ifdef GL_EXT_shader_explicit_arithmetic_types_float16
#	define V4 f16vec4
#	define M4 f16mat4
#	define F float16_t
#else
#	define V4 vec4
#	define M4 mat4
#	define F float
#endif
#define l0(x, y) V4((conv1_mul * texelFetch(conv1_raw, clamp(pos + ivec2(x, y), ivec2(0), sz) * ivec2(3, 1) + ivec2(0, 0), 0)))
#define l1(x, y) V4((conv1_mul * texelFetch(conv1_raw, clamp(pos + ivec2(x, y), ivec2(0), sz) * ivec2(3, 1) + ivec2(1, 0), 0)))
#define l2(x, y) V4((conv1_mul * texelFetch(conv1_raw, clamp(pos + ivec2(x, y), ivec2(0), sz) * ivec2(3, 1) + ivec2(2, 0), 0)))
shared V4 G[3][10][10];
void hook() {
	ivec2 xy = ivec2(gl_LocalInvocationID.xy);
	ivec2 pos = ivec2(gl_WorkGroupID.xy) * ivec2(8, 8) + xy;
	ivec2 opos = pos * ivec2(3, 1);
	ivec2 sz = ivec2(LUMA_size) - ivec2(1);
	for (int y = 0; y < 10; y += 8) {
		int ay = xy.y + y;
		if (ay >= 10) break;
		for (int x = 0; x < 10; x += 8) {
			int ax = xy.x + x;
			if (ax >= 10) break;
			G[0][ay][ax] = l0(x - 1, y - 1);
			G[1][ay][ax] = l1(x - 1, y - 1);
			G[2][ay][ax] = l2(x - 1, y - 1);
		}
	}
	barrier();
	V4 s0_0_0, s0_0_1, s0_0_2, s0_1_0, s0_1_1, s0_1_2, s0_2_0, s0_2_1, s0_2_2, s1_0_0, s1_0_1, s1_0_2, s1_1_0, s1_1_1, s1_1_2, s1_2_0, s1_2_1, s1_2_2;
	V4 r0, r1, r2;
	r0 = V4(0.0); r1 = V4(0.0); r2 = V4(0.0);
	s0_0_0 = G[0][xy.y+0][xy.x+0]; s0_0_1 = G[0][xy.y+0][xy.x+1];
	s0_0_2 = G[0][xy.y+0][xy.x+2]; s0_1_0 = G[0][xy.y+1][xy.x+0];
	s0_1_1 = G[0][xy.y+1][xy.x+1]; s0_1_2 = G[0][xy.y+1][xy.x+2];
	s0_2_0 = G[0][xy.y+2][xy.x+0]; s0_2_1 = G[0][xy.y+2][xy.x+1];
	s0_2_2 = G[0][xy.y+2][xy.x+2]; s1_0_0 = G[1][xy.y+0][xy.x+0];
	s1_0_1 = G[1][xy.y+0][xy.x+1]; s1_0_2 = G[1][xy.y+0][xy.x+2];
	s1_1_0 = G[1][xy.y+1][xy.x+0]; s1_1_1 = G[1][xy.y+1][xy.x+1];
	s1_1_2 = G[1][xy.y+1][xy.x+2]; s1_2_0 = G[1][xy.y+2][xy.x+0];
	s1_2_1 = G[1][xy.y+2][xy.x+1]; s1_2_2 = G[1][xy.y+2][xy.x+2];
	r0 += M4(-5.853e-03, 3.586e-02, -2.128e-02, 5.147e-02, -6.442e-02, 2.849e-02, 4.533e-02, 9.184e-02, -5.686e-02, -3.735e-02, -4.445e-02, -1.262e-01, 7.062e-02, 9.680e-02, 9.107e-03, 1.997e-01) * s0_0_0;
	r1 += M4(2.138e-02, 9.944e-03, 7.420e-02, -1.149e-01, -9.480e-02, 9.387e-02, -1.091e-01, -4.949e-02, 1.199e-01, 8.874e-02, 2.223e-03, 1.026e-01, -3.761e-02, -1.366e-01, -4.043e-02, 1.673e-02) * s0_0_0;
	r2 += M4(-2.848e-02, 3.104e-03, -2.514e-02, 4.752e-02, -4.053e-01, 2.692e-02, 6.490e-02, -6.913e-02, 3.168e-01, -5.310e-02, -4.287e-02, -5.997e-02, 2.920e-01, 6.588e-03, -3.559e-01, 2.282e-02) * s0_0_0;
	r0 += M4(-1.633e-03, -1.251e-01, -3.231e-02, 3.411e-02, 1.487e-01, -9.595e-02, 2.506e-02, 1.358e-01, -3.071e-01, -2.677e-01, -2.853e-01, -4.335e-01, -8.900e-02, -7.429e-02, -3.682e-02, 4.470e-02) * s0_0_1;
	r1 += M4(5.448e-02, -1.319e-01, 1.361e-01, -9.693e-02, -1.906e-01, -1.350e-01, 1.144e-02, -8.618e-02, 1.549e-01, 7.245e-01, 5.927e-02, 8.986e-01, 1.734e-01, 4.850e-02, -3.278e-02, 2.592e-01) * s0_0_1;
	r2 += M4(-1.234e-01, -2.589e-02, -3.867e-01, 6.604e-02, -1.415e-01, -9.547e-03, 2.501e-01, 1.940e-01, -1.382e-01, -9.132e-02, -7.361e-01, 1.396e-01, 4.329e-01, -5.124e-03, -5.501e-01, -9.183e-03) * s0_0_1;
	r0 += M4(-1.720e-02, -5.038e-02, -1.184e-01, -8.728e-03, 1.073e-01, 9.023e-02, -5.638e-02, 4.687e-02, -1.258e-01, 5.445e-02, -1.410e-01, -3.550e-01, 8.512e-04, 1.412e-01, -3.375e-02, 4.683e-03) * s0_0_2;
	r1 += M4(1.852e-02, 8.155e-03, 1.347e-01, -3.231e-02, -1.999e-01, 4.181e-02, -1.140e-01, 7.907e-02, -1.966e-01, -1.728e-02, 2.039e-01, 8.402e-02, 2.911e-06, 4.278e-02, 1.380e-01, 2.862e-01) * s0_0_2;
	r2 += M4(5.069e-02, 2.009e-02, -1.407e-01, 9.265e-03, -1.687e-01, 9.166e-02, 1.326e-01, 1.448e-01, 2.536e-01, -1.600e-01, -3.076e-01, -2.761e-02, -7.977e-03, -1.463e-02, -3.526e-01, 1.574e-01) * s0_0_2;
	r0 += M4(-6.224e-02, -9.213e-02, -5.731e-02, -1.490e-01, 1.154e-01, 5.883e-02, 4.865e-02, 7.459e-02, -1.178e-01, -1.606e-01, -2.916e-02, 2.017e-01, 6.707e-02, 4.693e-02, -1.278e-02, 8.238e-02) * s0_1_0;
	r1 += M4(5.481e-02, 1.215e-02, 1.524e-01, -2.015e-02, -2.590e-01, 8.233e-02, -5.850e-03, 1.416e-02, 1.155e-01, 9.152e-02, 4.152e-02, 2.800e-02, 9.401e-02, -1.379e-01, -2.378e-02, 4.986e-03) * s0_1_0;
	r2 += M4(-1.933e-01, -4.173e-02, 1.454e-02, -1.265e-01, -1.692e-01, 6.575e-02, 3.960e-01, -6.734e-02, -1.589e-01, -1.402e-02, 5.202e-01, -2.475e-01, 2.379e-01, 4.384e-03, 1.790e-01, -1.673e-03) * s0_1_0;
	r0 += M4(-1.522e-01, -8.462e-02, -1.283e-01, 6.363e-02, -7.706e-02, 1.368e-01, 2.840e-01, -4.256e-01, 3.074e-01, 2.126e-01, -1.665e-02, 1.768e-01, 1.200e-02, -2.821e-02, -1.027e-01, -1.000e+00) * s0_1_1;
	r1 += M4(-3.659e-02, -3.230e-01, 8.886e-01, -2.197e-01, 2.482e-01, 1.279e-01, -2.426e-01, -3.280e-01, -5.885e-02, 1.380e-01, -1.000e+00, -2.169e-01, 1.498e-01, 5.637e-02, -3.933e-01, 9.724e-02) * s0_1_1;
	r2 += M4(-3.899e-01, -5.185e-02, 1.786e-01, -3.167e-01, 2.286e-01, 7.918e-02, 1.000e+00, -2.692e-01, -5.561e-03, 2.328e-01, -1.697e-01, -1.000e+00, -6.175e-02, -1.925e-02, -1.141e-01, 1.788e-01) * s0_1_1;
	r0 += M4(-1.068e-01, 2.114e-01, -1.392e-01, 9.164e-02, 6.571e-02, -1.344e-02, 1.420e-01, 2.289e-01, 4.860e-02, 1.098e-01, 3.081e-02, 1.074e-01, 8.409e-02, 7.618e-02, -4.350e-02, -8.249e-01) * s0_1_2;
	r1 += M4(-2.833e-02, 2.960e-02, 3.657e-01, -2.489e-02, -1.201e-01, 7.881e-02, -1.946e-01, -4.117e-01, -6.623e-02, -1.733e-01, 5.295e-02, -8.512e-02, -8.752e-02, -3.062e-01, -1.000e+00, 7.634e-02) * s0_1_2;
	r2 += M4(5.311e-02, 1.159e-01, 1.011e-01, -1.672e-01, -3.240e-01, -8.628e-02, 1.052e-01, 3.330e-01, 4.085e-02, -4.930e-02, 2.482e-01, -8.985e-02, 2.609e-01, 4.577e-01, -4.438e-01, 2.189e-01) * s0_1_2;
	r0 += M4(-9.639e-02, 7.920e-04, 3.849e-02, -1.203e-01, 1.820e-02, 1.805e-01, 8.132e-02, 3.274e-01, 8.026e-03, -4.270e-02, 8.552e-03, -2.592e-02, 1.835e-02, -9.509e-02, -8.867e-02, -6.792e-02) * s0_2_0;
	r1 += M4(-9.109e-02, 5.170e-02, 8.316e-02, 2.865e-02, -3.194e-01, 2.056e-01, -1.927e-01, 2.348e-02, 3.499e-02, 4.587e-02, 3.629e-02, -2.836e-02, 1.755e-01, -2.205e-02, -5.810e-02, 3.261e-04) * s0_2_0;
	r2 += M4(-7.369e-02, -3.301e-02, -2.253e-01, 1.873e-01, -1.154e-01, -4.239e-02, 3.038e-01, -4.338e-01, 1.674e-02, 8.473e-03, -5.483e-02, 1.747e-01, 3.459e-02, 2.709e-02, -3.495e-02, -1.863e-01) * s0_2_0;
	r0 += M4(-1.899e-01, -1.920e-01, 2.310e-01, 3.235e-02, -3.799e-02, 1.835e-01, 1.125e-01, 5.819e-01, -7.711e-03, 2.570e-03, -4.312e-02, 7.687e-02, -5.346e-02, -1.562e-01, -2.437e-02, 6.444e-02) * s0_2_1;
	r1 += M4(-3.999e-01, 9.891e-02, 5.723e-01, 9.180e-03, 1.691e-01, 4.920e-02, -1.527e-01, -1.813e-01, 3.706e-02, -5.229e-03, 4.286e-02, 1.267e-02, 1.366e-01, 2.813e-02, -3.183e-02, 4.594e-02) * s0_2_1;
	r2 += M4(7.562e-02, 6.691e-03, -1.585e-02, -3.227e-01, -2.708e-02, -6.607e-02, 1.672e-01, 2.650e-01, -5.170e-02, 2.575e-02, 6.256e-02, -2.775e-01, 4.889e-02, 7.822e-03, 5.611e-02, -1.000e+00) * s0_2_1;
	r0 += M4(-4.490e-02, 3.728e-02, 1.649e-01, 5.177e-02, -7.363e-03, 1.322e-01, 1.676e-01, 2.563e-01, 4.388e-02, -7.412e-02, -3.834e-02, -5.143e-02, 1.970e-02, 8.621e-02, 4.048e-02, 2.189e-01) * s0_2_2;
	r1 += M4(9.839e-02, 3.302e-02, 3.129e-01, 2.279e-02, -3.720e-01, 1.079e-01, 2.941e-01, -4.542e-02, 2.327e-02, -3.672e-02, -1.266e-01, -8.412e-02, 1.178e-01, -5.842e-02, -1.756e-01, -2.441e-02) * s0_2_2;
	r2 += M4(-5.296e-02, 5.132e-02, 5.468e-02, -2.813e-01, -1.576e-01, -4.841e-02, 1.929e-01, 2.194e-01, -4.043e-02, 3.891e-02, -3.332e-02, -2.479e-01, 9.984e-02, 8.901e-02, -3.619e-02, 1.346e-01) * s0_2_2;
	r0 += M4(-2.855e-02, 7.535e-02, 1.508e-01, 1.759e-01, -3.758e-02, 5.914e-02, -3.881e-02, -5.194e-02, -1.472e-02, 2.025e-01, 7.486e-03, 7.858e-03, -5.918e-02, -8.901e-02, -8.086e-02, -1.455e-01) * s1_0_0;
	r1 += M4(-1.444e-01, 3.072e-02, 1.595e-01, 3.653e-02, -1.174e-02, -6.337e-02, 8.383e-02, 1.761e-02, 1.407e-02, 1.385e-02, 2.832e-02, 4.942e-02, -1.256e-02, 4.548e-02, 1.072e-01, 3.433e-02) * s1_0_0;
	r2 += M4(-2.774e-02, 4.134e-02, 5.591e-01, 3.490e-03, 1.465e-02, -3.933e-03, 9.641e-02, 5.685e-02, -4.401e-02, 9.047e-02, -3.188e-01, 4.958e-02, -5.160e-02, -7.162e-03, 2.143e-01, -3.488e-02) * s1_0_0;
	r0 += M4(-1.667e-01, 1.255e-01, 1.313e-01, 1.623e-01, -6.679e-02, -8.825e-02, -1.468e-02, 2.251e-01, 5.935e-02, -9.939e-02, 1.149e-01, -8.786e-03, -7.737e-02, 7.694e-02, -1.449e-01, 1.571e-02) * s1_0_1;
	r1 += M4(-2.750e-01, 1.776e-01, 1.602e-01, 2.841e-01, -6.928e-02, -6.282e-02, 9.354e-02, -9.912e-02, -3.352e-01, 1.781e-01, -8.630e-02, -4.006e-02, -8.584e-03, 1.545e-01, 2.022e-01, 1.105e-01) * s1_0_1;
	r2 += M4(-3.798e-01, -6.889e-02, -3.176e-01, -1.014e-01, -1.325e-01, -7.365e-02, -1.315e-02, -6.720e-02, -8.471e-02, 1.539e-01, -4.792e-01, 2.435e-02, -1.591e-01, -2.003e-02, 2.868e-01, -5.536e-02) * s1_0_1;
	r0 += M4(1.015e-02, -2.664e-01, 1.456e-01, 5.733e-02, -2.480e-02, -2.465e-02, -1.648e-02, 1.474e-01, 4.351e-02, -8.637e-02, 2.240e-01, 1.793e-01, -9.686e-02, -6.717e-02, 4.602e-02, 2.071e-02) * s1_0_2;
	r1 += M4(-2.876e-02, 1.500e-01, -6.719e-02, -3.016e-02, 4.073e-02, 3.662e-02, 3.254e-02, 1.310e-02, -1.046e-01, -5.714e-02, 6.895e-03, -6.489e-02, -4.912e-02, 1.244e-01, 1.360e-01, 1.170e-01) * s1_0_2;
	r2 += M4(-3.787e-01, 6.033e-02, -1.212e-01, 8.753e-02, 4.413e-02, -2.262e-02, 3.494e-02, -5.571e-02, -1.033e-01, 3.473e-02, 4.673e-02, -5.806e-02, -1.547e-01, -7.984e-02, -9.045e-02, -2.786e-02) * s1_0_2;
	r0 += M4(3.227e-02, 8.588e-02, 1.578e-01, 4.933e-01, -4.560e-02, 3.154e-02, -2.293e-02, 5.890e-02, 4.570e-02, 8.900e-02, -6.854e-03, -2.625e-01, -8.032e-02, -5.819e-02, -4.370e-02, 4.932e-02) * s1_1_0;
	r1 += M4(-3.873e-02, -1.749e-01, 8.281e-02, -7.782e-02, -2.799e-02, -4.827e-02, 1.929e-01, 2.507e-02, 1.532e-01, -7.780e-02, 8.955e-02, -2.677e-03, 1.876e-02, 5.065e-02, 6.502e-02, 2.816e-02) * s1_1_0;
	r2 += M4(-2.924e-01, 2.012e-02, 2.747e-01, 3.518e-01, -2.520e-02, 1.212e-02, -6.716e-02, 6.323e-02, 1.336e-01, 4.617e-02, 5.743e-02, -3.137e-02, -3.789e-03, -8.028e-03, -3.165e-01, -1.643e-01) * s1_1_0;
	r0 += M4(5.138e-02, 1.140e-01, 4.056e-01, 2.136e-01, -1.479e-01, 2.960e-02, 1.400e-01, 2.762e-01, -3.096e-02, -1.769e-01, -8.727e-03, -5.521e-01, 3.101e-01, 2.124e-01, 1.212e-01, 6.873e-01) * s1_1_1;
	r1 += M4(-6.450e-01, -3.158e-01, -4.175e-01, 1.119e-01, -2.759e-01, -9.846e-02, 4.072e-01, 3.033e-02, -1.788e-01, -7.245e-02, 4.653e-01, -1.030e-01, -7.963e-04, -3.545e-01, -5.450e-01, -2.420e-01) * s1_1_1;
	r2 += M4(-1.355e-01, -1.894e-02, 4.678e-01, 5.915e-01, -1.141e-01, -1.161e-01, -6.746e-02, -1.559e-01, 4.516e-01, -2.054e-03, 7.247e-02, 2.842e-01, 5.010e-01, 8.720e-02, 1.219e-01, -6.476e-03) * s1_1_1;
	r0 += M4(-4.243e-02, -1.410e-01, -2.656e-02, -1.773e-01, -2.816e-02, 1.208e-01, -2.702e-02, 2.680e-01, 8.230e-02, -2.366e-01, -9.066e-02, 9.262e-02, 5.017e-02, -8.810e-02, -1.658e-01, -3.249e-01) * s1_1_2;
	r1 += M4(-5.308e-01, 1.738e-03, 4.805e-04, -5.309e-02, 1.763e-01, -2.601e-02, 7.323e-02, -6.903e-03, 3.857e-01, -3.402e-02, -1.840e-01, 4.234e-02, 1.045e-01, -1.414e-01, 3.647e-01, 9.330e-02) * s1_1_2;
	r2 += M4(-3.069e-01, -1.662e-02, 2.558e-02, 1.321e-01, -9.704e-02, 3.751e-02, 7.834e-02, -1.445e-01, 2.939e-01, 2.474e-02, -3.154e-01, -8.859e-02, -2.214e-02, -2.280e-01, -3.098e-01, 8.394e-02) * s1_1_2;
	r0 += M4(-3.192e-02, -7.878e-04, -2.289e-02, 1.506e-01, 1.560e-02, -4.656e-02, -2.228e-03, 1.985e-03, -1.132e-02, -5.882e-02, -1.245e-01, -1.033e-01, -5.662e-03, -7.786e-02, 6.951e-03, -1.595e-01) * s1_2_0;
	r1 += M4(-1.777e-01, 1.072e-01, 8.518e-02, -9.007e-02, -9.986e-02, -2.959e-02, 4.034e-02, -1.022e-02, 2.026e-01, -9.936e-03, 5.069e-02, 2.413e-02, -4.308e-03, -9.856e-02, 1.577e-01, 2.613e-02) * s1_2_0;
	r2 += M4(-1.042e-01, -1.641e-02, 1.607e-01, -3.351e-01, 7.583e-03, 1.733e-02, -8.265e-02, 2.591e-01, -9.869e-02, 2.583e-02, -2.089e-01, 3.304e-02, 5.518e-02, 8.426e-03, 1.140e-01, -3.535e-02) * s1_2_0;
	r0 += M4(-4.460e-03, 2.053e-04, 4.334e-02, -2.300e-03, -2.963e-02, -3.261e-02, 5.725e-02, -7.587e-02, -4.599e-02, -2.606e-01, -1.794e-02, -1.010e-02, 1.218e-01, -2.028e-02, -3.578e-03, -1.844e-01) * s1_2_1;
	r1 += M4(-1.072e-01, 7.940e-02, 7.196e-02, -7.192e-02, -1.894e-01, -2.639e-02, 6.168e-03, -4.666e-03, 1.748e-01, -1.471e-02, 2.475e-01, -7.529e-03, 2.280e-01, -1.295e-01, -1.133e-01, 1.897e-02) * s1_2_1;
	r2 += M4(-9.737e-04, 8.364e-02, 4.212e-02, -6.366e-01, 1.465e-02, 3.312e-02, -2.903e-02, 3.504e-01, 2.514e-02, -7.594e-02, -1.869e-01, 2.746e-01, -2.396e-01, 6.382e-02, -8.240e-02, 1.451e-01) * s1_2_1;
	r0 += M4(9.980e-02, 1.536e-03, -3.447e-03, 2.118e-01, 1.836e-02, -2.799e-02, 1.855e-02, -2.304e-02, -2.157e-02, 1.518e-01, -2.531e-02, 3.205e-01, 1.491e-03, -5.655e-03, 6.631e-02, -4.348e-01) * s1_2_2;
	r1 += M4(-7.977e-02, -6.799e-02, 4.688e-02, -7.434e-02, -6.197e-02, 2.967e-02, 9.536e-03, 3.389e-03, -3.871e-02, 2.607e-02, 6.078e-02, 2.421e-02, -3.488e-01, 1.337e-02, 6.908e-02, 4.848e-02) * s1_2_2;
	r2 += M4(-1.785e-01, 7.721e-02, 8.116e-02, -2.232e-02, -3.111e-02, 3.135e-02, 5.408e-02, 1.265e-01, -1.110e-01, 2.108e-02, 1.715e-01, 2.082e-01, -2.732e-02, -1.084e-01, -7.881e-02, -4.742e-02) * s1_2_2;
	s0_0_0 = G[2][xy.y+0][xy.x+0]; s0_0_1 = G[2][xy.y+0][xy.x+1];
	s0_0_2 = G[2][xy.y+0][xy.x+2]; s0_1_0 = G[2][xy.y+1][xy.x+0];
	s0_1_1 = G[2][xy.y+1][xy.x+1]; s0_1_2 = G[2][xy.y+1][xy.x+2];
	s0_2_0 = G[2][xy.y+2][xy.x+0]; s0_2_1 = G[2][xy.y+2][xy.x+1];
	s0_2_2 = G[2][xy.y+2][xy.x+2];
	r0 += M4(3.408e-02, 2.752e-02, -4.233e-02, -2.928e-02, 3.253e-04, -1.118e-02, -1.057e-02, 3.037e-01, -2.997e-02, -1.550e-01, 1.974e-02, 2.476e-02, 1.488e-01, 1.713e-01, 8.278e-02, 1.295e-01) * s0_0_0;
	r1 += M4(1.311e-03, 3.656e-02, 1.068e-01, -3.242e-02, 1.918e-01, 6.810e-02, -2.507e-02, 1.074e-01, 1.127e-02, -7.743e-02, -9.471e-02, -3.463e-02, -7.002e-02, -1.004e-01, -2.494e-01, -7.213e-02) * s0_0_0;
	r2 += M4(-1.134e-01, 9.875e-03, -7.138e-02, 5.382e-02, 2.055e-01, 1.281e-02, 1.009e-01, 2.639e-01, -2.267e-01, -1.243e-02, 5.463e-01, -2.250e-02, 2.583e-01, -2.495e-02, -5.663e-01, 8.167e-02) * s0_0_0;
	r0 += M4(3.987e-02, -4.644e-02, 3.587e-02, 6.587e-02, 2.490e-02, 7.111e-02, -2.067e-01, -1.965e-01, 1.174e-01, 2.263e-01, 6.982e-02, -3.585e-02, 3.525e-01, -2.053e-01, 4.111e-01, -3.542e-01) * s0_0_1;
	r1 += M4(3.922e-02, 3.775e-03, 6.268e-02, -2.209e-01, 1.972e-01, -7.302e-02, -5.540e-02, 4.952e-03, -7.866e-02, -1.183e-01, -3.404e-01, -1.999e-01, 1.080e-01, -1.757e-01, -3.773e-01, -8.679e-02) * s0_0_1;
	r2 += M4(-1.489e-01, -6.397e-02, 1.129e-01, -2.366e-02, 4.018e-01, -1.996e-01, -8.730e-01, 5.611e-02, 5.475e-02, 1.212e-01, 9.023e-01, -2.082e-01, 1.314e-01, 2.740e-01, 2.491e-01, 3.343e-01) * s0_0_1;
	r0 += M4(7.000e-02, 1.908e-02, -4.883e-02, 1.462e-01, -2.123e-02, -6.269e-03, -6.629e-02, -3.974e-02, 2.965e-02, 6.906e-05, 4.193e-02, 1.316e-01, -3.118e-02, -9.329e-02, 8.894e-02, -2.223e-01) * s0_0_2;
	r1 += M4(5.427e-02, -2.129e-02, -1.114e-02, -9.182e-02, 1.050e-01, -1.818e-02, -2.858e-02, 6.375e-02, -3.047e-02, 1.955e-03, -6.181e-02, -1.837e-01, -4.310e-02, 1.217e-01, -2.295e-01, 1.201e-02) * s0_0_2;
	r2 += M4(1.049e-01, -2.980e-02, 2.264e-01, 1.296e-01, 1.808e-01, 6.001e-03, -2.278e-01, 1.179e-01, -3.211e-02, 6.616e-02, -1.029e-01, 9.115e-03, 1.358e-01, 9.890e-02, -3.842e-01, 1.154e-02) * s0_0_2;
	r0 += M4(3.319e-02, 1.419e-01, 6.725e-03, -1.208e-01, 3.701e-02, -1.553e-02, 7.506e-02, 2.621e-01, 2.057e-02, 2.207e-02, 1.066e-01, 6.193e-02, 1.918e-01, 3.101e-01, -2.229e-02, 6.128e-02) * s0_1_0;
	r1 += M4(-2.540e-02, -5.109e-02, 3.856e-02, -5.331e-02, 2.261e-01, 1.005e-01, 1.341e-01, 4.387e-02, 2.335e-02, 1.848e-02, 3.738e-02, -6.288e-02, -1.448e-01, -1.484e-02, -3.159e-01, -6.974e-02) * s0_1_0;
	r2 += M4(-1.548e-01, 3.956e-02, 2.007e-01, -3.828e-03, 3.560e-01, 7.004e-02, 5.640e-02, 4.320e-01, -1.864e-01, 8.170e-02, 2.618e-01, 1.051e-01, 6.641e-02, -7.404e-02, -6.558e-01, 2.624e-01) * s0_1_0;
	r0 += M4(-2.812e-01, -3.038e-01, -2.605e-02, 3.718e-01, -3.447e-03, 8.246e-02, 7.228e-02, 1.939e-01, -1.534e-02, -6.817e-02, -2.310e-01, -1.000e+00, -7.490e-02, -3.237e-01, -5.488e-01, -1.000e+00) * s0_1_1;
	r1 += M4(-1.057e-01, 1.821e-01, 4.712e-01, -5.384e-02, -1.665e-01, -2.203e-02, -1.626e-01, 9.583e-02, 1.810e-01, 6.592e-01, -6.628e-01, 1.514e-01, 5.448e-01, -5.211e-01, 6.234e-01, 4.401e-01) * s0_1_1;
	r2 += M4(4.599e-02, -9.088e-02, 1.136e-01, -3.818e-01, 3.702e-01, -1.713e-02, -1.050e-01, -8.799e-01, -3.799e-01, 6.767e-02, -2.773e-01, 1.840e-02, -1.020e-01, -2.944e-01, -1.228e-01, -6.680e-02) * s0_1_1;
	r0 += M4(-5.372e-02, 3.776e-02, -6.153e-02, 1.876e-01, -5.576e-02, -8.614e-02, 1.046e-01, 6.235e-02, -1.391e-01, 2.341e-02, 2.102e-01, 7.512e-01, 1.159e-03, 1.647e-01, -1.428e-01, 1.544e-01) * s0_1_2;
	r1 += M4(2.181e-01, -1.198e-01, 1.796e-01, 1.101e-01, 2.106e-01, -4.326e-02, 2.951e-03, 6.089e-02, -5.264e-01, 1.759e-01, 1.272e-01, -1.324e-01, -6.262e-02, 4.177e-02, 1.781e-01, -2.480e-02) * s0_1_2;
	r2 += M4(-1.886e-01, -5.184e-02, 1.660e-01, -1.807e-02, 1.798e-01, -2.973e-02, -1.195e-01, 2.524e-01, -3.043e-02, -4.319e-03, 2.613e-01, 2.190e-01, -1.150e-01, 5.604e-02, 2.120e-02, 1.088e-01) * s0_1_2;
	r0 += M4(-3.209e-03, 1.160e-01, -1.794e-02, -1.179e-02, 1.440e-02, 1.149e-02, -7.065e-02, 2.901e-01, -2.714e-04, 1.627e-02, 5.642e-02, 7.978e-02, 3.702e-02, 2.771e-02, 3.861e-02, -2.172e-02) * s0_2_0;
	r1 += M4(-8.640e-02, 7.113e-02, -1.706e-03, 1.269e-02, 1.599e-01, -1.238e-02, -3.326e-02, 1.139e-02, -1.599e-01, -5.334e-02, 6.425e-02, -9.570e-03, -7.297e-02, -4.797e-02, -6.186e-02, -3.937e-02) * s0_2_0;
	r2 += M4(1.554e-01, -2.275e-02, 2.152e-02, 2.684e-01, 3.286e-02, 1.214e-02, 9.473e-02, -9.843e-02, -4.137e-02, -2.761e-02, 2.075e-01, 1.426e-01, 9.796e-03, -3.368e-02, 5.308e-02, -2.636e-01) * s0_2_0;
	r0 += M4(-9.270e-02, 7.515e-02, 1.120e-01, 3.071e-01, 1.455e-02, -5.275e-02, -2.302e-02, -2.348e-02, 4.725e-02, 1.519e-01, -1.538e-01, -1.497e-01, 9.416e-02, 1.189e-01, 1.792e-01, 3.143e-02) * s0_2_1;
	r1 += M4(-1.072e-01, 1.086e-01, 1.254e-01, 7.536e-02, 1.646e-01, -5.968e-02, 6.578e-02, -2.636e-02, -7.204e-02, -1.214e-02, -1.421e-01, 4.388e-02, -2.288e-01, -7.733e-02, -1.850e-01, -6.533e-02) * s0_2_1;
	r2 += M4(-7.099e-02, -4.692e-02, 4.779e-02, 1.594e-01, 9.058e-02, 2.495e-02, -1.313e-01, 1.041e-01, -1.609e-01, 2.309e-02, -7.147e-02, -7.016e-01, 4.079e-02, 9.697e-02, 1.915e-01, -4.078e-01) * s0_2_1;
	r0 += M4(1.108e-03, 3.969e-02, 7.006e-02, -5.091e-02, 2.955e-02, -2.294e-02, 1.778e-02, 8.088e-02, -3.095e-03, -1.063e-01, -9.517e-02, -4.832e-02, 1.190e-02, -4.166e-02, -2.613e-02, -2.149e-01) * s0_2_2;
	r1 += M4(-1.238e-01, 4.562e-02, -7.689e-03, 1.672e-02, 2.777e-01, -4.887e-02, 8.180e-02, 2.031e-02, 6.898e-02, -4.532e-02, 1.684e-01, -8.033e-02, 1.301e-01, -6.998e-02, -1.228e-01, 6.011e-02) * s0_2_2;
	r2 += M4(-7.465e-02, -4.240e-03, 7.469e-02, 2.558e-01, 1.064e-01, 2.299e-02, -6.116e-02, 2.855e-01, 3.132e-02, 1.158e-02, -9.851e-02, 5.394e-02, 1.156e-01, -1.339e-02, -4.698e-02, -2.569e-01) * s0_2_2;
	r0 += V4(-4.629e-03, -1.643e-02, -3.388e-03, 9.694e-03);
	r0 = clamp(r0, V4(0.0), V4(1.0));
	imageStore(out_image, opos + ivec2(0, 0), vec4(r0));
	r1 += V4(-1.930e-02, 7.681e-03, 8.343e-03, -4.187e-03);
	r1 = clamp(r1, V4(0.0), V4(1.0));
	imageStore(out_image, opos + ivec2(1, 0), vec4(r1));
	r2 += V4(-3.027e-02, 7.263e-03, 1.989e-02, -1.865e-02);
	r2 = clamp(r2, V4(0.0), V4(1.0));
	imageStore(out_image, opos + ivec2(2, 0), vec4(r2));
}

//!DESC CuNNy-3x12-conv3
//!HOOK LUMA
//!COMPUTE 24 8 8 8
//!BIND conv2
//!BIND LUMA
//!SAVE conv3
//!WIDTH LUMA.w 3 *
//!HEIGHT LUMA.h
//!COMPONENTS 4
//!WHEN OUTPUT.w LUMA.w / 1.3 > OUTPUT.h LUMA.h / 1.3 > *
#extension GL_EXT_shader_explicit_arithmetic_types_float16 : enable
#ifdef GL_EXT_shader_explicit_arithmetic_types_float16
#	define V4 f16vec4
#	define M4 f16mat4
#	define F float16_t
#else
#	define V4 vec4
#	define M4 mat4
#	define F float
#endif
#define l0(x, y) V4((conv2_mul * texelFetch(conv2_raw, clamp(pos + ivec2(x, y), ivec2(0), sz) * ivec2(3, 1) + ivec2(0, 0), 0)))
#define l1(x, y) V4((conv2_mul * texelFetch(conv2_raw, clamp(pos + ivec2(x, y), ivec2(0), sz) * ivec2(3, 1) + ivec2(1, 0), 0)))
#define l2(x, y) V4((conv2_mul * texelFetch(conv2_raw, clamp(pos + ivec2(x, y), ivec2(0), sz) * ivec2(3, 1) + ivec2(2, 0), 0)))
shared V4 G[3][10][10];
void hook() {
	ivec2 xy = ivec2(gl_LocalInvocationID.xy);
	ivec2 pos = ivec2(gl_WorkGroupID.xy) * ivec2(8, 8) + xy;
	ivec2 opos = pos * ivec2(3, 1);
	ivec2 sz = ivec2(LUMA_size) - ivec2(1);
	for (int y = 0; y < 10; y += 8) {
		int ay = xy.y + y;
		if (ay >= 10) break;
		for (int x = 0; x < 10; x += 8) {
			int ax = xy.x + x;
			if (ax >= 10) break;
			G[0][ay][ax] = l0(x - 1, y - 1);
			G[1][ay][ax] = l1(x - 1, y - 1);
			G[2][ay][ax] = l2(x - 1, y - 1);
		}
	}
	barrier();
	V4 s0_0_0, s0_0_1, s0_0_2, s0_1_0, s0_1_1, s0_1_2, s0_2_0, s0_2_1, s0_2_2, s1_0_0, s1_0_1, s1_0_2, s1_1_0, s1_1_1, s1_1_2, s1_2_0, s1_2_1, s1_2_2;
	V4 r0, r1, r2;
	r0 = V4(0.0); r1 = V4(0.0); r2 = V4(0.0);
	s0_0_0 = G[0][xy.y+0][xy.x+0]; s0_0_1 = G[0][xy.y+0][xy.x+1];
	s0_0_2 = G[0][xy.y+0][xy.x+2]; s0_1_0 = G[0][xy.y+1][xy.x+0];
	s0_1_1 = G[0][xy.y+1][xy.x+1]; s0_1_2 = G[0][xy.y+1][xy.x+2];
	s0_2_0 = G[0][xy.y+2][xy.x+0]; s0_2_1 = G[0][xy.y+2][xy.x+1];
	s0_2_2 = G[0][xy.y+2][xy.x+2]; s1_0_0 = G[1][xy.y+0][xy.x+0];
	s1_0_1 = G[1][xy.y+0][xy.x+1]; s1_0_2 = G[1][xy.y+0][xy.x+2];
	s1_1_0 = G[1][xy.y+1][xy.x+0]; s1_1_1 = G[1][xy.y+1][xy.x+1];
	s1_1_2 = G[1][xy.y+1][xy.x+2]; s1_2_0 = G[1][xy.y+2][xy.x+0];
	s1_2_1 = G[1][xy.y+2][xy.x+1]; s1_2_2 = G[1][xy.y+2][xy.x+2];
	r0 += M4(-1.679e-02, -1.928e-03, -4.940e-03, -3.191e-02, 1.022e-02, -2.981e-03, -4.304e-03, 8.622e-03, 2.638e-02, -1.465e-02, -1.053e-02, -5.311e-02, 6.919e-02, 1.341e-01, 1.294e-01, 5.568e-02) * s0_0_0;
	r1 += M4(1.587e-01, 5.093e-03, 2.367e-02, -1.568e-01, -5.975e-02, 4.152e-02, 1.765e-02, 2.870e-01, -1.746e-01, -4.658e-02, 4.395e-02, 9.733e-02, -5.010e-02, -5.884e-02, 6.798e-03, -2.978e-01) * s0_0_0;
	r2 += M4(-5.384e-02, -5.035e-02, 1.987e-02, 7.985e-03, 1.246e-01, 1.125e-02, -2.302e-02, -7.019e-03, 4.919e-02, 9.345e-02, -4.350e-02, -2.377e-02, -1.068e-02, -5.936e-02, 5.734e-02, 1.732e-01) * s0_0_0;
	r0 += M4(2.354e-02, -7.128e-02, 1.283e-01, -1.401e-01, -7.546e-02, -3.863e-03, -6.398e-02, 9.022e-03, -5.310e-02, 1.376e-02, -1.450e-01, 1.038e-01, -3.879e-01, -3.525e-01, 5.295e-02, -1.107e-01) * s0_0_1;
	r1 += M4(5.739e-02, 2.153e-01, -1.042e-01, 2.333e-01, 1.054e-01, 8.986e-02, 4.601e-02, 2.457e-01, 1.280e-02, -1.926e-02, 1.406e-02, 5.513e-02, 1.294e-01, 9.979e-02, 3.124e-02, 7.030e-02) * s0_0_1;
	r2 += M4(4.428e-02, -1.143e-01, 1.431e-01, 1.407e-01, 7.703e-03, -9.287e-03, 6.322e-02, -5.534e-02, -3.364e-02, 5.893e-02, 2.900e-02, -1.209e-01, 4.469e-02, -1.000e+00, -1.757e-02, -3.617e-02) * s0_0_1;
	r0 += M4(5.214e-03, -3.031e-02, 6.079e-03, -1.043e-01, -4.204e-02, -3.970e-02, -1.882e-02, -6.666e-02, 6.226e-02, 3.835e-02, 1.651e-02, -2.506e-02, 5.335e-02, -8.221e-02, 9.679e-02, -7.000e-02) * s0_0_2;
	r1 += M4(-7.153e-02, -5.163e-02, 1.692e-02, -5.999e-02, 1.696e-01, -1.475e-02, 1.916e-02, 5.871e-02, 5.188e-02, 5.671e-03, -9.679e-03, 7.330e-02, -3.923e-01, 2.452e-02, -5.047e-02, -1.422e-01) * s0_0_2;
	r2 += M4(-1.158e-02, 1.739e-02, -4.610e-02, 3.568e-03, 1.353e-01, 1.755e-02, -2.141e-02, -5.652e-02, 5.912e-02, 6.958e-02, 2.174e-02, 2.993e-02, -3.001e-01, -4.980e-03, 5.131e-02, 1.343e-01) * s0_0_2;
	r0 += M4(-8.537e-02, -2.039e-02, -3.910e-02, -2.052e-03, 5.547e-02, 6.224e-02, 5.979e-02, 4.487e-02, -1.428e-01, -3.021e-02, -1.265e-01, -1.184e-01, -2.240e-01, -8.822e-02, -1.720e-03, -4.188e-02) * s0_1_0;
	r1 += M4(-1.829e-01, -1.182e-01, -1.461e-02, 2.369e-01, 3.467e-02, 1.176e-01, 4.404e-02, -8.042e-02, -1.950e-01, -1.159e-01, 3.432e-02, -4.533e-01, -3.071e-01, -5.173e-01, 5.936e-02, -1.000e+00) * s0_1_0;
	r2 += M4(-3.042e-03, 8.847e-02, -6.060e-02, -1.416e-01, 7.126e-02, -5.406e-02, -1.823e-01, 1.549e-01, -5.013e-02, 7.564e-02, -1.458e-01, -5.675e-02, 2.012e-02, -1.917e-02, -3.484e-01, -1.978e-01) * s0_1_0;
	r0 += M4(6.874e-01, 2.605e-01, -9.223e-02, 1.492e-01, -1.461e-01, -3.445e-01, -9.015e-02, -1.632e-01, -3.526e-01, -4.894e-01, -2.033e-01, -3.387e-02, -4.333e-01, -3.348e-01, -3.449e-01, -1.124e-01) * s0_1_1;
	r1 += M4(2.045e-02, -1.379e-01, -1.959e-01, -2.820e-02, -1.409e-01, -1.736e-02, 2.813e-01, -7.595e-02, 2.426e-01, 1.666e-01, -1.746e-01, -3.433e-02, -8.147e-01, -4.831e-01, -1.184e-01, 9.173e-02) * s0_1_1;
	r2 += M4(-1.863e-01, 3.401e-01, 3.524e-01, 2.844e-01, -1.686e-01, -3.109e-02, 3.965e-01, -1.044e-01, -3.120e-01, 3.861e-01, -3.731e-02, -3.444e-01, -2.466e-01, -1.763e-01, -3.207e-01, -4.622e-01) * s0_1_1;
	r0 += M4(1.222e-01, 2.476e-01, 1.694e-01, 9.643e-02, 2.209e-01, 2.124e-01, 1.281e-01, 2.196e-02, 6.476e-02, 5.509e-02, -1.158e-01, 4.797e-02, 1.157e-01, -1.935e-01, -2.763e-01, -4.049e-02) * s0_1_2;
	r1 += M4(8.648e-02, 7.371e-02, 7.660e-02, -1.366e-02, -1.853e-01, 2.947e-02, 1.332e-01, 7.914e-02, -2.052e-01, 9.632e-03, -1.671e-02, 1.027e-01, 1.912e-01, 2.180e-01, -2.698e-01, -1.636e-01) * s0_1_2;
	r2 += M4(6.503e-02, 1.819e-02, -5.240e-02, 1.179e-01, 4.162e-01, 1.648e-02, 5.221e-02, 2.218e-01, 1.870e-01, 1.127e-01, 1.511e-02, 7.136e-03, -2.789e-01, 1.884e-03, 6.760e-02, 1.824e-02) * s0_1_2;
	r0 += M4(-2.619e-02, -3.393e-02, -1.326e-02, 1.995e-02, -3.181e-02, 4.710e-02, 4.708e-02, -3.965e-02, 1.457e-01, 1.255e-01, -6.251e-04, 5.745e-02, 3.460e-02, 5.010e-02, 2.512e-02, 5.461e-03) * s0_2_0;
	r1 += M4(-4.332e-02, -6.969e-02, 2.182e-02, -3.494e-02, 1.207e-01, 1.200e-01, 7.674e-05, 3.024e-01, 1.655e-01, 1.184e-01, -1.431e-02, -2.996e-01, 3.913e-02, -2.271e-02, 3.576e-02, -1.736e-01) * s0_2_0;
	r2 += M4(6.960e-02, -3.497e-02, 7.667e-02, -1.206e-02, 1.702e-01, -2.155e-02, -9.997e-02, -5.532e-02, -3.181e-02, 3.334e-02, -7.923e-02, -1.388e-02, 2.955e-02, 7.634e-03, -3.226e-03, -4.319e-02) * s0_2_0;
	r0 += M4(-8.421e-02, -6.096e-02, 2.231e-02, -2.850e-02, -3.967e-02, -8.977e-02, -2.744e-01, 1.426e-02, 5.155e-01, 5.242e-01, 3.416e-01, 1.321e-02, 8.282e-03, -2.874e-02, -2.279e-01, -9.306e-03) * s0_2_1;
	r1 += M4(-6.136e-04, 1.853e-03, -1.548e-01, -1.998e-02, 1.264e-01, 6.329e-02, 6.417e-02, 1.649e-02, -3.225e-01, -1.035e-01, 2.134e-01, -2.231e-01, -4.791e-01, -2.547e-01, -2.309e-02, 2.483e-01) * s0_2_1;
	r2 += M4(1.298e-01, -7.265e-02, 2.713e-02, 9.200e-02, 2.147e-01, -1.941e-02, 1.054e-01, -7.095e-02, -4.538e-01, -5.124e-02, 1.826e-01, 4.423e-01, -1.610e-01, 2.810e-02, 1.621e-02, -1.858e-01) * s0_2_1;
	r0 += M4(-2.588e-02, -3.711e-02, -9.011e-03, -3.548e-02, -4.991e-02, -2.243e-02, 5.418e-02, -7.462e-02, 6.481e-02, 7.056e-02, 7.924e-02, 2.924e-02, 2.954e-02, 3.858e-02, 3.809e-02, 1.053e-02) * s0_2_2;
	r1 += M4(-5.462e-02, 1.813e-02, 4.181e-02, -6.618e-02, 4.461e-02, -2.752e-02, 2.511e-02, 3.058e-02, -1.615e-02, -1.774e-02, -1.005e-01, 1.085e-01, 1.099e-01, 4.257e-02, 1.019e-02, -7.692e-02) * s0_2_2;
	r2 += M4(-6.809e-02, -4.162e-02, -2.922e-02, -3.517e-02, 2.788e-01, -3.396e-02, -1.896e-03, -9.929e-03, -8.138e-02, 1.293e-02, 2.558e-02, 2.173e-03, 3.085e-02, -8.039e-03, -6.300e-03, 8.030e-02) * s0_2_2;
	r0 += M4(2.261e-01, 4.361e-02, 3.770e-02, 5.629e-02, -4.314e-02, -4.379e-02, -3.016e-02, -5.411e-02, 1.503e-02, -2.458e-02, -1.090e-02, 1.432e-02, 1.571e-02, 1.029e-02, 3.797e-02, -4.524e-02) * s1_0_0;
	r1 += M4(1.951e-01, 1.674e-01, 1.281e-02, -5.617e-02, -9.896e-02, -5.334e-02, 2.262e-02, -9.853e-03, -4.688e-02, 1.631e-02, -1.175e-02, -3.015e-01, 1.264e-01, 6.568e-02, -3.520e-03, 1.054e-01) * s1_0_0;
	r2 += M4(-9.012e-02, -4.281e-02, 2.238e-02, 8.353e-03, 6.293e-03, 2.856e-02, 1.769e-02, -1.791e-02, 4.000e-02, -3.322e-03, 8.998e-03, -1.924e-02, -2.156e-02, -5.473e-02, 3.970e-03, 2.450e-02) * s1_0_0;
	r0 += M4(-2.049e-02, 2.978e-01, -7.918e-02, 3.033e-01, 1.291e-02, -3.577e-02, -6.747e-02, 9.739e-03, 3.224e-02, 1.660e-02, -7.654e-02, -1.135e-01, -5.607e-03, 2.250e-02, 5.893e-02, -8.288e-02) * s1_0_1;
	r1 += M4(-1.859e-01, -5.522e-02, 1.029e-01, 2.616e-01, -1.696e-01, -1.833e-01, -5.945e-02, -6.196e-03, -2.624e-01, -2.509e-01, -1.930e-03, -2.860e-02, 4.178e-02, 8.638e-02, -8.950e-04, -8.637e-02) * s1_0_1;
	r2 += M4(4.449e-01, 1.903e-01, -1.191e-02, -8.384e-02, 8.124e-02, 1.000e-01, -1.346e-02, -4.389e-02, -2.192e-01, 1.922e-02, -3.000e-03, -2.460e-02, -6.048e-02, -7.056e-02, 6.526e-03, 3.398e-02) * s1_0_1;
	r0 += M4(-8.936e-03, -1.052e-01, -4.789e-02, 1.455e-02, -1.635e-03, 3.751e-02, 4.210e-02, 9.791e-02, -3.073e-02, 1.506e-02, -2.533e-02, 2.719e-02, -8.407e-03, -1.674e-02, -3.833e-03, -8.105e-02) * s1_0_2;
	r1 += M4(1.283e-01, 6.710e-02, -1.403e-01, -8.220e-02, 3.991e-02, -5.555e-02, 9.408e-02, -2.385e-02, 6.906e-02, -4.773e-02, -1.075e-02, 2.471e-02, -3.817e-02, 2.928e-02, -2.558e-02, 1.331e-02) * s1_0_2;
	r2 += M4(-8.582e-02, 5.014e-02, -8.305e-04, -1.224e-02, -4.688e-02, 9.801e-02, -5.996e-02, 1.145e-02, 2.222e-03, -1.081e-02, -6.590e-03, -4.187e-02, 3.840e-02, -5.946e-02, -3.984e-03, 2.807e-03) * s1_0_2;
	r0 += M4(-1.938e-01, -1.361e-01, -1.421e-01, -5.269e-02, 1.203e-01, 3.328e-02, 4.065e-02, 1.188e-01, 4.587e-02, -1.793e-02, -3.765e-02, -1.900e-02, 3.537e-03, 2.367e-02, 6.714e-02, 6.284e-02) * s1_1_0;
	r1 += M4(-1.654e-01, -1.619e-01, -2.338e-02, -2.310e-02, 2.744e-01, 1.088e-01, 2.955e-02, -9.696e-02, 8.092e-02, 1.479e-01, -2.207e-02, -5.080e-01, -7.392e-02, -4.086e-02, 1.120e-02, 1.874e-01) * s1_1_0;
	r2 += M4(-1.162e-01, -3.771e-02, 6.028e-02, -6.912e-02, -7.074e-02, -1.351e-02, 2.302e-02, 1.001e-01, -3.364e-01, 2.456e-02, 9.874e-02, 2.519e-02, 8.705e-02, -5.749e-04, 8.661e-02, 3.327e-02) * s1_1_0;
	r0 += M4(1.437e-02, -9.184e-02, 2.725e-01, -2.348e-01, 2.725e-01, 5.491e-01, 7.865e-01, 3.627e-01, -9.616e-01, -9.431e-01, -1.000e+00, 4.549e-02, 4.072e-01, 2.613e-01, 5.651e-02, 4.620e-01) * s1_1_1;
	r1 += M4(2.178e-01, 1.828e-01, -1.184e-01, 6.733e-02, -3.018e-01, -1.252e-01, -8.048e-03, 9.217e-02, -3.434e-01, -2.283e-01, -1.721e-01, -3.421e-01, -1.327e-02, 2.563e-01, -2.342e-02, -2.567e-01) * s1_1_1;
	r2 += M4(4.150e-01, -1.496e-01, -4.873e-02, 1.121e-01, 2.124e-01, -1.386e-03, 1.948e-01, 6.699e-01, -5.408e-01, -1.048e-01, -3.033e-01, -9.473e-01, -1.785e-01, 1.829e-01, -3.384e-02, 1.204e-01) * s1_1_1;
	r0 += M4(-8.545e-03, -8.147e-03, 1.723e-02, -4.764e-02, 4.830e-02, -5.562e-02, 1.259e-01, 2.793e-02, -2.900e-02, 6.626e-04, 5.447e-03, -5.592e-03, -6.893e-02, 3.151e-02, -2.387e-03, 1.528e-01) * s1_1_2;
	r1 += M4(1.509e-01, 1.208e-01, 9.083e-02, -1.428e-01, -3.253e-03, 7.216e-02, -1.597e-01, -5.901e-02, -1.242e-01, -2.326e-01, 6.423e-02, -1.083e-02, 4.705e-02, -6.819e-02, 4.829e-02, 3.108e-02) * s1_1_2;
	r2 += M4(-2.629e-01, -9.639e-02, 4.677e-02, 5.105e-03, -2.939e-01, -1.105e-01, 8.426e-03, 6.858e-02, 1.675e-02, 1.444e-02, 7.419e-03, -1.748e-03, 1.160e-01, -1.014e-02, -1.397e-02, -3.077e-02) * s1_1_2;
	r0 += M4(-2.101e-02, -2.629e-02, -4.382e-02, -1.241e-02, -1.280e-02, -9.254e-03, 8.975e-03, -1.282e-03, -1.373e-02, -8.278e-03, -2.298e-03, 5.502e-03, -4.284e-02, -3.056e-02, -3.041e-03, -8.973e-04) * s1_2_0;
	r1 += M4(2.072e-02, -8.882e-03, -2.930e-02, 1.379e-02, 3.917e-02, 4.456e-02, -1.725e-02, -1.459e-01, -5.894e-02, -5.177e-03, 8.568e-03, -9.040e-02, -1.382e-01, -1.723e-01, 3.294e-02, 2.418e-01) * s1_2_0;
	r2 += M4(-1.574e-02, 8.327e-03, -3.632e-02, -4.412e-02, -1.163e-01, -9.565e-04, -2.911e-02, 7.965e-03, -3.551e-02, -3.724e-03, 2.166e-02, 3.604e-02, -3.503e-02, -8.754e-02, 8.015e-02, 3.198e-02) * s1_2_0;
	r0 += M4(-1.204e-03, -2.962e-02, -5.531e-02, -7.355e-03, 2.421e-02, -3.595e-02, -5.273e-02, 2.972e-02, -3.661e-02, -4.450e-02, 4.729e-02, 2.075e-02, -8.751e-02, -8.417e-02, 2.059e-01, -1.196e-01) * s1_2_1;
	r1 += M4(5.579e-02, 1.931e-03, -3.155e-02, -5.609e-02, -8.292e-02, -1.930e-01, 3.953e-02, 4.657e-02, -5.072e-03, 3.196e-02, -2.041e-02, 6.321e-02, 2.227e-01, 1.536e-01, -9.317e-02, -1.092e-01) * s1_2_1;
	r2 += M4(7.824e-02, -1.154e-02, -3.922e-02, -3.272e-02, 1.303e-01, 3.795e-02, -2.083e-02, -9.864e-02, -2.350e-01, 4.628e-03, 1.145e-02, 3.545e-02, 1.460e-01, -7.560e-02, -3.022e-02, 1.930e-01) * s1_2_1;
	r0 += M4(-3.798e-02, 3.474e-03, 1.224e-02, 7.796e-04, -8.862e-02, -2.865e-02, -4.627e-02, 4.057e-02, -1.831e-03, -2.271e-02, 1.415e-02, -9.594e-04, -2.149e-02, -3.722e-02, 4.150e-02, -3.820e-02) * s1_2_2;
	r1 += M4(6.558e-02, 1.541e-02, 2.619e-02, 1.956e-02, -5.028e-03, 4.966e-04, -8.832e-02, -2.714e-02, -1.234e-02, 2.979e-02, -2.195e-02, 4.138e-02, -7.821e-02, 4.608e-02, 2.115e-02, -2.691e-02) * s1_2_2;
	r2 += M4(-7.087e-02, -8.786e-03, 7.472e-03, -3.296e-03, -1.432e-01, -3.707e-02, -5.828e-03, 5.707e-03, 1.122e-02, -1.626e-03, 7.909e-03, -8.281e-03, -7.427e-02, 5.598e-03, 2.677e-02, -1.234e-02) * s1_2_2;
	s0_0_0 = G[2][xy.y+0][xy.x+0]; s0_0_1 = G[2][xy.y+0][xy.x+1];
	s0_0_2 = G[2][xy.y+0][xy.x+2]; s0_1_0 = G[2][xy.y+1][xy.x+0];
	s0_1_1 = G[2][xy.y+1][xy.x+1]; s0_1_2 = G[2][xy.y+1][xy.x+2];
	s0_2_0 = G[2][xy.y+2][xy.x+0]; s0_2_1 = G[2][xy.y+2][xy.x+1];
	s0_2_2 = G[2][xy.y+2][xy.x+2];
	r0 += M4(-5.715e-02, -8.399e-03, 2.027e-02, 2.096e-02, 7.104e-02, 4.319e-02, 3.518e-03, -5.612e-02, 1.252e-02, 7.087e-03, 3.093e-03, 1.196e-02, -2.484e-01, 9.259e-02, 1.839e-02, -1.022e-01) * s0_0_0;
	r1 += M4(1.337e-02, 7.293e-03, -1.727e-02, -6.632e-02, -7.727e-02, -2.611e-02, -1.105e-01, -1.792e-02, 2.298e-02, -1.783e-02, -7.606e-03, -1.301e-02, -4.131e-01, -1.664e-01, 7.645e-02, -1.000e+00) * s0_0_0;
	r2 += M4(1.023e-03, 3.859e-02, -3.709e-02, -2.873e-02, -8.718e-02, 4.513e-02, -4.129e-03, 1.765e-02, -6.455e-03, -1.536e-03, 6.365e-04, 5.865e-03, 2.192e-01, -5.765e-02, -1.999e-01, -1.599e-01) * s0_0_0;
	r0 += M4(4.718e-02, -6.519e-02, -7.983e-02, 2.656e-02, -1.305e-01, -2.506e-02, 8.255e-03, 5.555e-02, -1.450e-02, -1.350e-02, -1.308e-03, 1.097e-02, -2.311e-01, -2.502e-01, -3.680e-01, -6.083e-01) * s0_0_1;
	r1 += M4(-1.360e-01, -4.825e-02, -3.443e-02, -4.087e-02, 1.142e-01, -5.875e-02, 9.423e-02, -5.508e-02, 2.605e-02, -3.532e-02, -3.698e-02, -1.003e-01, -5.878e-01, 3.405e-02, -2.760e-01, -1.810e-02) * s0_0_1;
	r2 += M4(-6.336e-02, 7.577e-02, -3.113e-02, -6.328e-02, 8.799e-02, -1.195e-01, -7.137e-02, -1.407e-02, -8.559e-02, -2.633e-02, -7.986e-03, -3.678e-03, -3.254e-01, -4.041e-01, -3.435e-01, -1.977e-01) * s0_0_1;
	r0 += M4(-2.765e-02, 4.181e-02, -6.521e-02, -5.534e-02, 2.009e-02, -1.087e-02, 3.632e-02, 3.971e-02, 1.693e-02, -4.819e-03, 1.801e-02, 1.908e-02, -2.222e-01, -1.485e-01, -1.539e-01, -3.413e-01) * s0_0_2;
	r1 += M4(6.567e-02, -1.274e-02, 5.895e-02, 6.325e-02, -1.122e-01, 2.842e-02, -3.449e-02, -1.146e-01, 8.457e-02, 2.942e-02, -4.405e-02, 7.845e-02, 2.901e-02, -1.902e-02, -2.105e-01, 5.096e-02) * s0_0_2;
	r2 += M4(8.208e-02, 5.261e-02, 5.601e-03, -4.684e-02, -1.440e-01, -5.064e-02, 4.546e-03, 3.360e-02, 7.279e-03, -3.008e-02, 1.845e-02, 2.410e-02, -3.783e-02, -6.924e-02, -5.477e-03, -1.470e-01) * s0_0_2;
	r0 += M4(-2.065e-02, 8.486e-03, -5.617e-03, -1.088e-01, 1.676e-01, 1.753e-01, 1.797e-01, -5.879e-03, -5.584e-02, -2.630e-02, -4.311e-02, -1.532e-03, 9.463e-02, 1.211e-01, 1.277e-01, 1.794e-02) * s0_1_0;
	r1 += M4(3.749e-02, 1.188e-01, -5.107e-02, -6.015e-01, 1.667e-02, -1.222e-01, -8.472e-02, -7.768e-02, -6.280e-02, 4.853e-03, -8.471e-03, 9.242e-02, 9.878e-02, 1.209e-01, 4.297e-02, 1.023e-01) * s0_1_0;
	r2 += M4(-9.630e-02, 5.475e-02, -7.883e-02, -7.308e-02, 4.695e-02, 5.983e-02, -1.136e-01, 1.573e-01, 3.573e-02, -3.011e-02, -2.270e-02, -3.235e-02, 1.117e-01, -5.290e-03, -9.149e-02, -7.679e-02) * s0_1_0;
	r0 += M4(-4.055e-01, -3.855e-01, -1.990e-01, -3.136e-01, 4.561e-03, 3.514e-01, 2.869e-01, -6.917e-02, -1.546e-02, -1.682e-01, -1.353e-01, -6.714e-02, -1.101e-01, -1.372e-01, -4.541e-01, 1.195e-01) * s0_1_1;
	r1 += M4(2.323e-01, 1.350e-01, 2.675e-02, 6.700e-02, -1.099e-01, 7.317e-02, 6.364e-01, -1.080e-02, -2.224e-01, -1.240e-01, -8.608e-02, -3.210e-01, -5.090e-01, -1.602e-01, -2.503e-02, -3.681e-02) * s0_1_1;
	r2 += M4(-5.332e-01, -1.143e-01, 7.466e-02, 1.751e-02, 3.075e-01, 1.486e-01, -7.341e-02, -7.160e-02, -2.204e-01, -2.024e-02, -4.805e-02, -1.454e-01, -6.268e-03, 1.143e-01, -1.987e-01, -5.851e-01) * s0_1_1;
	r0 += M4(8.000e-02, 2.999e-03, 2.439e-01, -1.223e-01, -2.091e-02, -9.292e-02, -1.167e-01, -2.279e-02, -1.763e-01, -3.055e-02, -1.362e-01, 2.152e-02, 1.061e-02, 6.337e-02, -2.482e-01, 4.506e-02) * s0_1_2;
	r1 += M4(-1.936e-01, -8.718e-02, 5.620e-02, 6.484e-02, 1.490e-01, 7.618e-02, -1.498e-01, -4.823e-02, -2.105e-01, -3.349e-01, 2.632e-02, 1.012e-01, -1.815e-01, -7.138e-02, 4.779e-02, 4.748e-02) * s0_1_2;
	r2 += M4(-2.252e-01, -1.084e-01, 2.606e-02, 1.146e-01, -1.671e-01, 2.451e-02, 6.273e-04, -4.163e-02, 1.797e-01, -7.371e-02, -7.049e-02, -1.420e-01, -1.960e-02, -3.632e-02, -7.329e-03, -4.627e-02) * s0_1_2;
	r0 += M4(-3.537e-02, -8.795e-02, -8.081e-02, 8.556e-04, 3.991e-02, 2.945e-02, 9.640e-03, -6.056e-03, -5.698e-02, -4.270e-02, -3.536e-02, -2.602e-02, -3.950e-02, -3.796e-02, -2.009e-02, -3.816e-03) * s0_2_0;
	r1 += M4(1.164e-01, 1.910e-01, 1.325e-02, -2.986e-01, 1.738e-02, 3.091e-02, -2.918e-03, 4.335e-02, -3.559e-02, 2.083e-02, -3.857e-02, 1.948e-01, -6.824e-02, -1.248e-01, 3.213e-02, 1.368e-01) * s0_2_0;
	r2 += M4(-2.733e-01, -1.468e-02, -3.612e-02, 4.211e-02, 2.745e-02, -1.865e-02, -9.059e-03, 6.417e-03, 8.960e-02, 6.520e-03, -1.366e-02, -7.719e-02, 1.292e-01, -1.373e-02, 3.414e-02, 2.504e-02) * s0_2_0;
	r0 += M4(1.072e-01, 1.659e-01, 2.987e-02, 1.489e-01, 1.013e-01, 1.342e-01, 1.206e-01, 6.039e-03, -5.103e-03, 2.632e-02, -2.583e-02, 6.605e-03, -5.486e-04, 4.246e-04, 1.489e-01, -5.689e-02) * s0_2_1;
	r1 += M4(-1.304e-01, -1.033e-01, 5.020e-02, 2.063e-01, -4.756e-02, -5.185e-02, 6.420e-02, 5.376e-02, -9.480e-02, -1.057e-01, -1.446e-02, -2.135e-01, 9.786e-02, 3.403e-02, -4.575e-02, -4.791e-02) * s0_2_1;
	r2 += M4(8.832e-02, 3.695e-02, -7.526e-02, -2.242e-01, -1.464e-01, 5.964e-03, -1.184e-01, 2.632e-02, -1.231e-01, -1.902e-02, -8.069e-02, 9.603e-02, -9.095e-02, -4.849e-02, -4.274e-03, 1.218e-01) * s0_2_1;
	r0 += M4(7.717e-03, -3.057e-05, -2.509e-01, 8.381e-02, 1.915e-02, 3.333e-02, 1.243e-02, 4.029e-02, -9.559e-02, -1.362e-01, -3.718e-02, -4.239e-02, -5.418e-02, -6.292e-02, 2.240e-02, -2.813e-02) * s0_2_2;
	r1 += M4(-4.727e-02, -1.782e-02, -8.262e-02, 7.038e-03, 2.144e-02, 4.973e-02, 4.568e-03, -2.829e-02, -1.034e-01, -1.263e-01, -1.427e-02, 3.800e-02, 1.627e-02, 2.771e-02, -2.570e-02, 6.392e-02) * s0_2_2;
	r2 += M4(-4.733e-02, 8.479e-02, 5.758e-03, -8.326e-02, -9.991e-02, 2.900e-02, -7.713e-04, 1.409e-02, -6.553e-03, 1.320e-02, -2.608e-02, -1.332e-01, 8.404e-02, -1.411e-02, -2.348e-02, -3.915e-02) * s0_2_2;
	r0 += V4(-1.480e-02, -1.361e-02, -1.395e-02, -4.197e-03);
	r0 = clamp(r0, V4(0.0), V4(1.0));
	imageStore(out_image, opos + ivec2(0, 0), vec4(r0));
	r1 += V4(-1.376e-02, -1.053e-02, -2.970e-03, -2.017e-02);
	r1 = clamp(r1, V4(0.0), V4(1.0));
	imageStore(out_image, opos + ivec2(1, 0), vec4(r1));
	r2 += V4(-7.744e-03, -1.578e-03, -3.582e-03, -1.247e-02);
	r2 = clamp(r2, V4(0.0), V4(1.0));
	imageStore(out_image, opos + ivec2(2, 0), vec4(r2));
}

//!DESC CuNNy-3x12-out-shuffle
//!HOOK LUMA
//!COMPUTE 16 16 8 8
//!BIND conv3
//!BIND LUMA
//!WIDTH LUMA.w 2 *
//!HEIGHT LUMA.h 2 *
//!COMPONENTS 1
//!WHEN OUTPUT.w LUMA.w / 1.3 > OUTPUT.h LUMA.h / 1.3 > *
#extension GL_EXT_shader_explicit_arithmetic_types_float16 : enable
#ifdef GL_EXT_shader_explicit_arithmetic_types_float16
#	define V4 f16vec4
#	define M4 f16mat4
#	define F float16_t
#else
#	define V4 vec4
#	define M4 mat4
#	define F float
#endif
#define l0(x, y) V4((conv3_mul * texelFetch(conv3_raw, clamp(pos + ivec2(x, y), ivec2(0), sz) * ivec2(3, 1) + ivec2(0, 0), 0)))
#define l1(x, y) V4((conv3_mul * texelFetch(conv3_raw, clamp(pos + ivec2(x, y), ivec2(0), sz) * ivec2(3, 1) + ivec2(1, 0), 0)))
#define l2(x, y) V4((conv3_mul * texelFetch(conv3_raw, clamp(pos + ivec2(x, y), ivec2(0), sz) * ivec2(3, 1) + ivec2(2, 0), 0)))
shared V4 G[3][10][10];
void hook() {
	ivec2 xy = ivec2(gl_LocalInvocationID.xy);
	ivec2 pos = ivec2(gl_WorkGroupID.xy) * ivec2(8, 8) + xy;
	ivec2 opos = pos * ivec2(2, 2);
	ivec2 sz = ivec2(LUMA_size) - ivec2(1);
	for (int y = 0; y < 10; y += 8) {
		int ay = xy.y + y;
		if (ay >= 10) break;
		for (int x = 0; x < 10; x += 8) {
			int ax = xy.x + x;
			if (ax >= 10) break;
			G[0][ay][ax] = l0(x - 1, y - 1);
			G[1][ay][ax] = l1(x - 1, y - 1);
			G[2][ay][ax] = l2(x - 1, y - 1);
		}
	}
	barrier();
	V4 s0_0_0, s0_0_1, s0_0_2, s0_1_0, s0_1_1, s0_1_2, s0_2_0, s0_2_1, s0_2_2, s1_0_0, s1_0_1, s1_0_2, s1_1_0, s1_1_1, s1_1_2, s1_2_0, s1_2_1, s1_2_2;
	V4 r0;
	r0 = V4(0.0);
	s0_0_0 = G[0][xy.y+0][xy.x+0]; s0_0_1 = G[0][xy.y+0][xy.x+1];
	s0_0_2 = G[0][xy.y+0][xy.x+2]; s0_1_0 = G[0][xy.y+1][xy.x+0];
	s0_1_1 = G[0][xy.y+1][xy.x+1]; s0_1_2 = G[0][xy.y+1][xy.x+2];
	s0_2_0 = G[0][xy.y+2][xy.x+0]; s0_2_1 = G[0][xy.y+2][xy.x+1];
	s0_2_2 = G[0][xy.y+2][xy.x+2]; s1_0_0 = G[1][xy.y+0][xy.x+0];
	s1_0_1 = G[1][xy.y+0][xy.x+1]; s1_0_2 = G[1][xy.y+0][xy.x+2];
	s1_1_0 = G[1][xy.y+1][xy.x+0]; s1_1_1 = G[1][xy.y+1][xy.x+1];
	s1_1_2 = G[1][xy.y+1][xy.x+2]; s1_2_0 = G[1][xy.y+2][xy.x+0];
	s1_2_1 = G[1][xy.y+2][xy.x+1]; s1_2_2 = G[1][xy.y+2][xy.x+2];
	r0 += M4(1.593e-02, -3.245e-03, -3.872e-04, 3.656e-04, 1.034e-03, 8.552e-03, -4.032e-03, -5.639e-04, 7.180e-04, -4.587e-03, -8.155e-05, 1.349e-03, 1.948e-03, -3.059e-07, 1.438e-05, -5.482e-04) * s0_0_0;
	r0 += M4(6.027e-02, 2.924e-02, -1.889e-03, -6.615e-04, 4.220e-02, 5.991e-02, 7.107e-04, -7.632e-03, -2.068e-02, -2.284e-02, -7.936e-03, 1.019e-02, -2.326e-03, 2.260e-04, -3.116e-04, 8.042e-04) * s0_0_1;
	r0 += M4(3.844e-03, -8.335e-03, -1.616e-04, 1.956e-03, -1.029e-03, 1.882e-02, -6.277e-05, -2.152e-03, 7.073e-04, -1.728e-03, -3.118e-04, 2.291e-03, 6.352e-05, 1.353e-03, 4.077e-05, -2.523e-04) * s0_0_2;
	r0 += M4(4.675e-02, -4.204e-03, 4.267e-02, -1.437e-03, -1.177e-02, 3.082e-03, 1.740e-02, 3.699e-03, -4.783e-02, 6.295e-05, -8.260e-02, 1.427e-03, -6.421e-02, -1.158e-02, 1.189e-02, -5.909e-03) * s0_1_0;
	r0 += M4(-5.676e-01, 1.514e-01, 1.969e-01, 1.528e-01, 1.440e-01, -5.605e-01, 1.587e-01, 1.958e-01, 1.304e-01, 1.947e-01, 1.792e-01, -5.068e-01, -1.551e-01, -1.999e-01, -2.285e-02, -1.574e-04) * s0_1_1;
	r0 += M4(1.246e-02, -6.049e-02, -3.863e-03, -2.977e-02, -4.157e-03, 4.674e-02, 2.763e-03, 4.998e-02, 1.176e-03, 3.347e-02, -5.633e-03, 6.274e-02, -6.638e-03, -5.079e-03, 1.485e-03, 5.322e-03) * s0_1_2;
	r0 += M4(8.840e-03, -7.321e-07, -5.537e-03, -2.882e-04, -4.047e-03, 6.481e-03, -6.991e-03, -5.271e-03, -7.403e-04, -3.479e-03, -2.821e-03, 4.508e-03, -1.739e-03, 1.503e-04, 2.874e-02, 3.315e-03) * s0_2_0;
	r0 += M4(6.406e-03, -9.414e-03, -1.467e-02, -8.839e-03, 6.823e-03, 1.073e-02, -5.937e-02, -8.013e-02, -2.482e-03, -1.800e-03, 3.405e-02, 5.579e-02, 3.408e-03, 1.326e-02, 1.645e-01, 1.589e-01) * s0_2_1;
	r0 += M4(2.298e-03, -7.398e-03, -6.371e-03, 7.148e-04, -8.667e-04, 1.653e-02, -5.142e-03, -1.560e-02, 2.835e-04, -4.195e-03, -3.635e-03, 1.193e-02, 2.700e-03, -9.886e-03, 1.048e-03, 3.746e-02) * s0_2_2;
	r0 += M4(4.192e-03, -1.288e-02, 1.228e-02, -1.678e-02, 9.219e-04, 6.182e-03, 1.093e-02, 7.623e-03, -6.166e-03, 5.725e-03, -8.776e-03, 4.639e-03, -5.412e-04, -1.592e-06, -1.861e-05, 2.041e-07) * s1_0_0;
	r0 += M4(-2.485e-02, -4.776e-02, 6.192e-02, -2.267e-03, -2.805e-02, -5.237e-02, 1.418e-03, -1.299e-03, -1.381e-03, 4.529e-02, 6.237e-04, -1.855e-03, 4.843e-03, -3.478e-03, 1.760e-03, -3.145e-03) * s1_0_1;
	r0 += M4(2.435e-02, 6.907e-02, 3.089e-03, 2.135e-02, 5.066e-03, -1.893e-03, -3.004e-05, 2.999e-03, -2.475e-06, 1.219e-03, 1.102e-05, 1.072e-03, -2.398e-02, 4.670e-02, 9.588e-03, -1.206e-03) * s1_0_2;
	r0 += M4(-7.446e-02, -3.719e-02, 1.617e-02, -3.071e-02, 9.634e-02, 1.584e-02, 5.793e-02, 2.339e-02, -1.978e-01, -1.690e-02, -1.478e-01, -2.130e-02, -3.221e-04, 2.517e-06, 1.654e-04, 5.009e-07) * s1_1_0;
	r0 += M4(2.414e-01, 6.537e-02, -2.509e-01, 2.783e-01, -1.734e-01, 1.130e-01, -1.753e-01, -1.257e-01, 9.793e-03, 1.449e-01, 8.277e-03, 1.662e-01, 2.999e-02, -1.754e-02, 6.306e-03, -1.435e-02) * s1_1_1;
	r0 += M4(2.622e-02, -7.165e-02, 4.455e-02, -3.605e-02, -1.253e-03, -7.250e-02, 4.435e-03, -3.666e-02, 3.006e-06, -1.177e-03, -8.035e-04, -1.095e-03, -2.998e-01, 2.666e-01, -2.172e-01, 2.095e-01) * s1_1_2;
	r0 += M4(-8.149e-03, -2.372e-03, -2.577e-02, -1.002e-02, -1.431e-03, 1.655e-03, 2.423e-02, 2.532e-03, -3.756e-03, 2.015e-03, -4.406e-02, 7.720e-03, -5.653e-04, -2.575e-07, -1.367e-03, -6.225e-07) * s1_2_0;
	r0 += M4(-2.752e-02, -2.103e-02, 1.768e-02, -7.933e-02, 1.884e-02, 4.601e-03, 7.733e-02, 1.135e-01, -5.251e-03, 1.177e-02, -4.428e-03, 3.529e-02, -8.819e-03, -1.533e-03, 1.414e-02, -1.181e-02) * s1_2_1;
	r0 += M4(-1.063e-02, -1.531e-02, 3.227e-02, -1.179e-02, 9.778e-03, 1.886e-03, 1.642e-02, -3.511e-03, 5.497e-08, -1.120e-06, 8.155e-04, 1.974e-05, -3.217e-02, -3.809e-03, -1.448e-01, 1.280e-01) * s1_2_2;
	s0_0_0 = G[2][xy.y+0][xy.x+0]; s0_0_1 = G[2][xy.y+0][xy.x+1];
	s0_0_2 = G[2][xy.y+0][xy.x+2]; s0_1_0 = G[2][xy.y+1][xy.x+0];
	s0_1_1 = G[2][xy.y+1][xy.x+1]; s0_1_2 = G[2][xy.y+1][xy.x+2];
	s0_2_0 = G[2][xy.y+2][xy.x+0]; s0_2_1 = G[2][xy.y+2][xy.x+1];
	s0_2_2 = G[2][xy.y+2][xy.x+2];
	r0 += M4(5.472e-03, 1.083e-02, -7.282e-03, 6.687e-03, -1.564e-04, 1.016e-04, 4.660e-06, 1.682e-07, -3.052e-03, 5.045e-05, -2.326e-04, -8.066e-07, -1.787e-02, -2.352e-03, 7.507e-03, -9.897e-04) * s0_0_0;
	r0 += M4(7.978e-02, -1.373e-01, -1.483e-03, 8.567e-03, 1.388e-04, -2.379e-04, -1.239e-05, -1.400e-07, 4.944e-02, 5.957e-03, 1.678e-02, 1.543e-03, -6.658e-02, -5.275e-02, 1.215e-02, 5.445e-03) * s0_0_1;
	r0 += M4(1.189e-04, 2.622e-02, 1.178e-03, 3.108e-03, 7.479e-06, -3.700e-07, 7.922e-06, -8.231e-08, -3.084e-03, -4.733e-02, -3.809e-03, -4.289e-03, -5.036e-03, 6.534e-04, 1.492e-03, -3.273e-03) * s0_0_2;
	r0 += M4(1.296e-03, 1.338e-02, 8.207e-03, 9.185e-03, 3.454e-02, -1.862e-03, -1.319e-02, 3.568e-05, 3.776e-03, -5.479e-05, -3.541e-04, 7.041e-07, 3.625e-02, 3.979e-03, 4.820e-02, -2.458e-03) * s0_1_0;
	r0 += M4(1.609e-01, -1.662e-01, 1.978e-01, -3.603e-01, 1.714e-01, 1.948e-01, 1.701e-02, 1.629e-03, 1.665e-01, -1.167e-03, 1.694e-01, 8.379e-03, 2.378e-01, 1.606e-01, -6.106e-01, 1.636e-01) * s0_1_1;
	r0 += M4(-3.608e-03, 1.729e-02, -3.308e-03, 3.151e-02, 1.637e-03, 2.148e-02, -2.689e-04, 2.216e-03, -6.674e-03, -1.550e-01, -2.543e-02, -1.946e-01, 3.394e-03, 3.884e-02, 1.926e-02, -1.409e-02) * s0_1_2;
	r0 += M4(-1.170e-02, 2.713e-03, -1.086e-02, 8.731e-03, 1.029e-02, -7.281e-04, -2.656e-02, -8.012e-03, -7.604e-07, 4.256e-06, 9.739e-04, 7.109e-08, -9.409e-05, 7.868e-04, 1.715e-02, 1.401e-03) * s0_2_0;
	r0 += M4(-8.557e-03, -9.916e-03, 4.210e-02, 1.842e-02, -1.752e-02, -2.020e-02, -1.870e-01, -1.707e-01, 3.237e-03, 9.598e-05, 3.471e-02, -4.579e-03, -1.025e-02, 5.725e-03, 3.364e-02, 3.009e-02) * s0_2_1;
	r0 += M4(-3.995e-04, -2.271e-04, 1.437e-03, 1.181e-02, 1.515e-03, 1.367e-02, -1.460e-02, -4.963e-02, 8.288e-05, -1.418e-02, 1.837e-02, -1.910e-02, -1.840e-03, -1.969e-03, 9.175e-03, 4.356e-03) * s0_2_2;
	r0 += V4(-5.847e-13, -1.039e-08, 1.513e-08, 1.619e-10);
	r0 = r0;
	vec2 opt = 0.5 * LUMA_pt;
	vec2 fpos = (vec2(opos) + vec2(0.5)) * opt;
	imageStore(out_image, opos + ivec2(0, 0), vec4(r0.x + LUMA_tex(fpos + vec2(0.0, 0.0) * opt).r, 0.0, 0.0, 1.0));
	imageStore(out_image, opos + ivec2(1, 0), vec4(r0.y + LUMA_tex(fpos + vec2(1.0, 0.0) * opt).r, 0.0, 0.0, 1.0));
	imageStore(out_image, opos + ivec2(0, 1), vec4(r0.z + LUMA_tex(fpos + vec2(0.0, 1.0) * opt).r, 0.0, 0.0, 1.0));
	imageStore(out_image, opos + ivec2(1, 1), vec4(r0.w + LUMA_tex(fpos + vec2(1.0, 1.0) * opt).r, 0.0, 0.0, 1.0));
}
