// CuNNy faster
// Copyright (c) 2024 funnyplanter

// This program is free software; you can redistribute it and/or
// modify it under the terms of the GNU Lesser General Public
// License as published by the Free Software Foundation; either
// version 3.0 of the License, or (at your option) any later version.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
// Lesser General Public License for more details.
//
// You should have received a copy of the GNU Lesser General Public
// License along with this program.  If not, see <https://www.gnu.org/licenses/>.
/* ------------------------------------------------------------------- */


//!DESC CuNNy-faster-in
//!HOOK LUMA
//!COMPUTE 16 8 8 8
//!BIND LUMA
//!SAVE in
//!WIDTH LUMA.w 2 *
//!HEIGHT LUMA.h
//!COMPONENTS 4
//!WHEN OUTPUT.w LUMA.w / 1.3 > OUTPUT.h LUMA.h / 1.3 > *
#extension GL_EXT_shader_explicit_arithmetic_types_float16 : enable
#ifdef GL_EXT_shader_explicit_arithmetic_types_float16
#	define V4 f16vec4
#	define M4 f16mat4
#	define F float16_t
#else
#	define V4 vec4
#	define M4 mat4
#	define F float
#endif
#define l0(x, y) F((LUMA_mul * texelFetch(LUMA_raw, clamp(pos + ivec2(x, y), ivec2(0), sz) * ivec2(1, 1) + ivec2(0, 0), 0)).r)
shared F G[1][10][10];
void hook() {
	ivec2 xy = ivec2(gl_LocalInvocationID.xy);
	ivec2 pos = ivec2(gl_WorkGroupID.xy) * ivec2(8, 8) + xy;
	ivec2 opos = pos * ivec2(2, 1);
	ivec2 sz = ivec2(LUMA_size) - ivec2(1);
	for (int y = 0; y < 10; y += 8) {
		int ay = xy.y + y;
		if (ay >= 10) break;
		for (int x = 0; x < 10; x += 8) {
			int ax = xy.x + x;
			if (ax >= 10) break;
			G[0][ay][ax] = l0(x - 1, y - 1);
		}
	}
	barrier();
	F s0_0_0, s0_0_1, s0_0_2, s0_1_0, s0_1_1, s0_1_2, s0_2_0, s0_2_1, s0_2_2;
	V4 r0, r1;
	r0 = V4(0.0); r1 = V4(0.0);
	s0_0_0 = G[0][xy.y+0][xy.x+0]; s0_0_1 = G[0][xy.y+0][xy.x+1];
	s0_0_2 = G[0][xy.y+0][xy.x+2]; s0_1_0 = G[0][xy.y+1][xy.x+0];
	s0_1_1 = G[0][xy.y+1][xy.x+1]; s0_1_2 = G[0][xy.y+1][xy.x+2];
	s0_2_0 = G[0][xy.y+2][xy.x+0]; s0_2_1 = G[0][xy.y+2][xy.x+1];
	s0_2_2 = G[0][xy.y+2][xy.x+2];
	r0 += V4(3.799e-01, -3.086e-02, 3.010e-03, -9.683e-03) * s0_0_0;
	r1 += V4(2.118e-02, 1.368e-02, -3.280e-02, 7.324e-02) * s0_0_0;
	r0 += V4(3.469e-01, 2.882e-02, -2.243e-02, 1.170e+00) * s0_0_1;
	r1 += V4(2.338e-02, -2.323e-03, 2.764e-01, -3.309e-02) * s0_0_1;
	r0 += V4(-2.889e-02, 2.381e-03, 1.387e-02, -3.230e-02) * s0_0_2;
	r1 += V4(3.121e-03, -2.537e-02, -1.779e-01, -4.645e-02) * s0_0_2;
	r0 += V4(3.119e-01, 1.082e+00, 4.433e-02, 1.737e-02) * s0_1_0;
	r1 += V4(-5.348e-02, -4.010e-02, 1.032e-01, -9.863e-01) * s0_1_0;
	r0 += V4(-1.314e+00, -1.045e+00, -1.145e+00, -1.168e+00) * s0_1_1;
	r1 += V4(-1.933e-01, 4.098e-02, -2.310e-01, 1.007e+00) * s0_1_1;
	r0 += V4(-8.243e-02, -3.435e-02, 3.527e-01, 2.390e-02) * s0_1_2;
	r1 += V4(3.565e-03, -1.128e+00, 2.608e-01, -3.690e-03) * s0_1_2;
	r0 += V4(-3.896e-02, -6.765e-02, -4.272e-02, -7.351e-03) * s0_2_0;
	r1 += V4(2.351e-02, 1.490e-02, 1.570e-02, 2.810e-02) * s0_2_0;
	r0 += V4(9.936e-02, 4.371e-02, -9.296e-03, -6.270e-03) * s0_2_1;
	r1 += V4(5.278e-01, 7.218e-03, -4.031e-02, -8.566e-02) * s0_2_1;
	r0 += V4(4.303e-02, 1.934e-02, 8.069e-01, 6.540e-03) * s0_2_2;
	r1 += V4(-1.748e-01, 1.121e+00, -2.877e-03, 4.773e-02) * s0_2_2;
	r0 += V4(-2.904e-03, -4.825e-04, -1.506e-04, 2.052e-04);
	r0 = max(r0, V4(0.0));
	imageStore(out_image, opos + ivec2(0, 0), vec4(r0));
	r1 += V4(1.075e-02, 4.249e-04, 1.515e-02, -1.524e-04);
	r1 = max(r1, V4(0.0));
	imageStore(out_image, opos + ivec2(1, 0), vec4(r1));
}

//!DESC CuNNy-faster-conv1
//!HOOK LUMA
//!COMPUTE 16 8 8 8
//!BIND in
//!BIND LUMA
//!SAVE conv1
//!WIDTH LUMA.w 2 *
//!HEIGHT LUMA.h
//!COMPONENTS 4
//!WHEN OUTPUT.w LUMA.w / 1.3 > OUTPUT.h LUMA.h / 1.3 > *
#extension GL_EXT_shader_explicit_arithmetic_types_float16 : enable
#ifdef GL_EXT_shader_explicit_arithmetic_types_float16
#	define V4 f16vec4
#	define M4 f16mat4
#	define F float16_t
#else
#	define V4 vec4
#	define M4 mat4
#	define F float
#endif
#define l0(x, y) V4((in_mul * texelFetch(in_raw, clamp(pos + ivec2(x, y), ivec2(0), sz) * ivec2(2, 1) + ivec2(0, 0), 0)))
#define l1(x, y) V4((in_mul * texelFetch(in_raw, clamp(pos + ivec2(x, y), ivec2(0), sz) * ivec2(2, 1) + ivec2(1, 0), 0)))
shared V4 G[2][10][10];
void hook() {
	ivec2 xy = ivec2(gl_LocalInvocationID.xy);
	ivec2 pos = ivec2(gl_WorkGroupID.xy) * ivec2(8, 8) + xy;
	ivec2 opos = pos * ivec2(2, 1);
	ivec2 sz = ivec2(LUMA_size) - ivec2(1);
	for (int y = 0; y < 10; y += 8) {
		int ay = xy.y + y;
		if (ay >= 10) break;
		for (int x = 0; x < 10; x += 8) {
			int ax = xy.x + x;
			if (ax >= 10) break;
			G[0][ay][ax] = l0(x - 1, y - 1);
			G[1][ay][ax] = l1(x - 1, y - 1);
		}
	}
	barrier();
	V4 s0_0_0, s0_0_1, s0_0_2, s0_1_0, s0_1_1, s0_1_2, s0_2_0, s0_2_1, s0_2_2, s1_0_0, s1_0_1, s1_0_2, s1_1_0, s1_1_1, s1_1_2, s1_2_0, s1_2_1, s1_2_2;
	V4 r0, r1;
	r0 = V4(0.0); r1 = V4(0.0);
	s0_0_0 = G[0][xy.y+0][xy.x+0]; s0_0_1 = G[0][xy.y+0][xy.x+1];
	s0_0_2 = G[0][xy.y+0][xy.x+2]; s0_1_0 = G[0][xy.y+1][xy.x+0];
	s0_1_1 = G[0][xy.y+1][xy.x+1]; s0_1_2 = G[0][xy.y+1][xy.x+2];
	s0_2_0 = G[0][xy.y+2][xy.x+0]; s0_2_1 = G[0][xy.y+2][xy.x+1];
	s0_2_2 = G[0][xy.y+2][xy.x+2]; s1_0_0 = G[1][xy.y+0][xy.x+0];
	s1_0_1 = G[1][xy.y+0][xy.x+1]; s1_0_2 = G[1][xy.y+0][xy.x+2];
	s1_1_0 = G[1][xy.y+1][xy.x+0]; s1_1_1 = G[1][xy.y+1][xy.x+1];
	s1_1_2 = G[1][xy.y+1][xy.x+2]; s1_2_0 = G[1][xy.y+2][xy.x+0];
	s1_2_1 = G[1][xy.y+2][xy.x+1]; s1_2_2 = G[1][xy.y+2][xy.x+2];
	r0 += M4(4.636e-02, -1.143e-01, -2.369e-01, 1.387e-01, 1.151e-01, 9.095e-02, 3.748e-01, 4.790e-05, -4.737e-01, 2.466e-01, -3.961e-01, -7.217e-01, 4.017e-02, 6.013e-02, 4.973e-01, -2.623e-02) * s0_0_0;
	r1 += M4(7.755e-03, -5.430e-03, 3.288e-01, 5.326e-02, -7.806e-02, 1.232e-01, -4.463e-01, -6.763e-02, 2.521e-01, -6.088e-01, -9.552e-03, 1.751e-01, 1.110e-01, -1.353e-01, -9.841e-02, -1.010e-02) * s0_0_0;
	r0 += M4(-4.179e-03, -4.635e-02, -4.952e-01, 3.031e-01, -3.995e-01, -1.127e-01, 2.115e-01, -6.152e-01, -1.534e-01, -4.408e-02, -1.842e-01, 4.388e-01, 2.841e-02, 2.785e-02, 1.973e-01, -1.562e-01) * s0_0_1;
	r1 += M4(-7.506e-02, 2.565e-01, 1.509e-01, 3.146e-03, 3.083e-01, -2.472e-01, -7.970e-02, 2.007e-01, -9.612e-02, 1.723e-01, 4.259e-01, 8.477e-02, 7.492e-02, -1.543e-01, -2.005e-01, -8.437e-02) * s0_0_1;
	r0 += M4(1.171e-01, -1.649e-02, 4.323e-02, 4.584e-02, -3.225e-01, -2.056e-01, 2.288e-01, -4.392e-01, 1.882e-01, -1.208e-01, 1.177e-01, 1.496e-01, 2.314e-02, 3.093e-02, 1.911e-01, 2.780e-02) * s0_0_2;
	r1 += M4(-1.324e-01, 1.386e-02, -8.544e-02, -4.492e-02, -8.379e-02, -5.332e-01, -2.787e-02, -1.767e-02, -7.039e-02, 1.047e-01, 8.862e-02, -2.058e-02, 1.372e-01, 1.418e-01, 5.923e-03, 2.586e-02) * s0_0_2;
	r0 += M4(-1.990e-01, -3.637e-04, 1.703e-01, 3.311e-01, 9.908e-02, -1.616e-01, 7.458e-02, 5.627e-02, 8.220e-01, 1.009e-01, -1.797e-01, -1.668e-01, 3.806e-02, 1.086e-01, 6.126e-02, -1.654e-01) * s0_1_0;
	r1 += M4(2.230e-02, 1.238e-01, 8.724e-01, 8.207e-02, -2.800e-02, -3.057e-01, -3.545e-01, -1.782e-01, 5.394e-02, 2.308e-01, 1.107e-01, 1.485e-01, 5.217e-01, 7.991e-02, -4.799e-01, 3.343e-01) * s0_1_0;
	r0 += M4(2.459e+00, 8.090e-03, -4.768e-02, 1.626e+00, -3.085e+00, 3.564e-01, -2.604e+00, -9.273e-01, -9.943e-01, 3.125e-01, -2.700e-01, 4.303e-01, -2.335e+00, 6.995e-02, -2.259e+00, -8.184e-01) * s0_1_1;
	r1 += M4(2.673e-01, 1.215e-01, -4.267e-01, -1.030e-01, 3.310e-01, 1.126e+00, 5.488e-01, 8.581e-01, -2.170e-01, -5.715e-02, 1.999e-01, 2.066e-01, 4.721e-01, -3.164e-01, 1.129e+00, 5.448e-01) * s0_1_1;
	r0 += M4(5.372e-01, 7.852e-02, -3.487e-01, 2.639e-01, -5.381e-01, -2.198e-01, 2.362e-01, -3.456e+00, -4.623e-02, -5.187e-02, -1.746e-01, 1.509e-01, -9.494e-01, -2.123e-01, 1.591e-01, -1.602e-01) * s0_1_2;
	r1 += M4(-6.416e-02, -2.367e-01, -8.222e-02, 3.135e-02, -2.940e-01, -7.184e-01, -6.579e-02, 4.073e-04, -8.343e-02, -5.272e-02, -1.548e-01, 5.408e-03, 7.807e-02, 1.250e-01, -1.327e-01, 1.770e-01) * s0_1_2;
	r0 += M4(-1.584e-01, 8.552e-02, -1.516e-01, 4.546e-02, 2.252e-01, -5.043e-03, -2.038e-01, -1.139e-01, 1.821e-01, -1.052e-01, 3.347e-02, -6.185e-02, 6.813e-01, 1.149e-01, -7.284e-01, 1.882e-01) * s0_2_0;
	r1 += M4(-2.975e-01, -8.345e-02, 2.705e-01, -1.401e-01, 1.431e-01, -1.199e-01, -2.036e-01, 6.976e-03, -3.841e-02, -2.548e-01, -5.775e-02, -1.187e-01, 1.795e-01, -2.282e-01, -2.150e-01, 1.440e-01) * s0_2_0;
	r0 += M4(-5.723e-01, -4.075e-01, 7.169e-01, 3.605e-02, 6.310e-01, 3.205e-01, -6.910e-01, 8.256e-01, -6.875e-01, -9.416e-03, -4.015e-02, -6.611e-02, -7.226e-02, 5.693e-01, -3.377e-01, -1.813e+00) * s0_2_1;
	r1 += M4(-1.589e-01, 3.500e-01, 1.355e-01, -8.616e-02, -1.645e-01, -1.644e-02, 4.707e-02, 9.603e-02, -8.540e-02, -7.159e-02, 2.149e-01, 4.466e-02, -6.391e-01, -2.762e-01, 1.938e-01, 2.787e-01) * s0_2_1;
	r0 += M4(1.746e-01, 2.567e-01, 1.390e-01, -4.625e-01, 1.553e-01, 1.807e-01, -2.692e-02, 7.549e-01, -1.099e-01, -8.252e-02, 2.456e-01, 1.722e-01, -1.221e-01, -3.779e-01, 2.644e-01, 2.094e-01) * s0_2_2;
	r1 += M4(-1.270e-01, -4.156e-01, 2.057e-02, -4.458e-04, -8.938e-02, 5.830e-03, 1.607e-01, 1.086e-01, -1.104e-02, -9.624e-02, 1.252e-01, 1.076e-02, -4.072e-01, -1.585e-01, -2.157e-01, -2.495e-01) * s0_2_2;
	r0 += M4(-5.494e-01, 1.768e-01, 7.696e-01, -5.813e-01, -1.685e-01, 9.253e-02, 3.801e-01, -1.854e+00, -2.831e-01, -9.542e-02, -7.371e-01, -2.314e-01, 3.055e-02, 3.136e-02, -9.769e-02, 7.878e-02) * s1_0_0;
	r1 += M4(-2.998e-01, 4.198e-01, -8.712e-01, 8.439e-02, 2.746e-01, 1.208e-01, -8.323e-01, 1.695e-01, -1.096e-01, -2.153e-02, 2.466e-01, 1.236e-01, 5.153e-02, 2.810e-02, -3.507e-02, 3.571e-02) * s1_0_0;
	r0 += M4(1.148e+00, -2.464e-01, -3.510e-01, 9.317e-01, 3.033e-02, 1.071e-01, 2.855e-01, 5.977e-02, -1.171e-01, -4.744e-02, -3.076e-01, 1.831e-01, 6.193e-01, 2.561e-02, 1.278e+00, 2.908e-01) * s1_0_1;
	r1 += M4(2.424e-01, -1.189e+00, 4.963e-01, -6.309e-01, -1.010e-02, -9.009e-01, 2.074e-01, -2.496e-02, -4.788e-04, 3.816e-01, 1.088e-01, -8.612e-03, 3.281e-01, 5.085e-01, -9.122e-01, 1.007e-01) * s1_0_1;
	r0 += M4(4.068e-01, 1.529e-01, -2.437e-01, 2.550e-01, -1.175e-01, 2.614e-02, -2.922e-02, 1.220e-01, -4.066e-01, -3.592e-02, -6.983e-03, 2.416e-01, 1.600e-01, 2.276e-01, 3.767e-01, 2.853e-01) * s1_0_2;
	r1 += M4(5.845e-02, 6.288e-02, 4.404e-01, -1.119e-02, -3.742e-03, -9.374e-02, -1.004e-01, 2.165e-03, -2.409e-01, 2.589e-01, -1.374e-02, -1.293e-01, 7.433e-01, -4.126e-01, 2.731e-01, 3.577e-01) * s1_0_2;
	r0 += M4(3.414e-02, -3.594e-01, -4.301e-01, -7.438e-01, -2.747e+00, 4.346e-01, -2.691e+00, 2.611e-01, 6.464e-02, 4.083e-01, 1.740e-01, 2.951e-01, 4.877e-02, 2.127e-02, -2.537e-02, -5.769e-02) * s1_1_0;
	r1 += M4(2.997e-01, 2.462e-01, -4.618e-02, 2.552e-01, -1.284e-01, 3.912e-01, 3.004e-01, 2.185e-01, -6.801e-01, -4.132e-01, -3.527e-01, -4.712e-01, -5.220e-02, -1.323e-02, 1.118e-01, -3.073e-02) * s1_1_0;
	r0 += M4(-5.165e-01, 4.859e-01, -4.199e-01, 1.775e-01, 3.683e-01, 3.655e-01, 3.127e-01, 3.605e-01, 2.223e-01, 3.488e-01, 8.916e-02, 2.700e-01, -2.686e-01, 8.509e-03, -8.347e-01, -2.086e+00) * s1_1_1;
	r1 += M4(-1.743e-01, 5.800e-01, 8.586e-02, 5.312e-01, 7.163e-02, 1.754e-01, 2.018e-01, 3.232e-01, 1.081e+00, 5.101e-01, 2.137e-01, 1.232e+00, -3.197e-01, -6.269e-01, -1.152e+00, -1.538e-01) * s1_1_1;
	r0 += M4(-3.114e-01, 1.707e-02, 1.415e-01, 6.264e-01, -2.890e-02, -1.131e-01, -3.159e-02, 4.828e-02, 6.430e-01, -5.513e-01, -1.590e-01, -2.979e-01, -1.965e+00, 1.013e+00, -1.280e+00, -5.605e-01) * s1_1_2;
	r1 += M4(-8.525e-02, 1.147e-01, -9.680e-02, 2.899e-03, 3.504e-02, 2.302e-01, -2.047e-02, 6.898e-02, -2.090e-01, 1.380e-01, -2.744e-01, -2.212e-01, 1.237e+00, 4.912e-01, 7.561e-01, 9.484e-01) * s1_1_2;
	r0 += M4(1.702e-01, 4.983e-02, 3.331e-02, 6.285e-02, 4.543e-01, -7.006e-02, -8.715e-02, 3.069e-01, 6.593e-01, -5.330e-01, 1.676e+00, -4.120e-02, 2.705e-03, -5.605e-02, 2.959e-01, 4.056e-02) * s1_2_0;
	r1 += M4(2.713e-02, 8.415e-02, 1.750e-01, 6.091e-02, -7.740e-02, -1.016e-01, -7.585e-03, -9.006e-02, 2.576e-01, -3.304e-01, 1.547e-01, 5.091e-02, -4.445e-03, -9.147e-02, -9.256e-02, -1.087e-02) * s1_2_0;
	r0 += M4(-6.387e-01, -6.017e-02, 3.333e-01, -1.461e-01, 3.405e-01, 9.004e-02, -3.383e-02, 2.270e-01, -6.377e-01, -5.046e-02, -1.227e-01, 1.217e-01, -3.056e-01, -6.192e-02, -2.336e-01, -2.134e-02) * s1_2_1;
	r1 += M4(-8.947e-02, -2.148e-01, -1.125e-01, -1.030e-01, -4.792e-02, 9.289e-02, -1.486e-01, -6.781e-03, -3.931e-01, -4.684e-01, -1.461e-01, -6.605e-01, -1.433e-02, 1.416e-01, -2.279e-01, 1.818e-01) * s1_2_1;
	r0 += M4(2.861e-03, -1.263e-01, 7.498e-02, -5.308e-01, 1.653e-01, 3.242e-02, -5.253e-02, 7.839e-03, 2.198e-01, 4.512e-01, -4.647e-01, -6.046e-01, 9.147e-01, 5.020e-01, -4.046e-02, -1.104e-01) * s1_2_2;
	r1 += M4(2.087e-02, 8.840e-03, -1.677e-01, -9.860e-02, 4.977e-02, 1.448e-01, -1.275e-02, 5.727e-02, 3.045e-01, -1.938e-01, 1.552e-01, -2.589e-02, -2.833e-02, -2.547e-01, -1.996e-01, -7.154e-03) * s1_2_2;
	r0 += V4(-2.323e-02, 1.229e-03, -8.313e-03, 3.288e-03);
	r0 = max(r0, V4(0.0));
	imageStore(out_image, opos + ivec2(0, 0), vec4(r0));
	r1 += V4(8.988e-03, 4.541e-03, 4.429e-04, 2.827e-03);
	r1 = max(r1, V4(0.0));
	imageStore(out_image, opos + ivec2(1, 0), vec4(r1));
}

//!DESC CuNNy-faster-conv2
//!HOOK LUMA
//!COMPUTE 16 8 8 8
//!BIND conv1
//!BIND LUMA
//!SAVE conv2
//!WIDTH LUMA.w 2 *
//!HEIGHT LUMA.h
//!COMPONENTS 4
//!WHEN OUTPUT.w LUMA.w / 1.3 > OUTPUT.h LUMA.h / 1.3 > *
#extension GL_EXT_shader_explicit_arithmetic_types_float16 : enable
#ifdef GL_EXT_shader_explicit_arithmetic_types_float16
#	define V4 f16vec4
#	define M4 f16mat4
#	define F float16_t
#else
#	define V4 vec4
#	define M4 mat4
#	define F float
#endif
#define l0(x, y) V4((conv1_mul * texelFetch(conv1_raw, clamp(pos + ivec2(x, y), ivec2(0), sz) * ivec2(2, 1) + ivec2(0, 0), 0)))
#define l1(x, y) V4((conv1_mul * texelFetch(conv1_raw, clamp(pos + ivec2(x, y), ivec2(0), sz) * ivec2(2, 1) + ivec2(1, 0), 0)))
shared V4 G[2][10][10];
void hook() {
	ivec2 xy = ivec2(gl_LocalInvocationID.xy);
	ivec2 pos = ivec2(gl_WorkGroupID.xy) * ivec2(8, 8) + xy;
	ivec2 opos = pos * ivec2(2, 1);
	ivec2 sz = ivec2(LUMA_size) - ivec2(1);
	for (int y = 0; y < 10; y += 8) {
		int ay = xy.y + y;
		if (ay >= 10) break;
		for (int x = 0; x < 10; x += 8) {
			int ax = xy.x + x;
			if (ax >= 10) break;
			G[0][ay][ax] = l0(x - 1, y - 1);
			G[1][ay][ax] = l1(x - 1, y - 1);
		}
	}
	barrier();
	V4 s0_0_0, s0_0_1, s0_0_2, s0_1_0, s0_1_1, s0_1_2, s0_2_0, s0_2_1, s0_2_2, s1_0_0, s1_0_1, s1_0_2, s1_1_0, s1_1_1, s1_1_2, s1_2_0, s1_2_1, s1_2_2;
	V4 r0, r1;
	r0 = V4(0.0); r1 = V4(0.0);
	s0_0_0 = G[0][xy.y+0][xy.x+0]; s0_0_1 = G[0][xy.y+0][xy.x+1];
	s0_0_2 = G[0][xy.y+0][xy.x+2]; s0_1_0 = G[0][xy.y+1][xy.x+0];
	s0_1_1 = G[0][xy.y+1][xy.x+1]; s0_1_2 = G[0][xy.y+1][xy.x+2];
	s0_2_0 = G[0][xy.y+2][xy.x+0]; s0_2_1 = G[0][xy.y+2][xy.x+1];
	s0_2_2 = G[0][xy.y+2][xy.x+2]; s1_0_0 = G[1][xy.y+0][xy.x+0];
	s1_0_1 = G[1][xy.y+0][xy.x+1]; s1_0_2 = G[1][xy.y+0][xy.x+2];
	s1_1_0 = G[1][xy.y+1][xy.x+0]; s1_1_1 = G[1][xy.y+1][xy.x+1];
	s1_1_2 = G[1][xy.y+1][xy.x+2]; s1_2_0 = G[1][xy.y+2][xy.x+0];
	s1_2_1 = G[1][xy.y+2][xy.x+1]; s1_2_2 = G[1][xy.y+2][xy.x+2];
	r0 += M4(1.567e-01, 4.682e-02, 3.883e-02, -9.470e-02, -7.437e-02, -1.959e-01, 1.140e-01, 1.412e-01, -5.876e-02, -2.764e-02, -1.945e-02, 5.109e-03, -1.037e-01, 1.840e-02, -2.339e-01, -7.889e-02) * s0_0_0;
	r1 += M4(-2.466e-01, -2.050e-01, -1.223e-01, 5.523e-03, -2.261e-01, -1.810e-01, 8.657e-02, -5.089e-02, -1.745e-01, -5.406e-02, 7.395e-02, -8.023e-03, -5.774e-02, 3.656e-03, -2.603e-01, -1.490e-02) * s0_0_0;
	r0 += M4(1.675e-01, 2.157e-01, -5.974e-01, -8.344e-01, 1.644e-01, 2.523e-01, -1.627e-01, -5.108e-02, -1.255e-01, -1.403e-01, -1.053e-01, -3.373e-01, -9.975e-03, -1.093e-01, -1.708e-01, -1.101e-01) * s0_0_1;
	r1 += M4(-1.914e-01, -1.144e-01, -4.274e-01, 1.322e-02, 3.524e-01, 1.557e-02, -4.879e-01, 2.597e-02, -1.718e-01, -1.916e-02, -2.989e-01, -9.980e-02, 3.019e-02, 6.827e-02, -4.272e-01, -3.510e-02) * s0_0_1;
	r0 += M4(2.857e-02, 1.845e-01, 1.204e-01, 2.338e-01, 5.309e-02, 5.784e-02, 1.620e-02, -2.825e-02, -1.280e-02, -5.823e-02, -4.948e-02, -6.443e-02, 6.064e-03, -2.117e-02, -1.382e-01, 2.760e-02) * s0_0_2;
	r1 += M4(1.275e-01, 2.525e-02, -1.673e-01, 5.620e-02, -4.602e-02, -4.246e-02, -3.559e-02, -1.076e-02, -4.339e-02, 2.359e-03, -2.119e-01, -3.787e-02, -2.628e-02, -4.199e-03, -1.569e-02, 8.186e-03) * s0_0_2;
	r0 += M4(-3.086e-01, -4.512e-02, -6.372e-02, -7.174e-02, -4.118e-02, -1.414e-01, -1.162e-01, 2.459e-01, -5.492e-01, -2.603e-02, -1.194e-02, 7.485e-02, -1.372e-01, 1.624e-02, 8.984e-03, -5.644e-01) * s0_1_0;
	r1 += M4(-1.322e-01, -7.980e-02, -1.859e-02, -2.042e-01, 5.591e-04, 5.332e-01, 1.665e-01, -1.382e-01, -1.076e-01, -2.015e-01, -7.053e-03, -6.107e-02, -2.867e-02, -3.193e-01, -2.520e-02, 3.831e-02) * s0_1_0;
	r0 += M4(-5.275e-01, -5.508e-01, -5.245e-01, -2.956e-01, -3.687e-02, 8.043e-02, -4.033e-01, -3.815e-01, -3.944e-01, -2.927e-01, -4.377e-01, -5.801e-01, -4.131e-01, -9.310e-02, -1.723e-01, -5.924e-01) * s0_1_1;
	r1 += M4(-5.014e-01, -1.504e-01, -2.661e-01, -1.879e-01, 5.372e-01, -1.078e-01, -9.002e-02, 3.622e-01, -5.176e-01, -2.976e-01, -2.549e-01, -5.395e-01, -5.104e-01, -5.410e-01, -1.931e-02, -5.194e-02) * s0_1_1;
	r0 += M4(1.244e-01, -2.512e-01, -2.979e-01, -5.382e-01, -1.024e-01, 1.929e-01, -9.597e-02, 1.904e-01, -1.014e-01, -2.689e-01, -4.540e-01, -9.649e-01, -1.603e-02, -4.581e-01, 4.343e-02, -4.354e-02) * s0_1_2;
	r1 += M4(1.876e-01, -9.900e-02, 6.107e-02, -1.170e-01, -1.782e-01, 6.273e-03, -1.011e-02, 3.902e-02, -2.646e-01, -4.465e-02, -1.323e-01, 4.814e-02, -1.558e-01, -4.201e-02, 1.422e-02, -4.086e-02) * s0_1_2;
	r0 += M4(-1.298e-02, -5.151e-02, -1.219e-02, 5.352e-02, -2.479e-02, 8.426e-02, 1.946e-02, 8.595e-02, 8.589e-02, 2.913e-02, -2.809e-02, 4.961e-02, 2.619e-02, 3.651e-02, 1.707e-02, -9.960e-03) * s0_2_0;
	r1 += M4(-1.282e-03, -2.539e-03, 7.111e-03, -7.840e-02, 1.284e-01, -2.442e-02, 3.760e-02, 1.826e-01, 8.735e-02, 8.412e-02, 5.387e-02, 7.344e-03, 3.139e-02, -4.641e-02, 1.163e-02, -6.005e-02) * s0_2_0;
	r0 += M4(-2.861e-01, -4.368e-02, -6.567e-02, -7.415e-02, -5.187e-02, -1.265e-02, 5.892e-02, -3.978e-02, -5.879e-01, -5.643e-02, 7.293e-02, 7.565e-03, -2.800e-02, -4.907e-02, 6.483e-02, -2.294e-01) * s0_2_1;
	r1 += M4(-1.199e-01, -9.524e-02, -6.299e-02, -2.576e-01, -1.328e-02, -9.401e-03, 4.441e-02, 1.501e-01, 4.769e-02, 5.920e-02, 1.091e-01, -1.618e-01, -4.277e-01, -1.172e-02, -4.345e-03, -2.805e-01) * s0_2_1;
	r0 += M4(1.592e-02, -1.230e-01, -3.266e-02, 2.989e-02, 3.154e-02, -3.430e-02, 1.835e-02, 8.152e-02, 8.803e-04, -4.143e-01, 4.096e-02, -3.382e-04, -1.724e-02, 8.140e-03, -4.112e-03, -3.148e-03) * s0_2_2;
	r1 += M4(1.073e-01, -1.349e-02, -2.659e-02, 3.838e-02, -3.670e-02, 1.301e-02, 5.348e-03, 9.404e-03, 1.556e-01, -6.102e-02, 8.274e-02, -1.772e-01, 5.891e-03, 1.420e-02, -2.150e-04, -5.454e-02) * s0_2_2;
	r0 += M4(6.670e-02, 3.802e-02, 6.945e-02, 7.056e-02, 6.373e-02, 2.268e-02, 2.928e-02, 1.683e-01, 8.565e-02, 4.453e-02, 4.122e-02, 1.155e-01, -1.004e-01, -1.074e-02, -1.240e-01, -2.046e-01) * s1_0_0;
	r1 += M4(2.044e-01, -2.024e-02, 1.607e-02, 4.608e-02, 1.763e-01, 1.490e-01, 7.156e-02, -2.224e-02, 9.428e-02, -4.768e-02, 8.293e-02, 3.726e-02, -1.729e-01, 8.472e-02, -2.082e-01, -3.238e-02) * s1_0_0;
	r0 += M4(1.134e-01, 8.043e-02, 1.430e-01, -5.751e-02, -1.369e-02, 3.446e-02, -7.694e-02, 1.022e-01, 7.971e-02, 1.827e-02, -3.528e-02, -6.294e-02, -1.372e-01, -2.552e-01, -3.799e-01, 3.408e-01) * s1_0_1;
	r1 += M4(5.722e-02, -2.496e-03, -7.715e-01, 1.271e-01, 1.861e-03, 1.588e-02, -4.506e-01, -1.750e-02, 1.204e-01, 2.372e-02, 1.791e-01, 3.681e-02, -1.268e-01, 7.133e-02, 9.121e-01, -1.151e-01) * s1_0_1;
	r0 += M4(-2.508e-02, 2.251e-02, -2.357e-02, 2.051e-01, -1.032e-02, -1.960e-02, -1.494e-04, 1.130e-01, -3.452e-02, -2.327e-02, 3.723e-02, 9.057e-02, 8.662e-02, 3.795e-02, -4.788e-02, -2.687e-01) * s1_0_2;
	r1 += M4(-7.835e-02, -5.336e-03, 5.502e-02, 3.162e-02, -3.729e-03, 2.344e-02, -6.528e-03, -4.849e-02, 1.109e-01, 4.128e-02, -3.421e-03, 8.471e-03, 1.753e-01, 3.690e-02, -1.927e-02, -8.366e-03) * s1_0_2;
	r0 += M4(1.255e-01, 9.403e-02, -3.270e-02, 6.524e-02, 7.777e-02, 1.058e-01, 8.288e-02, 1.607e-01, 1.510e-01, -1.210e-01, -4.509e-02, -4.009e-01, -9.695e-02, -5.149e-02, 2.290e-02, -2.900e-01) * s1_1_0;
	r1 += M4(-2.029e-02, -4.303e-02, 9.012e-02, -3.402e-02, -8.944e-03, -2.207e-01, 8.398e-02, 7.154e-02, 8.824e-02, 2.978e-01, -4.162e-02, -4.095e-02, 1.422e-01, -1.876e-01, -1.181e-01, 1.102e-01) * s1_1_0;
	r0 += M4(-5.410e-01, 6.045e-02, -5.032e-02, -5.240e-01, 2.209e-01, -4.843e-02, -2.696e-01, -3.647e-01, -3.768e-01, 6.553e-02, 8.789e-02, 3.837e-01, 8.078e-01, 2.723e-01, 8.947e-01, 5.606e-01) * s1_1_1;
	r1 += M4(-2.075e-01, -5.131e-01, 7.496e-02, -4.418e-01, -2.188e-01, 2.108e-01, -1.251e-01, 1.367e-01, -5.879e-01, -1.574e-01, 2.606e-03, -8.799e-03, 2.514e-01, 7.463e-01, 2.549e-01, 4.659e-01) * s1_1_1;
	r0 += M4(-5.860e-02, -3.435e-01, 5.802e-02, 9.045e-02, -1.024e-01, 1.482e-01, -4.745e-02, 1.525e-01, 2.024e-01, -7.120e-03, 3.012e-03, -1.305e-01, -1.753e-01, 4.447e-03, 6.873e-02, -1.379e-01) * s1_1_2;
	r1 += M4(-1.799e-01, -3.238e-02, 9.567e-02, -9.746e-02, 7.764e-02, -3.381e-02, 1.219e-01, 3.873e-02, 3.017e-01, 1.033e-01, 6.381e-02, 1.547e-02, -8.814e-02, -1.098e-01, -1.806e-01, 1.175e-01) * s1_1_2;
	r0 += M4(3.000e-02, 5.317e-02, 2.534e-02, 9.288e-02, 8.276e-02, 8.366e-02, 3.135e-02, 1.610e-01, 1.609e-01, -7.895e-02, 4.434e-04, -9.627e-03, -9.797e-02, -1.148e-01, -5.233e-02, -1.471e-01) * s1_2_0;
	r1 += M4(-1.475e-02, -1.709e-01, -3.219e-02, 1.695e-02, 1.504e-03, 1.083e-01, 3.723e-02, -6.143e-02, 1.655e-01, -5.710e-02, -2.715e-03, 1.406e-01, -5.004e-02, -1.450e-01, -4.401e-02, -7.929e-02) * s1_2_0;
	r0 += M4(1.196e-01, 6.053e-02, 2.432e-02, -9.837e-02, 1.106e-01, -6.495e-02, 2.466e-02, 3.390e-02, -9.102e-02, 1.938e-01, 1.015e-02, 2.023e-01, 9.445e-02, 4.986e-02, -9.709e-02, -6.331e-02) * s1_2_1;
	r1 += M4(-1.503e-01, -1.441e-03, -6.121e-02, 7.074e-02, 7.874e-02, 2.346e-04, 3.402e-03, -3.822e-02, 1.223e-01, -3.142e-03, 9.301e-02, -1.589e-01, -2.569e-01, 3.247e-02, -5.758e-02, -6.465e-01) * s1_2_1;
	r0 += M4(1.925e-02, 4.102e-02, 5.178e-02, -1.390e-02, -3.128e-03, 1.626e-01, 1.573e-02, 2.081e-01, 1.467e-01, -4.937e-03, 2.109e-02, 7.501e-02, -1.353e-01, -1.170e-01, -9.873e-02, -1.462e-01) * s1_2_2;
	r1 += M4(8.833e-02, 6.971e-02, 2.207e-02, -6.235e-02, -1.382e-01, 7.446e-02, -4.231e-03, 1.129e-01, 1.960e-01, 5.035e-02, 5.724e-02, 5.901e-02, -1.324e-01, -1.411e-01, -4.222e-02, -9.580e-02) * s1_2_2;
	r0 += V4(-2.231e-03, -2.725e-03, -3.160e-03, -7.026e-03);
	r0 = max(r0, V4(0.0));
	imageStore(out_image, opos + ivec2(0, 0), vec4(r0));
	r1 += V4(-3.464e-03, 2.146e-03, -1.252e-03, 1.361e-03);
	r1 = max(r1, V4(0.0));
	imageStore(out_image, opos + ivec2(1, 0), vec4(r1));
}

//!DESC CuNNy-faster-out-shuffle
//!HOOK LUMA
//!COMPUTE 16 16 8 8
//!BIND conv2
//!BIND LUMA
//!WIDTH LUMA.w 2 *
//!HEIGHT LUMA.h 2 *
//!COMPONENTS 1
//!WHEN OUTPUT.w LUMA.w / 1.3 > OUTPUT.h LUMA.h / 1.3 > *
#extension GL_EXT_shader_explicit_arithmetic_types_float16 : enable
#ifdef GL_EXT_shader_explicit_arithmetic_types_float16
#	define V4 f16vec4
#	define M4 f16mat4
#	define F float16_t
#else
#	define V4 vec4
#	define M4 mat4
#	define F float
#endif
#define l0(x, y) V4((conv2_mul * texelFetch(conv2_raw, clamp(pos + ivec2(x, y), ivec2(0), sz) * ivec2(2, 1) + ivec2(0, 0), 0)))
#define l1(x, y) V4((conv2_mul * texelFetch(conv2_raw, clamp(pos + ivec2(x, y), ivec2(0), sz) * ivec2(2, 1) + ivec2(1, 0), 0)))
shared V4 G[2][10][10];
void hook() {
	ivec2 xy = ivec2(gl_LocalInvocationID.xy);
	ivec2 pos = ivec2(gl_WorkGroupID.xy) * ivec2(8, 8) + xy;
	ivec2 opos = pos * ivec2(2, 2);
	ivec2 sz = ivec2(LUMA_size) - ivec2(1);
	for (int y = 0; y < 10; y += 8) {
		int ay = xy.y + y;
		if (ay >= 10) break;
		for (int x = 0; x < 10; x += 8) {
			int ax = xy.x + x;
			if (ax >= 10) break;
			G[0][ay][ax] = l0(x - 1, y - 1);
			G[1][ay][ax] = l1(x - 1, y - 1);
		}
	}
	barrier();
	V4 s0_0_0, s0_0_1, s0_0_2, s0_1_0, s0_1_1, s0_1_2, s0_2_0, s0_2_1, s0_2_2, s1_0_0, s1_0_1, s1_0_2, s1_1_0, s1_1_1, s1_1_2, s1_2_0, s1_2_1, s1_2_2;
	V4 r0;
	r0 = V4(0.0);
	s0_0_0 = G[0][xy.y+0][xy.x+0]; s0_0_1 = G[0][xy.y+0][xy.x+1];
	s0_0_2 = G[0][xy.y+0][xy.x+2]; s0_1_0 = G[0][xy.y+1][xy.x+0];
	s0_1_1 = G[0][xy.y+1][xy.x+1]; s0_1_2 = G[0][xy.y+1][xy.x+2];
	s0_2_0 = G[0][xy.y+2][xy.x+0]; s0_2_1 = G[0][xy.y+2][xy.x+1];
	s0_2_2 = G[0][xy.y+2][xy.x+2]; s1_0_0 = G[1][xy.y+0][xy.x+0];
	s1_0_1 = G[1][xy.y+0][xy.x+1]; s1_0_2 = G[1][xy.y+0][xy.x+2];
	s1_1_0 = G[1][xy.y+1][xy.x+0]; s1_1_1 = G[1][xy.y+1][xy.x+1];
	s1_1_2 = G[1][xy.y+1][xy.x+2]; s1_2_0 = G[1][xy.y+2][xy.x+0];
	s1_2_1 = G[1][xy.y+2][xy.x+1]; s1_2_2 = G[1][xy.y+2][xy.x+2];
	r0 += M4(-1.026e-02, 7.873e-03, -2.329e-03, -1.139e-04, 3.991e-02, 2.875e-02, 3.330e-02, -1.220e-03, -6.999e-04, -9.485e-04, -8.245e-04, 6.595e-04, -1.715e-02, 6.088e-03, 5.420e-03, 4.816e-03) * s0_0_0;
	r0 += M4(-1.281e-01, -2.560e-02, -5.451e-03, -7.723e-03, 2.824e-02, -2.088e-01, -8.020e-03, 3.430e-02, -3.887e-03, 1.310e-02, 9.606e-04, -2.238e-03, 1.995e-02, 3.701e-02, -6.776e-03, -1.607e-02) * s0_0_1;
	r0 += M4(-1.582e-02, 8.862e-02, 7.282e-03, -9.647e-03, 2.931e-04, 1.877e-03, -5.484e-04, 2.622e-03, 3.276e-03, -8.413e-03, -2.942e-04, 1.030e-03, -1.036e-02, 1.307e-02, -2.441e-04, -3.810e-03) * s0_0_2;
	r0 += M4(1.205e-02, 8.000e-03, 3.845e-02, -2.085e-04, 1.489e-01, -2.325e-02, 1.324e-01, 1.824e-02, -4.522e-02, 3.991e-02, 2.093e-02, -1.218e-02, -5.554e-02, 3.291e-02, -4.923e-02, 3.912e-03) * s0_1_0;
	r0 += M4(6.665e-02, 1.558e-01, -5.059e-01, 6.317e-02, -6.852e-02, 5.597e-02, -2.261e-02, -2.979e-01, -1.227e-01, -3.037e-01, -2.923e-02, 4.631e-02, 2.105e-01, -3.743e-01, 2.111e-01, -1.106e-02) * s0_1_1;
	r0 += M4(-8.593e-03, 1.038e-01, 6.061e-03, 1.143e-02, 1.215e-04, 1.778e-03, 6.454e-04, -2.094e-03, -2.375e-02, 6.592e-02, 5.990e-03, -3.528e-02, -3.262e-03, 3.185e-02, -9.806e-03, 2.326e-02) * s0_1_2;
	r0 += M4(-2.211e-03, 4.376e-04, 1.113e-02, 1.189e-03, -4.012e-03, -7.747e-04, 1.066e-02, -9.388e-03, -7.983e-03, 7.387e-04, 4.994e-02, 4.360e-03, -9.881e-03, 5.345e-03, -1.014e-02, 1.230e-02) * s0_2_0;
	r0 += M4(-1.379e-02, -1.947e-03, 5.921e-02, 3.649e-02, 1.752e-02, -8.298e-03, 2.581e-02, 7.477e-02, 1.121e-02, 8.786e-03, 1.353e-01, 1.333e-01, -3.382e-02, 2.633e-02, 4.211e-02, -1.047e-01) * s0_2_1;
	r0 += M4(-3.481e-03, -6.157e-04, 2.147e-02, 2.399e-02, -3.363e-04, -1.628e-03, -9.741e-05, 1.443e-03, 1.049e-03, -4.815e-03, -1.160e-03, 4.894e-02, -4.577e-03, 1.446e-02, 7.970e-04, 1.181e-02) * s0_2_2;
	r0 += M4(6.584e-03, 4.161e-03, 3.568e-03, -1.478e-04, 5.111e-03, -5.074e-03, -4.388e-03, 2.151e-04, 4.687e-04, -2.227e-04, -2.536e-04, -5.028e-04, 2.682e-02, -1.244e-02, -1.955e-03, 1.799e-03) * s1_0_0;
	r0 += M4(4.357e-02, 3.675e-02, -2.791e-03, 1.796e-03, 4.317e-02, 4.473e-03, -1.053e-02, -8.184e-03, 7.757e-03, -1.079e-04, 5.491e-06, -1.087e-03, 1.509e-01, 2.686e-01, 1.800e-02, -3.088e-03) * s1_0_1;
	r0 += M4(1.884e-02, -7.446e-02, -2.478e-03, -3.063e-04, 5.396e-03, 1.223e-01, 5.587e-03, -5.876e-03, -9.280e-07, 4.876e-03, 3.128e-04, 1.658e-03, 6.456e-04, -9.489e-02, -8.102e-03, 1.261e-02) * s1_0_2;
	r0 += M4(6.991e-02, -1.370e-02, 6.141e-02, -2.097e-03, -9.571e-03, -1.250e-02, -3.056e-02, -5.722e-04, -3.672e-03, -1.425e-02, 2.595e-03, 1.162e-03, 1.838e-02, -5.757e-03, -5.725e-02, 4.251e-03) * s1_1_0;
	r0 += M4(-3.389e-01, 1.091e-01, -6.801e-03, 2.529e-01, -2.075e-01, -1.694e-01, 3.311e-01, -5.944e-02, -2.666e-02, -8.716e-02, -1.472e-03, 1.749e-02, -1.915e-02, -1.257e-02, -1.229e-01, -1.440e-01) * s1_1_1;
	r0 += M4(1.507e-02, -7.857e-02, 9.424e-03, -5.386e-02, 3.328e-02, -1.145e-01, -5.317e-03, 2.666e-01, 1.535e-03, 1.649e-02, 5.760e-03, 1.908e-03, -4.111e-03, 8.057e-03, -3.803e-03, -4.898e-02) * s1_1_2;
	r0 += M4(4.520e-03, -3.180e-03, 1.719e-02, -5.471e-03, 5.021e-03, -5.578e-04, -1.788e-02, -5.996e-04, -4.450e-02, 1.921e-04, -8.374e-02, -1.145e-03, 1.932e-03, 3.212e-06, 4.686e-03, -3.038e-03) * s1_2_0;
	r0 += M4(2.550e-02, -6.252e-04, -4.211e-02, 1.676e-02, -2.556e-03, 6.405e-03, -5.286e-02, -4.407e-02, 3.351e-01, 8.784e-02, 4.748e-02, -2.864e-01, -4.327e-05, -4.600e-03, -1.516e-03, 6.086e-03) * s1_2_1;
	r0 += M4(-2.932e-03, -4.155e-03, -1.038e-02, -2.324e-02, 9.350e-04, 9.440e-03, -2.109e-02, -3.998e-02, -7.343e-03, 4.160e-02, -6.793e-03, 6.163e-03, -1.964e-03, 4.912e-03, 2.336e-04, -3.047e-03) * s1_2_2;
	r0 += V4(-3.321e-10, 3.367e-09, -1.422e-08, -1.217e-08);
	r0 = r0;
	vec2 opt = 0.5 * LUMA_pt;
	vec2 fpos = (vec2(opos) + vec2(0.5)) * opt;
	imageStore(out_image, opos + ivec2(0, 0), vec4(r0.x + LUMA_tex(fpos + vec2(0.0, 0.0) * opt).r, 0.0, 0.0, 1.0));
	imageStore(out_image, opos + ivec2(1, 0), vec4(r0.y + LUMA_tex(fpos + vec2(1.0, 0.0) * opt).r, 0.0, 0.0, 1.0));
	imageStore(out_image, opos + ivec2(0, 1), vec4(r0.z + LUMA_tex(fpos + vec2(0.0, 1.0) * opt).r, 0.0, 0.0, 1.0));
	imageStore(out_image, opos + ivec2(1, 1), vec4(r0.w + LUMA_tex(fpos + vec2(1.0, 1.0) * opt).r, 0.0, 0.0, 1.0));
}
