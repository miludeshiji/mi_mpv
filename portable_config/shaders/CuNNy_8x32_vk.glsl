// CuNNy 8x32 (dp4a)
// Copyright (c) 2024 funnyplanter

// This program is free software; you can redistribute it and/or
// modify it under the terms of the GNU Lesser General Public
// License as published by the Free Software Foundation; either
// version 3.0 of the License, or (at your option) any later version.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
// Lesser General Public License for more details.
//
// You should have received a copy of the GNU Lesser General Public
// License along with this program.  If not, see <https://www.gnu.org/licenses/>.
/* ------------------------------------------------------------------- */


//!DESC CuNNy-8x32-in
//!HOOK LUMA
//!COMPUTE 32 16 8 8
//!BIND LUMA
//!SAVE in
//!WIDTH LUMA.w 4 *
//!HEIGHT LUMA.h 2 *
//!COMPONENTS 4
//!WHEN OUTPUT.w LUMA.w / 1.3 > OUTPUT.h LUMA.h / 1.3 > *
#extension GL_EXT_shader_explicit_arithmetic_types_float16 : enable
#ifdef GL_EXT_shader_explicit_arithmetic_types_float16
#	define V4 f16vec4
#	define M4 f16mat4
#	define F float16_t
#else
#	define V4 vec4
#	define M4 mat4
#	define F float
#endif
#define l0(x, y) F((LUMA_mul * texelFetch(LUMA_raw, clamp(pos + ivec2(x, y), ivec2(0), sz) * ivec2(1, 1) + ivec2(0, 0), 0)).r)
shared F G[1][10][10];
void hook() {
	ivec2 xy = ivec2(gl_LocalInvocationID.xy);
	ivec2 pos = ivec2(gl_WorkGroupID.xy) * ivec2(8, 8) + xy;
	ivec2 opos = pos * ivec2(4, 2);
	ivec2 sz = ivec2(LUMA_size) - ivec2(1);
	for (int y = 0; y < 10; y += 8) {
		int ay = xy.y + y;
		if (ay >= 10) break;
		for (int x = 0; x < 10; x += 8) {
			int ax = xy.x + x;
			if (ax >= 10) break;
			G[0][ay][ax] = l0(x - 1, y - 1);
		}
	}
	barrier();
	F s0_0_0, s0_0_1, s0_0_2, s0_1_0, s0_1_1, s0_1_2, s0_2_0, s0_2_1, s0_2_2;
	V4 r0, r1, r2, r3, r4, r5, r6, r7;
	r0 = V4(0.0); r1 = V4(0.0); r2 = V4(0.0); r3 = V4(0.0); r4 = V4(0.0); r5 = V4(0.0); r6 = V4(0.0); r7 = V4(0.0);
	s0_0_0 = G[0][xy.y+0][xy.x+0]; s0_0_1 = G[0][xy.y+0][xy.x+1];
	s0_0_2 = G[0][xy.y+0][xy.x+2]; s0_1_0 = G[0][xy.y+1][xy.x+0];
	s0_1_1 = G[0][xy.y+1][xy.x+1]; s0_1_2 = G[0][xy.y+1][xy.x+2];
	s0_2_0 = G[0][xy.y+2][xy.x+0]; s0_2_1 = G[0][xy.y+2][xy.x+1];
	s0_2_2 = G[0][xy.y+2][xy.x+2];
	r0 += V4(4.809e-03, -1.434e-02, -2.804e-02, 7.634e-03) * s0_0_0;
	r1 += V4(-8.115e-02, -4.673e-02, 1.808e-02, -6.131e-03) * s0_0_0;
	r2 += V4(2.355e-02, -4.180e-02, -1.244e-03, 7.114e-03) * s0_0_0;
	r3 += V4(4.250e-02, 7.450e-03, -4.027e-02, -5.079e-03) * s0_0_0;
	r4 += V4(-5.816e-01, -1.718e-02, -6.090e-03, -2.124e-01) * s0_0_0;
	r5 += V4(3.314e-02, -3.291e-03, 4.528e-02, 2.487e-02) * s0_0_0;
	r6 += V4(-4.693e-03, 1.575e-03, 1.136e-02, -3.783e-02) * s0_0_0;
	r7 += V4(-8.691e-03, -3.333e-02, -6.958e-02, 1.052e-01) * s0_0_0;
	r0 += V4(1.220e-02, 1.415e-03, 2.475e-01, 3.272e-02) * s0_0_1;
	r1 += V4(1.130e-02, 1.639e-01, -2.027e-01, 2.034e-02) * s0_0_1;
	r2 += V4(-3.673e-01, -5.289e-02, -1.310e-02, -4.673e-03) * s0_0_1;
	r3 += V4(-7.944e-02, -8.504e-02, -6.426e-01, -3.873e-01) * s0_0_1;
	r4 += V4(2.104e-01, -6.953e-02, 3.334e-02, -2.065e-01) * s0_0_1;
	r5 += V4(-5.909e-02, 2.243e-03, -4.462e-02, -5.404e-02) * s0_0_1;
	r6 += V4(2.501e-02, 9.487e-02, -1.338e-02, 5.684e-01) * s0_0_1;
	r7 += V4(-3.006e-02, 2.891e-03, 3.774e-02, 4.156e-02) * s0_0_1;
	r0 += V4(3.104e-02, 1.795e-02, 3.043e-02, 7.430e-03) * s0_0_2;
	r1 += V4(6.549e-02, -1.318e-01, -2.319e-01, -1.593e-02) * s0_0_2;
	r2 += V4(1.037e-02, -3.705e-02, -3.148e-03, -1.441e-02) * s0_0_2;
	r3 += V4(-7.138e-05, 7.452e-02, -2.120e-03, 3.719e-01) * s0_0_2;
	r4 += V4(4.443e-02, -8.869e-02, -2.991e-02, -9.643e-02) * s0_0_2;
	r5 += V4(-5.631e-03, 2.489e-04, -1.890e-01, 5.467e-02) * s0_0_2;
	r6 += V4(-3.210e-02, -1.509e-02, 2.633e-03, -2.509e-02) * s0_0_2;
	r7 += V4(3.684e-02, -1.794e-02, 2.503e-02, 1.771e-02) * s0_0_2;
	r0 += V4(1.731e-02, -1.446e-02, -3.551e-02, -1.161e-02) * s0_1_0;
	r1 += V4(-2.274e-01, -3.079e-02, -1.374e-02, 1.196e-02) * s0_1_0;
	r2 += V4(-5.952e-02, -1.151e-02, -1.465e-02, -2.455e-02) * s0_1_0;
	r3 += V4(-3.911e-02, 2.480e-02, 4.459e-02, -1.119e-02) * s0_1_0;
	r4 += V4(3.380e-01, 5.078e-02, 1.777e-02, 5.898e-02) * s0_1_0;
	r5 += V4(6.254e-02, 4.444e-01, -4.628e-02, 2.352e-02) * s0_1_0;
	r6 += V4(4.276e-02, -4.497e-01, -3.926e-01, 7.615e-03) * s0_1_0;
	r7 += V4(1.543e-02, 2.407e-01, 3.460e-01, 1.743e-01) * s0_1_0;
	r0 += V4(7.160e-03, 3.623e-01, -5.994e-02, 5.367e-02) * s0_1_1;
	r1 += V4(-2.434e-01, -8.262e-01, -1.589e-01, -4.799e-01) * s0_1_1;
	r2 += V4(4.072e-01, 1.560e-02, 9.449e-02, 1.759e-01) * s0_1_1;
	r3 += V4(5.528e-02, 3.931e-01, 6.445e-01, 1.274e-01) * s0_1_1;
	r4 += V4(-1.782e-01, -1.174e-01, 3.293e-01, -1.489e-02) * s0_1_1;
	r5 += V4(-1.753e-01, -4.141e-01, 4.859e-01, -4.396e+00) * s0_1_1;
	r6 += V4(4.650e-01, 1.871e-02, 3.759e-01, -5.522e-01) * s0_1_1;
	r7 += V4(-3.993e-01, -3.896e-01, -3.077e-01, -5.605e-01) * s0_1_1;
	r0 += V4(2.504e-02, -4.103e-02, 1.170e-02, -1.275e+01) * s0_1_2;
	r1 += V4(4.760e-01, 3.748e-01, 5.883e-01, 4.824e-01) * s0_1_2;
	r2 += V4(9.363e-03, 2.173e-02, 1.416e-01, 3.994e-01) * s0_1_2;
	r3 += V4(-1.068e-01, -4.076e-01, 3.223e-03, -1.029e-01) * s0_1_2;
	r4 += V4(-1.997e-01, -9.954e-02, -3.470e-01, -1.852e-02) * s0_1_2;
	r5 += V4(-2.084e-01, -1.759e-02, -2.522e-01, -3.357e-02) * s0_1_2;
	r6 += V4(1.065e-01, -5.579e-02, 1.463e-02, 3.370e-02) * s0_1_2;
	r7 += V4(3.789e-01, 1.304e-01, -3.551e-02, -1.603e-04) * s0_1_2;
	r0 += V4(5.582e-02, 4.249e-02, 6.519e-02, 9.931e-03) * s0_2_0;
	r1 += V4(-3.896e-02, 2.564e-03, -7.933e-03, 1.301e-03) * s0_2_0;
	r2 += V4(2.589e-02, -2.964e-02, -3.880e-02, 1.834e-02) * s0_2_0;
	r3 += V4(-1.653e-02, -2.769e-02, -6.167e-03, 1.501e-03) * s0_2_0;
	r4 += V4(-5.942e-02, -3.541e-02, -9.319e-03, 1.540e-01) * s0_2_0;
	r5 += V4(2.326e-01, 2.568e-01, -1.935e-02, 4.429e-02) * s0_2_0;
	r6 += V4(-5.456e-02, -1.083e-02, -2.861e-01, -1.863e-03) * s0_2_0;
	r7 += V4(-2.002e-02, -1.615e-01, -8.129e-02, -3.476e-02) * s0_2_0;
	r0 += V4(-1.500e-01, -5.963e-02, -1.969e-01, 2.212e-02) * s0_2_1;
	r1 += V4(2.361e-03, 8.767e-02, 1.957e-02, 1.960e-03) * s0_2_1;
	r2 += V4(-4.224e-02, -8.291e-03, 1.876e-01, -1.687e-01) * s0_2_1;
	r3 += V4(-3.035e-02, -1.803e-02, 3.700e-03, -3.981e-03) * s0_2_1;
	r4 += V4(-1.252e-02, 1.682e-01, -3.643e-01, 2.257e-01) * s0_2_1;
	r5 += V4(9.349e-02, -2.878e-01, 1.532e-03, -3.953e-02) * s0_2_1;
	r6 += V4(1.768e-01, 1.616e-01, 3.131e-01, 1.067e-02) * s0_2_1;
	r7 += V4(4.390e-01, 3.520e-01, 1.121e-01, -3.462e-04) * s0_2_1;
	r0 += V4(-1.061e+00, -2.987e-01, -4.282e-02, -9.018e+00) * s0_2_2;
	r1 += V4(3.688e-02, -7.247e-02, -1.063e-02, -1.484e-02) * s0_2_2;
	r2 += V4(-5.514e-03, -5.397e-02, -3.417e-01, -3.879e-01) * s0_2_2;
	r3 += V4(-1.043e-02, 4.410e-02, -4.432e-03, 1.983e-02) * s0_2_2;
	r4 += V4(9.981e-02, 1.437e-01, 3.760e-01, 1.122e-01) * s0_2_2;
	r5 += V4(2.616e-02, 1.855e-02, 1.992e-02, 5.608e-02) * s0_2_2;
	r6 += V4(-8.220e-02, -6.784e-03, -2.174e-02, -1.613e-03) * s0_2_2;
	r7 += V4(-4.112e-01, -2.202e-01, -1.040e-02, 1.120e-02) * s0_2_2;
	r0 += V4(2.920e-02, -3.564e-03, -1.737e-02, 2.383e-02);
	r0 = clamp(r0, V4(0.0), V4(1.0));
	imageStore(out_image, opos + ivec2(0, 0), vec4(r0));
	r1 += V4(3.584e-03, 2.509e-03, 3.909e-03, 1.623e-02);
	r1 = clamp(r1, V4(0.0), V4(1.0));
	imageStore(out_image, opos + ivec2(1, 0), vec4(r1));
	r2 += V4(2.648e-02, -4.189e-02, 1.467e-02, 7.213e-03);
	r2 = clamp(r2, V4(0.0), V4(1.0));
	imageStore(out_image, opos + ivec2(0, 1), vec4(r2));
	r3 += V4(6.763e-02, -3.560e-02, 6.911e-03, -2.979e-02);
	r3 = clamp(r3, V4(0.0), V4(1.0));
	imageStore(out_image, opos + ivec2(1, 1), vec4(r3));
	r4 += V4(1.122e-03, -1.777e-02, 4.183e-03, 4.819e-03);
	r4 = clamp(r4, V4(0.0), V4(1.0));
	imageStore(out_image, opos + ivec2(2, 0), vec4(r4));
	r5 += V4(4.199e-03, 4.840e-03, 1.088e-02, 5.346e-02);
	r5 = clamp(r5, V4(0.0), V4(1.0));
	imageStore(out_image, opos + ivec2(3, 0), vec4(r5));
	r6 += V4(-1.164e-02, -1.752e-03, 4.619e-03, 1.420e-02);
	r6 = clamp(r6, V4(0.0), V4(1.0));
	imageStore(out_image, opos + ivec2(2, 1), vec4(r6));
	r7 += V4(7.219e-03, -1.205e-02, 1.106e-02, -1.073e-02);
	r7 = clamp(r7, V4(0.0), V4(1.0));
	imageStore(out_image, opos + ivec2(3, 1), vec4(r7));
}

//!DESC CuNNy-8x32-conv1
//!HOOK LUMA
//!COMPUTE 32 16 8 8
//!BIND in
//!BIND LUMA
//!SAVE conv1
//!WIDTH LUMA.w 4 *
//!HEIGHT LUMA.h 2 *
//!COMPONENTS 4
//!WHEN OUTPUT.w LUMA.w / 1.3 > OUTPUT.h LUMA.h / 1.3 > *
#extension GL_EXT_spirv_intrinsics : require
spirv_instruction (extensions = ["SPV_KHR_integer_dot_product"], capabilities = [6019, 6018], id = 4450)
int dp4(int a, int b, spirv_literal int fmt);
#define D(r, s, a, b, c, d) r + ivec4(dp4(s, a, 0), dp4(s, b, 0), dp4(s, c, 0), dp4(s, d, 0))
shared int G[8][10][10];
void hook() {
	ivec2 xy = ivec2(gl_LocalInvocationID.xy);
	ivec2 pos = ivec2(gl_WorkGroupID.xy) * ivec2(8, 8) + xy;
	ivec2 opos = pos * ivec2(4, 2);
	ivec2 sz = ivec2(LUMA_size) - ivec2(1);
	for (int y = 0; y < 10; y += 8) {
		int ay = xy.y + y;
		if (ay >= 10) break;
		for (int x = 0; x < 10; x += 8) {
			int ax = xy.x + x;
			if (ax >= 10) break;
			vec2 p;
			vec4 r, g, b, a;
			p = vec2(clamp(pos + ivec2(x - 1, y - 1), ivec2(0), sz) * ivec2(4, 2) + ivec2(1, 1)) * in_pt;
			r = in_gather(p, 0);
			g = in_gather(p, 1);
			b = in_gather(p, 2);
			a = in_gather(p, 3);
			vec4 v0 = vec4(r.w, g.w, b.w, a.w) * 1.0000000e+00;
			vec4 v1 = vec4(r.z, g.z, b.z, a.z) * 1.0000000e+00;
			vec4 v2 = vec4(r.x, g.x, b.x, a.x) * 1.0000000e+00;
			vec4 v3 = vec4(r.y, g.y, b.y, a.y) * 1.0000000e+00;
			p = vec2(clamp(pos + ivec2(x - 1, y - 1), ivec2(0), sz) * ivec2(4, 2) + ivec2(3, 1)) * in_pt;
			r = in_gather(p, 0);
			g = in_gather(p, 1);
			b = in_gather(p, 2);
			a = in_gather(p, 3);
			vec4 v4 = vec4(r.w, g.w, b.w, a.w) * 1.0000000e+00;
			vec4 v5 = vec4(r.z, g.z, b.z, a.z) * 1.0000000e+00;
			vec4 v6 = vec4(r.x, g.x, b.x, a.x) * 1.0000000e+00;
			vec4 v7 = vec4(r.y, g.y, b.y, a.y) * 1.0000000e+00;
			G[0][ay][ax] = int(packSnorm4x8(v0));
			G[1][ay][ax] = int(packSnorm4x8(v1));
			G[2][ay][ax] = int(packSnorm4x8(v2));
			G[3][ay][ax] = int(packSnorm4x8(v3));
			G[4][ay][ax] = int(packSnorm4x8(v4));
			G[5][ay][ax] = int(packSnorm4x8(v5));
			G[6][ay][ax] = int(packSnorm4x8(v6));
			G[7][ay][ax] = int(packSnorm4x8(v7));
		}
	}
	barrier();
	int s0_0_0, s0_0_1, s0_0_2, s0_1_0, s0_1_1, s0_1_2, s0_2_0, s0_2_1, s0_2_2, s1_0_0, s1_0_1, s1_0_2, s1_1_0, s1_1_1, s1_1_2, s1_2_0, s1_2_1, s1_2_2;
	ivec4 r0, r1, r2, r3, r4, r5, r6, r7;
	vec4 f0, f1, f2, f3, f4, f5, f6, f7;
	r0 = ivec4(0); r1 = ivec4(0); r2 = ivec4(0); r3 = ivec4(0); r4 = ivec4(0); r5 = ivec4(0); r6 = ivec4(0); r7 = ivec4(0);
	s0_0_0 = G[0][xy.y+0][xy.x+0]; s0_0_1 = G[0][xy.y+0][xy.x+1];
	s0_0_2 = G[0][xy.y+0][xy.x+2]; s0_1_0 = G[0][xy.y+1][xy.x+0];
	s0_1_1 = G[0][xy.y+1][xy.x+1]; s0_1_2 = G[0][xy.y+1][xy.x+2];
	s0_2_0 = G[0][xy.y+2][xy.x+0]; s0_2_1 = G[0][xy.y+2][xy.x+1];
	s0_2_2 = G[0][xy.y+2][xy.x+2]; s1_0_0 = G[1][xy.y+0][xy.x+0];
	s1_0_1 = G[1][xy.y+0][xy.x+1]; s1_0_2 = G[1][xy.y+0][xy.x+2];
	s1_1_0 = G[1][xy.y+1][xy.x+0]; s1_1_1 = G[1][xy.y+1][xy.x+1];
	s1_1_2 = G[1][xy.y+1][xy.x+2]; s1_2_0 = G[1][xy.y+2][xy.x+0];
	s1_2_1 = G[1][xy.y+2][xy.x+1]; s1_2_2 = G[1][xy.y+2][xy.x+2];
	r0 = D(r0, s0_0_0, 0x160C183C, 0xA7F5F7D0, 0x260932EB, 0xFBDE50C7);
	r1 = D(r1, s0_0_0, 0x7F19FF4A, 0xE8FE07FE, 0x77F3E317, 0xEF15580A);
	r2 = D(r2, s0_0_0, 0x81EB32FA, 0x8115ED07, 0xEB071905, 0xF60E9F10);
	r3 = D(r3, s0_0_0, 0x22F7E6FE, 0x360DDA0C, 0x810C050B, 0xF9FD0402);
	r4 = D(r4, s0_0_0, 0x81FD089D, 0x0ACC385C, 0x811F18AD, 0xF4EA81C4);
	r5 = D(r5, s0_0_0, 0x60F914DF, 0x8110321E, 0x1225F69B, 0x8D0CBFDA);
	r6 = D(r6, s0_0_0, 0xB6133029, 0xB71A2130, 0x97090D26, 0xE7092107);
	r7 = D(r7, s0_0_0, 0xC6DD0DC0, 0x39FF030E, 0xECE1D7CA, 0x35EAF611);
	r0 = D(r0, s0_0_1, 0x4304367A, 0xF3F8F130, 0xF1000817, 0xD0073E3B);
	r1 = D(r1, s0_0_1, 0x15FB461A, 0xC822FBEC, 0x4028BD10, 0xB3011225);
	r2 = D(r2, s0_0_1, 0xF40615EF, 0x81081AF5, 0x5D23D410, 0x38F4DAFC);
	r3 = D(r3, s0_0_1, 0x1F110E7A, 0x20180A1A, 0x28EB1EF6, 0x01FEFD03);
	r4 = D(r4, s0_0_1, 0xFD04E1BC, 0xF11B0D10, 0xC4EAFB4F, 0x1781D8D9);
	r5 = D(r5, s0_0_1, 0xE4FEEF3B, 0xEA0518AB, 0x061F157F, 0x1D1CBAF2);
	r6 = D(r6, s0_0_1, 0x86E4BB1D, 0xDD030ECA, 0x0F090AE2, 0x01B21AEE);
	r7 = D(r7, s0_0_1, 0xFFD3FE1E, 0x10FDFEF8, 0x7F01E007, 0x0BF50D1F);
	r0 = D(r0, s0_0_2, 0x120A0018, 0xFBFE0010, 0xFDDD0230, 0x26EE28EA);
	r1 = D(r1, s0_0_2, 0x3885C0E6, 0x01F8F118, 0xED321084, 0xD954FB08);
	r2 = D(r2, s0_0_2, 0x0C01F9F3, 0x03F1E708, 0x003F010E, 0xD804F317);
	r3 = D(r3, s0_0_2, 0xF2EB05D8, 0xEA000E1C, 0xF709000E, 0x00010002);
	r4 = D(r4, s0_0_2, 0xF6E40302, 0x9AE81723, 0x0CFCE82D, 0xEFFBF2FC);
	r5 = D(r5, s0_0_2, 0x0419EFF1, 0xBEEE24DD, 0x2FCCF4FF, 0xF300FD11);
	r6 = D(r6, s0_0_2, 0x04F7F7DA, 0xFB03F40F, 0xEFFE0803, 0xD32E3BEB);
	r7 = D(r7, s0_0_2, 0x1037BBCF, 0xF0080D08, 0x1008F0C9, 0x400B21A0);
	r0 = D(r0, s0_1_0, 0x13FA031C, 0xF90BE2FF, 0xBAFCDEE7, 0x53FBFF7F);
	r1 = D(r1, s0_1_0, 0xBB0224F2, 0xB5FD0A35, 0x3EF112D4, 0x11CFEC3D);
	r2 = D(r2, s0_1_0, 0x811F4F0F, 0x5CF806BD, 0xDBF5D433, 0x3B127F71);
	r3 = D(r3, s0_1_0, 0x69E61151, 0xD201010A, 0x2D00EA00, 0x2DFC0B05);
	r4 = D(r4, s0_1_0, 0x81012CCD, 0x0005084C, 0x8116F016, 0xF201EA87);
	r5 = D(r5, s0_1_0, 0xB718E3A1, 0x8100FAD1, 0xDD590FCF, 0x9C20B0BA);
	r6 = D(r6, s0_1_0, 0x301F111F, 0xB9FA1A0A, 0xC21694FE, 0x721316E3);
	r7 = D(r7, s0_1_0, 0x3901FBD2, 0x070706FF, 0x7B2A13EA, 0x0700EF07);
	r0 = D(r0, s0_1_1, 0xD60A0716, 0x0B0304FD, 0xD65AB602, 0xC0F9277F);
	r1 = D(r1, s0_1_1, 0x3B181523, 0x81E6FCE3, 0x20EFDE59, 0x33813E1F);
	r2 = D(r2, s0_1_1, 0x061F02FD, 0x3ACEF0B7, 0x04DEE30D, 0x62F7FA23);
	r3 = D(r3, s0_1_1, 0x40F6D529, 0xF006C619, 0xE6ECF0FC, 0xF10CEDE3);
	r4 = D(r4, s0_1_1, 0x27DBC41A, 0x2CF32D12, 0xB8D6B2F7, 0x3B0B39B3);
	r5 = D(r5, s0_1_1, 0x1AE3B11B, 0x43C5F4D7, 0xDDF1DF23, 0x326C00F8);
	r6 = D(r6, s0_1_1, 0x81E0D607, 0x83E2BBDF, 0x1DD31E08, 0x1222F70F);
	r7 = D(r7, s0_1_1, 0xE2DED695, 0x10F516FE, 0x34E6DA29, 0xF1F6D914);
	r0 = D(r0, s0_1_2, 0xD9ECFE00, 0x04110103, 0xD8FD0FEB, 0x12EDCCF6);
	r1 = D(r1, s0_1_2, 0xCC08F1B6, 0xD40221F1, 0x8AF6DFDC, 0x41200117);
	r2 = D(r2, s0_1_2, 0x12F8F50D, 0xF4DAF80E, 0x230BF9E0, 0xE6E21718);
	r3 = D(r3, s0_1_2, 0x06F5EDF6, 0xF102F317, 0xFB09F901, 0xFB03FF05);
	r4 = D(r4, s0_1_2, 0xFCF53AEA, 0x5B5A1822, 0xF10A12F4, 0xE5FA0501);
	r5 = D(r5, s0_1_2, 0xDB1909FF, 0xF60DF334, 0x02010FF6, 0xCC4309F7);
	r6 = D(r6, s0_1_2, 0x04F2F30A, 0x33E3E8D9, 0xF30EF600, 0x1D6BE314);
	r7 = D(r7, s0_1_2, 0xEF2CFA42, 0xED0C07FE, 0x1F42B009, 0x131DDBD0);
	r0 = D(r0, s0_2_0, 0x0904FC1C, 0xF0F302F7, 0x8304F3E7, 0x21F51781);
	r1 = D(r1, s0_2_0, 0x81EFFC08, 0x18F9FAF6, 0x1006B8A0, 0xECAD3CB3);
	r2 = D(r2, s0_2_0, 0x3020E11E, 0x0321D704, 0xE114182A, 0xEEE813C0);
	r3 = D(r3, s0_2_0, 0x06D9EBD0, 0x3C0016D3, 0x0F000602, 0x01FC0EF8);
	r4 = D(r4, s0_2_0, 0x810A0BF6, 0x1C1E16F6, 0x74F3FCCC, 0xDF0AFFE5);
	r5 = D(r5, s0_2_0, 0x792305FF, 0x3EEB2159, 0x810330F3, 0xF712F2FA);
	r6 = D(r6, s0_2_0, 0x2322FDDD, 0x561011EE, 0xD3F914F1, 0x07CDD814);
	r7 = D(r7, s0_2_0, 0x51C90616, 0x01FCFAFD, 0x092507FC, 0xD3DE24F8);
	r0 = D(r0, s0_2_1, 0x02EE0AEF, 0x15FCFD01, 0x16021E21, 0xD5F7FA35);
	r1 = D(r1, s0_2_1, 0x3422E3EF, 0x960FF6ED, 0x7622EA03, 0x090C1B05);
	r2 = D(r2, s0_2_1, 0x10EF01E7, 0xF6F6D9D7, 0xE30AEF00, 0xE6BDDEE1);
	r3 = D(r3, s0_2_1, 0xEEFA29E0, 0x0416FC01, 0x05FF02FA, 0x0808F70A);
	r4 = D(r4, s0_2_1, 0xEE08DE18, 0xB234DD11, 0xB910EF00, 0xF20CE5E1);
	r5 = D(r5, s0_2_1, 0xD2E82BF4, 0xEEE63E07, 0x07160CF0, 0x061DF50D);
	r6 = D(r6, s0_2_1, 0xF8EAE4E8, 0xE7C9210F, 0xFCFD0BFC, 0x93AE52D5);
	r7 = D(r7, s0_2_1, 0x0BE239F3, 0x05FDFBFC, 0x1ACB35E3, 0xEC0AF90D);
	r0 = D(r0, s0_2_2, 0x1E08F904, 0xEEEC0E03, 0x1AE3FEF9, 0x35FAB781);
	r1 = D(r1, s0_2_2, 0xD6FD3508, 0x1BE70007, 0x00E21B1D, 0xDDE11BEC);
	r2 = D(r2, s0_2_2, 0xFEF7EE09, 0x190720EF, 0x481C0E05, 0xF11902FA);
	r3 = D(r3, s0_2_2, 0x11EFDAF7, 0xDDFB09F3, 0x05FE0205, 0xFBFC0701);
	r4 = D(r4, s0_2_2, 0x0FE408E2, 0xC6F1C2E9, 0x0FE405FE, 0xE31AFD01);
	r5 = D(r5, s0_2_2, 0xF5191030, 0xF906D219, 0x24D1FDFF, 0xF4130405);
	r6 = D(r6, s0_2_2, 0x0A12EA1D, 0xF60C070E, 0xF9F80801, 0xF2FD14FF);
	r7 = D(r7, s0_2_2, 0xE1193115, 0xF0F90100, 0x8CD5F724, 0xD3DC22D6);
	r0 = D(r0, s1_0_0, 0xFE03FD00, 0x0DF4F60D, 0xF404F501, 0x11DEE5FA);
	r1 = D(r1, s1_0_0, 0xE1E9EEF5, 0xF9110606, 0x1AE33CAE, 0xE8F70B15);
	r2 = D(r2, s1_0_0, 0x010024F8, 0x1301DDFA, 0xE90B20EC, 0xEBEE2610);
	r3 = D(r3, s1_0_0, 0xF1E228F6, 0xECF3FBFB, 0x1604F404, 0x04FE0400);
	r4 = D(r4, s1_0_0, 0xF9FF0F0F, 0x0B12F506, 0x25F4E501, 0x0EE9E419);
	r5 = D(r5, s1_0_0, 0xEB00FB0A, 0x1EFDC1FE, 0x0AE126E1, 0x0004041A);
	r6 = D(r6, s1_0_0, 0xF9FDFCFB, 0x10FAF806, 0x0302FEFE, 0xF20E1303);
	r7 = D(r7, s1_0_0, 0x0DF9F338, 0xF8FFFF02, 0x1FE115EF, 0xF9FDDDF2);
	r0 = D(r0, s1_0_1, 0xF4FD09FA, 0x0708FE06, 0x1A14E706, 0xFA0E17F9);
	r1 = D(r1, s1_0_1, 0x1423010C, 0x18F511DB, 0x13E9A0BF, 0x0E11E02C);
	r2 = D(r2, s1_0_1, 0xFCFB05F5, 0xEF01E302, 0xEED8DCC1, 0xECF93010);
	r3 = D(r3, s1_0_1, 0x0906FAE1, 0x210113F6, 0xFAF309FD, 0x0802FF02);
	r4 = D(r4, s1_0_1, 0x0DE3F01A, 0xEB2335F3, 0x1FF31C09, 0xFC1309F9);
	r5 = D(r5, s1_0_1, 0xF2F8CF15, 0x1D04DA24, 0x2AF8061A, 0xF6F3F300);
	r6 = D(r6, s1_0_1, 0xFEF2EBF8, 0x130A250C, 0xFD0107F2, 0xCF1DB300);
	r7 = D(r7, s1_0_1, 0x1A18CAED, 0xF1FEFCFD, 0xEB9CE0DE, 0x0F121306);
	r0 = D(r0, s1_0_2, 0xFEF9DBFB, 0x0302F2FD, 0x0811F607, 0xDFEA0AF9);
	r1 = D(r1, s1_0_2, 0xBD2646B6, 0xF4F2D8EB, 0xF8F1D0DF, 0x06EBC2EA);
	r2 = D(r2, s1_0_2, 0xF6FB0403, 0x0E11FAF9, 0x14FDE8E9, 0x1603FDFE);
	r3 = D(r3, s1_0_2, 0xEC042A02, 0x030DFA0D, 0xFEFD07FE, 0x0103FD02);
	r4 = D(r4, s1_0_2, 0x0400EE02, 0x051E02F1, 0xFF0A1303, 0x030625E8);
	r5 = D(r5, s1_0_2, 0x0A0AF5F6, 0xEEF81EDD, 0x11EBB9FF, 0xFD06F10E);
	r6 = D(r6, s1_0_2, 0x2403FEF9, 0xE3FEC000, 0xFA020100, 0x08161E0B);
	r7 = D(r7, s1_0_2, 0x0C08F3F1, 0x0005FA04, 0xFE07180A, 0x07F913F8);
	r0 = D(r0, s1_1_0, 0x1009F8F2, 0x0D10E600, 0x190BEBFD, 0x16172412);
	r1 = D(r1, s1_1_0, 0x0CED1215, 0x12372CEA, 0xF9F0DC43, 0xE11FF9F6);
	r2 = D(r2, s1_1_0, 0x31160A22, 0xFA150DFB, 0x1225F905, 0xD3E3FBFF);
	r3 = D(r3, s1_1_0, 0xE112E31B, 0xFBB9B8F2, 0xFED407FE, 0xF00C1100);
	r4 = D(r4, s1_1_0, 0xFF0721EF, 0xEB2ACEEB, 0x330E0AE3, 0x100FE207);
	r5 = D(r5, s1_1_0, 0xE71D2B05, 0x0EF327E0, 0xB0B17F24, 0xF3CE16F8);
	r6 = D(r6, s1_1_0, 0xEE362405, 0xEB18F5EE, 0x462BEB2D, 0xF2F600F8);
	r7 = D(r7, s1_1_0, 0xB51E0ECF, 0xEDFAF40B, 0x0F1ADEF1, 0xE00A1A06);
	r0 = D(r0, s1_1_1, 0x15131852, 0x070AFC0E, 0xE9DD15E7, 0x12021CF8);
	r1 = D(r1, s1_1_1, 0x1E502A25, 0xD0C64B87, 0xF1DA8E42, 0xEEF3810D);
	r2 = D(r2, s1_1_1, 0xF5F1010F, 0x033005FB, 0x1BE2D4F4, 0xEED716E3);
	r3 = D(r3, s1_1_1, 0x35DD14E6, 0xFADC2FFF, 0x0FF1F6FD, 0x0E0400FF);
	r4 = D(r4, s1_1_1, 0xA6F88109, 0xBE02C6E9, 0x89007FFD, 0xEA0F9BF6);
	r5 = D(r5, s1_1_1, 0xEEC019D7, 0xE2F8D8D1, 0xEFD5E3ED, 0xFCC3D7F5);
	r6 = D(r6, s1_1_1, 0xF20CB513, 0xE9E225C5, 0xE8DA30EB, 0x1042A901);
	r7 = D(r7, s1_1_1, 0xE804FEC1, 0x13FFEEF6, 0x132FFF20, 0x333826FB);
	r0 = D(r0, s1_1_2, 0x0AF3FCEE, 0xF1F50208, 0x14FD0AF4, 0xECEB7FE7);
	r1 = D(r1, s1_1_2, 0xE1E1E5CF, 0xF60B0DCB, 0x36F0EC15, 0x24FDEFFA);
	r2 = D(r2, s1_1_2, 0x0CFDF7F9, 0x0EF819DE, 0x07FFE32F, 0x0F0F30FF);
	r3 = D(r3, s1_1_2, 0x3B031604, 0x10FCD0FD, 0xF7040305, 0x07F8FCF8);
	r4 = D(r4, s1_1_2, 0x08264800, 0x06E8E642, 0xE3FFF8D8, 0x39FF00CF);
	r5 = D(r5, s1_1_2, 0x040B2205, 0xF8F2AA11, 0x07ED0208, 0x0419E0F9);
	r6 = D(r6, s1_1_2, 0x0515F8F6, 0xF1FCEB10, 0x0503E706, 0x01F0F5E4);
	r7 = D(r7, s1_1_2, 0x16E906E5, 0xF702F508, 0xFE110FEB, 0x100234DA);
	r0 = D(r0, s1_2_0, 0xF90C0E00, 0x03020503, 0xFE0315FA, 0x1BE612F7);
	r1 = D(r1, s1_2_0, 0x00D6F11B, 0x0118F2F8, 0xF9D855AD, 0xDB77D709);
	r2 = D(r2, s1_2_0, 0xFD150AF8, 0x0CDBDDFE, 0xEDEB2F2C, 0x1912E6FB);
	r3 = D(r3, s1_2_0, 0x0902FCF4, 0xED060E00, 0xEE10FF02, 0xC2D2AAE4);
	r4 = D(r4, s1_2_0, 0xFDF7DB09, 0x29FEE2F0, 0x10C708F9, 0x050420F6);
	r5 = D(r5, s1_2_0, 0x2481F402, 0x14F0C716, 0xCC2315E4, 0x14CCF718);
	r6 = D(r6, s1_2_0, 0xFAEAE0FD, 0x0FD41D1E, 0x08030611, 0xFC2D1F16);
	r7 = D(r7, s1_2_0, 0xF2317500, 0x0506FC01, 0xFAB5A9F5, 0xEF0902F0);
	r0 = D(r0, s1_2_1, 0x0004F304, 0xFE0BFB08, 0x070D1704, 0x164409F6);
	r1 = D(r1, s1_2_1, 0xFFD003DE, 0x2E0BF224, 0xFA0B4405, 0xDF3138D7);
	r2 = D(r2, s1_2_1, 0xF2F2F900, 0xEAD2D3FD, 0xE4EF42FF, 0xEEDC1E07);
	r3 = D(r3, s1_2_1, 0x08E73AF8, 0x08FCF31A, 0x02070108, 0x0F06F711);
	r4 = D(r4, s1_2_1, 0x06DDACED, 0x1E3BDFFB, 0xFECC16FB, 0x012209FF);
	r5 = D(r5, s1_2_1, 0x1F81C403, 0x101EB22B, 0x02EF1411, 0x04DD1611);
	r6 = D(r6, s1_2_1, 0xE18105EA, 0x1AD00516, 0xF801F604, 0xF6D1D503);
	r7 = D(r7, s1_2_1, 0xF4ECFC2A, 0xF50BF5F3, 0xE62603F8, 0xF40FE601);
	r0 = D(r0, s1_2_2, 0xF8F8F708, 0x011303FD, 0x02FDF7F8, 0x06E53FE6);
	r1 = D(r1, s1_2_2, 0xF7EEF331, 0xF315F2F3, 0xF10D7FD2, 0x0BF5E11E);
	r2 = D(r2, s1_2_2, 0x0CF6F700, 0x1303D212, 0xF0000B00, 0xF00F37E8);
	r3 = D(r3, s1_2_2, 0x06020BF5, 0xF113E7F7, 0x010801FD, 0xFC050900);
	r4 = D(r4, s1_2_2, 0xF21412CB, 0xF21AE9BF, 0xEC1DE0E1, 0xE12010F2);
	r5 = D(r5, s1_2_2, 0x00F8D103, 0xC7EF0F23, 0x0101E525, 0xFDF1D51D);
	r6 = D(r6, s1_2_2, 0x0329FDDD, 0xF2020A13, 0xFA13F904, 0x2DF8C507);
	r7 = D(r7, s1_2_2, 0x2ABD0929, 0x0103F60B, 0xF453E6C7, 0x030A13FE);
	s0_0_0 = G[2][xy.y+0][xy.x+0]; s0_0_1 = G[2][xy.y+0][xy.x+1];
	s0_0_2 = G[2][xy.y+0][xy.x+2]; s0_1_0 = G[2][xy.y+1][xy.x+0];
	s0_1_1 = G[2][xy.y+1][xy.x+1]; s0_1_2 = G[2][xy.y+1][xy.x+2];
	s0_2_0 = G[2][xy.y+2][xy.x+0]; s0_2_1 = G[2][xy.y+2][xy.x+1];
	s0_2_2 = G[2][xy.y+2][xy.x+2]; s1_0_0 = G[3][xy.y+0][xy.x+0];
	s1_0_1 = G[3][xy.y+0][xy.x+1]; s1_0_2 = G[3][xy.y+0][xy.x+2];
	s1_1_0 = G[3][xy.y+1][xy.x+0]; s1_1_1 = G[3][xy.y+1][xy.x+1];
	s1_1_2 = G[3][xy.y+1][xy.x+2]; s1_2_0 = G[3][xy.y+2][xy.x+0];
	s1_2_1 = G[3][xy.y+2][xy.x+1]; s1_2_2 = G[3][xy.y+2][xy.x+2];
	r0 = D(r0, s0_0_0, 0xEBE70805, 0xF8FE08FC, 0xF90AFE04, 0xF8C408FE);
	r1 = D(r1, s0_0_0, 0x05DF150D, 0xDE1412F8, 0x0A0C0E15, 0xF5F10D31);
	r2 = D(r2, s0_0_0, 0xD4EAF6F0, 0xE4F501F9, 0x170EFF07, 0x29DC0802);
	r3 = D(r3, s0_0_0, 0xD5EEFFDD, 0x1B1F0E10, 0x3D12130D, 0x07050300);
	r4 = D(r4, s0_0_0, 0xD1FA08F8, 0x37E5000E, 0xDEE706F8, 0xBC2C06F0);
	r5 = D(r5, s0_0_0, 0xE81D06FB, 0x0E02041B, 0x01090A25, 0xC3C901F1);
	r6 = D(r6, s0_0_0, 0xE70EFBF7, 0xF11400FC, 0x03ECF3FF, 0x0B16FF23);
	r7 = D(r7, s0_0_0, 0xFCFEFFF4, 0x0D0F05FA, 0x242AFD1F, 0x0A0D0EEA);
	r0 = D(r0, s0_0_1, 0xE102EFFC, 0x06F5F40B, 0x0FF7F004, 0xDCEAF335);
	r1 = D(r1, s0_0_1, 0xCC0A0CFA, 0xDFEE08FE, 0xECDD00D6, 0xBAF105D4);
	r2 = D(r2, s0_0_1, 0x15ECFFEA, 0xFCE3010F, 0x1919FEFF, 0x10E208F3);
	r3 = D(r3, s0_0_1, 0x2503FE12, 0x0805011C, 0x280B0312, 0x05F9FAFB);
	r4 = D(r4, s0_0_1, 0xF91705F9, 0xF90102D5, 0x0F0BFFFD, 0xF90400E9);
	r5 = D(r5, s0_0_1, 0x280DF9F8, 0x0201F5F8, 0xDCF1FDFB, 0x1106F8F9);
	r6 = D(r6, s0_0_1, 0x17000501, 0x080C0BE5, 0x071006FF, 0x81E2FD09);
	r7 = D(r7, s0_0_1, 0x05E600E7, 0xFFF9FF05, 0xF595F7D9, 0xF1EFFD24);
	r0 = D(r0, s0_0_2, 0x0D050B01, 0x030E0C07, 0x03F50802, 0xF20E0DDB);
	r1 = D(r1, s0_0_2, 0xF82AFF05, 0x1EE7FCFF, 0x0709FDF9, 0xC111FFF7);
	r2 = D(r2, s0_0_2, 0x080AF509, 0x0219FDF8, 0x07F6FB0D, 0x0FEEF8F9);
	r3 = D(r3, s0_0_2, 0x04EB0925, 0xFDEF0CFA, 0xFBFA0FFA, 0x050106FD);
	r4 = D(r4, s0_0_2, 0x27F80603, 0xA0CB06DA, 0x15E20310, 0xE0260AFE);
	r5 = D(r5, s0_0_2, 0xF20AFEE2, 0x0412FA2A, 0x1708060A, 0xE5E1F70F);
	r6 = D(r6, s0_0_2, 0x04FA09F5, 0x0A0805E5, 0xFFF908FE, 0xD0FA01E0);
	r7 = D(r7, s0_0_2, 0x160CEF03, 0xF310F8FF, 0xFC01F2EE, 0x09ECF20B);
	r0 = D(r0, s0_1_0, 0x15FDFF02, 0x18E004FA, 0xE4F6F907, 0x13CBF8E0);
	r1 = D(r1, s0_1_0, 0xEADEFB04, 0x1D0E06FE, 0x00E2F0D4, 0xAF26FD0E);
	r2 = D(r2, s0_1_0, 0xE9EA0100, 0xBBD10602, 0x1604FD12, 0xA003030C);
	r3 = D(r3, s0_1_0, 0xF4EF0208, 0xEAF5FEF3, 0xE4F5F501, 0xF321060A);
	r4 = D(r4, s0_1_0, 0x2201FDED, 0xDD0002CD, 0xFF1BFD06, 0x1B0FFDFD);
	r5 = D(r5, s0_1_0, 0xD2CBFC04, 0x0009FFED, 0x9FF1FD1F, 0xE515F903);
	r6 = D(r6, s0_1_0, 0xD2DAFFF3, 0xE6E406F9, 0x06EE01FC, 0x1C01FFFE);
	r7 = D(r7, s0_1_0, 0xD8F50A01, 0xFDF0FAF9, 0x092411D8, 0x0E17FEE4);
	r0 = D(r0, s0_1_1, 0x1C0F000E, 0xF2FA0807, 0xB6E301FE, 0xF90BFC34);
	r1 = D(r1, s0_1_1, 0x07E0FA1B, 0xF9F6F8E4, 0xF120F7EE, 0x24010406);
	r2 = D(r2, s0_1_1, 0x0C09FD14, 0x082706DC, 0xDD27FBFB, 0x091DFCEF);
	r3 = D(r3, s0_1_1, 0x1EE4FBF4, 0xDEF9FBEA, 0xE7F5F7A2, 0x07F40402);
	r4 = D(r4, s0_1_1, 0xE7D40710, 0x1FE30C08, 0xED030B15, 0x2AE20D26);
	r5 = D(r5, s0_1_1, 0x3E140720, 0x44D70BEE, 0xFD121116, 0x1F0F011C);
	r6 = D(r6, s0_1_1, 0xFFF10105, 0x12F60146, 0x0702FF21, 0xC7FFFED2);
	r7 = D(r7, s0_1_1, 0x2DF30729, 0x0B01EFF0, 0xF508F728, 0x0339000E);
	r0 = D(r0, s0_1_2, 0xFFFD0FFD, 0xFFF208EC, 0xF7080BF8, 0xF1200F32);
	r1 = D(r1, s0_1_2, 0x02F9F0FB, 0xF403EF19, 0x0532F62F, 0xE819F7F0);
	r2 = D(r2, s0_1_2, 0x100702F5, 0xF1E7FAF8, 0x0BD303FC, 0xE200FCEE);
	r3 = D(r3, s0_1_2, 0xEF2007DB, 0x00FEFF07, 0xFC000012, 0x010202FE);
	r4 = D(r4, s0_1_2, 0xFC0AFDF1, 0xB2E6F519, 0x0EF1F6E8, 0xF201FE0B);
	r5 = D(r5, s0_1_2, 0xE0EE0CF7, 0x06231017, 0x0BD50801, 0xF71011DF);
	r6 = D(r6, s0_1_2, 0x02090F05, 0x00FE0B2F, 0xF4010EFB, 0xD80803FD);
	r7 = D(r7, s0_1_2, 0x120B09D9, 0x00090602, 0x03F80202, 0x03E5FE12);
	r0 = D(r0, s0_2_0, 0xFE00FC02, 0x0402FFF2, 0x0410FFFB, 0x06F007F2);
	r1 = D(r1, s0_2_0, 0x15180B21, 0x0FFF0624, 0x19140AEB, 0x01000811);
	r2 = D(r2, s0_2_0, 0x0A13FC1C, 0xF60BFB16, 0xFBFEFD15, 0x1A08FD05);
	r3 = D(r3, s0_2_0, 0x1AE6FACC, 0xEE08FDF8, 0xF905FE07, 0x07EFFD0D);
	r4 = D(r4, s0_2_0, 0xF1E5FC0A, 0xF41D0414, 0x0501FD00, 0x0B00F90D);
	r5 = D(r5, s0_2_0, 0xFA0BEF23, 0xD9DAF6F4, 0xEB20F8B7, 0x090AFA00);
	r6 = D(r6, s0_2_0, 0x0506F007, 0x02E9E715, 0xFF00F20E, 0x240FF629);
	r7 = D(r7, s0_2_0, 0xF01F0113, 0x090403FC, 0xE9FFFFE3, 0xEE0B00F5);
	r0 = D(r0, s0_2_1, 0x0108FDDF, 0x05FFFAF2, 0xF70AFD15, 0x2E21FCDA);
	r1 = D(r1, s0_2_1, 0xE3FC0412, 0x07F4001F, 0x0CDD0525, 0xF8F30206);
	r2 = D(r2, s0_2_1, 0x030F0200, 0x130AF4F4, 0xFF02FBEA, 0x180CFB09);
	r3 = D(r3, s0_2_1, 0xFDF9FAFC, 0x0005F3F3, 0xFBFFF603, 0xFA00F7FE);
	r4 = D(r4, s0_2_1, 0x1E0F02FA, 0x1F28FAFE, 0x0FF9FE0B, 0x1FEEFB19);
	r5 = D(r5, s0_2_1, 0xF1EFFE96, 0xF11005BF, 0x04F8F8FC, 0xF8F50BF7);
	r6 = D(r6, s0_2_1, 0x0F1DFA02, 0xF50BF088, 0xF7FFF4FC, 0xF6F3FDDF);
	r7 = D(r7, s0_2_1, 0xCEFEFAE0, 0xFE070922, 0xF723051D, 0xFA0CFF23);
	r0 = D(r0, s0_2_2, 0x0100000B, 0xFEFDF50D, 0x01FEFEF6, 0x1F1EF8C3);
	r1 = D(r1, s0_2_2, 0xEFFCF1A3, 0x0703EDE5, 0x1AECF5E7, 0x04DBF214);
	r2 = D(r2, s0_2_2, 0x01FF08FB, 0x09F8FF10, 0xECF6031A, 0xF9060311);
	r3 = D(r3, s0_2_2, 0x0F1C04E0, 0x09FAF7F4, 0x0002F9FD, 0xFB04F7FF);
	r4 = D(r4, s0_2_2, 0xFC0E0311, 0xDC210607, 0x0C01F9F7, 0xE9FFF808);
	r5 = D(r5, s0_2_2, 0xE2FE023A, 0x0EFD00CB, 0x04F8F8EB, 0x02FA0DF9);
	r6 = D(r6, s0_2_2, 0xF20BFF17, 0xEE10FC01, 0xFFFF00F5, 0xE500FF2E);
	r7 = D(r7, s0_2_2, 0xF502FF1C, 0x01030E00, 0x14EC00E7, 0xF9FBFEF0);
	r0 = D(r0, s1_0_0, 0x04FD0CFA, 0xFFF808F9, 0x09FF15FF, 0x12CF36DC);
	r1 = D(r1, s1_0_0, 0x24F3F714, 0x2D07D7F7, 0x05142107, 0x10A3EC11);
	r2 = D(r2, s1_0_0, 0x09FCFF01, 0x0B08E406, 0x24E648C2, 0xF20C2AF9);
	r3 = D(r3, s1_0_0, 0xEA19F9F4, 0x01F213F6, 0x0501F5FE, 0x050107FF);
	r4 = D(r4, s1_0_0, 0x0407D9F6, 0x15F30A01, 0x0708290F, 0x01020481);
	r5 = D(r5, s1_0_0, 0x000C37DB, 0xFBE1E810, 0x31F4DFF8, 0x06031715);
	r6 = D(r6, s1_0_0, 0x1503300E, 0xFB08F2F4, 0x09FD0E09, 0x15E5EA19);
	r7 = D(r7, s1_0_0, 0x050B3F04, 0x02FF0B04, 0xFCEC55C7, 0xEE05E5C8);
	r0 = D(r0, s1_0_1, 0xFF05F15D, 0xFCF7F207, 0x13ECFCF4, 0x1CD8017F);
	r1 = D(r1, s1_0_1, 0x151BEEF3, 0x1B0134FE, 0x2520FDF9, 0x2DEF1242);
	r2 = D(r2, s1_0_1, 0xFA030B04, 0x0608D9DE, 0xF1FE5800, 0xFD0F1DFF);
	r3 = D(r3, s1_0_1, 0x0CFB02EA, 0x0102F9F2, 0xFF070CF6, 0xFB02F3F7);
	r4 = D(r4, s1_0_1, 0x1F082102, 0x2719DFF4, 0xED0EFEED, 0x0C0120D3);
	r5 = D(r5, s1_0_1, 0x22F3071F, 0x2781103F, 0x1E38261F, 0x01061CED);
	r6 = D(r6, s1_0_1, 0x09082715, 0x0A0907F9, 0x060008F3, 0x09E8DD0F);
	r7 = D(r7, s1_0_1, 0xFE11091E, 0xFC0001FF, 0xFB35EDF3, 0xF3F900E1);
	r0 = D(r0, s1_0_2, 0xFC0907FD, 0xFCF4FC04, 0x04F60815, 0xEF190210);
	r1 = D(r1, s1_0_2, 0x15C328F1, 0x0B14F709, 0xF1FFEFFB, 0x13F0061C);
	r2 = D(r2, s1_0_2, 0xFF010901, 0x17041812, 0xF90AED08, 0x1008F30D);
	r3 = D(r3, s1_0_2, 0x09F7142D, 0xFF000203, 0x050202FD, 0x00000202);
	r4 = D(r4, s1_0_2, 0x171806F4, 0x0518C3F1, 0x04020B0B, 0xF8F90581);
	r5 = D(r5, s1_0_2, 0x1A14FE0D, 0xEF8127FE, 0xFDFD0207, 0x04F9E0F9);
	r6 = D(r6, s1_0_2, 0x0D1802ED, 0x0D0B1108, 0x030402F8, 0x1C00F90E);
	r7 = D(r7, s1_0_2, 0x07FAEF1E, 0x04FDF7FA, 0xF10DCDF9, 0x05F6FDE3);
	r0 = D(r0, s1_1_0, 0x07001038, 0xF605F91D, 0xF1FA0E15, 0x12043E18);
	r1 = D(r1, s1_1_0, 0x1E05120A, 0xEE2AC419, 0x46413AFB, 0xD9B765F1);
	r2 = D(r2, s1_1_0, 0x27FC030F, 0xEB29F103, 0x2301EBF2, 0x2AF42509);
	r3 = D(r3, s1_1_0, 0xFE2AFFEC, 0xF4DBFDFF, 0x12FC040E, 0x0F04F610);
	r4 = D(r4, s1_1_0, 0x17F0DEFA, 0xF21FD60A, 0xF5FD35FF, 0xE5EA817A);
	r5 = D(r5, s1_1_0, 0x1017E416, 0x9BF20A9E, 0x33E6D8DA, 0xDABF63F5);
	r6 = D(r6, s1_1_0, 0xFC166C26, 0xF31E0909, 0x22EA81EB, 0xDDEEFBF9);
	r7 = D(r7, s1_1_0, 0xECFAE907, 0x120D0A01, 0xE5092120, 0x0E0A0BDE);
	r0 = D(r0, s1_1_1, 0x16211B7F, 0x09141001, 0x05E7DE06, 0x0CE4ED7F);
	r1 = D(r1, s1_1_1, 0xD22FF40B, 0xE3FEF4E2, 0x1BE865DF, 0xCF3200F0);
	r2 = D(r2, s1_1_1, 0xE5110C1E, 0x24233214, 0x552BFBED, 0x24EC42E8);
	r3 = D(r3, s1_1_1, 0xB5E5FE5B, 0x0E82F6F5, 0xFF81F711, 0xFF02FE02);
	r4 = D(r4, s1_1_1, 0xE70BBAEE, 0x812C1CD0, 0x2A159D0B, 0x3D2315D1);
	r5 = D(r5, s1_1_1, 0x02052AF9, 0xD4E4F5E3, 0xC42D0A0B, 0x0E0F0E15);
	r6 = D(r6, s1_1_1, 0x1CEE81D9, 0x14FC0408, 0x020A1F19, 0xF0E5F6E1);
	r7 = D(r7, s1_1_1, 0x194CF0B8, 0x01F817FF, 0x39D80FE4, 0xF0FB3B00);
	r0 = D(r0, s1_1_2, 0x110DFBDE, 0x0508F009, 0xF5E2F404, 0x3904E2FB);
	r1 = D(r1, s1_1_2, 0x75DB38D7, 0x0DEBFA15, 0x180D20DE, 0xF2EAFAAA);
	r2 = D(r2, s1_1_2, 0x05F007FB, 0xF50F07F6, 0xEDEBF4D8, 0xF6E7FCED);
	r3 = D(r3, s1_1_2, 0xFB0502F7, 0xF10EF1FB, 0x03EFFD01, 0xFAFC01FC);
	r4 = D(r4, s1_1_2, 0x0401FE24, 0x0D013B2A, 0xED0DF8F7, 0x07141DD7);
	r5 = D(r5, s1_1_2, 0xF3060D04, 0x60EC04F5, 0xE900DDE3, 0x07E8110C);
	r6 = D(r6, s1_1_2, 0x00330AF9, 0xEF0106D8, 0x0D200801, 0xEC51E611);
	r7 = D(r7, s1_1_2, 0xDAF614E7, 0x0808FBF9, 0xD5170C39, 0xFFE0FA12);
	r0 = D(r0, s1_2_0, 0xFDF904FA, 0x101001E7, 0x08E21AF4, 0xE4121121);
	r1 = D(r1, s1_2_0, 0xE7020202, 0x171309EC, 0x81FBAF19, 0xD2F5DEE0);
	r2 = D(r2, s1_2_0, 0xD81430E6, 0x3F102504, 0xE2031C11, 0x15EB810D);
	r3 = D(r3, s1_2_0, 0xF81815EB, 0xBA000801, 0x02010AF4, 0x0D16EAF4);
	r4 = D(r4, s1_2_0, 0x1302170B, 0xFF001607, 0xF7212A09, 0x0B0B2E81);
	r5 = D(r5, s1_2_0, 0x1B1533F9, 0x180030FC, 0x7F830121, 0x24CC001B);
	r6 = D(r6, s1_2_0, 0x180E2801, 0xF314230B, 0xD3FF2A14, 0xFCD40DE1);
	r7 = D(r7, s1_2_0, 0x57D5D0E0, 0x0A0A0007, 0x09F24302, 0x1BFA0EF3);
	r0 = D(r0, s1_2_1, 0x05F5FA47, 0xECF60F15, 0x261712EE, 0xE0910B78);
	r1 = D(r1, s1_2_1, 0xD649D603, 0x81F219FE, 0xD5072F01, 0xF840EEF2);
	r2 = D(r2, s1_2_1, 0xED1BFEF4, 0x1A98D406, 0xFDE4DB0F, 0x1AD8401E);
	r3 = D(r3, s1_2_1, 0xC8EB180B, 0x2FF8FF0E, 0x111BFBFC, 0x1105020D);
	r4 = D(r4, s1_2_1, 0xDDBAFDEB, 0x18EF24EA, 0x5CF311F2, 0x7FECF085);
	r5 = D(r5, s1_2_1, 0xEB810F14, 0xE92F27D7, 0xFD16E7C8, 0x0DAE00C5);
	r6 = D(r6, s1_2_1, 0xD5AFF3FA, 0xB98127F8, 0x10D818F7, 0xF2812120);
	r7 = D(r7, s1_2_1, 0x43D1E238, 0x004CFDFF, 0x04EEEA06, 0x132FE7FE);
	r0 = D(r0, s1_2_2, 0x18E814FB, 0x040D0505, 0x0219FC01, 0x0D2505AF);
	r1 = D(r1, s1_2_2, 0x7F81B517, 0x4DFA2105, 0xAA08F31B, 0xD9DBD22A);
	r2 = D(r2, s1_2_2, 0x0AF806F8, 0x1328DE09, 0xCCC810E7, 0xF7EBD8F3);
	r3 = D(r3, s1_2_2, 0xC911EBD9, 0x0E28030E, 0x060C01FC, 0x08FCFAFF);
	r4 = D(r4, s1_2_2, 0xF747F303, 0xD2292727, 0x2AD90301, 0xB106FD81);
	r5 = D(r5, s1_2_2, 0xDC8FF5E8, 0x0C00E44B, 0xF9CF2813, 0xE1DBF6FB);
	r6 = D(r6, s1_2_2, 0xEADFD0FB, 0xFA81FF1B, 0xF40BFF03, 0xFD48ECE5);
	r7 = D(r7, s1_2_2, 0x0A810212, 0xFF02F8FA, 0xC4044CF6, 0x13F9F7E5);
	s0_0_0 = G[4][xy.y+0][xy.x+0]; s0_0_1 = G[4][xy.y+0][xy.x+1];
	s0_0_2 = G[4][xy.y+0][xy.x+2]; s0_1_0 = G[4][xy.y+1][xy.x+0];
	s0_1_1 = G[4][xy.y+1][xy.x+1]; s0_1_2 = G[4][xy.y+1][xy.x+2];
	s0_2_0 = G[4][xy.y+2][xy.x+0]; s0_2_1 = G[4][xy.y+2][xy.x+1];
	s0_2_2 = G[4][xy.y+2][xy.x+2]; s1_0_0 = G[5][xy.y+0][xy.x+0];
	s1_0_1 = G[5][xy.y+0][xy.x+1]; s1_0_2 = G[5][xy.y+0][xy.x+2];
	s1_1_0 = G[5][xy.y+1][xy.x+0]; s1_1_1 = G[5][xy.y+1][xy.x+1];
	s1_1_2 = G[5][xy.y+1][xy.x+2]; s1_2_0 = G[5][xy.y+2][xy.x+0];
	s1_2_1 = G[5][xy.y+2][xy.x+1]; s1_2_2 = G[5][xy.y+2][xy.x+2];
	r0 = D(r0, s0_0_0, 0xFEFE12FE, 0x06F8FCF5, 0xFA010402, 0x17E706CF);
	r1 = D(r1, s0_0_0, 0x151FC412, 0xEA14190C, 0xF806AF40, 0x0DBE1EC9);
	r2 = D(r2, s0_0_0, 0x08040106, 0xF90909F6, 0x091B01DD, 0xF3E509FA);
	r3 = D(r3, s0_0_0, 0x0524B500, 0xFECFF617, 0x00ECF6FD, 0xFB0F05FB);
	r4 = D(r4, s0_0_0, 0xF2F8FE02, 0xFDEE07FD, 0xFBE1F408, 0x020103FF);
	r5 = D(r5, s0_0_0, 0xF3E00C19, 0x0AFAFD04, 0xEA06320D, 0xF806EBF3);
	r6 = D(r6, s0_0_0, 0xF610F603, 0xFEF608FF, 0x0610EB02, 0x07FB3006);
	r7 = D(r7, s0_0_0, 0xFFCBE01C, 0x00020CFD, 0xFEEA7FFD, 0x0117CBEE);
	r0 = D(r0, s0_0_1, 0xF9F2FE07, 0x1003F4FC, 0x09F6EB1C, 0x21EBE13C);
	r1 = D(r1, s0_0_1, 0xF5F831FB, 0xFDF80402, 0x09435FE8, 0x3D000013);
	r2 = D(r2, s0_0_1, 0x1113FDFB, 0xF2FEF328, 0xFA3F16C6, 0xFBEB0808);
	r3 = D(r3, s0_0_1, 0xF00D400C, 0x040913F6, 0xEF27E607, 0x05000100);
	r4 = D(r4, s0_0_1, 0x0AFDCDFD, 0x0504FCF5, 0x0D00E9EF, 0x1A00EEED);
	r5 = D(r5, s0_0_1, 0x0BE800FD, 0x52F2DF00, 0xDDF0DDFD, 0x0FEAF4F3);
	r6 = D(r6, s0_0_1, 0x03F10AFE, 0xF4ECF0ED, 0x09001106, 0xF711020B);
	r7 = D(r7, s0_0_1, 0xEAECC8F6, 0x02090701, 0xF13A18B6, 0xF5FCDD1B);
	r0 = D(r0, s0_0_2, 0xFC0EFF0A, 0x02FF0810, 0x0EFD01F7, 0xEED5190A);
	r1 = D(r1, s0_0_2, 0xE2E841C0, 0x0BEDFCF1, 0xFAFFE7F4, 0x0D031681);
	r2 = D(r2, s0_0_2, 0xFD050A08, 0xE4FC1307, 0x0CE50002, 0x08FFDE13);
	r3 = D(r3, s0_0_2, 0xFFFBE901, 0xE90C0911, 0xFD0111F8, 0xFE020108);
	r4 = D(r4, s0_0_2, 0x06FA0BF1, 0xDD3E07D8, 0xF6030307, 0x0B07F1F9);
	r5 = D(r5, s0_0_2, 0xF80BF418, 0x06F80C4E, 0x0FEA15B3, 0xF80228F7);
	r6 = D(r6, s0_0_2, 0x0629DDF6, 0x00F41008, 0xF809F8FB, 0x190CF007);
	r7 = D(r7, s0_0_2, 0x181BCA00, 0xF7030205, 0x2A09E913, 0xEBFA13DD);
	r0 = D(r0, s0_1_0, 0x0702F4F7, 0xF417FC02, 0xEFEFEF07, 0xD0045B44);
	r1 = D(r1, s0_1_0, 0x153B1922, 0xFE20E31A, 0x210CED41, 0xD527D6A4);
	r2 = D(r2, s0_1_0, 0xFBF3D80A, 0xF6EF2808, 0xF4ED05F6, 0x07F0DE09);
	r3 = D(r3, s0_1_0, 0x02090719, 0xED0234EE, 0x02F40EF8, 0xFBE70600);
	r4 = D(r4, s0_1_0, 0x18EBFD06, 0xFAF5E905, 0x05F1CD14, 0x0329F602);
	r5 = D(r5, s0_1_0, 0xEEFDF416, 0x00FB9200, 0x320F2795, 0x1C0F2EF4);
	r6 = D(r6, s0_1_0, 0x03E0F21D, 0xF9E87F0C, 0x0DEF0E09, 0x08E52011);
	r7 = D(r7, s0_1_0, 0xE7E9CD15, 0x0411F608, 0x28D09A05, 0x060310F7);
	r0 = D(r0, s0_1_1, 0xF90B0612, 0x0AF1E2E5, 0x0EEE02EC, 0x09FD5A59);
	r1 = D(r1, s0_1_1, 0x02ABAE26, 0xECF6140E, 0x01ACD6D1, 0xDFC114DB);
	r2 = D(r2, s0_1_1, 0xEB08F8EB, 0xF8F8CA35, 0xE0D720CE, 0x35FFE6F3);
	r3 = D(r3, s0_1_1, 0xFBE421ED, 0x10FAE2EE, 0xF8FB0A16, 0x03FBF1FF);
	r4 = D(r4, s0_1_1, 0xFE0CD4D7, 0xEAF2EDF0, 0xFE2C1D13, 0xE0FBFC4B);
	r5 = D(r5, s0_1_1, 0xF14008E5, 0x2B22F3B3, 0xDDFD91FB, 0x0FE4C027);
	r6 = D(r6, s0_1_1, 0xDE0FE5B8, 0xC3476F03, 0xFDE30741, 0xDDF6C0F7);
	r7 = D(r7, s0_1_1, 0xA12EA336, 0xF704F709, 0x1BF07CD9, 0xC9E9163D);
	r0 = D(r0, s0_1_2, 0x02FAFA10, 0xFAF50407, 0x08F800F4, 0xD7E84506);
	r1 = D(r1, s0_1_2, 0xDAF77F0A, 0xEDF80E11, 0x01B0005C, 0xE0FEA15F);
	r2 = D(r2, s0_1_2, 0xF3050CED, 0x0CF82C1A, 0xD9F8FCF9, 0x26F6FAFB);
	r3 = D(r3, s0_1_2, 0x0AFD050D, 0x0F03F312, 0xFDFF10F2, 0x05FEFD02);
	r4 = D(r4, s0_1_2, 0x0316270C, 0xFA13F43B, 0x060B01F7, 0x00FAE2DC);
	r5 = D(r5, s0_1_2, 0xDEF105FB, 0x07C911DD, 0x150422F5, 0xF702001F);
	r6 = D(r6, s0_1_2, 0xDAF01B23, 0xF7F700E8, 0x03F60009, 0x04DC52D0);
	r7 = D(r7, s0_1_2, 0xEE1614E7, 0xFC0709FB, 0x81E925DB, 0x0DE9FDD3);
	r0 = D(r0, s0_2_0, 0xFA02FEFB, 0x08F609F7, 0xFC0205EA, 0xF616FEFD);
	r1 = D(r1, s0_2_0, 0xF7FD4710, 0x01FEFF10, 0xCE20060E, 0x817F4D1E);
	r2 = D(r2, s0_2_0, 0x0DF8FFF5, 0xED02F5EF, 0x16E0DEFE, 0x19083C0B);
	r3 = D(r3, s0_2_0, 0xF7E5F920, 0x06083AF5, 0x02000800, 0x07210602);
	r4 = D(r4, s0_2_0, 0x06E80205, 0x17F0F6E4, 0x0802F3F9, 0xF6033108);
	r5 = D(r5, s0_2_0, 0xFAF41CEE, 0x0010EFCB, 0x2808D7FF, 0x1117DF27);
	r6 = D(r6, s0_2_0, 0x15FEF0DD, 0xECFD25FC, 0x0505110A, 0xEF3326FD);
	r7 = D(r7, s0_2_0, 0xD8FCF333, 0x0302FB03, 0x21DF09FD, 0xF904F503);
	r0 = D(r0, s0_2_1, 0xFE0F3415, 0x020E1DF4, 0x070A1A31, 0x2F0F1CE7);
	r1 = D(r1, s0_2_1, 0xE6F12AFE, 0x05DFF1F7, 0x21FDD604, 0x81E681C1);
	r2 = D(r2, s0_2_1, 0x09EDF420, 0xE50F2711, 0x1AFCC0F5, 0xCA19A0A1);
	r3 = D(r3, s0_2_1, 0x211BEA5C, 0x0E16E818, 0xFE0401FB, 0xF6F806F6);
	r4 = D(r4, s0_2_1, 0x0DF218F8, 0x00EBE541, 0x0BF7E82F, 0xF9F1AEFE);
	r5 = D(r5, s0_2_1, 0xD5F537F7, 0x1A2A2CD0, 0xC801E619, 0xF5FBE205);
	r6 = D(r6, s0_2_1, 0xDAFE62CB, 0x01EE0A13, 0x1300F0FB, 0xF608DAF2);
	r7 = D(r7, s0_2_1, 0x14CAE916, 0x0205020A, 0x05460CF9, 0x00F217DC);
	r0 = D(r0, s0_2_2, 0x1004F2F5, 0x01FAFBFA, 0x021EFAF0, 0xF20A1671);
	r1 = D(r1, s0_2_2, 0xCAFC3DD5, 0x1401FDEE, 0x37E8FF1F, 0x2BD2819B);
	r2 = D(r2, s0_2_2, 0x05FA13E3, 0xA10827E8, 0x13F21C07, 0x13182622);
	r3 = D(r3, s0_2_2, 0xF707FA1C, 0xF500FE05, 0x04FDFBFB, 0x010100F2);
	r4 = D(r4, s0_2_2, 0xF1FB1862, 0xFFDDE7E6, 0x150D15E9, 0xD9E02AF6);
	r5 = D(r5, s0_2_2, 0xFA010AD2, 0x04F0E6C5, 0x05F2FF0F, 0x030F0B3C);
	r6 = D(r6, s0_2_2, 0xE7F7CCD8, 0x03FBFBFF, 0x060A010E, 0xF2FC06BD);
	r7 = D(r7, s0_2_2, 0x11FD046E, 0x020806F0, 0xDB11D338, 0x0CF4D133);
	r0 = D(r0, s1_0_0, 0x05F8F5FF, 0xFA14F00B, 0xFFFA0408, 0xE219F905);
	r1 = D(r1, s1_0_0, 0xD621FCFD, 0xF3130403, 0xAA00BE02, 0x09DAF810);
	r2 = D(r2, s1_0_0, 0x190A0A1F, 0x1AF702F2, 0xEE14F20E, 0x2CFA18FA);
	r3 = D(r3, s1_0_0, 0xFC18FF05, 0xBBFBFE00, 0x05EFFFFE, 0x01FCFB01);
	r4 = D(r4, s1_0_0, 0x10FAFB19, 0xE9F400F6, 0x0FF2F906, 0xCB0B02ED);
	r5 = D(r5, s1_0_0, 0xF5040E02, 0x433A1001, 0x12F7EEEC, 0xDBFE12FC);
	r6 = D(r6, s1_0_0, 0xF6F10A18, 0xE2090006, 0x0CF507F6, 0x14E90C14);
	r7 = D(r7, s1_0_0, 0x0AEAF230, 0xFD0204FD, 0xBCE4FCF2, 0xA309F7FC);
	r0 = D(r0, s1_0_1, 0x2A03020C, 0xF9F8EBF4, 0x0DF8FAFC, 0xD10CE1F7);
	r1 = D(r1, s1_0_1, 0x23EEE6FA, 0x11C1F7EA, 0xEF05E809, 0xBCF1D135);
	r2 = D(r2, s1_0_1, 0x46000018, 0xAE080E01, 0x22E5D6F9, 0x19060B31);
	r3 = D(r3, s1_0_1, 0x1DFD0B04, 0xDB1407F8, 0xD217F9E9, 0x0701CE01);
	r4 = D(r4, s1_0_1, 0xDDD601F2, 0xFDEAF3E0, 0x1DE6D307, 0xA2F1A80D);
	r5 = D(r5, s1_0_1, 0xEC1FEFF0, 0x23E5F5E9, 0x47E20541, 0xDE08F614);
	r6 = D(r6, s1_0_1, 0xF2EC17F8, 0x1508010C, 0xEE04F000, 0xC6E9F6D7);
	r7 = D(r7, s1_0_1, 0xE900D219, 0xE90D09FC, 0x9AF3D3F6, 0xAA1012FB);
	r0 = D(r0, s1_0_2, 0xF1FD1CF6, 0x1C06F408, 0xE6F40D1D, 0x08F4E400);
	r1 = D(r1, s1_0_2, 0xBC2EFE1D, 0xEE0CE117, 0x221DACF9, 0x0DEAF808);
	r2 = D(r2, s1_0_2, 0xFF0311FF, 0xF107F7F9, 0x0A0ABE26, 0x0EFFFFF8);
	r3 = D(r3, s1_0_2, 0xDFEF2913, 0xE300EF04, 0xFC0306F8, 0x0502FC08);
	r4 = D(r4, s1_0_2, 0xF40718FD, 0xA9DDC3D6, 0x18FBDC19, 0xCB060BFD);
	r5 = D(r5, s1_0_2, 0x0EFE0C22, 0x15E302F7, 0x13180BF1, 0xF00EED18);
	r6 = D(r6, s1_0_2, 0x32F3EB0D, 0x8108FDDD, 0xEEF9FB06, 0x3C01E724);
	r7 = D(r7, s1_0_2, 0xE1EFEB1D, 0xFF00FD03, 0xE0288DF0, 0xDBF904A3);
	r0 = D(r0, s1_1_0, 0xF90BFA03, 0xF8F40201, 0x00F8F7F5, 0x66FD1503);
	r1 = D(r1, s1_1_0, 0xEDFAEFF7, 0xF71D0BE9, 0x58E0D519, 0x1BE3D7E4);
	r2 = D(r2, s1_1_0, 0x21D0E2F1, 0xF8030FFC, 0x131A25DC, 0xB70BFC01);
	r3 = D(r3, s1_1_0, 0xCE03FAD8, 0xE2EDF921, 0xEFFB0405, 0x0308F603);
	r4 = D(r4, s1_1_0, 0xD9F6FAED, 0x02140000, 0xE4F1F90B, 0xC60700C0);
	r5 = D(r5, s1_1_0, 0x07FC04CF, 0x28010FF4, 0xD8EAE143, 0xEEF008F9);
	r6 = D(r6, s1_1_0, 0x0EE7ED03, 0xFFFAFDDF, 0x01A9FA08, 0x18F3FAD8);
	r7 = D(r7, s1_1_0, 0x89F3F9C0, 0xFD080200, 0x03ED0020, 0x0319F4FF);
	r0 = D(r0, s1_1_1, 0x0A0C2611, 0xBFECFCF6, 0xDCF817E4, 0xB4E707D1);
	r1 = D(r1, s1_1_1, 0x1ACFE1FC, 0x02EAF9E6, 0x2302B2D8, 0xEED8F9F3);
	r2 = D(r2, s1_1_1, 0xB019ADE4, 0x96E0EBF5, 0x1933ED16, 0xBFDA81C6);
	r3 = D(r3, s1_1_1, 0x541030F5, 0x05DE0AFB, 0x27E71304, 0xFFE9350A);
	r4 = D(r4, s1_1_1, 0x41D2CD0A, 0xCFEA39E1, 0x82EFBC15, 0xDD0481FF);
	r5 = D(r5, s1_1_1, 0xBE27F6C0, 0xF207EC11, 0xCA07FA1E, 0xD40F1AE3);
	r6 = D(r6, s1_1_1, 0x16DEB1C3, 0x9BEE19B4, 0xE032AB05, 0xDEEBF2E5);
	r7 = D(r7, s1_1_1, 0xD6380DF7, 0x0D111F07, 0x5D81D46A, 0x73D713E1);
	r0 = D(r0, s1_1_2, 0xEA0B05FF, 0xEE0028FB, 0x1FEBD600, 0xF40B25EE);
	r1 = D(r1, s1_1_2, 0x21BA16DA, 0x210B15EE, 0x0BFF811F, 0x6C342CFD);
	r2 = D(r2, s1_1_2, 0xFAF0E801, 0xFC06B8EC, 0x03F639D7, 0xEE0FD623);
	r3 = D(r3, s1_1_2, 0x1210ED22, 0x0D0F1F0F, 0x0205F7FD, 0x08F9FF03);
	r4 = D(r4, s1_1_2, 0x1AD31A0C, 0xEC812FF9, 0xFAFF43F2, 0xC6F11A04);
	r5 = D(r5, s1_1_2, 0xCF0C10F3, 0xE607F9E0, 0x04FC2AD5, 0x1F0A1406);
	r6 = D(r6, s1_1_2, 0x8728C203, 0x812081CC, 0xF80DFEEF, 0xDFF701EC);
	r7 = D(r7, s1_1_2, 0x95242ECF, 0xE3050AFB, 0x5D1781BE, 0xF4FACB1A);
	r0 = D(r0, s1_2_0, 0x12F200F8, 0xFA120301, 0x05030C0B, 0x2108F11E);
	r1 = D(r1, s1_2_0, 0x111AFD01, 0xF9060503, 0xE53426E7, 0xFA21420B);
	r2 = D(r2, s1_2_0, 0x09DAFBF8, 0xF41A0CFA, 0xDF2805F1, 0x0ECBFBEC);
	r3 = D(r3, s1_2_0, 0x06DF1005, 0x04180400, 0x0D0BFEFB, 0xE644F61E);
	r4 = D(r4, s1_2_0, 0xC60C0201, 0x2B0402F3, 0xF80EFF07, 0x1422F601);
	r5 = D(r5, s1_2_0, 0x1707F721, 0x0FCEEB01, 0x1B0FF1CF, 0xFB0308F9);
	r6 = D(r6, s1_2_0, 0x2121F610, 0x19DD0802, 0xF8EFFDF6, 0x060417EC);
	r7 = D(r7, s1_2_0, 0x06E213E7, 0xFB0802FC, 0xDB16C62B, 0xC4041104);
	r0 = D(r0, s1_2_1, 0xFC03FD10, 0xB2ED0FF1, 0xFE34FC00, 0x7FEBCEFC);
	r1 = D(r1, s1_2_1, 0xCFEE0AE8, 0x04D4DBF5, 0xFCDA230F, 0x11CC04F1);
	r2 = D(r2, s1_2_1, 0xF21B1BF6, 0xF10C30E9, 0xCFE1E90D, 0xCFF307EC);
	r3 = D(r3, s1_2_1, 0x2DF7E704, 0x0C03F8FC, 0xF2FBFD04, 0xEDDE2F04);
	r4 = D(r4, s1_2_1, 0x1D25F6F5, 0xE30FECCE, 0x1D18EEF5, 0xAA1BF6F6);
	r5 = D(r5, s1_2_1, 0x41D11B07, 0xCEC50ACF, 0xEBF710E4, 0xF900240A);
	r6 = D(r6, s1_2_1, 0x1FD9100A, 0x56B21E05, 0x25F10807, 0x0BF7130E);
	r7 = D(r7, s1_2_1, 0x0FD02E11, 0x04100B03, 0xD1AAF0DE, 0xD4F9EA00);
	r0 = D(r0, s1_2_2, 0x1CF2FBF3, 0xF80402FD, 0xF20D0115, 0x43FC0D0C);
	r1 = D(r1, s1_2_2, 0x58180811, 0x02DAEA04, 0x35E8F31C, 0x16E8E20D);
	r2 = D(r2, s1_2_2, 0xED070002, 0x180B21F5, 0xEC0AF605, 0xF4240004);
	r3 = D(r3, s1_2_2, 0xE7040EFD, 0x090B0007, 0x0F050402, 0x09000400);
	r4 = D(r4, s1_2_2, 0x3FF3D2ED, 0x42DB13F7, 0x1512E6FA, 0xE20A0FFC);
	r5 = D(r5, s1_2_2, 0xFF01E907, 0x81220919, 0xFAEA051E, 0xFF08FC07);
	r6 = D(r6, s1_2_2, 0xFD1818E4, 0x08F8EFE5, 0xFBFF0905, 0x0D0A05F9);
	r7 = D(r7, s1_2_2, 0xB009EAE7, 0xFF0207FD, 0xD70E8707, 0xDC12E502);
	s0_0_0 = G[6][xy.y+0][xy.x+0]; s0_0_1 = G[6][xy.y+0][xy.x+1];
	s0_0_2 = G[6][xy.y+0][xy.x+2]; s0_1_0 = G[6][xy.y+1][xy.x+0];
	s0_1_1 = G[6][xy.y+1][xy.x+1]; s0_1_2 = G[6][xy.y+1][xy.x+2];
	s0_2_0 = G[6][xy.y+2][xy.x+0]; s0_2_1 = G[6][xy.y+2][xy.x+1];
	s0_2_2 = G[6][xy.y+2][xy.x+2]; s1_0_0 = G[7][xy.y+0][xy.x+0];
	s1_0_1 = G[7][xy.y+0][xy.x+1]; s1_0_2 = G[7][xy.y+0][xy.x+2];
	s1_1_0 = G[7][xy.y+1][xy.x+0]; s1_1_1 = G[7][xy.y+1][xy.x+1];
	s1_1_2 = G[7][xy.y+1][xy.x+2]; s1_2_0 = G[7][xy.y+2][xy.x+0];
	s1_2_1 = G[7][xy.y+2][xy.x+1]; s1_2_2 = G[7][xy.y+2][xy.x+2];
	r0 = D(r0, s0_0_0, 0x0105051F, 0x04FCFE14, 0xFC00F5EE, 0x0807B008);
	r1 = D(r1, s0_0_0, 0xF7FC0811, 0x0F07F82B, 0xEDF4220F, 0x12F3150E);
	r2 = D(r2, s0_0_0, 0x0CF9FAE2, 0xFF0FEA26, 0xEFFC31ED, 0xF202F6EF);
	r3 = D(r3, s0_0_0, 0xF7001D03, 0x00130A3D, 0x0103012F, 0x03FD0428);
	r4 = D(r4, s0_0_0, 0x03F20B19, 0x0A021BFC, 0xFA11E82F, 0xF7FC060E);
	r5 = D(r5, s0_0_0, 0x02FFEDFE, 0x0705F8F6, 0xE3F404F6, 0xFDF6FDD0);
	r6 = D(r6, s0_0_0, 0x0602EEF1, 0xF0021C06, 0x00F205ED, 0x04F9E408);
	r7 = D(r7, s0_0_0, 0xF403CF03, 0x01F7FFF9, 0x04F900FF, 0xFC05F208);
	r0 = D(r0, s0_0_1, 0xF8010D16, 0x05F91B08, 0x110E0CDB, 0xE4014402);
	r1 = D(r1, s0_0_1, 0xF615FE09, 0x0C2A0CFA, 0xECF2E502, 0xDCF624FF);
	r2 = D(r2, s0_0_1, 0xFDD9E2E5, 0xF6FFF018, 0xFBF7F0E0, 0xFEE9EEE7);
	r3 = D(r3, s0_0_1, 0x0701E9FA, 0xFFD4EB0E, 0xFD14021B, 0x001CF7F3);
	r4 = D(r4, s0_0_1, 0xFD0D0E06, 0x09F4E5FE, 0x04130814, 0x3725DC19);
	r5 = D(r5, s0_0_1, 0x07F7E1FD, 0x1D28F6F9, 0xF5E43BFA, 0xFF0DE4E5);
	r6 = D(r6, s0_0_1, 0xFED11010, 0x04F91415, 0x00FBE215, 0x15275A04);
	r7 = D(r7, s0_0_1, 0x010C280D, 0xFBF2FDF9, 0x06F3BA08, 0x03F0CCF9);
	r0 = D(r0, s0_0_2, 0x051C001A, 0x040705ED, 0x100813D3, 0x061B810C);
	r1 = D(r1, s0_0_2, 0x26F6F6F2, 0xF381CFD7, 0x17EECA02, 0xEA1799F7);
	r2 = D(r2, s0_0_2, 0x04EC0D04, 0xFF1ACB25, 0xEB09FE0D, 0x0CDC23FE);
	r3 = D(r3, s0_0_2, 0x11FC4E0E, 0x0DF8EC09, 0x03F31D22, 0x0304FCEB);
	r4 = D(r4, s0_0_2, 0xF2BCC4DA, 0xFB7F45FC, 0x05BFF0E6, 0xEEA80C07);
	r5 = D(r5, s0_0_2, 0x0318F9F6, 0xF70481E6, 0x0BF6AAF9, 0xF60200DA);
	r6 = D(r6, s0_0_2, 0x0915112D, 0x04DDED18, 0x02FC1226, 0xE920FE06);
	r7 = D(r7, s0_0_2, 0xE9EEE2FF, 0x031E080D, 0x140AE80A, 0xFDF809F8);
	r0 = D(r0, s0_1_0, 0xF804FA0C, 0xF9010507, 0x100F01FB, 0xF522D7F7);
	r1 = D(r1, s0_1_0, 0x23F9FA04, 0x190EDA22, 0x1B3F57FA, 0xF6EA6600);
	r2 = D(r2, s0_1_0, 0xF304FDDD, 0x00FDFBFF, 0xE1E023EA, 0x0303E2F2);
	r3 = D(r3, s0_1_0, 0xF416B2EC, 0xD0F1F214, 0xE8FCF5F9, 0xFF090321);
	r4 = D(r4, s0_1_0, 0x2416F119, 0x0A04E407, 0xF9FE061F, 0x00EBF50D);
	r5 = D(r5, s0_1_0, 0x16F1F204, 0xF409E606, 0xD8083502, 0x1106E501);
	r6 = D(r6, s0_1_0, 0xEC06DEE5, 0xE1FBE7F8, 0x06ED12DF, 0xE80DF90B);
	r7 = D(r7, s0_1_0, 0xF9101AFE, 0xFF02FDEE, 0xFA1806F2, 0xFA0CEAFB);
	r0 = D(r0, s0_1_1, 0x1708FD20, 0xE7190F31, 0xE20CD90E, 0x0106CF0F);
	r1 = D(r1, s0_1_1, 0xB3063CFA, 0xCFF6F9F8, 0x0054C600, 0xA714D000);
	r2 = D(r2, s0_1_1, 0xE90F090C, 0x05051D0E, 0x4C0A2F00, 0x3D13F012);
	r3 = D(r3, s0_1_1, 0x22C312F1, 0xD9FABFF4, 0x55F5F4F1, 0xF8D0FDE9);
	r4 = D(r4, s0_1_1, 0xF826FE13, 0xFC212218, 0xF41A1D0F, 0xDB1FFE21);
	r5 = D(r5, s0_1_1, 0x0432E3FF, 0x0A07FCF7, 0xF5E150FC, 0xC801C8FA);
	r6 = D(r6, s0_1_1, 0x05E5E800, 0xEEFA01F6, 0xFD11BF01, 0x05F2CA01);
	r7 = D(r7, s0_1_1, 0x3905E8F8, 0x23FFFEF1, 0xF81205FB, 0x30051CF2);
	r0 = D(r0, s0_1_2, 0x080E0719, 0xF2F3FFF6, 0x06C1D1F7, 0x1110810C);
	r1 = D(r1, s0_1_2, 0x111DA8F4, 0x05851BD9, 0x0AE181FC, 0x13EF9FF5);
	r2 = D(r2, s0_1_2, 0x1B0EE316, 0x148BB3FE, 0xDA322209, 0x1EC54615);
	r3 = D(r3, s0_1_2, 0xF9161616, 0xF803EBF5, 0xDA090201, 0xFBFF05F0);
	r4 = D(r4, s0_1_2, 0x2081FCE1, 0xA4B703F7, 0x1181FDD5, 0xCFAD8E0C);
	r5 = D(r5, s0_1_2, 0xE5AC2C09, 0xDF0FEB05, 0x0920670D, 0x18FDB70D);
	r6 = D(r6, s0_1_2, 0xF715082F, 0xE0109918, 0xE7EA162A, 0x810E27FE);
	r7 = D(r7, s0_1_2, 0xBFC17F04, 0x072A0813, 0xBEF85205, 0x11040EF7);
	r0 = D(r0, s0_2_0, 0x0900FF0E, 0xFA00F100, 0x23F7FC23, 0xF2F61F02);
	r1 = D(r1, s0_2_0, 0xF6F50212, 0x02FC032D, 0xFDCF17FC, 0x32DF380B);
	r2 = D(r2, s0_2_0, 0x020204F9, 0xEF0DECE8, 0xF2F21AFF, 0xFA11E9FE);
	r3 = D(r3, s0_2_0, 0x0304FAEE, 0x1009F3F4, 0xFA0201E2, 0x0701FC1B);
	r4 = D(r4, s0_2_0, 0x00FDE41A, 0x18010A04, 0xFB060A0E, 0xFB070408);
	r5 = D(r5, s0_2_0, 0x2512F9FD, 0x0108F907, 0x37FFEAFD, 0x0D01EE17);
	r6 = D(r6, s0_2_0, 0xFF12F9CB, 0xF500FAE1, 0xDE0BEDD4, 0xFEF30E0B);
	r7 = D(r7, s0_2_0, 0x15ECE70A, 0xF604F7F2, 0xE9FB10F8, 0xF8F71401);
	r0 = D(r0, s0_2_1, 0x0AFCFF11, 0x0AFAF1F8, 0xB6051026, 0x06EF1805);
	r1 = D(r1, s0_2_1, 0xEBFFE5F8, 0x01261E04, 0xE182D5F8, 0x9E0E22FE);
	r2 = D(r2, s0_2_1, 0xDBE9F21D, 0xE8001EE8, 0x2601A711, 0x81FED40E);
	r3 = D(r3, s0_2_1, 0xFB0A1500, 0x0108E1EB, 0x070002EA, 0xFFD20A00);
	r4 = D(r4, s0_2_1, 0xC31AD604, 0x18EF3907, 0x241618F9, 0x1EFF040B);
	r5 = D(r5, s0_2_1, 0xD600E910, 0x10CDE925, 0xCEF6C611, 0x20EF0C30);
	r6 = D(r6, s0_2_1, 0xF4F406E5, 0x1AF700E6, 0x3FE5DAED, 0x1E07E5FF);
	r7 = D(r7, s0_2_1, 0x28E659FA, 0xEEFAF508, 0x20F02100, 0xC3F12B00);
	r0 = D(r0, s0_2_2, 0xFCF5FA16, 0x0712DEEA, 0xE127DA1C, 0x2304A207);
	r1 = D(r1, s0_2_2, 0x1014DAF9, 0x0C140EE3, 0x32D81506, 0x200181FF);
	r2 = D(r2, s0_2_2, 0x1907211E, 0x0C3681C9, 0xFB0AE701, 0x04CA4B08);
	r3 = D(r3, s0_2_2, 0x0FE70509, 0x2408FBD0, 0x04FC03DD, 0x0CFE0AE4);
	r4 = D(r4, s0_2_2, 0xDE2F0CDC, 0xA5F155EB, 0x001BC7CF, 0xF40419FD);
	r5 = D(r5, s0_2_2, 0x29FB9BFA, 0x23D89000, 0x3CF41BFA, 0xF911331F);
	r6 = D(r6, s0_2_2, 0xFA16290E, 0x2F242F02, 0x08F6E90E, 0xF0FE27DA);
	r7 = D(r7, s0_2_2, 0xD91C3BF4, 0x05051113, 0x371EE204, 0xF0FA1CF6);
	r0 = D(r0, s1_0_0, 0x0005FB08, 0x0A040A13, 0x05F2EE0E, 0xE9E2FDED);
	r1 = D(r1, s1_0_0, 0x1AE923E7, 0x07F7D91E, 0x3143CFD6, 0x0A08F80B);
	r2 = D(r2, s1_0_0, 0x0AFBF5F6, 0xF50DF919, 0xF5252F3F, 0x0302E2E7);
	r3 = D(r3, s1_0_0, 0x0016FD0C, 0x03F62023, 0xFDFF0605, 0x0105FFFA);
	r4 = D(r4, s1_0_0, 0xFE01EA04, 0x09E84205, 0xF9020D1C, 0x31F62014);
	r5 = D(r5, s1_0_0, 0x18F8FF13, 0x13EB1A1D, 0x3A14D4B2, 0xFDFC15EB);
	r6 = D(r6, s1_0_0, 0xEB04F000, 0xF2F82DE9, 0xF00011F0, 0x1D0AE70A);
	r7 = D(r7, s1_0_0, 0xF6EB2F27, 0x02000101, 0xE3232202, 0x21E8E701);
	r0 = D(r0, s1_0_1, 0x040504F1, 0xFB0209ED, 0xEFFC2EDA, 0x810548EC);
	r1 = D(r1, s1_0_1, 0x2900BB67, 0xD2F312FC, 0x15EECFFA, 0xB2C5A5DB);
	r2 = D(r2, s1_0_1, 0xFCEB0017, 0x43FEE508, 0xE4E381E6, 0x22EEE4F4);
	r3 = D(r3, s1_0_1, 0x48ED1B1B, 0x03EC32EA, 0x09F212F6, 0x04F8FD02);
	r4 = D(r4, s1_0_1, 0xD8FADC21, 0xDEE70DAA, 0x0CF1D900, 0x1EF41E27);
	r5 = D(r5, s1_0_1, 0xDE0F0FFE, 0xEB0206FD, 0xC8D81203, 0xE4E7050A);
	r6 = D(r6, s1_0_1, 0xE7109CFE, 0xFCF724DA, 0x08FFF5F6, 0x1B1C37F5);
	r7 = D(r7, s1_0_1, 0xC2DF123E, 0x03F2FC03, 0x0EDAE2C1, 0xFA00E1F7);
	r0 = D(r0, s1_0_2, 0xF9FE09F7, 0x1500120D, 0xF005041A, 0xA3F03207);
	r1 = D(r1, s1_0_2, 0xB8BE38C5, 0x08F61404, 0x81074EC0, 0x8AE30936);
	r2 = D(r2, s1_0_2, 0xF90104F1, 0xFC1715F5, 0xCD0EEF1A, 0xF9F0F6F1);
	r3 = D(r3, s1_0_2, 0xE710D818, 0xFDF90F13, 0x020EFE02, 0x01020501);
	r4 = D(r4, s1_0_2, 0x0FFB05EC, 0xE0013083, 0xE811F114, 0x0704EEF7);
	r5 = D(r5, s1_0_2, 0xFDD5030A, 0xEC032DC9, 0xFE0A21EF, 0xD5E9100B);
	r6 = D(r6, s1_0_2, 0xD31CEC06, 0xF705FE0D, 0x0611F802, 0x24F4F510);
	r7 = D(r7, s1_0_2, 0x040B0CED, 0x0102FE01, 0x69341441, 0xF21330F9);
	r0 = D(r0, s1_1_0, 0xF50EFF0F, 0x050809E5, 0xE209F5FC, 0xE8091CDB);
	r1 = D(r1, s1_1_0, 0xD301F7DD, 0xF511EFEB, 0xFACA264F, 0xAC0B52C9);
	r2 = D(r2, s1_1_0, 0xE21A0B14, 0xCB020BE8, 0xDEEBF9FA, 0xF1F646DB);
	r3 = D(r3, s1_1_0, 0x04ED3D0E, 0x070A1F02, 0xFEFD0705, 0xF60BFA27);
	r4 = D(r4, s1_1_0, 0xF0101AE9, 0x041EEE0C, 0x0D1DCCD6, 0xF2F40001);
	r5 = D(r5, s1_1_0, 0xE21CEFF3, 0xE91ED708, 0x2FF81418, 0x0D07F0E8);
	r6 = D(r6, s1_1_0, 0xF610EEE3, 0xFC06D92C, 0xF7F4F504, 0xE0F91824);
	r7 = D(r7, s1_1_0, 0x66DE0625, 0xFA0204F3, 0xE30DF4DD, 0x15F83417);
	r0 = D(r0, s1_1_1, 0xDCF0F604, 0xF0DF1B0B, 0x03FAF3FC, 0x0CF6C122);
	r1 = D(r1, s1_1_1, 0x140A341F, 0xF8FCEDD0, 0x0112EF0E, 0x0CD52CDC);
	r2 = D(r2, s1_1_1, 0xF5E2EF0C, 0xFEEA0E00, 0xC11900F7, 0xEC01E103);
	r3 = D(r3, s1_1_1, 0x061F0A02, 0xD01F20E2, 0xF0050FF5, 0xEEF0E9EE);
	r4 = D(r4, s1_1_1, 0x40F4F6D3, 0xF10FC215, 0xC6FCBCE4, 0x6FEC35EC);
	r5 = D(r5, s1_1_1, 0xED0C12CD, 0xED09B7D2, 0x2F0B0516, 0x1C0E0719);
	r6 = D(r6, s1_1_1, 0x12E20CFC, 0x0CE8D6E7, 0xE4D601F1, 0xD9005EE5);
	r7 = D(r7, s1_1_1, 0x5BF44EC0, 0xFD0FFA24, 0x11EF9728, 0x2A350017);
	r0 = D(r0, s1_1_2, 0xED0DE70B, 0xF0F51807, 0x1EFC0508, 0x0AF5C817);
	r1 = D(r1, s1_1_2, 0x0531FDCF, 0xEFF0F3EF, 0x0CCE8122, 0x19074701);
	r2 = D(r2, s1_1_2, 0x1709E3EE, 0x28EAE0FB, 0xC9201902, 0x02D20617);
	r3 = D(r3, s1_1_2, 0x4DEF062B, 0x090C1509, 0xFAF60102, 0x00F80403);
	r4 = D(r4, s1_1_2, 0x062FF4EC, 0xED28F136, 0xCA07EDFA, 0x0E1E2403);
	r5 = D(r5, s1_1_2, 0xED24FF2A, 0xF419F000, 0xFD03DCEC, 0xC61B0B02);
	r6 = D(r6, s1_1_2, 0xBAEF000B, 0x0C32DEF7, 0x01120E0C, 0xCDE0D230);
	r7 = D(r7, s1_1_2, 0xF643D8DB, 0xECF40500, 0x49E162F1, 0x33D0060D);
	r0 = D(r0, s1_2_0, 0xFF090302, 0xF4FA09FF, 0xFD040EFE, 0xE2041EEC);
	r1 = D(r1, s1_2_0, 0x2C20CF00, 0xF803EE16, 0xE322D6EF, 0xE0324202);
	r2 = D(r2, s1_2_0, 0x2BF814F7, 0xDE0EEA0E, 0xEAF21DFF, 0x2719E520);
	r3 = D(r3, s1_2_0, 0xE5FD0511, 0xE2FE05FC, 0x0204FC09, 0x180307E5);
	r4 = D(r4, s1_2_0, 0xCB06F20E, 0x10EF0F0C, 0x01F80204, 0x2F101C02);
	r5 = D(r5, s1_2_0, 0xF818F1F3, 0x2EF1E10A, 0x1A1D0801, 0x0601ECF6);
	r6 = D(r6, s1_2_0, 0xEB0011FF, 0x0D08FC19, 0x040DF207, 0xFC18EA04);
	r7 = D(r7, s1_2_0, 0x0424BFCE, 0xFEFB04FF, 0x170225C7, 0xF9010EFF);
	r0 = D(r0, s1_2_1, 0xFFF108FA, 0x00050901, 0xDD04F000, 0x0C1B1102);
	r1 = D(r1, s1_2_1, 0xDC06F703, 0x1B07E120, 0x7F061ED8, 0xB53A8115);
	r2 = D(r2, s1_2_1, 0xC80AF70D, 0x15F9F103, 0xE00414F0, 0x0038AB25);
	r3 = D(r3, s1_2_1, 0x29131A02, 0xE8EBFFEF, 0x0CF702FE, 0xFD1DFD0A);
	r4 = D(r4, s1_2_1, 0x10E4F80A, 0x04FCF22D, 0x14F4F00D, 0x4605E80C);
	r5 = D(r5, s1_2_1, 0x37E62A06, 0xBB1ED30B, 0xBEE4FD2D, 0xC60DF412);
	r6 = D(r6, s1_2_1, 0x47E82BF6, 0x1702141F, 0xFDF30B0D, 0x02FCEDFB);
	r7 = D(r7, s1_2_1, 0x3B0C27DA, 0xF203040A, 0xFEE909E2, 0xF4F12EFB);
	r0 = D(r0, s1_2_2, 0x0BFAFE00, 0xF603F802, 0xCF07F7FA, 0xF6D410EE);
	r1 = D(r1, s1_2_2, 0xDFBC36E0, 0x1317FC0E, 0xBEEE51D2, 0xE2F6B713);
	r2 = D(r2, s1_2_2, 0xF21218FD, 0xFE02DC02, 0xB9E703FA, 0x2B080A0E);
	r3 = D(r3, s1_2_2, 0x18D62FE7, 0xF10C0D08, 0x020F0206, 0xFCFDFC07);
	r4 = D(r4, s1_2_2, 0xCBD0EDE3, 0x33F20C0F, 0xEDFFFD12, 0x02011605);
	r5 = D(r5, s1_2_2, 0xF2D52304, 0xB4BAF223, 0xD21B0417, 0xF2F706FC);
	r6 = D(r6, s1_2_2, 0xF5079F0A, 0x03E5E9F9, 0x0F050402, 0x0FF71804);
	r7 = D(r7, s1_2_2, 0xCFD819CC, 0xF415FAFE, 0x280DFF18, 0xBB0F18F2);
	f0 = vec4(r0) * 6.2000124e-05;
	f0 += vec4(-9.843e-01, -1.103e-02, 1.618e-02, -2.228e-01);
	f0 = clamp(f0, vec4(0.0), vec4(1.0));
	imageStore(out_image, opos + ivec2(0, 0), f0);
	f1 = vec4(r1) * 6.2000124e-05;
	f1 += vec4(4.217e-02, 3.708e-02, 1.541e-02, 4.573e-02);
	f1 = clamp(f1, vec4(0.0), vec4(1.0));
	imageStore(out_image, opos + ivec2(1, 0), f1);
	f2 = vec4(r2) * 6.2000124e-05;
	f2 += vec4(1.057e-02, 1.964e-02, 6.245e-02, 6.206e-02);
	f2 = clamp(f2, vec4(0.0), vec4(1.0));
	imageStore(out_image, opos + ivec2(0, 1), f2);
	f3 = vec4(r3) * 6.2000124e-05;
	f3 += vec4(-7.033e-03, 3.738e-02, 2.038e-02, 9.052e-03);
	f3 = clamp(f3, vec4(0.0), vec4(1.0));
	imageStore(out_image, opos + ivec2(1, 1), f3);
	f4 = vec4(r4) * 6.2000124e-05;
	f4 += vec4(4.922e-02, 3.041e-02, 1.310e-02, -5.957e-01);
	f4 = clamp(f4, vec4(0.0), vec4(1.0));
	imageStore(out_image, opos + ivec2(2, 0), f4);
	f5 = vec4(r5) * 6.2000124e-05;
	f5 += vec4(3.455e-02, 1.798e-02, 2.252e-02, 5.205e-02);
	f5 = clamp(f5, vec4(0.0), vec4(1.0));
	imageStore(out_image, opos + ivec2(3, 0), f5);
	f6 = vec4(r6) * 6.2000124e-05;
	f6 += vec4(3.773e-02, 4.162e-02, 2.055e-02, 4.262e-02);
	f6 = clamp(f6, vec4(0.0), vec4(1.0));
	imageStore(out_image, opos + ivec2(2, 1), f6);
	f7 = vec4(r7) * 6.2000124e-05;
	f7 += vec4(8.662e-03, 1.108e-02, 3.044e-02, 5.086e-02);
	f7 = clamp(f7, vec4(0.0), vec4(1.0));
	imageStore(out_image, opos + ivec2(3, 1), f7);
}

//!DESC CuNNy-8x32-conv2
//!HOOK LUMA
//!COMPUTE 32 16 8 8
//!BIND conv1
//!BIND LUMA
//!SAVE conv2
//!WIDTH LUMA.w 4 *
//!HEIGHT LUMA.h 2 *
//!COMPONENTS 4
//!WHEN OUTPUT.w LUMA.w / 1.3 > OUTPUT.h LUMA.h / 1.3 > *
#extension GL_EXT_spirv_intrinsics : require
spirv_instruction (extensions = ["SPV_KHR_integer_dot_product"], capabilities = [6019, 6018], id = 4450)
int dp4(int a, int b, spirv_literal int fmt);
#define D(r, s, a, b, c, d) r + ivec4(dp4(s, a, 0), dp4(s, b, 0), dp4(s, c, 0), dp4(s, d, 0))
shared int G[8][10][10];
void hook() {
	ivec2 xy = ivec2(gl_LocalInvocationID.xy);
	ivec2 pos = ivec2(gl_WorkGroupID.xy) * ivec2(8, 8) + xy;
	ivec2 opos = pos * ivec2(4, 2);
	ivec2 sz = ivec2(LUMA_size) - ivec2(1);
	for (int y = 0; y < 10; y += 8) {
		int ay = xy.y + y;
		if (ay >= 10) break;
		for (int x = 0; x < 10; x += 8) {
			int ax = xy.x + x;
			if (ax >= 10) break;
			vec2 p;
			vec4 r, g, b, a;
			p = vec2(clamp(pos + ivec2(x - 1, y - 1), ivec2(0), sz) * ivec2(4, 2) + ivec2(1, 1)) * conv1_pt;
			r = conv1_gather(p, 0);
			g = conv1_gather(p, 1);
			b = conv1_gather(p, 2);
			a = conv1_gather(p, 3);
			vec4 v0 = vec4(r.w, g.w, b.w, a.w) * 1.0000000e+00;
			vec4 v1 = vec4(r.z, g.z, b.z, a.z) * 1.0000000e+00;
			vec4 v2 = vec4(r.x, g.x, b.x, a.x) * 1.0000000e+00;
			vec4 v3 = vec4(r.y, g.y, b.y, a.y) * 1.0000000e+00;
			p = vec2(clamp(pos + ivec2(x - 1, y - 1), ivec2(0), sz) * ivec2(4, 2) + ivec2(3, 1)) * conv1_pt;
			r = conv1_gather(p, 0);
			g = conv1_gather(p, 1);
			b = conv1_gather(p, 2);
			a = conv1_gather(p, 3);
			vec4 v4 = vec4(r.w, g.w, b.w, a.w) * 1.0000000e+00;
			vec4 v5 = vec4(r.z, g.z, b.z, a.z) * 1.0000000e+00;
			vec4 v6 = vec4(r.x, g.x, b.x, a.x) * 1.0000000e+00;
			vec4 v7 = vec4(r.y, g.y, b.y, a.y) * 1.0000000e+00;
			G[0][ay][ax] = int(packSnorm4x8(v0));
			G[1][ay][ax] = int(packSnorm4x8(v1));
			G[2][ay][ax] = int(packSnorm4x8(v2));
			G[3][ay][ax] = int(packSnorm4x8(v3));
			G[4][ay][ax] = int(packSnorm4x8(v4));
			G[5][ay][ax] = int(packSnorm4x8(v5));
			G[6][ay][ax] = int(packSnorm4x8(v6));
			G[7][ay][ax] = int(packSnorm4x8(v7));
		}
	}
	barrier();
	int s0_0_0, s0_0_1, s0_0_2, s0_1_0, s0_1_1, s0_1_2, s0_2_0, s0_2_1, s0_2_2, s1_0_0, s1_0_1, s1_0_2, s1_1_0, s1_1_1, s1_1_2, s1_2_0, s1_2_1, s1_2_2;
	ivec4 r0, r1, r2, r3, r4, r5, r6, r7;
	vec4 f0, f1, f2, f3, f4, f5, f6, f7;
	r0 = ivec4(0); r1 = ivec4(0); r2 = ivec4(0); r3 = ivec4(0); r4 = ivec4(0); r5 = ivec4(0); r6 = ivec4(0); r7 = ivec4(0);
	s0_0_0 = G[0][xy.y+0][xy.x+0]; s0_0_1 = G[0][xy.y+0][xy.x+1];
	s0_0_2 = G[0][xy.y+0][xy.x+2]; s0_1_0 = G[0][xy.y+1][xy.x+0];
	s0_1_1 = G[0][xy.y+1][xy.x+1]; s0_1_2 = G[0][xy.y+1][xy.x+2];
	s0_2_0 = G[0][xy.y+2][xy.x+0]; s0_2_1 = G[0][xy.y+2][xy.x+1];
	s0_2_2 = G[0][xy.y+2][xy.x+2]; s1_0_0 = G[1][xy.y+0][xy.x+0];
	s1_0_1 = G[1][xy.y+0][xy.x+1]; s1_0_2 = G[1][xy.y+0][xy.x+2];
	s1_1_0 = G[1][xy.y+1][xy.x+0]; s1_1_1 = G[1][xy.y+1][xy.x+1];
	s1_1_2 = G[1][xy.y+1][xy.x+2]; s1_2_0 = G[1][xy.y+2][xy.x+0];
	s1_2_1 = G[1][xy.y+2][xy.x+1]; s1_2_2 = G[1][xy.y+2][xy.x+2];
	r0 = D(r0, s0_0_0, 0xE7DBFA25, 0x0F0BFFF1, 0xDE03EECB, 0x1A0BF8D9);
	r1 = D(r1, s0_0_0, 0xFB00F204, 0xEFF8044C, 0xF703F1FC, 0x241A021F);
	r2 = D(r2, s0_0_0, 0x02EFD5E1, 0x13F9F1FD, 0x0A0EEB74, 0xED10E3B7);
	r3 = D(r3, s0_0_0, 0xF80F0502, 0x010209F6, 0xF304EDDF, 0xEEFCF8F7);
	r4 = D(r4, s0_0_0, 0x1C0B0AE1, 0x09E6F91B, 0xF60411CC, 0x22818121);
	r5 = D(r5, s0_0_0, 0xFF0A03F2, 0x03000006, 0x160C0CF9, 0x1F0AFF17);
	r6 = D(r6, s0_0_0, 0x1BFC1F0A, 0x0408FD0E, 0xE70F14F8, 0xF2DF1F02);
	r7 = D(r7, s0_0_0, 0x051115F4, 0xFDEAEF26, 0x0E09091B, 0x0EFC1501);
	r0 = D(r0, s0_0_1, 0xFD11FAC4, 0x0DF9F220, 0xF1FCF814, 0x0B010DE5);
	r1 = D(r1, s0_0_1, 0x00000AF5, 0xFDFC002E, 0x0202FBE5, 0xE20A0017);
	r2 = D(r2, s0_0_1, 0xF30A0FBB, 0x07F5F52F, 0x1D39DB96, 0x08FACFA4);
	r3 = D(r3, s0_0_1, 0x11FDF8EC, 0x05F609FF, 0xFC00E9F9, 0xE7FFF9F3);
	r4 = D(r4, s0_0_1, 0xFBEDF7E8, 0xE4FF1AE3, 0x0EFAEC98, 0x14CE2CFD);
	r5 = D(r5, s0_0_1, 0xFA08FCF0, 0xFD000206, 0xE20BEC0A, 0x0DF10A0A);
	r6 = D(r6, s0_0_1, 0xE0FC0225, 0x03FCFDF7, 0x02031C0A, 0x05F1F8E2);
	r7 = D(r7, s0_0_1, 0xFA07FA53, 0x1B0CEA35, 0xDF030006, 0x0804FA06);
	r0 = D(r0, s0_0_2, 0xF502EEE2, 0xFDFC1134, 0x0CF9EDE9, 0xE9F8EE1C);
	r1 = D(r1, s0_0_2, 0x04000DFC, 0x1717F149, 0x0205F710, 0x270C0CDD);
	r2 = D(r2, s0_0_2, 0x0F1501AA, 0xEDFB1212, 0xA9EB0ED2, 0xEA12E8F4);
	r3 = D(r3, s0_0_2, 0x0A02F6F6, 0xFCFF05FE, 0xFF06FA11, 0x0812062F);
	r4 = D(r4, s0_0_2, 0x13E7EF1A, 0x13EA0810, 0x8E1109F1, 0xE9031B12);
	r5 = D(r5, s0_0_2, 0xFDF9FFF7, 0xFE040002, 0xF70EF60D, 0x1702FF02);
	r6 = D(r6, s0_0_2, 0xFBF6EC0A, 0xE708E0F1, 0xF608132C, 0x13D3FDFC);
	r7 = D(r7, s0_0_2, 0x070108F9, 0x2DF418C1, 0x0BFD050E, 0xFE0107F9);
	r0 = D(r0, s0_1_0, 0xF2E92A8B, 0xF2EB0C1C, 0x02140734, 0xF2FCFAB9);
	r1 = D(r1, s0_1_0, 0xFDFFEEE0, 0xF3FFFFBD, 0x0A15FDFD, 0x0EE9DA06);
	r2 = D(r2, s0_1_0, 0x00161A0F, 0xFF01EB26, 0x2C09EF3A, 0xF511D8E0);
	r3 = D(r3, s0_1_0, 0x08FB1C7F, 0x05F9050B, 0x01FCE5DE, 0x01DEEE22);
	r4 = D(r4, s0_1_0, 0xF2E0123B, 0x4409D9A3, 0xFFE2F1A3, 0xF3F95C49);
	r5 = D(r5, s0_1_0, 0x010E040B, 0x00FF05F4, 0x090C1BD6, 0x0E0B0712);
	r6 = D(r6, s0_1_0, 0xFCFC04C3, 0x0F01F6EE, 0xE3F80A18, 0x02EFFAF9);
	r7 = D(r7, s0_1_0, 0xF5F8ECF8, 0x1303091E, 0xE9ECF22E, 0x0102100F);
	r0 = D(r0, s0_1_1, 0xEE06F496, 0x0104DBDA, 0xEB1A03EA, 0xEECAEC3D);
	r1 = D(r1, s0_1_1, 0x05EBFBFF, 0xC52413B9, 0xFE27F8FA, 0xE702FFA2);
	r2 = D(r2, s0_1_1, 0x0F341916, 0xFFEA0EE2, 0xF2FD05DF, 0xF8EBB4C5);
	r3 = D(r3, s0_1_1, 0x0DFD0B5D, 0xF9F7FDF5, 0xFC0A02D3, 0x10EE04B4);
	r4 = D(r4, s0_1_1, 0xFEA8E5FC, 0x030E0BEC, 0xCDE3F561, 0x19E6B0FB);
	r5 = D(r5, s0_1_1, 0x0217F308, 0xFE04FE07, 0xF9150B61, 0xDCD90D11);
	r6 = D(r6, s0_1_1, 0xF4180C38, 0x42169827, 0x20FABF81, 0xEA1DD9D6);
	r7 = D(r7, s0_1_1, 0xF4B8173B, 0xFDC3FA22, 0xF9941522, 0x0205ED05);
	r0 = D(r0, s0_1_2, 0x0404EBCD, 0x15FF31F2, 0x0A1A0DB3, 0x12F00F09);
	r1 = D(r1, s0_1_2, 0x03041216, 0xF0F6FE58, 0xFCFBFE01, 0x2D07F40E);
	r2 = D(r2, s0_1_2, 0xF3EFE6B8, 0x03FC03C9, 0x0D001548, 0x06FCADB7);
	r3 = D(r3, s0_1_2, 0xEB0D0567, 0x01FB04FC, 0x08FA2B02, 0xE9053AB3);
	r4 = D(r4, s0_1_2, 0x09E9EBEE, 0x0ED5EFD5, 0x1A03FDEA, 0x07FEFFDC);
	r5 = D(r5, s0_1_2, 0x0C060504, 0xF9FCF8FE, 0x11ECE8F1, 0x1601F4DF);
	r6 = D(r6, s0_1_2, 0x070EF62E, 0xFA12BF3A, 0x1B080117, 0x030122F4);
	r7 = D(r7, s0_1_2, 0xE2F8D49D, 0xE50817B5, 0x0CFFF015, 0xF9F802D9);
	r0 = D(r0, s0_2_0, 0xF8FCF92D, 0xF0E6F006, 0xFF16FE09, 0xF9010446);
	r1 = D(r1, s0_2_0, 0x0400FB09, 0xDE1022BA, 0x03080A22, 0xC6FB158D);
	r2 = D(r2, s0_2_0, 0xF400E8E7, 0xFB09F6DD, 0x0CF6FB3C, 0xEC11E681);
	r3 = D(r3, s0_2_0, 0x00FBF840, 0xFFFBFE07, 0x0001FEF6, 0x19FFE60B);
	r4 = D(r4, s0_2_0, 0x02CE08F5, 0x00FD025D, 0xE8FEF510, 0xDF031811);
	r5 = D(r5, s0_2_0, 0xFFF8F8FA, 0x03FD0813, 0x0C141709, 0x0A13FC07);
	r6 = D(r6, s0_2_0, 0x0AE60797, 0x170AD6E7, 0xF51E0CB2, 0x00E7F40A);
	r7 = D(r7, s0_2_0, 0xFEFAE5FC, 0xF0FE0EF2, 0x0DFA04C2, 0xFEFFFBFB);
	r0 = D(r0, s0_2_1, 0x1519F3B7, 0xFAE7F220, 0x0E041A1E, 0xF701EBD0);
	r1 = D(r1, s0_2_1, 0xFD010004, 0xC30FECCB, 0x04021A05, 0xD8110EAF);
	r2 = D(r2, s0_2_1, 0x00EE153D, 0xFBF4FCF7, 0xEB15F2C9, 0xCF0581D1);
	r3 = D(r3, s0_2_1, 0x0C060A4D, 0xFDFBEFF8, 0x06F607D7, 0xFB0DF99D);
	r4 = D(r4, s0_2_1, 0xEFDCF30C, 0xEBDA03D4, 0x0AEC1B31, 0x0C0207FC);
	r5 = D(r5, s0_2_1, 0x00101E0A, 0x02FF0200, 0xEAF4ECEC, 0xF0FBE39B);
	r6 = D(r6, s0_2_1, 0xED00F930, 0xA6E1031D, 0xE8001074, 0x07EC152F);
	r7 = D(r7, s0_2_1, 0x091608E7, 0x02E00456, 0xF4EFF6FB, 0x0001F2F2);
	r0 = D(r0, s0_2_2, 0xF20807BA, 0xFDEB02E8, 0xE904D84D, 0x0BFC1F34);
	r1 = D(r1, s0_2_2, 0x060004FC, 0x111201E2, 0xFA0007F9, 0x1800FB1C);
	r2 = D(r2, s0_2_2, 0xEBEDF315, 0xFDFD0D06, 0xEE0B1AED, 0x26F5D281);
	r3 = D(r3, s0_2_2, 0xFEFEFE18, 0xFE00F00D, 0xFAFD11DF, 0xFC08026A);
	r4 = D(r4, s0_2_2, 0xEFF6261F, 0x07D9187F, 0x0A01FE1A, 0xF30DECE0);
	r5 = D(r5, s0_2_2, 0x01FDF6FA, 0xFA02F7F2, 0x010A0B02, 0x0E0B060F);
	r6 = D(r6, s0_2_2, 0xFE1CEFE5, 0x1B02DEFE, 0x0003E705, 0x04FEE500);
	r7 = D(r7, s0_2_2, 0x0BF61DCB, 0xFF11F3C5, 0x0403FED7, 0xFA0301FE);
	r0 = D(r0, s1_0_0, 0xFC250001, 0xF904FA0E, 0x113202F5, 0x07DEE303);
	r1 = D(r1, s1_0_0, 0x00000000, 0xEBF607F3, 0x03020205, 0x06EB12D9);
	r2 = D(r2, s1_0_0, 0xCDCF1504, 0x08030202, 0xC1ECEDF5, 0x2BFE060F);
	r3 = D(r3, s1_0_0, 0xF2090808, 0xFF0203FF, 0x0400F903, 0x041E10FF);
	r4 = D(r4, s1_0_0, 0x06E9FBF9, 0xFDECF526, 0x22D3EAD3, 0x0A90D337);
	r5 = D(r5, s1_0_0, 0xFF03FE02, 0x01000100, 0xF8020503, 0xF9F70004);
	r6 = D(r6, s1_0_0, 0xECEC04EE, 0xE9020004, 0xE80F0CFA, 0xFCE0E7F1);
	r7 = D(r7, s1_0_0, 0x090A100B, 0x0710101B, 0xF3F90F02, 0x020003FF);
	r0 = D(r0, s1_0_1, 0xE3E3EC0D, 0x16FF0B0E, 0x2416E102, 0x1313F516);
	r1 = D(r1, s1_0_1, 0xFFF90003, 0xC20FEA1C, 0xFBFEFC03, 0xF119FB04);
	r2 = D(r2, s1_0_1, 0x3DC702D8, 0x04F118FE, 0x180822E4, 0x18FFEB1D);
	r3 = D(r3, s1_0_1, 0x0202F8FE, 0x0503FEFD, 0xFC02F801, 0xFCFF0612);
	r4 = D(r4, s1_0_1, 0x1AFBF812, 0xF2C0EA2C, 0x28B33103, 0xBE16C124);
	r5 = D(r5, s1_0_1, 0xFF0200F8, 0x00FC0204, 0x0F1704FF, 0x0B0B10F6);
	r6 = D(r6, s1_0_1, 0xF0D92DDE, 0x02F8FC01, 0x0AF60206, 0x00FFFFFA);
	r7 = D(r7, s1_0_1, 0xEEF4EFF6, 0xF5DCEEF4, 0xF512FEFF, 0x040209FF);
	r0 = D(r0, s1_0_2, 0xFCFE02FE, 0x14FEFD03, 0xB310C2E9, 0x10E8FCFD);
	r1 = D(r1, s1_0_2, 0xFF020A00, 0xD001DEFF, 0xF3F8FAFB, 0x110EFC09);
	r2 = D(r2, s1_0_2, 0xFCF309F3, 0x0EFA1406, 0x0BDE1528, 0xFAFBF3EB);
	r3 = D(r3, s1_0_2, 0xFCFD08FD, 0x0204FE02, 0xF7FE0007, 0xF3FF090F);
	r4 = D(r4, s1_0_2, 0x0908F309, 0xED11091F, 0x0EE90C2D, 0x22010504);
	r5 = D(r5, s1_0_2, 0x020A0803, 0x00020102, 0xFD140609, 0x1100050B);
	r6 = D(r6, s1_0_2, 0xF3F6260B, 0xF7170811, 0x12CCF303, 0xF4FB0AFE);
	r7 = D(r7, s1_0_2, 0xEE270905, 0x031312EE, 0xF8F20B03, 0x02FDFB07);
	r0 = D(r0, s1_1_0, 0x19FFCC09, 0xF2C7FA16, 0x0528F996, 0xF2C40126);
	r1 = D(r1, s1_1_0, 0x0106FFFA, 0xC3074310, 0xFB1CFDF3, 0x0F130A2E);
	r2 = D(r2, s1_1_0, 0x1B2BE200, 0x04F500F7, 0xFAFEFADF, 0xD201EE1D);
	r3 = D(r3, s1_1_0, 0xFA16F10E, 0xFFFF0201, 0x01FC09F8, 0x03000318);
	r4 = D(r4, s1_1_0, 0xE3FAF0FC, 0x0A0F0B16, 0x0221F5F6, 0xE1F74AE6);
	r5 = D(r5, s1_1_0, 0xFCF0FE0B, 0x00000101, 0x0219F8FF, 0x0A0BFF13);
	r6 = D(r6, s1_1_0, 0xF41CC3DD, 0x0AFD08FF, 0x0B0D0CDB, 0x0B1F1403);
	r7 = D(r7, s1_1_0, 0x02FD04E6, 0x161A2902, 0x05F0EAFD, 0x00F9FE07);
	r0 = D(r0, s1_1_1, 0x13EDDFF3, 0x1B05E321, 0x2CB52414, 0x14F70208);
	r1 = D(r1, s1_1_1, 0xFF0DDCF8, 0xEDEEFFF8, 0x04FBFD01, 0xA4F8C8F2);
	r2 = D(r2, s1_1_1, 0xFD21DC04, 0xEF060DFC, 0x1C04DBE9, 0x0BEDEBE0);
	r3 = D(r3, s1_1_1, 0x04F0FFF7, 0x06F60007, 0xFCF425FB, 0xD4EBCDED);
	r4 = D(r4, s1_1_1, 0x122713FB, 0x021ADA2D, 0xE206D7DE, 0x9B1C16FD);
	r5 = D(r5, s1_1_1, 0x05F9080F, 0xFAFFFFFC, 0x0EE9F6E0, 0x1B10FAED);
	r6 = D(r6, s1_1_1, 0x04EEE6BD, 0x031A1608, 0xEFF4E8F3, 0xD6FA32E9);
	r7 = D(r7, s1_1_1, 0xF308B806, 0xFFF2FCFE, 0x060CFC04, 0xFCFE1A03);
	r0 = D(r0, s1_1_2, 0xE8163007, 0xDF17F80F, 0x160F4D2B, 0xE1E5E402);
	r1 = D(r1, s1_1_2, 0xFEF5EDFF, 0x0504EB15, 0x01F50004, 0xD7E2ED03);
	r2 = D(r2, s1_1_2, 0x0EF619E7, 0xFA10FBF6, 0xFA3703DF, 0xE1C9101C);
	r3 = D(r3, s1_1_2, 0x06F40B0C, 0xF702F9FC, 0xFF0F0B07, 0x1FF104FE);
	r4 = D(r4, s1_1_2, 0xE4CEF300, 0x0DDAC709, 0xE61EEAEF, 0x0612E40F);
	r5 = D(r5, s1_1_2, 0xFDFC0B01, 0xFDFEFA00, 0xF71DF4F9, 0xEE20EDF9);
	r6 = D(r6, s1_1_2, 0xDE0C2BF0, 0x0DF603F8, 0x00E3EFF3, 0x2E17F4F3);
	r7 = D(r7, s1_1_2, 0xE8FD04FA, 0xEE0A2110, 0xFF1FFD05, 0xFF0BF9FE);
	r0 = D(r0, s1_2_0, 0xFAFBF0F4, 0xEDED14FD, 0xF6041DED, 0xF7150ED2);
	r1 = D(r1, s1_2_0, 0xFFFE04FA, 0xDD16EAA6, 0xFEF50903, 0x1CFAFF1E);
	r2 = D(r2, s1_2_0, 0x090509EA, 0x01FFF3F9, 0x06FB1501, 0x0511D8F1);
	r3 = D(r3, s1_2_0, 0x030BF907, 0x0302FDFF, 0xFAFDFAF8, 0x10F61FFB);
	r4 = D(r4, s1_2_0, 0x01FC07FA, 0x0AE20AF4, 0x0B0C0FE3, 0xFE1EC1B4);
	r5 = D(r5, s1_2_0, 0xFF05FA04, 0x020307FB, 0x001D0603, 0xF4FF00E9);
	r6 = D(r6, s1_2_0, 0xF60AEC0B, 0xD10704F5, 0x0C05F7E2, 0x170AF71F);
	r7 = D(r7, s1_2_0, 0x00DD11F8, 0x1006F0FD, 0xFCF10007, 0xFE04F608);
	r0 = D(r0, s1_2_1, 0xFD0BFEF9, 0x12E90D04, 0x070B05EE, 0x03E6F607);
	r1 = D(r1, s1_2_1, 0x06FCF7FE, 0xF61914CF, 0x0300FA0D, 0xD8DB27F0);
	r2 = D(r2, s1_2_1, 0xD7C7FE20, 0x150302F7, 0xFD1A0105, 0xAB08DC05);
	r3 = D(r3, s1_2_1, 0x16ECFC0B, 0xF6FFFBFA, 0xFC140411, 0x17FB14F4);
	r4 = D(r4, s1_2_1, 0x07B20B17, 0xED1607E9, 0x15F21206, 0x08F7130A);
	r5 = D(r5, s1_2_1, 0x010A04E9, 0xFCF01505, 0x08E40E02, 0xF8F9F805);
	r6 = D(r6, s1_2_1, 0xD1F515E5, 0xFAE3000A, 0xF907EB0C, 0x04FCE91B);
	r7 = D(r7, s1_2_1, 0x0E0BF3F1, 0xF50312ED, 0x05E9BCFD, 0xF5010603);
	r0 = D(r0, s1_2_2, 0x23141AF1, 0xECF7FC05, 0xF7FF07F5, 0x080913FF);
	r1 = D(r1, s1_2_2, 0xFFFE0601, 0xF50A101A, 0x07FD0603, 0xEDEA090F);
	r2 = D(r2, s1_2_2, 0x0CFC08EF, 0x0801FF01, 0x0705F0EB, 0xE6F60004);
	r3 = D(r3, s1_2_2, 0xED06FAFE, 0x01FB0605, 0xFA04FA0A, 0xEA1AFF03);
	r4 = D(r4, s1_2_2, 0x20F9E80F, 0x0107CE0C, 0x0C18DA00, 0x15E90409);
	r5 = D(r5, s1_2_2, 0x0203F603, 0x00030D01, 0x040020E9, 0x01E109F6);
	r6 = D(r6, s1_2_2, 0xEF19FDF2, 0xFF1403F5, 0xF1031D16, 0x16030401);
	r7 = D(r7, s1_2_2, 0xF31E18EA, 0x22051EE9, 0xFB200AF6, 0xFEFFF9FD);
	s0_0_0 = G[2][xy.y+0][xy.x+0]; s0_0_1 = G[2][xy.y+0][xy.x+1];
	s0_0_2 = G[2][xy.y+0][xy.x+2]; s0_1_0 = G[2][xy.y+1][xy.x+0];
	s0_1_1 = G[2][xy.y+1][xy.x+1]; s0_1_2 = G[2][xy.y+1][xy.x+2];
	s0_2_0 = G[2][xy.y+2][xy.x+0]; s0_2_1 = G[2][xy.y+2][xy.x+1];
	s0_2_2 = G[2][xy.y+2][xy.x+2]; s1_0_0 = G[3][xy.y+0][xy.x+0];
	s1_0_1 = G[3][xy.y+0][xy.x+1]; s1_0_2 = G[3][xy.y+0][xy.x+2];
	s1_1_0 = G[3][xy.y+1][xy.x+0]; s1_1_1 = G[3][xy.y+1][xy.x+1];
	s1_1_2 = G[3][xy.y+1][xy.x+2]; s1_2_0 = G[3][xy.y+2][xy.x+0];
	s1_2_1 = G[3][xy.y+2][xy.x+1]; s1_2_2 = G[3][xy.y+2][xy.x+2];
	r0 = D(r0, s0_0_0, 0x16112B0E, 0x0E000103, 0x0F0FD6FD, 0x101103F8);
	r1 = D(r1, s0_0_0, 0xFD04FE02, 0x060304F1, 0xFFFFF902, 0xEDF9C90B);
	r2 = D(r2, s0_0_0, 0xED040215, 0x0A040213, 0xF70727FA, 0x1113D602);
	r3 = D(r3, s0_0_0, 0x0409F80A, 0xFEFEFFFE, 0xFD0A0A09, 0x00081215);
	r4 = D(r4, s0_0_0, 0xFD05EE0D, 0xE816FAEF, 0x18EF4504, 0xEEF7E6DC);
	r5 = D(r5, s0_0_0, 0x0207FEFF, 0x00FF0101, 0xFB0FFBFA, 0x0DFFF9F8);
	r6 = D(r6, s0_0_0, 0xD3F5D2F0, 0x010FFEF6, 0xEDF81A09, 0x18E21304);
	r7 = D(r7, s0_0_0, 0x05FF0DFB, 0x050E28FE, 0xFFF803FD, 0x00FE06FD);
	r0 = D(r0, s0_0_1, 0x0F0D25FE, 0xFDF3FDFF, 0x3FFF340D, 0xDEF60EF3);
	r1 = D(r1, s0_0_1, 0xF400F404, 0x970EFDF8, 0xFF03F809, 0xD1FA021E);
	r2 = D(r2, s0_0_1, 0x130B11F8, 0xF902FD01, 0x0BF2B028, 0x12101C23);
	r3 = D(r3, s0_0_1, 0xFF06060D, 0x03FD08F8, 0x01FA0A0A, 0xED0C2706);
	r4 = D(r4, s0_0_1, 0x17E416F6, 0x8119C0CE, 0xEEE1F60A, 0x81C115D3);
	r5 = D(r5, s0_0_1, 0xFF00FAFF, 0x01030100, 0xF0FE0207, 0xFBF201F9);
	r6 = D(r6, s0_0_1, 0x000B0AFC, 0x0FFDF5F6, 0xEC0605E0, 0xD8DCF0F5);
	r7 = D(r7, s0_0_1, 0x190DE80F, 0xEA10000B, 0x01082C1E, 0x010109FD);
	r0 = D(r0, s0_0_2, 0x19070FFD, 0x01F30312, 0xEE11FDF5, 0x0400F9F4);
	r1 = D(r1, s0_0_2, 0x0DFB07FD, 0x280E0EFA, 0x060603F9, 0x2814090A);
	r2 = D(r2, s0_0_2, 0x0E09FADD, 0x000A0F05, 0x23E8F2DA, 0x0FE9DFF6);
	r3 = D(r3, s0_0_2, 0x01F501FD, 0x01FFFD01, 0xDDFCF9FD, 0xFAFAF30B);
	r4 = D(r4, s0_0_2, 0x0CF3FB0E, 0x231501DF, 0xFB17DF28, 0x2A130D07);
	r5 = D(r5, s0_0_2, 0xF8FCFB05, 0x02010200, 0xF10AF103, 0x02FB0204);
	r6 = D(r6, s0_0_2, 0x270405E6, 0x06FDFA0E, 0xF5FFF5FC, 0xD6FC08F4);
	r7 = D(r7, s0_0_2, 0x0AF71A0F, 0x231402DC, 0x08FB08FA, 0xFCFEFF00);
	r0 = D(r0, s0_1_0, 0xD90CCD15, 0x08130B17, 0xF6F6EAEF, 0x02F006F4);
	r1 = D(r1, s0_1_0, 0x020105FC, 0xFD22EBFB, 0x0203F8FD, 0xFEF7E222);
	r2 = D(r2, s0_1_0, 0xF6F2F1E3, 0x06FC0A07, 0xF0FFF1F3, 0xFCFF10D4);
	r3 = D(r3, s0_1_0, 0x06FC1803, 0x04000900, 0xF608EF08, 0x160E05FA);
	r4 = D(r4, s0_1_0, 0x0AE11A00, 0xF507E104, 0x0C15EA0C, 0x2C22D702);
	r5 = D(r5, s0_1_0, 0xFFFF01FD, 0x02FFFFFF, 0x0507E8ED, 0xF4FBEFFE);
	r6 = D(r6, s0_1_0, 0xF3E9100F, 0x04E8F804, 0x01FB2901, 0x1315F508);
	r7 = D(r7, s0_1_0, 0xEE05E801, 0x0C2BF0F3, 0x19061B15, 0x0203FEFD);
	r0 = D(r0, s0_1_1, 0x10EFEF3E, 0xF502081C, 0x0A0FCEE8, 0x0A08DF1A);
	r1 = D(r1, s0_1_1, 0x01F603FE, 0xEF17C5D5, 0x0A01F116, 0xDFE00B02);
	r2 = D(r2, s0_1_1, 0xDEF01415, 0xFEED1003, 0xECEE14EF, 0xEB1FE9D3);
	r3 = D(r3, s0_1_1, 0x0A0B020D, 0xED00FEF6, 0x0D00F515, 0x19F413EB);
	r4 = D(r4, s0_1_1, 0xEC000DF9, 0x01F100F4, 0xFFE6E3FC, 0xF6E411BE);
	r5 = D(r5, s0_1_1, 0xF301F207, 0x04FF0502, 0x040CFD01, 0x0CDC3BF7);
	r6 = D(r6, s0_1_1, 0xE2FD04F8, 0xF8F9E2C8, 0x09E6EBD0, 0x04F8EC05);
	r7 = D(r7, s0_1_1, 0xEAF00B1B, 0xF5E2D724, 0xDCF52104, 0xF908FF02);
	r0 = D(r0, s0_1_2, 0x14BDF9B3, 0xFC01F819, 0xE9DD03C5, 0xF202F8D1);
	r1 = D(r1, s0_1_2, 0x0609FA26, 0x1EFEF710, 0x0402FB0C, 0xFF0AFDE5);
	r2 = D(r2, s0_1_2, 0x0FF00CFB, 0xFE0C0602, 0x2E0C1919, 0x0CEFF9F3);
	r3 = D(r3, s0_1_2, 0xF9EAFCF8, 0xFE0000FE, 0xEEF9F6F6, 0x29EB0BE6);
	r4 = D(r4, s0_1_2, 0xDAFFF2F0, 0xDA060A0D, 0x0A0F00FC, 0xF0FAFBF2);
	r5 = D(r5, s0_1_2, 0xFF0002EF, 0xF70400FA, 0xEFF3F2F6, 0xBDF3FED6);
	r6 = D(r6, s0_1_2, 0xF105031D, 0x18ECF215, 0x0505DDF7, 0xF30BF7F5);
	r7 = D(r7, s0_1_2, 0x090D2522, 0xF327F2F1, 0x18F2FCFD, 0xFDFC0902);
	r0 = D(r0, s0_2_0, 0xF4FEF900, 0xF8011EFF, 0x15D31FF7, 0xF8EEFBEB);
	r1 = D(r1, s0_2_0, 0x05020102, 0xED2703FE, 0x03FFFFF8, 0x1D092DFD);
	r2 = D(r2, s0_2_0, 0xFA0B00FC, 0xFC03FF07, 0x050A12F4, 0x0AF7F51E);
	r3 = D(r3, s0_2_0, 0x06F5FA0F, 0x03010002, 0x000CF9FD, 0xFE0603FD);
	r4 = D(r4, s0_2_0, 0x04F51700, 0xE30C16F2, 0x03FEEF07, 0x0303DD01);
	r5 = D(r5, s0_2_0, 0x0C060603, 0x020002FD, 0xF80205EF, 0xFD02EFF5);
	r6 = D(r6, s0_2_0, 0x05F90D03, 0xFCD92023, 0xFF09B6F8, 0x0F060813);
	r7 = D(r7, s0_2_0, 0xEBEF05F7, 0x0EE0F9FF, 0xFB060004, 0xFA05FDFF);
	r0 = D(r0, s0_2_1, 0xFAD90A08, 0x15E9E92C, 0x12FBFCFF, 0x05E0FF15);
	r1 = D(r1, s0_2_1, 0x00FD0302, 0xD4D317EF, 0xFF010905, 0x110908E2);
	r2 = D(r2, s0_2_1, 0xFD0404F8, 0x09F7FC0C, 0xFA1D0EEA, 0xE2EDD8C2);
	r3 = D(r3, s0_2_1, 0x000E09F5, 0xFD080303, 0x09F40704, 0x0C12DDED);
	r4 = D(r4, s0_2_1, 0xEC18061A, 0xC9E02DFE, 0xF818F313, 0x170800FC);
	r5 = D(r5, s0_2_1, 0x00FDFE0E, 0xFE07FC00, 0x1709FCF6, 0x012416F2);
	r6 = D(r6, s0_2_1, 0xFA190D05, 0x07DD1EEA, 0x2217DF00, 0x051D1210);
	r7 = D(r7, s0_2_1, 0xF50713F5, 0xE90100CE, 0x04F6030A, 0xFF08FDFC);
	r0 = D(r0, s0_2_2, 0x08F0DB1F, 0xF8120E0D, 0xF5E3E5F3, 0x001614F6);
	r1 = D(r1, s0_2_2, 0x02FC00F9, 0xF7FF02D8, 0x00FA0006, 0x0ADBF4CB);
	r2 = D(r2, s0_2_2, 0xFFFF00F6, 0x03FB0316, 0xFBE90D05, 0x00FFFD11);
	r3 = D(r3, s0_2_2, 0xFF06FDF1, 0x040502F6, 0xFA06FB19, 0xFFEE0AC0);
	r4 = D(r4, s0_2_2, 0x0802F307, 0xF9DBE107, 0x05D3FAF5, 0x040FF40B);
	r5 = D(r5, s0_2_2, 0x02FB041D, 0xFEFD05DE, 0x05F516BD, 0x1117F7E8);
	r6 = D(r6, s0_2_2, 0xEA02E40A, 0x06240A13, 0x06191902, 0xFC13F40E);
	r7 = D(r7, s0_2_2, 0x130CFCEE, 0x0DE3F4F3, 0xFDFCEB16, 0x020BFE00);
	r0 = D(r0, s1_0_0, 0x09FDF80D, 0x0B01FFFB, 0x0E0BEA18, 0xF8F409F0);
	r1 = D(r1, s1_0_0, 0xFDFEFCFE, 0xECF60023, 0xFC03FA05, 0x0306F002);
	r2 = D(r2, s1_0_0, 0x15FCF402, 0x06FB0B04, 0x03FC0A0F, 0xFC0DFBF1);
	r3 = D(r3, s1_0_0, 0x1106FEF4, 0x010101FF, 0xFFFFFCF5, 0x0003FBFC);
	r4 = D(r4, s1_0_0, 0xFD03FEE4, 0xEFE71215, 0xEAEC0BB2, 0x008B1B26);
	r5 = D(r5, s1_0_0, 0xFEFF05FA, 0x0001FF02, 0xFBFB0FFC, 0x0904E606);
	r6 = D(r6, s1_0_0, 0x0CFDFBD2, 0xFEFEFEF3, 0x04FF1101, 0x04F504F8);
	r7 = D(r7, s1_0_0, 0xFCFF0011, 0x0BE6FEFC, 0x0401FDFB, 0xFE030101);
	r0 = D(r0, s1_0_1, 0xFFFE1CEF, 0x14070F1D, 0xDB0625F0, 0x1A0115F8);
	r1 = D(r1, s1_0_1, 0x0B060100, 0x140AF614, 0x03FFFC09, 0xF8180516);
	r2 = D(r2, s1_0_1, 0xFBF9F0EC, 0xEE060C1A, 0x32F20BFE, 0xF10303EC);
	r3 = D(r3, s1_0_1, 0x0B05FF0D, 0x060002FD, 0xF4FF020E, 0xFE040CFE);
	r4 = D(r4, s1_0_1, 0xD9F921FC, 0x0DF2FCFF, 0xEDEC17EB, 0x8105FE0C);
	r5 = D(r5, s1_0_1, 0xF90103FE, 0x01000000, 0xFDFFF7FF, 0x060BFE0A);
	r6 = D(r6, s1_0_1, 0xEB0406FC, 0xF5FEFCFB, 0xF0FE28E4, 0x07FCFAEC);
	r7 = D(r7, s1_0_1, 0x1005FBFA, 0x2AF21406, 0xF90C0605, 0xF6FD00FE);
	r0 = D(r0, s1_0_2, 0xE3E800F4, 0x1000FD17, 0xF5F0DBF8, 0x1303F905);
	r1 = D(r1, s1_0_2, 0x9C0406FF, 0xF703FA0D, 0x0000FF07, 0x0008041D);
	r2 = D(r2, s1_0_2, 0xFF0317D6, 0xDDFE1DF8, 0x812A1A14, 0xFBFB1300);
	r3 = D(r3, s1_0_2, 0xF8040710, 0x0400FEFD, 0x03FCFA13, 0xDD12FC0B);
	r4 = D(r4, s1_0_2, 0x2D04E6EE, 0x1EFBECF6, 0xFFF92DD6, 0x1EFC110A);
	r5 = D(r5, s1_0_2, 0x1100FD00, 0xFD020000, 0xE80900FC, 0x2803F8FF);
	r6 = D(r6, s1_0_2, 0xDEFFF9F8, 0xF6FE0502, 0xB10DE4E5, 0x18F9EC20);
	r7 = D(r7, s1_0_2, 0xE0FB0302, 0x02F92112, 0xC9FBF8F9, 0x1903FD02);
	r0 = D(r0, s1_1_0, 0x0112C7F2, 0x03F8F603, 0xFD03CBEE, 0x06D02004);
	r1 = D(r1, s1_1_0, 0xFF050301, 0xF2FCFFF2, 0x00FF06FB, 0x0F070004);
	r2 = D(r2, s1_1_0, 0xF713E50B, 0x0CF90609, 0xFCF603F6, 0xE5F70918);
	r3 = D(r3, s1_1_0, 0x051109EB, 0x00FE0103, 0xF9070000, 0xF3120802);
	r4 = D(r4, s1_1_0, 0x000300D8, 0xFFF300FA, 0xECEA0F0D, 0xFAC1F2AE);
	r5 = D(r5, s1_1_0, 0x03FDFF03, 0x00010201, 0x110BF1FE, 0xFD03E302);
	r6 = D(r6, s1_1_0, 0x05F00511, 0x08FE050C, 0x0F1FF7EA, 0xFE020BFD);
	r7 = D(r7, s1_1_0, 0xFA05F7FF, 0xFCF2F7F9, 0xEFF107F5, 0xFCF9FC01);
	r0 = D(r0, s1_1_1, 0x05FBFEBC, 0xEA0FEFFB, 0x0F12DC13, 0xFEC3F1FA);
	r1 = D(r1, s1_1_1, 0xFE02FF04, 0xFB22D4F9, 0x0CFBFCFA, 0xFFED01EE);
	r2 = D(r2, s1_1_1, 0x0C0F0E10, 0xF5130112, 0xF8D9D6CC, 0x04DCFF2D);
	r3 = D(r3, s1_1_1, 0x00ED0AF8, 0xFC01FDFE, 0x070202F7, 0xFDCA21FD);
	r4 = D(r4, s1_1_1, 0x07C413EF, 0x151AFEFA, 0xF2040511, 0xE719EA15);
	r5 = D(r5, s1_1_1, 0x07F6FEF5, 0xF4F805FD, 0x14F0EDFB, 0xEC03FEF2);
	r6 = D(r6, s1_1_1, 0x1504F301, 0x0E14F246, 0xF1D12A08, 0x051C0B10);
	r7 = D(r7, s1_1_1, 0x12FEF9EC, 0x021FB4E8, 0x070B20F8, 0x01FDF808);
	r0 = D(r0, s1_1_2, 0xF3FCF4F3, 0xF9110EEC, 0xE61D15F5, 0xF000010C);
	r1 = D(r1, s1_1_2, 0xF7E6E0ED, 0xEA17DD0E, 0xFE0302F4, 0xFA14C6E0);
	r2 = D(r2, s1_1_2, 0xFECDEEF4, 0xF20210E0, 0x04B18118, 0x13F0F801);
	r3 = D(r3, s1_1_2, 0x03020802, 0x07FE0102, 0xF60E1104, 0x96FAEBD9);
	r4 = D(r4, s1_1_2, 0xF323F203, 0xDFF70BF5, 0x12F80C01, 0xF2EC23E6);
	r5 = D(r5, s1_1_2, 0x2FFD06FF, 0x65FCFE01, 0x0D0C07E9, 0x13FEE90B);
	r6 = D(r6, s1_1_2, 0xDB02F718, 0xF904010A, 0xFFF4CEEE, 0x111312F9);
	r7 = D(r7, s1_1_2, 0x11F9DCC7, 0x1781E4E8, 0x9ADF0FEF, 0xEFFE0012);
	r0 = D(r0, s1_2_0, 0xFE0A0216, 0x03051704, 0x08FD0DEF, 0x01FC0116);
	r1 = D(r1, s1_2_0, 0x0205FB03, 0xFAF909F1, 0x01FF0400, 0x0402F817);
	r2 = D(r2, s1_2_0, 0x08DEDB07, 0x0008F400, 0xFFEC090A, 0x020A0C11);
	r3 = D(r3, s1_2_0, 0x000BF6E7, 0x01FDFC00, 0xFF0208FD, 0x0804FA18);
	r4 = D(r4, s1_2_0, 0xFE0C0A14, 0xFFEF13F9, 0x0602FB1A, 0xFFEAFCF8);
	r5 = D(r5, s1_2_0, 0xFB000AFB, 0x01010103, 0xFC01F9F5, 0x0805FE08);
	r6 = D(r6, s1_2_0, 0xFDFD04EE, 0x02FAF709, 0xFDFEF3FE, 0xFAE9F600);
	r7 = D(r7, s1_2_0, 0x030A0804, 0x04EC0A13, 0x07FD001A, 0xFF030B00);
	r0 = D(r0, s1_2_1, 0x0B0EF8FC, 0x03050EF6, 0xFFFEE8E5, 0x0081E6F9);
	r1 = D(r1, s1_2_1, 0x01FF0400, 0xF0F0F7FB, 0xFF81D2FA, 0xF3810FE0);
	r2 = D(r2, s1_2_1, 0xFC291307, 0x01000D08, 0x1001E410, 0x011B231B);
	r3 = D(r3, s1_2_1, 0xFCFBF9F2, 0x044F0A08, 0x05EFF3F3, 0x06AC0517);
	r4 = D(r4, s1_2_1, 0xFAE3E620, 0x1006E9EF, 0x0803E8FD, 0xF931F2FC);
	r5 = D(r5, s1_2_1, 0x03FDE9FE, 0x02EA0B03, 0xF8D7F605, 0x02E711FE);
	r6 = D(r6, s1_2_1, 0x07180516, 0x08EB063A, 0xFF81EE0E, 0xF9F804FB);
	r7 = D(r7, s1_2_1, 0xFE15F511, 0x021F16FD, 0x051618FC, 0x03E60E00);
	r0 = D(r0, s1_2_2, 0x0DF20F0F, 0xFDBE37F8, 0xFD0A130C, 0x0826220C);
	r1 = D(r1, s1_2_2, 0x0004FA00, 0xF7072DF7, 0x08E1FEFD, 0xFFD415FD);
	r2 = D(r2, s1_2_2, 0xFDE90016, 0xF00801F4, 0x0612FD02, 0xF8FEEEEF);
	r3 = D(r3, s1_2_2, 0xFCFE0004, 0xFE2207F8, 0x0B2102FD, 0x009A24FB);
	r4 = D(r4, s1_2_2, 0x0A222007, 0x04EE0203, 0x0111ECFA, 0xFC050E0B);
	r5 = D(r5, s1_2_2, 0xFD10FF0D, 0x010E170A, 0x0A190EEA, 0xFA1A3509);
	r6 = D(r6, s1_2_2, 0x080A18E2, 0xF90420EA, 0xF9FEF806, 0xFE020AEF);
	r7 = D(r7, s1_2_2, 0xF6FAD4E8, 0x07DFF3EB, 0x050A2503, 0xFD0B04FC);
	s0_0_0 = G[4][xy.y+0][xy.x+0]; s0_0_1 = G[4][xy.y+0][xy.x+1];
	s0_0_2 = G[4][xy.y+0][xy.x+2]; s0_1_0 = G[4][xy.y+1][xy.x+0];
	s0_1_1 = G[4][xy.y+1][xy.x+1]; s0_1_2 = G[4][xy.y+1][xy.x+2];
	s0_2_0 = G[4][xy.y+2][xy.x+0]; s0_2_1 = G[4][xy.y+2][xy.x+1];
	s0_2_2 = G[4][xy.y+2][xy.x+2]; s1_0_0 = G[5][xy.y+0][xy.x+0];
	s1_0_1 = G[5][xy.y+0][xy.x+1]; s1_0_2 = G[5][xy.y+0][xy.x+2];
	s1_1_0 = G[5][xy.y+1][xy.x+0]; s1_1_1 = G[5][xy.y+1][xy.x+1];
	s1_1_2 = G[5][xy.y+1][xy.x+2]; s1_2_0 = G[5][xy.y+2][xy.x+0];
	s1_2_1 = G[5][xy.y+2][xy.x+1]; s1_2_2 = G[5][xy.y+2][xy.x+2];
	r0 = D(r0, s0_0_0, 0xF6EFF7F6, 0x05FB09ED, 0xCDDE1F00, 0xFF16FEF3);
	r1 = D(r1, s0_0_0, 0xFAFD03FC, 0x040CFB11, 0x03FBFD03, 0x1AF207F6);
	r2 = D(r2, s0_0_0, 0xEBEBFC12, 0x091007F7, 0xD3B6F4F2, 0x12F0060E);
	r3 = D(r3, s0_0_0, 0x08FA0903, 0xFFFEFD04, 0x03030602, 0x01EA11F5);
	r4 = D(r4, s0_0_0, 0x00FA07FF, 0xF522FC17, 0xFC02C0F0, 0xF1E58181);
	r5 = D(r5, s0_0_0, 0xFB0603FE, 0x01000100, 0xFA170AED, 0x00FBFBE6);
	r6 = D(r6, s0_0_0, 0xFE02E302, 0xF8F7F113, 0xF9E815D3, 0x0515E1D1);
	r7 = D(r7, s0_0_0, 0xFCFAEBF7, 0x0AE505FF, 0x0402FF01, 0x04FEFC07);
	r0 = D(r0, s0_0_1, 0xFAF9F125, 0xFC130C09, 0x03DCF80E, 0xE806F0F2);
	r1 = D(r1, s0_0_1, 0x00FAF9F9, 0x060A0713, 0xF3FDFE04, 0x1FEF150C);
	r2 = D(r2, s0_0_1, 0x03CFF2DA, 0xF50500F4, 0xE181F700, 0x04040A19);
	r3 = D(r3, s0_0_1, 0x0E120BF7, 0x030303FC, 0x05090207, 0xEB03E301);
	r4 = D(r4, s0_0_1, 0xFF1C07FA, 0x10F2FC14, 0x3AEE2400, 0x0FFDF210);
	r5 = D(r5, s0_0_1, 0x06FBFF03, 0xFF00FE00, 0x000AFCFE, 0x01ED02F4);
	r6 = D(r6, s0_0_1, 0x01ECEAFB, 0x14E608FF, 0xF40212CF, 0x07100DEC);
	r7 = D(r7, s0_0_1, 0xFB00EE12, 0x23C8F3FA, 0x0CF3FA18, 0xFC0106FA);
	r0 = D(r0, s0_0_2, 0x1007EEF1, 0xE70AFE05, 0x2105F600, 0x02070C05);
	r1 = D(r1, s0_0_2, 0xFCFEFBFF, 0x0C07F910, 0x00050305, 0xFB14F50F);
	r2 = D(r2, s0_0_2, 0x0EF9E1E9, 0x060BFDFD, 0xFFFE1724, 0xFE13E4EC);
	r3 = D(r3, s0_0_2, 0xF1F6F70D, 0xFD0200FE, 0xDCF1F91B, 0x01FFF3FC);
	r4 = D(r4, s0_0_2, 0xFE0E0C08, 0x09F8020B, 0xDFEB1108, 0x02C9F50C);
	r5 = D(r5, s0_0_2, 0xFEFEFFFF, 0xFEFEFF01, 0xE2FEF203, 0x1512F803);
	r6 = D(r6, s0_0_2, 0x0304FCFF, 0x040C07F7, 0xF005FAF6, 0x0C080608);
	r7 = D(r7, s0_0_2, 0xDE11F8FC, 0xCADFF6DF, 0x09040700, 0x09FFFF04);
	r0 = D(r0, s0_1_0, 0x04EFFFE2, 0xF20414FD, 0xEF350C00, 0xF9E20411);
	r1 = D(r1, s0_1_0, 0x02FF0705, 0xFC040F1B, 0xFAF10B04, 0xE2F81816);
	r2 = D(r2, s0_1_0, 0x03F0120C, 0xF9F204EA, 0x0E04DEED, 0x2207E95F);
	r3 = D(r3, s0_1_0, 0x00FDFAEF, 0x010AFCFE, 0xFC070D0E, 0xF6F9FBF2);
	r4 = D(r4, s0_1_0, 0xFEEAEBEB, 0xFF0CFBFF, 0xD51E0DFB, 0xDA2836FE);
	r5 = D(r5, s0_1_0, 0x0508EB10, 0x00FE0500, 0x0BD9F106, 0x0CFD09E9);
	r6 = D(r6, s0_1_0, 0x13DEF5F8, 0x0C0F1200, 0xD8C9F5CB, 0xFC15F0F3);
	r7 = D(r7, s0_1_0, 0x161B2C0F, 0xFF1CE6D3, 0x09E413EC, 0xF6FCF5F8);
	r0 = D(r0, s0_1_1, 0xEA0A1505, 0xFA121618, 0x0A13F806, 0xFA0711E0);
	r1 = D(r1, s0_1_1, 0x07D6F0E0, 0xEECAFCE5, 0x09F8FFFB, 0x151F08FF);
	r2 = D(r2, s0_1_1, 0xE1DCDE01, 0xF8ECF0E8, 0xCF81DC23, 0xE519D209);
	r3 = D(r3, s0_1_1, 0x5D0903F7, 0xFCFF00F6, 0xF4E7FF09, 0x21A30A16);
	r4 = D(r4, s0_1_1, 0x07030F0F, 0x81081E06, 0xAEF8DDFB, 0xE6FAF0F2);
	r5 = D(r5, s0_1_1, 0x03F70409, 0x02040102, 0xF4E2EDFC, 0xFE0D100A);
	r6 = D(r6, s0_1_1, 0x04DEB8D6, 0xDFE6EDF8, 0x812705FC, 0x1306113A);
	r7 = D(r7, s0_1_1, 0xF717DD17, 0xFD3BE61A, 0xF6DCE4E8, 0xF10B0602);
	r0 = D(r0, s0_1_2, 0xF1F2FE0F, 0xFE16FAF5, 0xDA04FB0B, 0x100A0AF5);
	r1 = D(r1, s0_1_2, 0xF509FD01, 0xC7FBF21A, 0x070300FB, 0xF4FC1006);
	r2 = D(r2, s0_1_2, 0xF8F70102, 0xF7FC0AF2, 0xFD06020E, 0xFA19FCDF);
	r3 = D(r3, s0_1_2, 0xFDFFFB02, 0xFF020305, 0xEFFCFB0F, 0x04F405E1);
	r4 = D(r4, s0_1_2, 0x03160A16, 0xF4070117, 0x081C0BF0, 0x13FDFA07);
	r5 = D(r5, s0_1_2, 0xFAFF0403, 0x02FB0201, 0xDDFD01F6, 0x09F8010B);
	r6 = D(r6, s0_1_2, 0x0AF70A05, 0x1B13120F, 0xCC0AF50B, 0x131EF31D);
	r7 = D(r7, s0_1_2, 0xF1F51C07, 0xEFF8EFEB, 0xF4F00C0B, 0x07FF0507);
	r0 = D(r0, s0_2_0, 0xF61906EA, 0x01DDF7FD, 0xF5E9DA0C, 0x11E6E304);
	r1 = D(r1, s0_2_0, 0x01FF03FF, 0xE6EF19C6, 0xFEFDE4F2, 0x00F8E009);
	r2 = D(r2, s0_2_0, 0x05281C11, 0x040BFA0D, 0xF40C1D08, 0xEE0335FC);
	r3 = D(r3, s0_2_0, 0x10FDF706, 0x01FE07FE, 0xF5080806, 0x05F716FA);
	r4 = D(r4, s0_2_0, 0xFB05F7EA, 0x1305DEF3, 0x12EAFEE8, 0xF5FCE5ED);
	r5 = D(r5, s0_2_0, 0x030C1010, 0xFFFEFDFA, 0x06062501, 0xFFFA0F07);
	r6 = D(r6, s0_2_0, 0xD0EC22F6, 0xF6F9FE0B, 0x1C1E1216, 0xF8190F14);
	r7 = D(r7, s0_2_0, 0xF6EBEC03, 0xF11A18FD, 0xFAE725EA, 0xFFFC02FE);
	r0 = D(r0, s0_2_1, 0xED010D17, 0x01F7DBC1, 0x05C3E0E7, 0x0FFC0C17);
	r1 = D(r1, s0_2_1, 0xFA030203, 0xFC031C14, 0x05070CFA, 0xE8DE15D5);
	r2 = D(r2, s0_2_1, 0x1F1CE418, 0xDEFC04FF, 0xE50E1A17, 0x9DEBFFEB);
	r3 = D(r3, s0_2_1, 0x08020909, 0x06FF0205, 0xF6F5F309, 0xE4080D24);
	r4 = D(r4, s0_2_1, 0xFFFD02FE, 0xFCF4DFD1, 0xEEFD090D, 0xFD010507);
	r5 = D(r5, s0_2_1, 0xF4E9FFEB, 0x001AFF0E, 0x0E19E10F, 0x01FC0E01);
	r6 = D(r6, s0_2_1, 0xB6CAFEDF, 0xE215F8E3, 0xEBF0FFEF, 0x01D8F512);
	r7 = D(r7, s0_2_1, 0x1309E808, 0xD9E7E4EE, 0xF30CFEFB, 0x04FF0306);
	r0 = D(r0, s0_2_2, 0x1B04EC0E, 0xFCFC1CF1, 0x0709F91E, 0xF3EFF3F7);
	r1 = D(r1, s0_2_2, 0x07FFFD00, 0xF215000F, 0x01FE01FC, 0xFA022213);
	r2 = D(r2, s0_2_2, 0x03F7F01F, 0xFCF8FEFA, 0x04120300, 0x4514FA2C);
	r3 = D(r3, s0_2_2, 0x06F9FD08, 0xFEFFFA00, 0x04091118, 0xFD0001EB);
	r4 = D(r4, s0_2_2, 0xE0070216, 0xFF0AEF14, 0x04101117, 0x03F6F7F7);
	r5 = D(r5, s0_2_2, 0x090BFF04, 0x03F800FD, 0xDDDCF1EB, 0xD7DCE70E);
	r6 = D(r6, s0_2_2, 0x0C04DFEF, 0xC00CFE0E, 0xF2EB020A, 0xF9C8F5F3);
	r7 = D(r7, s0_2_2, 0x14F8ECEC, 0xF2E4F9FC, 0x13110A12, 0x0002FF02);
	r0 = D(r0, s1_0_0, 0x100BEA09, 0xFBE30710, 0xC2E8F40D, 0x2000FB06);
	r1 = D(r1, s1_0_0, 0x0602FD04, 0x0F07FDF9, 0x03FDFD0B, 0xF7DBEFE1);
	r2 = D(r2, s1_0_0, 0x042D15F7, 0xF7FE0B09, 0xF904030C, 0x0E0B0808);
	r3 = D(r3, s1_0_0, 0xF705F8F2, 0xFEFD00FC, 0xFC06FE0D, 0x07F20FF2);
	r4 = D(r4, s1_0_0, 0x02F614F4, 0xF40A0908, 0xF7131DFD, 0x11837FFF);
	r5 = D(r5, s1_0_0, 0x050006FE, 0x000100FE, 0x030608FE, 0x0217FF0B);
	r6 = D(r6, s1_0_0, 0xFAE70308, 0x06FFFD08, 0xFAF9F107, 0xEFE71A07);
	r7 = D(r7, s1_0_0, 0x08FCFB13, 0xF5090218, 0x04040BE7, 0xFCFD02F6);
	r0 = D(r0, s1_0_1, 0x171606FA, 0xFE09EB16, 0xDDAFCA0D, 0x120B0FE4);
	r1 = D(r1, s1_0_1, 0x01040200, 0xD22BFBFE, 0x01070502, 0xF01109EF);
	r2 = D(r2, s1_0_1, 0x193B090F, 0x010FFC04, 0x3B8102B4, 0x04151BD5);
	r3 = D(r3, s1_0_1, 0xF914FF02, 0xFD01FF04, 0x06FA03F5, 0xF4FAF2F9);
	r4 = D(r4, s1_0_1, 0xE3CF1BF4, 0xEF2E0013, 0x34B30F1A, 0xF4FF1A18);
	r5 = D(r5, s1_0_1, 0x0000F701, 0x01010303, 0xFE18FBDA, 0x05F41106);
	r6 = D(r6, s1_0_1, 0x1D1E2A21, 0x090B08ED, 0xEC00EED6, 0x15EFFB1C);
	r7 = D(r7, s1_0_1, 0xEE2A021C, 0xEF07011B, 0xF92AFCD4, 0xFA01FFFE);
	r0 = D(r0, s1_0_2, 0xFD030CFA, 0x0AF8F6F5, 0x0CEE2604, 0xF4140111);
	r1 = D(r1, s1_0_2, 0x00FF000E, 0xF511EC09, 0xFF0EFE03, 0xFC19F1FB);
	r2 = D(r2, s1_0_2, 0x0B1FE5FE, 0x01EFFAF7, 0xF30FBB87, 0x0D183DEE);
	r3 = D(r3, s1_0_2, 0x08F00109, 0x0204FFFF, 0x15FE061B, 0x0E2DE90F);
	r4 = D(r4, s1_0_2, 0x02F2D71F, 0xDEF3090D, 0xB2E5E3F4, 0xE7E5E7F8);
	r5 = D(r5, s1_0_2, 0x06F209FE, 0xFE03FE04, 0x11110DE8, 0xFCFAF4F6);
	r6 = D(r6, s1_0_2, 0xF618F1F4, 0xF9F0080E, 0xFC15F41B, 0x07C503EA);
	r7 = D(r7, s1_0_2, 0xFDF809FD, 0x111D050E, 0x000AD1F8, 0x0401FEFE);
	r0 = D(r0, s1_1_0, 0xFD031DEE, 0x06040AF4, 0x05B5F905, 0xE50F0CEA);
	r1 = D(r1, s1_1_0, 0xF9FEFA00, 0x01A5F412, 0xF3F5FAFF, 0x031DE018);
	r2 = D(r2, s1_1_0, 0x101DE2F5, 0x0E0EF915, 0xDDFD170D, 0xE7E216F2);
	r3 = D(r3, s1_1_0, 0x021608F7, 0xFD0103FE, 0xFFF8F4F9, 0x0B0B03F5);
	r4 = D(r4, s1_1_0, 0xF21BF804, 0x2DBBDB19, 0xE143030F, 0x1D1AEFFA);
	r5 = D(r5, s1_1_0, 0x0D010303, 0xFF010001, 0xFC0101EB, 0xFB0F01F0);
	r6 = D(r6, s1_1_0, 0xEB07F80F, 0xFBF3DD05, 0x13152004, 0x00F5F712);
	r7 = D(r7, s1_1_0, 0x02E50604, 0xF5F60603, 0xEBEC080E, 0x06FF0607);
	r0 = D(r0, s1_1_1, 0x0021FCE5, 0xF1E31611, 0x0FED00F2, 0x17E502FC);
	r1 = D(r1, s1_1_1, 0x0CF9FFE4, 0x070DEBD2, 0xEB0302E6, 0x1AF803F9);
	r2 = D(r2, s1_1_1, 0xE98FFF09, 0xFDFEFFFD, 0xE714EAFB, 0xFDB6E310);
	r3 = D(r3, s1_1_1, 0xFBF00700, 0x0CF9F905, 0xFE13FAF1, 0x17D72A11);
	r4 = D(r4, s1_1_1, 0x2503FA16, 0xE6180EC4, 0xDD1606F3, 0x0F38090F);
	r5 = D(r5, s1_1_1, 0xF1F3FC01, 0x01030001, 0x0404E504, 0xFE13FE1B);
	r6 = D(r6, s1_1_1, 0x1FF2F7F4, 0x190CFBF7, 0x130F0567, 0x17F6E120);
	r7 = D(r7, s1_1_1, 0xECF5F7CE, 0x0CEE19F1, 0xFD091C17, 0xF801FF0F);
	r0 = D(r0, s1_1_2, 0x0700032E, 0xF2F7F1E0, 0xD3B9F6E7, 0x090FF821);
	r1 = D(r1, s1_1_2, 0xFE0701FE, 0xFB0C09F3, 0x0DFD0307, 0x0B08FF18);
	r2 = D(r2, s1_1_2, 0x1CEA0300, 0xEB0608FF, 0x1917E8D2, 0x08D8EEEB);
	r3 = D(r3, s1_1_2, 0x0A0A0008, 0xFD05FDFB, 0xE9020E0D, 0x0F02082C);
	r4 = D(r4, s1_1_2, 0xE6FE00FF, 0x00B90E23, 0xDCFD03EF, 0x11F7F6FC);
	r5 = D(r5, s1_1_2, 0xF2FD0109, 0x020301F8, 0x0AF20A1A, 0x33130418);
	r6 = D(r6, s1_1_2, 0xE0190D1F, 0xEEEF020C, 0x0DF70ECC, 0x01E8EBE9);
	r7 = D(r7, s1_1_2, 0xE745FA0C, 0xF4F1F2B8, 0x0E280B0E, 0xFE0AF7FC);
	r0 = D(r0, s1_2_0, 0xF801E406, 0x0E0907FE, 0xF2FB2AF3, 0x021407FD);
	r1 = D(r1, s1_2_0, 0x04FFFD03, 0xE8330510, 0x050B0308, 0xFB231DF5);
	r2 = D(r2, s1_2_0, 0x15FD29FA, 0x02FD1302, 0xFCF0090D, 0xD915AD18);
	r3 = D(r3, s1_2_0, 0x160E0101, 0xFB01FDFE, 0xFF06FE04, 0x0D02EEF4);
	r4 = D(r4, s1_2_0, 0xEB0D14F4, 0xEA011AFD, 0x1EF30005, 0xDAE3D608);
	r5 = D(r5, s1_2_0, 0xF2FE01FF, 0x01060002, 0x0BF60A0C, 0x0BFEFFF0);
	r6 = D(r6, s1_2_0, 0xF7FBF8ED, 0x140F02EA, 0x0EF1FA0B, 0xFDFEF3E3);
	r7 = D(r7, s1_2_0, 0x08E800F7, 0x08EDFBF8, 0x05ED06FB, 0xF9000100);
	r0 = D(r0, s1_2_1, 0x190C1802, 0xF4EB11EB, 0x2EE4EE1F, 0x1F16F2FD);
	r1 = D(r1, s1_2_1, 0xFAFF0003, 0x26F70E14, 0x21FC0800, 0x0FF31305);
	r2 = D(r2, s1_2_1, 0xB81EF0D5, 0xFF04FDEE, 0x1303EEF4, 0x1B16BA34);
	r3 = D(r3, s1_2_1, 0xFE0C01FB, 0xF8000102, 0x12F8F2F9, 0xE7F2020A);
	r4 = D(r4, s1_2_1, 0x090B070F, 0x30E90BFA, 0x01150501, 0x0C0BFA01);
	r5 = D(r5, s1_2_1, 0x0C08EEFD, 0xF9000300, 0xFFEE0E14, 0xF50FEDEA);
	r6 = D(r6, s1_2_1, 0xD5F40B01, 0xBD22EEFF, 0xDEE7DF43, 0x000BDB13);
	r7 = D(r7, s1_2_1, 0x1819FAF9, 0xE3D7F519, 0xEAE808F7, 0x000A0506);
	r0 = D(r0, s1_2_2, 0xF4FAF8F0, 0x19EE1F19, 0x170F1002, 0xE004060B);
	r1 = D(r1, s1_2_2, 0x03F80501, 0x01F8F40F, 0x050103FB, 0x21FA11EF);
	r2 = D(r2, s1_2_2, 0x120AF102, 0xFBE2F7FF, 0xF5CCF617, 0x091104F9);
	r3 = D(r3, s1_2_2, 0xEF070807, 0xFA06FF04, 0xE6090006, 0xED0A11D5);
	r4 = D(r4, s1_2_2, 0x150D0EEC, 0x0DC806E6, 0x0F38FC03, 0x1A07F30C);
	r5 = D(r5, s1_2_2, 0xF800F8FD, 0x03050203, 0xD8F9FE1B, 0xE100F40F);
	r6 = D(r6, s1_2_2, 0x02141A0C, 0x06F6F00E, 0x1BF31AC6, 0xF4EEFCEB);
	r7 = D(r7, s1_2_2, 0x35E7130A, 0x17EFE7EE, 0xED0B0303, 0xFF0BFE04);
	s0_0_0 = G[6][xy.y+0][xy.x+0]; s0_0_1 = G[6][xy.y+0][xy.x+1];
	s0_0_2 = G[6][xy.y+0][xy.x+2]; s0_1_0 = G[6][xy.y+1][xy.x+0];
	s0_1_1 = G[6][xy.y+1][xy.x+1]; s0_1_2 = G[6][xy.y+1][xy.x+2];
	s0_2_0 = G[6][xy.y+2][xy.x+0]; s0_2_1 = G[6][xy.y+2][xy.x+1];
	s0_2_2 = G[6][xy.y+2][xy.x+2]; s1_0_0 = G[7][xy.y+0][xy.x+0];
	s1_0_1 = G[7][xy.y+0][xy.x+1]; s1_0_2 = G[7][xy.y+0][xy.x+2];
	s1_1_0 = G[7][xy.y+1][xy.x+0]; s1_1_1 = G[7][xy.y+1][xy.x+1];
	s1_1_2 = G[7][xy.y+1][xy.x+2]; s1_2_0 = G[7][xy.y+2][xy.x+0];
	s1_2_1 = G[7][xy.y+2][xy.x+1]; s1_2_2 = G[7][xy.y+2][xy.x+2];
	r0 = D(r0, s0_0_0, 0x07FE29E4, 0x12FAF503, 0xD3094337, 0x02101904);
	r1 = D(r1, s0_0_0, 0x0003FCFF, 0x07060CF0, 0x030105FA, 0x06060EF2);
	r2 = D(r2, s0_0_0, 0xEB041712, 0x00F9FDFD, 0xF90F0A1B, 0xEC0DF510);
	r3 = D(r3, s0_0_0, 0x06FFF40A, 0x02FFFA03, 0xFDFC0AFA, 0x05FDEF04);
	r4 = D(r4, s0_0_0, 0xE5F9E2FF, 0x05052DE0, 0xE9FBF4D8, 0x38035CBC);
	r5 = D(r5, s0_0_0, 0xFB01F706, 0x02000102, 0x03000D08, 0xFA03FDFA);
	r6 = D(r6, s0_0_0, 0x0C03FF1F, 0x17FF0503, 0xE8F5E403, 0xFCFCF8FE);
	r7 = D(r7, s0_0_0, 0xFF0412E7, 0x0B0F0CF5, 0x08041503, 0x06FF0202);
	r0 = D(r0, s0_0_1, 0x0EFB0B0B, 0x1901E2FF, 0xF4DE0BED, 0x001CEE08);
	r1 = D(r1, s0_0_1, 0x0305170A, 0x0B121F42, 0xFF010000, 0x0FED2EDD);
	r2 = D(r2, s0_0_1, 0x03070317, 0x0BF3F00A, 0xB6FBD5E1, 0x0AF30208);
	r3 = D(r3, s0_0_1, 0x09F6EEF8, 0xFD02FC02, 0x00FBF6FB, 0xFC02D0FF);
	r4 = D(r4, s0_0_1, 0x00FA81FF, 0x210C0D14, 0x04E71EE4, 0x2450E015);
	r5 = D(r5, s0_0_1, 0xF7FC02FF, 0x0203FC00, 0x07151E02, 0xFB0EFD05);
	r6 = D(r6, s0_0_1, 0xFEE6300C, 0xFFFD03FE, 0xF330CA02, 0xFC0117F5);
	r7 = D(r7, s0_0_1, 0x0114150E, 0x28070B19, 0x13F1D8E5, 0x04FDF5F8);
	r0 = D(r0, s0_0_2, 0xE0FA2EF5, 0x01F9EF10, 0xF5F60EFD, 0x08F9E60A);
	r1 = D(r1, s0_0_2, 0x00FAF806, 0x21FEED08, 0xFDFDFD00, 0x0BF203FF);
	r2 = D(r2, s0_0_2, 0xF62007F8, 0x04F6F106, 0xCDBDFEED, 0xF703F70D);
	r3 = D(r3, s0_0_2, 0xFCF806F8, 0x04050301, 0x15FC02F9, 0x0405E414);
	r4 = D(r4, s0_0_2, 0x25EFE9FB, 0xF8180515, 0xDC0B08E0, 0xF40B0811);
	r5 = D(r5, s0_0_2, 0x0AFA06FF, 0x00000301, 0x01F3FBFF, 0xF8150A0D);
	r6 = D(r6, s0_0_2, 0xF209D0FF, 0x0804F404, 0xEF030E20, 0x02FA080F);
	r7 = D(r7, s0_0_2, 0x14EF28FC, 0xDDFC24FD, 0x0BFAC4F9, 0x010C0202);
	r0 = D(r0, s0_1_0, 0x01F108FF, 0x0EF1D90E, 0xE2FFEDE7, 0x0C0CF010);
	r1 = D(r1, s0_1_0, 0x00020302, 0x170E17B8, 0x0C0302F9, 0x30F5C048);
	r2 = D(r2, s0_1_0, 0xE9F727EB, 0xF604F216, 0xDD0511F4, 0xEE050402);
	r3 = D(r3, s0_1_0, 0x10F5EC15, 0x040201F9, 0xF8FE12FF, 0x0307F706);
	r4 = D(r4, s0_1_0, 0xFEFFDE0E, 0x000614F4, 0xC1020809, 0x97F9080C);
	r5 = D(r5, s0_1_0, 0xEE00FFFA, 0x00FFFE02, 0xFF08F026, 0x09F51114);
	r6 = D(r6, s0_1_0, 0xF3F6082B, 0x0D071011, 0xCD0681F9, 0x04F529EF);
	r7 = D(r7, s0_1_0, 0x0B02FCF9, 0x170218F2, 0x11F00113, 0x0201FB04);
	r0 = D(r0, s0_1_1, 0xF6EF1627, 0xECEB86D3, 0x14E4EEFF, 0xECE91423);
	r1 = D(r1, s0_1_1, 0x09F1031A, 0xB4A73015, 0xECECA3E6, 0xFDF700F3);
	r2 = D(r2, s0_1_1, 0x040C062A, 0xFB16DC10, 0x0E0E2D10, 0xF91D1F16);
	r3 = D(r3, s0_1_1, 0xF5070D01, 0xFC050005, 0x0EF913F1, 0xE4FDF239);
	r4 = D(r4, s0_1_1, 0xF9140EE9, 0xDBFFCC14, 0x2EF4F70B, 0x0AE8FFEF);
	r5 = D(r5, s0_1_1, 0xFFFDF9F5, 0xFDFEEEF9, 0xE90A1710, 0x09F6060F);
	r6 = D(r6, s0_1_1, 0x141DE6FF, 0xF41FFA23, 0x0EF8E82E, 0x2BF819CA);
	r7 = D(r7, s0_1_1, 0x16E5E2EE, 0xFAE31AE6, 0xEEF5CF04, 0xFE1104F9);
	r0 = D(r0, s0_1_2, 0x10F010F5, 0xE9F8C7FE, 0xE5F60911, 0xFB0002ED);
	r1 = D(r1, s0_1_2, 0xF95EF801, 0x020F0CF1, 0xFF050406, 0x070A19E5);
	r2 = D(r2, s0_1_2, 0xF4090F00, 0xF50BF4FD, 0x2149F709, 0xF711F9E9);
	r3 = D(r3, s0_1_2, 0xF5040EF7, 0x040902F8, 0xF0E7090C, 0x0BB3DA18);
	r4 = D(r4, s0_1_2, 0x001BE9E1, 0xFA12F011, 0xE9E8EC01, 0xE7DDF1F0);
	r5 = D(r5, s0_1_2, 0x01F0F006, 0xFEFE06F8, 0x080D0117, 0x0FC81619);
	r6 = D(r6, s0_1_2, 0x121A10E6, 0x05F706FE, 0x0609090B, 0x10DC27EE);
	r7 = D(r7, s0_1_2, 0x001FF910, 0xF61DFB08, 0x0B1FEA14, 0x0602FB05);
	r0 = D(r0, s0_2_0, 0x430AFD04, 0x0410F0F6, 0xF60BFC08, 0x0804E41D);
	r1 = D(r1, s0_2_0, 0xF802FC00, 0x03F7E638, 0x0102F904, 0xF210E3D7);
	r2 = D(r2, s0_2_0, 0xDAFFF3FC, 0x070006FA, 0x06081100, 0x0707B5FF);
	r3 = D(r3, s0_2_0, 0xFCFA06F9, 0x01FF0000, 0x060403F4, 0xE10D1200);
	r4 = D(r4, s0_2_0, 0xF8FBF50A, 0xFA0E03F3, 0x12F90104, 0xF101F4EE);
	r5 = D(r5, s0_2_0, 0x03FF05F5, 0x01010103, 0x13FBFFFA, 0xD906021B);
	r6 = D(r6, s0_2_0, 0x14F60FF1, 0xF7FFCA06, 0x0102CF02, 0xF30307DE);
	r7 = D(r7, s0_2_0, 0xF513FE0B, 0xF30F10F4, 0xE8080BF6, 0x07FEFE09);
	r0 = D(r0, s0_2_1, 0xDFF413E8, 0xFE18CCDF, 0xF902F701, 0xCA00F702);
	r1 = D(r1, s0_2_1, 0x040100FC, 0xF2FCF1EC, 0x01FEFB04, 0xF922B723);
	r2 = D(r2, s0_2_1, 0xF7D2090E, 0x030AF8FB, 0xFFF80BFD, 0x3CDE0801);
	r3 = D(r3, s0_2_1, 0xF5EF06FF, 0xF706FF0A, 0x03F20608, 0xDA0D16FE);
	r4 = D(r4, s0_2_1, 0x1B000781, 0x100308F8, 0xF6F600EB, 0x0A060AED);
	r5 = D(r5, s0_2_1, 0x09F7FF02, 0xFE06FAF0, 0xE709FBFE, 0x00F81010);
	r6 = D(r6, s0_2_1, 0x160B1A29, 0x2E03ECEE, 0x1F0D1F00, 0x0BEB1301);
	r7 = D(r7, s0_2_1, 0xF9F002FF, 0x121C12F7, 0xF50808FA, 0xFD000105);
	r0 = D(r0, s0_2_2, 0xF5FF12F9, 0x1600DF06, 0x0E25F906, 0x181613FE);
	r1 = D(r1, s0_2_2, 0x01F9FEFF, 0x0DE40AF9, 0xFFF6F709, 0x03EDD604);
	r2 = D(r2, s0_2_2, 0x18040119, 0xFD0406FA, 0xEEE407FE, 0xEB1700F6);
	r3 = D(r3, s0_2_2, 0x0105FF09, 0x020400FC, 0xF4050FF8, 0x161EFD06);
	r4 = D(r4, s0_2_2, 0x0FC613FE, 0x0AEF09F5, 0x0BFF05EE, 0xF807F2F7);
	r5 = D(r5, s0_2_2, 0xFC13F9FC, 0x02C100FF, 0x05E31EFD, 0x0D051401);
	r6 = D(r6, s0_2_2, 0x120A020B, 0xF6F9F4F8, 0xFF01F4EE, 0xED04EC0F);
	r7 = D(r7, s0_2_2, 0x00FCF32A, 0xE5FEEC05, 0x0F0CFAEE, 0x020E03FA);
	r0 = D(r0, s1_0_0, 0x1AFB1AF0, 0x0AEDEF16, 0xFDF41800, 0x05E2F807);
	r1 = D(r1, s1_0_0, 0x07FE01FE, 0xF92D0003, 0x0503FBFD, 0x15EEEDF6);
	r2 = D(r2, s1_0_0, 0xF4F307F1, 0xFFFA0714, 0xFFF001F9, 0xEF0BF6DC);
	r3 = D(r3, s1_0_0, 0xFC0BF203, 0xFC010105, 0x04120300, 0x08FDFD0F);
	r4 = D(r4, s1_0_0, 0xF6FBFE03, 0x0D0F13FD, 0x16CE09DB, 0xD49BE681);
	r5 = D(r5, s1_0_0, 0xFE06F704, 0x02FFFFFF, 0x01FCFC07, 0x0B09E6EB);
	r6 = D(r6, s1_0_0, 0xECFC03F1, 0x0501FF06, 0xF8F4F512, 0x08EE00FF);
	r7 = D(r7, s1_0_0, 0x020F1014, 0xFBFA062A, 0x00FCFF04, 0x000300FE);
	r0 = D(r0, s1_0_1, 0x02070B05, 0x01FDEE02, 0x03FBF016, 0xFB0802FD);
	r1 = D(r1, s1_0_1, 0xF8060600, 0xEA1419FF, 0xFEFE0103, 0xE1FF0410);
	r2 = D(r2, s1_0_1, 0x26EADADA, 0xF7FFF109, 0x1F13FC81, 0x09F6FC17);
	r3 = D(r3, s1_0_1, 0xF00FF9D5, 0x00FEFCFD, 0xEC081CFC, 0x0D0FD61A);
	r4 = D(r4, s1_0_1, 0x00F0F22D, 0x1D00F6E8, 0xF9D78118, 0xCF09DC37);
	r5 = D(r5, s1_0_1, 0x0501FBF9, 0x0000FB02, 0x11FD010F, 0xFCF5E8EE);
	r6 = D(r6, s1_0_1, 0xF30706EC, 0xF7FD07F9, 0xE80CD225, 0xF70711CD);
	r7 = D(r7, s1_0_1, 0x101501EF, 0x25D91DE5, 0x19F50F1B, 0x1201F309);
	r0 = D(r0, s1_0_2, 0x3213EEFC, 0xF9110911, 0x15F30BD9, 0x0303EE03);
	r1 = D(r1, s1_0_2, 0xFB01F903, 0xF8050701, 0x0200FA03, 0x03FC01F9);
	r2 = D(r2, s1_0_2, 0x1112F781, 0xF403FE0C, 0xEB2BD923, 0xF3F904F1);
	r3 = D(r3, s1_0_2, 0xF3FBF701, 0xFBFE0702, 0xE9FB1E16, 0x0305EE21);
	r4 = D(r4, s1_0_2, 0xFAF916F3, 0x2C00DFDA, 0xF2222A03, 0x02F70506);
	r5 = D(r5, s1_0_2, 0x01FEFA02, 0x0101FF01, 0xF9FBFDD7, 0xF80C09ED);
	r6 = D(r6, s1_0_2, 0xFFE0F7FF, 0xFB08080C, 0xE610EF02, 0x00F9FB07);
	r7 = D(r7, s1_0_2, 0x2907F4EC, 0xEDF30600, 0x12070401, 0xFF0101FF);
	r0 = D(r0, s1_1_0, 0xF6EC0FE9, 0xFDFBFE05, 0xE5060206, 0xFB0601FD);
	r1 = D(r1, s1_1_0, 0x02040706, 0x11F10309, 0xFEF804FD, 0xF3E2061F);
	r2 = D(r2, s1_1_0, 0xF41FFC16, 0xFD010803, 0xF505040F, 0x100113F7);
	r3 = D(r3, s1_1_0, 0xDC09FC04, 0x00010503, 0xF40807F5, 0xF20C1002);
	r4 = D(r4, s1_1_0, 0x14EF1008, 0x15CEF603, 0x2C1B21ED, 0x63D2CD02);
	r5 = D(r5, s1_1_0, 0xFD05FCFC, 0xFC00FD03, 0xFE03FD0B, 0x0E040FF2);
	r6 = D(r6, s1_1_0, 0x0D0FEF2D, 0xFCF504FD, 0x0CF5E00C, 0xF8ECF1FD);
	r7 = D(r7, s1_1_0, 0x03FE01F5, 0xE007FBEF, 0x15DCF810, 0x0CFAF801);
	r0 = D(r0, s1_1_1, 0xF30DF00A, 0xF6EBF319, 0xD3DDFF24, 0x1220FC27);
	r1 = D(r1, s1_1_1, 0xEAFB2BF8, 0xF80FE70A, 0x09FD3B08, 0x07A4D50C);
	r2 = D(r2, s1_1_1, 0xEFF402DB, 0x0C090E21, 0xAB2616C8, 0x25030C1B);
	r3 = D(r3, s1_1_1, 0xE7FAFC0F, 0xFBFAFCFF, 0x0E06FEFD, 0x21E7D425);
	r4 = D(r4, s1_1_1, 0x131013F4, 0xFA171691, 0x07FD1DF2, 0xF50933F6);
	r5 = D(r5, s1_1_1, 0xFA0E3810, 0x04FD0501, 0x1B0E0220, 0xF3EF0503);
	r6 = D(r6, s1_1_1, 0xDAFDF01C, 0xFBF7EC03, 0x180E1CB1, 0xD3E7F000);
	r7 = D(r7, s1_1_1, 0xF20904E5, 0xD910C6DC, 0xF0F6D2F1, 0x24066404);
	r0 = D(r0, s1_1_2, 0xE8EF14F6, 0x0C1100F1, 0x01061CD4, 0x01EE17F1);
	r1 = D(r1, s1_1_2, 0x1CFDECFA, 0xE2FC081D, 0xFA0307F9, 0xD1F72DF1);
	r2 = D(r2, s1_1_2, 0xF801E9EF, 0xF9F2FD0E, 0xCFFD1D12, 0x2511EF03);
	r3 = D(r3, s1_1_2, 0xF6080306, 0x0301F601, 0x111CD5FB, 0xF42CFB16);
	r4 = D(r4, s1_1_2, 0xFB0BD4F8, 0xEB0EF517, 0xD722FA16, 0xF20E0305);
	r5 = D(r5, s1_1_2, 0x03FD10FA, 0xFF000304, 0xE6D5E7EC, 0x040006D3);
	r6 = D(r6, s1_1_2, 0xD6EC0A09, 0xFAF80801, 0xF5221B16, 0x03FEFB14);
	r7 = D(r7, s1_1_2, 0xF7CDA801, 0x0AC90AF5, 0xE30B0300, 0x0404E408);
	r0 = D(r0, s1_2_0, 0x061E030D, 0xF8E2F50E, 0x21E5F3F4, 0xFB1203DE);
	r1 = D(r1, s1_2_0, 0x00000400, 0x05F41009, 0xFBFB0405, 0xFBFFF8EC);
	r2 = D(r2, s1_2_0, 0x161C03EA, 0xF205F5FA, 0xF8240DF8, 0x30EFE3F1);
	r3 = D(r3, s1_2_0, 0xF20F0EF8, 0x06FFFC01, 0xF40E0009, 0xFCF612F8);
	r4 = D(r4, s1_2_0, 0xFEFD07ED, 0xEE15EE1A, 0x14F9F1F7, 0xE6081E0E);
	r5 = D(r5, s1_2_0, 0x01100A02, 0xFDFAFE02, 0xF9F408F9, 0x03F2F4EF);
	r6 = D(r6, s1_2_0, 0x02D70DD4, 0x0E23E7F7, 0x0A24F026, 0x010F05FD);
	r7 = D(r7, s1_2_0, 0xF5031801, 0xFF04050C, 0xFEF00AF3, 0x03000101);
	r0 = D(r0, s1_2_1, 0xE535FB12, 0xF80905F8, 0xF40BECF4, 0xE8F1E4D1);
	r1 = D(r1, s1_2_1, 0x030601FF, 0x0F00F808, 0x0504DA00, 0x3E0E06CA);
	r2 = D(r2, s1_2_1, 0xFD1614E4, 0x080C0E02, 0xEB24EDE3, 0x1AEB1115);
	r3 = D(r3, s1_2_1, 0xF60305FE, 0xFAF711FE, 0xF900EBF9, 0x160A1F10);
	r4 = D(r4, s1_2_1, 0xE1CCF3E8, 0xE70601DC, 0xF200120C, 0xE306FFFE);
	r5 = D(r5, s1_2_1, 0xFFF6E4F9, 0x0AEDF507, 0x1531D40A, 0x01C90BD2);
	r6 = D(r6, s1_2_1, 0xF8F3F9ED, 0x21141AF6, 0x221A1906, 0x07011204);
	r7 = D(r7, s1_2_1, 0xFAE7F712, 0xEE060D23, 0xE30DFFFA, 0xFE010104);
	r0 = D(r0, s1_2_2, 0x1E00FBF2, 0x0EEA0D11, 0xEC1CF10C, 0x050218EE);
	r1 = D(r1, s1_2_2, 0x0402FEFE, 0xE605F4EB, 0x0C0102FC, 0xDFF5FA03);
	r2 = D(r2, s1_2_2, 0xF5FD13E8, 0xF6F1F901, 0x020605E2, 0x04EFF80A);
	r3 = D(r3, s1_2_2, 0xE305FEF4, 0x07FEFF02, 0xEBFE0FFA, 0xF40C230D);
	r4 = D(r4, s1_2_2, 0x01EF21FD, 0xD10D1705, 0xDCF70FF7, 0x0D10F8FA);
	r5 = D(r5, s1_2_2, 0xF7F20400, 0xFE0407FF, 0xFBEC0FD6, 0xD701FBF9);
	r6 = D(r6, s1_2_2, 0x03F9E801, 0xFB0809D9, 0xC9240C18, 0x1F07F5F8);
	r7 = D(r7, s1_2_2, 0x03CFFEFC, 0xF00D0118, 0xF00A121E, 0x03FFFE04);
	f0 = vec4(r0) * 6.2000124e-05;
	f0 += vec4(-3.205e-02, 1.217e-02, -3.896e-03, 1.450e-02);
	f0 = clamp(f0, vec4(0.0), vec4(1.0));
	imageStore(out_image, opos + ivec2(0, 0), f0);
	f1 = vec4(r1) * 6.2000124e-05;
	f1 += vec4(1.605e-02, -1.357e-02, 1.928e-02, 4.036e-03);
	f1 = clamp(f1, vec4(0.0), vec4(1.0));
	imageStore(out_image, opos + ivec2(1, 0), f1);
	f2 = vec4(r2) * 6.2000124e-05;
	f2 += vec4(-2.365e-02, 1.054e-02, -6.555e-03, -1.253e-02);
	f2 = clamp(f2, vec4(0.0), vec4(1.0));
	imageStore(out_image, opos + ivec2(0, 1), f2);
	f3 = vec4(r3) * 6.2000124e-05;
	f3 += vec4(-7.332e-03, 7.790e-03, 1.893e-03, 3.966e-02);
	f3 = clamp(f3, vec4(0.0), vec4(1.0));
	imageStore(out_image, opos + ivec2(1, 1), f3);
	f4 = vec4(r4) * 6.2000124e-05;
	f4 += vec4(-5.118e-03, -5.436e-03, 2.944e-02, 3.022e-03);
	f4 = clamp(f4, vec4(0.0), vec4(1.0));
	imageStore(out_image, opos + ivec2(2, 0), f4);
	f5 = vec4(r5) * 6.2000124e-05;
	f5 += vec4(-6.566e-04, 8.099e-03, 1.457e-02, -5.154e-04);
	f5 = clamp(f5, vec4(0.0), vec4(1.0));
	imageStore(out_image, opos + ivec2(3, 0), f5);
	f6 = vec4(r6) * 6.2000124e-05;
	f6 += vec4(-3.107e-02, -1.310e-02, 1.640e-02, -2.068e-02);
	f6 = clamp(f6, vec4(0.0), vec4(1.0));
	imageStore(out_image, opos + ivec2(2, 1), f6);
	f7 = vec4(r7) * 6.2000124e-05;
	f7 += vec4(1.582e-02, 4.283e-04, 3.262e-02, -2.649e-03);
	f7 = clamp(f7, vec4(0.0), vec4(1.0));
	imageStore(out_image, opos + ivec2(3, 1), f7);
}

//!DESC CuNNy-8x32-conv3
//!HOOK LUMA
//!COMPUTE 32 16 8 8
//!BIND conv2
//!BIND LUMA
//!SAVE conv3
//!WIDTH LUMA.w 4 *
//!HEIGHT LUMA.h 2 *
//!COMPONENTS 4
//!WHEN OUTPUT.w LUMA.w / 1.3 > OUTPUT.h LUMA.h / 1.3 > *
#extension GL_EXT_spirv_intrinsics : require
spirv_instruction (extensions = ["SPV_KHR_integer_dot_product"], capabilities = [6019, 6018], id = 4450)
int dp4(int a, int b, spirv_literal int fmt);
#define D(r, s, a, b, c, d) r + ivec4(dp4(s, a, 0), dp4(s, b, 0), dp4(s, c, 0), dp4(s, d, 0))
shared int G[8][10][10];
void hook() {
	ivec2 xy = ivec2(gl_LocalInvocationID.xy);
	ivec2 pos = ivec2(gl_WorkGroupID.xy) * ivec2(8, 8) + xy;
	ivec2 opos = pos * ivec2(4, 2);
	ivec2 sz = ivec2(LUMA_size) - ivec2(1);
	for (int y = 0; y < 10; y += 8) {
		int ay = xy.y + y;
		if (ay >= 10) break;
		for (int x = 0; x < 10; x += 8) {
			int ax = xy.x + x;
			if (ax >= 10) break;
			vec2 p;
			vec4 r, g, b, a;
			p = vec2(clamp(pos + ivec2(x - 1, y - 1), ivec2(0), sz) * ivec2(4, 2) + ivec2(1, 1)) * conv2_pt;
			r = conv2_gather(p, 0);
			g = conv2_gather(p, 1);
			b = conv2_gather(p, 2);
			a = conv2_gather(p, 3);
			vec4 v0 = vec4(r.w, g.w, b.w, a.w) * 1.0000000e+00;
			vec4 v1 = vec4(r.z, g.z, b.z, a.z) * 1.0000000e+00;
			vec4 v2 = vec4(r.x, g.x, b.x, a.x) * 1.0000000e+00;
			vec4 v3 = vec4(r.y, g.y, b.y, a.y) * 1.0000000e+00;
			p = vec2(clamp(pos + ivec2(x - 1, y - 1), ivec2(0), sz) * ivec2(4, 2) + ivec2(3, 1)) * conv2_pt;
			r = conv2_gather(p, 0);
			g = conv2_gather(p, 1);
			b = conv2_gather(p, 2);
			a = conv2_gather(p, 3);
			vec4 v4 = vec4(r.w, g.w, b.w, a.w) * 1.0000000e+00;
			vec4 v5 = vec4(r.z, g.z, b.z, a.z) * 1.0000000e+00;
			vec4 v6 = vec4(r.x, g.x, b.x, a.x) * 1.0000000e+00;
			vec4 v7 = vec4(r.y, g.y, b.y, a.y) * 1.0000000e+00;
			G[0][ay][ax] = int(packSnorm4x8(v0));
			G[1][ay][ax] = int(packSnorm4x8(v1));
			G[2][ay][ax] = int(packSnorm4x8(v2));
			G[3][ay][ax] = int(packSnorm4x8(v3));
			G[4][ay][ax] = int(packSnorm4x8(v4));
			G[5][ay][ax] = int(packSnorm4x8(v5));
			G[6][ay][ax] = int(packSnorm4x8(v6));
			G[7][ay][ax] = int(packSnorm4x8(v7));
		}
	}
	barrier();
	int s0_0_0, s0_0_1, s0_0_2, s0_1_0, s0_1_1, s0_1_2, s0_2_0, s0_2_1, s0_2_2, s1_0_0, s1_0_1, s1_0_2, s1_1_0, s1_1_1, s1_1_2, s1_2_0, s1_2_1, s1_2_2;
	ivec4 r0, r1, r2, r3, r4, r5, r6, r7;
	vec4 f0, f1, f2, f3, f4, f5, f6, f7;
	r0 = ivec4(0); r1 = ivec4(0); r2 = ivec4(0); r3 = ivec4(0); r4 = ivec4(0); r5 = ivec4(0); r6 = ivec4(0); r7 = ivec4(0);
	s0_0_0 = G[0][xy.y+0][xy.x+0]; s0_0_1 = G[0][xy.y+0][xy.x+1];
	s0_0_2 = G[0][xy.y+0][xy.x+2]; s0_1_0 = G[0][xy.y+1][xy.x+0];
	s0_1_1 = G[0][xy.y+1][xy.x+1]; s0_1_2 = G[0][xy.y+1][xy.x+2];
	s0_2_0 = G[0][xy.y+2][xy.x+0]; s0_2_1 = G[0][xy.y+2][xy.x+1];
	s0_2_2 = G[0][xy.y+2][xy.x+2]; s1_0_0 = G[1][xy.y+0][xy.x+0];
	s1_0_1 = G[1][xy.y+0][xy.x+1]; s1_0_2 = G[1][xy.y+0][xy.x+2];
	s1_1_0 = G[1][xy.y+1][xy.x+0]; s1_1_1 = G[1][xy.y+1][xy.x+1];
	s1_1_2 = G[1][xy.y+1][xy.x+2]; s1_2_0 = G[1][xy.y+2][xy.x+0];
	s1_2_1 = G[1][xy.y+2][xy.x+1]; s1_2_2 = G[1][xy.y+2][xy.x+2];
	r0 = D(r0, s0_0_0, 0x0A031002, 0x14FEF2FD, 0x06F61326, 0x2EDBFDED);
	r1 = D(r1, s0_0_0, 0x00010100, 0x030201FF, 0xF40E01EC, 0x0100FE00);
	r2 = D(r2, s0_0_0, 0xF2FEFFFE, 0xF8B70221, 0xFD0804F7, 0x16020804);
	r3 = D(r3, s0_0_0, 0x8181818B, 0x03FDFAFA, 0x0000FF01, 0x54818181);
	r4 = D(r4, s0_0_0, 0xEFFC0104, 0x15070B03, 0x010A0AFF, 0xFAFFF7F6);
	r5 = D(r5, s0_0_0, 0xFCFD22F4, 0x1DF4EA13, 0xF6FEFE01, 0x1906FFF0);
	r6 = D(r6, s0_0_0, 0x00FFFF01, 0xFEF904EE, 0x02140C05, 0x050A0AFF);
	r7 = D(r7, s0_0_0, 0xDAF8DDFF, 0x0FF0040A, 0x310305E1, 0xE802F8F3);
	r0 = D(r0, s0_0_1, 0xD6FFF105, 0xF4D9FE18, 0xC5090507, 0xE8F519DC);
	r1 = D(r1, s0_0_1, 0x03FFFE01, 0xF5F9FD10, 0x0E13FFF0, 0x0002FF00);
	r2 = D(r2, s0_0_1, 0x07FB0401, 0x585DAFE3, 0x0411E704, 0x0822C313);
	r3 = D(r3, s0_0_1, 0xF10D080E, 0x0209FE02, 0xFCFE0400, 0xFD071A08);
	r4 = D(r4, s0_0_1, 0x04020AF3, 0xECFD070D, 0x040A04FE, 0x19F9F7FE);
	r5 = D(r5, s0_0_1, 0xFE03ECF0, 0xF4EB27EE, 0xD3F10705, 0x080FFFEB);
	r6 = D(r6, s0_0_1, 0xFD02FFFF, 0x1AED14F8, 0x11090809, 0xDD0CFBF9);
	r7 = D(r7, s0_0_1, 0xF60439E1, 0x02FDF706, 0x02B822E5, 0xCCFB0DFD);
	r0 = D(r0, s0_0_2, 0x100B1A14, 0x034107FB, 0x13DB32DB, 0x1A221301);
	r1 = D(r1, s0_0_2, 0x0000FF00, 0xFE08FF02, 0xFA09E8FB, 0x00000101);
	r2 = D(r2, s0_0_2, 0xF90101FF, 0xFA11FFD9, 0xFE07E800, 0xEBF60AFC);
	r3 = D(r3, s0_0_2, 0x0605FEFB, 0x0AF2FEED, 0x0F01FA06, 0xF9FF09F9);
	r4 = D(r4, s0_0_2, 0xF809FFF3, 0x00FF07F8, 0xF2FDFAFB, 0xF40802F8);
	r5 = D(r5, s0_0_2, 0x1511FB00, 0xE90EF5ED, 0xF62218FF, 0xECF5FAFF);
	r6 = D(r6, s0_0_2, 0xFEFF0101, 0x120DF7F0, 0x11F8FCF8, 0x0BF805F8);
	r7 = D(r7, s0_0_2, 0x060209FB, 0x1D04020E, 0xE5F90001, 0xD62AE6FD);
	r0 = D(r0, s0_1_0, 0x011B07EE, 0x0DE7EA26, 0x2CAD01F9, 0x06001F1B);
	r1 = D(r1, s0_1_0, 0xFBFF0100, 0x02111CFB, 0xEC13F8FD, 0x04010200);
	r2 = D(r2, s0_1_0, 0x0BF010FC, 0x32F9E8E2, 0x03FBFB03, 0xFF03FCF8);
	r3 = D(r3, s0_1_0, 0x0609FE05, 0x02F8F3F7, 0x00010100, 0xFFF2040E);
	r4 = D(r4, s0_1_0, 0x0C140904, 0x0912DD01, 0x01F8F904, 0x0F0BFF00);
	r5 = D(r5, s0_1_0, 0xE60609FF, 0x1DEC27E6, 0xC4191D01, 0x02CD0FE5);
	r6 = D(r6, s0_1_0, 0x01000001, 0x1F17F401, 0xFB0CFAEC, 0xF1F006FA);
	r7 = D(r7, s0_1_0, 0x2408900F, 0x04E2EEF8, 0x2146D506, 0xF918F007);
	r0 = D(r0, s0_1_1, 0x240F02F6, 0xEE2125C3, 0xC6441DF5, 0x32E61ED7);
	r1 = D(r1, s0_1_1, 0x0A00F900, 0x0C1AF508, 0xDEE6FBFD, 0xFBFF05FD);
	r2 = D(r2, s0_1_1, 0xFF0EF8FC, 0xCAF814E8, 0x19EFBA10, 0xEB8DED04);
	r3 = D(r3, s0_1_1, 0xF813FD04, 0xFAF501F9, 0x0300FEFE, 0x0F1DFA01);
	r4 = D(r4, s0_1_1, 0xFEF9EC06, 0xED1409F7, 0x00F4EEF5, 0xE2F60F1A);
	r5 = D(r5, s0_1_1, 0x1F19041A, 0xD701F5F7, 0x13152B06, 0xE8FAFFFC);
	r6 = D(r6, s0_1_1, 0xF7010501, 0xDB07030B, 0xC30F00F2, 0x12FCF1FF);
	r7 = D(r7, s0_1_1, 0xD8120FF3, 0x07D7DAFA, 0xF116E8F3, 0xD2050A04);
	r0 = D(r0, s0_1_2, 0x3521E5C4, 0xE9FBFB14, 0xEC4CC481, 0xE5A9E8ED);
	r1 = D(r1, s0_1_2, 0xF4FE0102, 0xFE040302, 0x13FF1011, 0x01FAFF04);
	r2 = D(r2, s0_1_2, 0x02FFFF04, 0x2C4422F1, 0xFAFFECF6, 0x0138F410);
	r3 = D(r3, s0_1_2, 0x0107FD01, 0x03F6F7FA, 0xF806FFFB, 0x0109FF01);
	r4 = D(r4, s0_1_2, 0x05F9FAFE, 0xF8F2020B, 0xFFF50106, 0xFFF817E3);
	r5 = D(r5, s0_1_2, 0xEFF5F70D, 0x0B08F618, 0x07E3FF0C, 0x13000AFD);
	r6 = D(r6, s0_1_2, 0x0B0000FE, 0xEDECF40F, 0x240B0119, 0x04F0F5FC);
	r7 = D(r7, s0_1_2, 0xD90F1706, 0xE9FC09ED, 0xFC0AFCEC, 0xDC0011F9);
	r0 = D(r0, s0_2_0, 0xEFE8FF22, 0x02F0F7FA, 0x06FDF707, 0x1000DF05);
	r1 = D(r1, s0_2_0, 0xFFFFFFFF, 0xF8FF0200, 0x000512F2, 0xFDFD0103);
	r2 = D(r2, s0_2_0, 0xC1818181, 0x1AF7BD24, 0xF70916FC, 0xECE21EE5);
	r3 = D(r3, s0_2_0, 0x040607FE, 0x06030F00, 0x01FF00FF, 0x0C0EFE01);
	r4 = D(r4, s0_2_0, 0xFB000EFF, 0x06EF1CF7, 0x0F10F80E, 0x1622FBF9);
	r5 = D(r5, s0_2_0, 0xFBF5F208, 0xF4E3030C, 0xE928F610, 0xF811FD02);
	r6 = D(r6, s0_2_0, 0xFF020000, 0x28040DCD, 0xE5F317F9, 0xFEE709FB);
	r7 = D(r7, s0_2_0, 0x0A0302CB, 0xE604E912, 0x0102E9FF, 0xD12A0402);
	r0 = D(r0, s0_2_1, 0xB00EF02F, 0x1BEEF312, 0x4442D40C, 0xDBB3EF08);
	r1 = D(r1, s0_2_1, 0x03FD00FC, 0x01F1F801, 0x0B05FDF1, 0x0CFB0402);
	r2 = D(r2, s0_2_1, 0x02FC01FE, 0xC51811DD, 0x16F007F6, 0x272F09DB);
	r3 = D(r3, s0_2_1, 0x04FE0002, 0x08090706, 0xFDFEFFFF, 0x150D0609);
	r4 = D(r4, s0_2_1, 0xFD01F10E, 0x040113FB, 0xFE10050F, 0x12F6010E);
	r5 = D(r5, s0_2_1, 0x1AE8F700, 0xF7EC05F5, 0x20C505DF, 0x0DE904F3);
	r6 = D(r6, s0_2_1, 0xFCFF00FF, 0xF5A3C229, 0x1C08F4DD, 0xF2EC0001);
	r7 = D(r7, s0_2_1, 0x13FFDD19, 0xF0F80310, 0x0406ED06, 0xC6E4EB03);
	r0 = D(r0, s0_2_2, 0x818181F7, 0xFAF2FE0E, 0xD3E11A05, 0x110DD90B);
	r1 = D(r1, s0_2_2, 0xFD02FF00, 0x0005FAFD, 0x032A0801, 0xFF04FF02);
	r2 = D(r2, s0_2_2, 0xFCF801FF, 0xDD231703, 0xEA1BFD03, 0xF109F8E7);
	r3 = D(r3, s0_2_2, 0x0100FE01, 0xFC04FFF8, 0xFCF70100, 0x05FB0100);
	r4 = D(r4, s0_2_2, 0x080B0809, 0xFCFCFAED, 0x01FF0406, 0x8181818B);
	r5 = D(r5, s0_2_2, 0xFC28F105, 0xF9F50309, 0xFE0904FF, 0x01D805F5);
	r6 = D(r6, s0_2_2, 0x01FDFE00, 0x0A0F00FA, 0x060D1029, 0x1CD00905);
	r7 = D(r7, s0_2_2, 0x32FEFE0D, 0x092B1602, 0xDBF50EEC, 0xE6E8F30A);
	r0 = D(r0, s1_0_0, 0xF0FC00F4, 0x00F8EFF6, 0x0FF71DEE, 0xED000001);
	r1 = D(r1, s1_0_0, 0xFFFF0000, 0xFA060BFE, 0x000DEEEB, 0x0101FF01);
	r2 = D(r2, s1_0_0, 0x0103FB01, 0xE1FA12E2, 0xFB020006, 0xFDF5FBEE);
	r3 = D(r3, s1_0_0, 0x81819C81, 0x04F904FF, 0x00FF0100, 0x8181CC0B);
	r4 = D(r4, s1_0_0, 0x0702F70C, 0x100007FF, 0x0503FEFB, 0x04FAFC00);
	r5 = D(r5, s1_0_0, 0xFCF0FC04, 0xFBFEFB0B, 0x0AFEF9F5, 0x0704FCFC);
	r6 = D(r6, s1_0_0, 0x01FF0002, 0x04F8FEF8, 0xF300FD12, 0x08FAF802);
	r7 = D(r7, s1_0_0, 0xF1142C11, 0x01F6FFF8, 0xD9E516FF, 0x0A0604FA);
	r0 = D(r0, s1_0_1, 0xED0D01F8, 0xF114E4EE, 0xF8FFDCA0, 0xE6180004);
	r1 = D(r1, s1_0_1, 0x01FEFF00, 0xF81B0900, 0x0CFD00F4, 0x00020003);
	r2 = D(r2, s1_0_1, 0x0011FAFB, 0x00AEB622, 0x030803F5, 0xD4E5EAFA);
	r3 = D(r3, s1_0_1, 0xF8D40603, 0x0400F9FC, 0xFE0304FC, 0x043FF4E7);
	r4 = D(r4, s1_0_1, 0x0E0403FE, 0xF70DF2F1, 0xF5FF08F6, 0x0A11FAFF);
	r5 = D(r5, s1_0_1, 0xF81EF8FB, 0xFEA2EF0A, 0xFB000D00, 0xF4F804ED);
	r6 = D(r6, s1_0_1, 0x00010001, 0xF606EF00, 0x09EFF2F3, 0x0AFE0A03);
	r7 = D(r7, s1_0_1, 0x0F0C29DD, 0xFFDEFD0D, 0xC60BF3F9, 0x05120803);
	r0 = D(r0, s1_0_2, 0x0D17F6E0, 0x0EEF13E9, 0xD33B03EE, 0xE4AB2C1E);
	r1 = D(r1, s1_0_2, 0x01FD0000, 0xFE0608FC, 0x10F3F8FB, 0x02020001);
	r2 = D(r2, s1_0_2, 0xFEF902FF, 0xD8F998D4, 0xF9E7FD02, 0xE3F804F2);
	r3 = D(r3, s1_0_2, 0xFD070706, 0x17F30301, 0x01FBFEFC, 0xF8F30508);
	r4 = D(r4, s1_0_2, 0xFAF005F7, 0xFEEE0CFA, 0x03E60300, 0xE0F90D05);
	r5 = D(r5, s1_0_2, 0x01F50EFE, 0x17DD25FB, 0x042809FC, 0xF404FFFE);
	r6 = D(r6, s1_0_2, 0xFD0201FE, 0x0712FC01, 0xFBECFC13, 0xFB0DF505);
	r7 = D(r7, s1_0_2, 0x03FAF5F5, 0xFDEB040C, 0x0703F4F8, 0xFE22F7F6);
	r0 = D(r0, s1_1_0, 0xFA0EF7FA, 0xFD06201D, 0xDEDFEA0E, 0xFB15F704);
	r1 = D(r1, s1_1_0, 0x00040200, 0x00FCFF08, 0x0903F3F6, 0x0103FD00);
	r2 = D(r2, s1_1_0, 0xF8D9FB0C, 0xF8F70FFD, 0xFA01F40C, 0x05FAFC05);
	r3 = D(r3, s1_1_0, 0x07F100B5, 0x09F904EB, 0xFF020001, 0xF90D190A);
	r4 = D(r4, s1_1_0, 0x030206E6, 0xE6E60606, 0xFA051004, 0xFB02FE07);
	r5 = D(r5, s1_1_0, 0x05F3FAE7, 0x0D1FD2DF, 0x06F2CFF4, 0x01F2F7EB);
	r6 = D(r6, s1_1_0, 0x01FFFF00, 0xE9E6EAF0, 0xF7E3D808, 0x05F700FE);
	r7 = D(r7, s1_1_0, 0xE90D300D, 0x04BCE8F0, 0xE4EC0AF2, 0x07FAF4F5);
	r0 = D(r0, s1_1_1, 0x0FB6E70C, 0xF5F3B1EE, 0x0819C59C, 0x1AEB19D1);
	r1 = D(r1, s1_1_1, 0x01F4FB08, 0xFF1410FD, 0xF9F825EE, 0xFCF70103);
	r2 = D(r2, s1_1_1, 0xFE32003D, 0x94E0D62E, 0xF1EF0E34, 0xC2031214);
	r3 = D(r3, s1_1_1, 0x00FD0012, 0xEE0902A3, 0x04FE0007, 0xFA0DFBEC);
	r4 = D(r4, s1_1_1, 0x0EF6EF04, 0x81DAF2FB, 0x0C1EF215, 0x02312AF3);
	r5 = D(r5, s1_1_1, 0x041F0A12, 0xD9E318DA, 0x16FD03E6, 0x08A7CE81);
	r6 = D(r6, s1_1_1, 0xFF0C03F7, 0xDBAA2813, 0x10FDE000, 0xEF03FF13);
	r7 = D(r7, s1_1_1, 0xACF592EE, 0xD9D1D8A7, 0xEA814BDE, 0x13F8EBC4);
	r0 = D(r0, s1_1_2, 0x15C71018, 0x0F0BE6F7, 0xD8A0E92D, 0x0DEFD6F8);
	r1 = D(r1, s1_1_2, 0xFFAB05F5, 0xFCFEFC0A, 0xDC0EEEF8, 0x01FCFEFF);
	r2 = D(r2, s1_1_2, 0xFE02F702, 0xF1D44F02, 0xFE1CE914, 0xDF0F0601);
	r3 = D(r3, s1_1_2, 0xFF050202, 0x09FDFAF7, 0xFC06095E, 0x01FE0800);
	r4 = D(r4, s1_1_2, 0x03F5F5FF, 0xE8F3020B, 0x0901F800, 0x01CFEDE9);
	r5 = D(r5, s1_1_2, 0x0BEE0503, 0xFCF2F102, 0xF6F81010, 0x03F90700);
	r6 = D(r6, s1_1_2, 0x013CFD04, 0x032DE30C, 0x072502F1, 0x092CF50C);
	r7 = D(r7, s1_1_2, 0xE5EF12FC, 0xFECBF903, 0x19E61E09, 0xF1EE0CF6);
	r0 = D(r0, s1_2_0, 0xF81B1A0B, 0xFAF7F909, 0xEBE6D3F7, 0xDCFEF912);
	r1 = D(r1, s1_2_0, 0x01010100, 0xFFF803FF, 0x0A0DEEF6, 0xFE02FE01);
	r2 = D(r2, s1_2_0, 0x81818181, 0x2215F613, 0xFD04E7F4, 0x12FCE2C1);
	r3 = D(r3, s1_2_0, 0xFCFCFBEF, 0xFD0401F9, 0x02FFFFFF, 0xFDFEF9F1);
	r4 = D(r4, s1_2_0, 0x040FF9E8, 0xECF3F4EA, 0x06041207, 0x15ECEF0C);
	r5 = D(r5, s1_2_0, 0x04E90DF9, 0xF101EF13, 0x16FDF0F1, 0xFC04FEFD);
	r6 = D(r6, s1_2_0, 0x00FFFE01, 0x170CF0F7, 0xEF0EEDEB, 0x01181015);
	r7 = D(r7, s1_2_0, 0x0A06E305, 0x11110805, 0x041A1805, 0xF61BFB11);
	r0 = D(r0, s1_2_1, 0xCDF710BE, 0x07040408, 0x250DBFF3, 0xC9F7CD26);
	r1 = D(r1, s1_2_1, 0x0201FBF1, 0x0509F5FB, 0xEC02FD05, 0x03FBF781);
	r2 = D(r2, s1_2_1, 0x0603FD10, 0x072E0FF1, 0xF4FE0207, 0x27DDD7FE);
	r3 = D(r3, s1_2_1, 0x00FFFDFB, 0xF8FE00FB, 0xFF00FCFD, 0xFA0B02FB);
	r4 = D(r4, s1_2_1, 0xFF180CF8, 0xF50900EE, 0xFB000CFF, 0xF4191009);
	r5 = D(r5, s1_2_1, 0x1CEAD7FB, 0x1DEEFB1C, 0x00DDEB03, 0x07090CF2);
	r6 = D(r6, s1_2_1, 0x00FD0407, 0x221D2C0C, 0xEBF41D37, 0xFC191717);
	r7 = D(r7, s1_2_1, 0xE8090A1B, 0xA0F2EB2A, 0xAF07FCD7, 0x02190D09);
	r0 = D(r0, s1_2_2, 0x34C4C881, 0x0AEBF4FB, 0xF4E80804, 0xF01CF119);
	r1 = D(r1, s1_2_2, 0x03FBFF03, 0x03070500, 0x0F17F40B, 0xFCFC0102);
	r2 = D(r2, s1_2_2, 0x03F5FFFF, 0xEA1021E6, 0xEE1708FF, 0x1DF02110);
	r3 = D(r3, s1_2_2, 0x02FF0002, 0xF7F505F5, 0x04FEFD05, 0x00F200FB);
	r4 = D(r4, s1_2_2, 0x020FFEFB, 0x12FFF900, 0xF50C010E, 0x9A818181);
	r5 = D(r5, s1_2_2, 0x01070801, 0xF9FFEB0C, 0xEB0FFE19, 0x05F2FCF7);
	r6 = D(r6, s1_2_2, 0x0300FDF6, 0x1717E0F8, 0x08DB8110, 0x08F7EAF4);
	r7 = D(r7, s1_2_2, 0xDE1C0C0B, 0xF9021502, 0xF4E2041A, 0xFE12E6F5);
	s0_0_0 = G[2][xy.y+0][xy.x+0]; s0_0_1 = G[2][xy.y+0][xy.x+1];
	s0_0_2 = G[2][xy.y+0][xy.x+2]; s0_1_0 = G[2][xy.y+1][xy.x+0];
	s0_1_1 = G[2][xy.y+1][xy.x+1]; s0_1_2 = G[2][xy.y+1][xy.x+2];
	s0_2_0 = G[2][xy.y+2][xy.x+0]; s0_2_1 = G[2][xy.y+2][xy.x+1];
	s0_2_2 = G[2][xy.y+2][xy.x+2]; s1_0_0 = G[3][xy.y+0][xy.x+0];
	s1_0_1 = G[3][xy.y+0][xy.x+1]; s1_0_2 = G[3][xy.y+0][xy.x+2];
	s1_1_0 = G[3][xy.y+1][xy.x+0]; s1_1_1 = G[3][xy.y+1][xy.x+1];
	s1_1_2 = G[3][xy.y+1][xy.x+2]; s1_2_0 = G[3][xy.y+2][xy.x+0];
	s1_2_1 = G[3][xy.y+2][xy.x+1]; s1_2_2 = G[3][xy.y+2][xy.x+2];
	r0 = D(r0, s0_0_0, 0x050702F3, 0x16090200, 0xE41DF9E3, 0x0CF9141E);
	r1 = D(r1, s0_0_0, 0x0200FFFE, 0xFA040501, 0xEDE9F91B, 0x01FF00FF);
	r2 = D(r2, s0_0_0, 0x0FF6FEF6, 0xE93950D3, 0xF806FFFD, 0xF20B0DF3);
	r3 = D(r3, s0_0_0, 0x88238145, 0xF80104F6, 0x03000102, 0xEF248481);
	r4 = D(r4, s0_0_0, 0x0102FBF0, 0xEE0BF0E9, 0xFD0D0209, 0xFC07FB08);
	r5 = D(r5, s0_0_0, 0xFDF8F018, 0x19FA11FB, 0xF7FDF120, 0x0C061809);
	r6 = D(r6, s0_0_0, 0x0000FF00, 0xF3F411B8, 0x0104F6E7, 0xF5010A04);
	r7 = D(r7, s0_0_0, 0xF116FAC6, 0x07FEFE03, 0xD4E5F102, 0xF2FEF8F5);
	r0 = D(r0, s0_0_1, 0x06FE08E6, 0x840C0C16, 0xFE072B81, 0xF7FDD3F8);
	r1 = D(r1, s0_0_1, 0x01FFFFFF, 0x050902FC, 0x00E6F20C, 0x020001FF);
	r2 = D(r2, s0_0_1, 0xF6FCFAFD, 0xC412F0C1, 0xF203FDFF, 0x14FD00F3);
	r3 = D(r3, s0_0_1, 0xF4FEEEFD, 0x08FF0106, 0xFCFE0000, 0xADF6DE05);
	r4 = D(r4, s0_0_1, 0xFC03100A, 0x0E01E8F8, 0x01FD0302, 0xDE101005);
	r5 = D(r5, s0_0_1, 0x18FDE71F, 0x2801D399, 0x0FF8F326, 0xDF03F8E7);
	r6 = D(r6, s0_0_1, 0x000101FF, 0xD801DCE1, 0xE8EA16BC, 0x110406E6);
	r7 = D(r7, s0_0_1, 0xDBE51A07, 0xEDF50512, 0x08FCF015, 0xBB0F130A);
	r0 = D(r0, s0_0_2, 0x99FF040E, 0xFCFC0D15, 0xA9E3D422, 0x38F809E0);
	r1 = D(r1, s0_0_2, 0xFE02FF01, 0x030403FB, 0x03EC1209, 0xFD00FF00);
	r2 = D(r2, s0_0_2, 0x04FFF2FD, 0x4638F6B9, 0x060DFAF9, 0xC20F171D);
	r3 = D(r3, s0_0_2, 0xF30101FF, 0x27FC0307, 0xF5FF00FE, 0x03F9E0F2);
	r4 = D(r4, s0_0_2, 0xF40314FC, 0xFFFC15F7, 0xF9020211, 0x00030304);
	r5 = D(r5, s0_0_2, 0x0D0215FF, 0xFBFB1AB4, 0xDA0A14DF, 0xFC010206);
	r6 = D(r6, s0_0_2, 0xFC010401, 0xDE03F6D6, 0xC20F0EF2, 0x0EF8EC07);
	r7 = D(r7, s0_0_2, 0x4AF8CDFB, 0x3907F233, 0xE0F1DE26, 0x1E0D1FEF);
	r0 = D(r0, s0_1_0, 0x06FBFA0C, 0xFA181DED, 0xF1F2F9F1, 0x14101E1E);
	r1 = D(r1, s0_1_0, 0xFE00FF00, 0x01FCF601, 0x0BF104F8, 0x0501FF01);
	r2 = D(r2, s0_1_0, 0x02F002E4, 0xF4E5F9DF, 0xE5FEF20E, 0xF30C1005);
	r3 = D(r3, s0_1_0, 0xF9DCE4FE, 0x03080208, 0xFDFFFFFF, 0x001226F4);
	r4 = D(r4, s0_1_0, 0xE7130206, 0xEDFC10EE, 0xEFFBFAF0, 0xE60C0BE5);
	r5 = D(r5, s0_1_0, 0xF0FEE510, 0x0E9E12F5, 0x1DFFFB07, 0xEFF9F709);
	r6 = D(r6, s0_1_0, 0xFEFF0100, 0x19FE02FC, 0xEDF30CF3, 0xDEEFEE1E);
	r7 = D(r7, s0_1_0, 0x100306DE, 0xF0EA0807, 0x17EE020F, 0x12060AFE);
	r0 = D(r0, s0_1_1, 0xF707F003, 0xF7DB9C20, 0x26DA169B, 0x5281D711);
	r1 = D(r1, s0_1_1, 0xFDFF0601, 0x020C1C07, 0xF7F6F113, 0x0002FB02);
	r2 = D(r2, s0_1_1, 0xEB0706FB, 0xF3170324, 0xFDFF1AED, 0x0A030109);
	r3 = D(r3, s0_1_1, 0xEFF9FD0C, 0x12FBFCF3, 0x03FDFE02, 0x070C1A0E);
	r4 = D(r4, s0_1_1, 0xF0EEFFE2, 0x0726E1EA, 0x0EFD08FE, 0x111E0A08);
	r5 = D(r5, s0_1_1, 0xF9EEFEDC, 0xA0020CEF, 0xBEF2A712, 0x11F8E2E5);
	r6 = D(r6, s0_1_1, 0xFC0203FD, 0x1EF50E1D, 0xCBE9E52C, 0x1CFB00EB);
	r7 = D(r7, s0_1_1, 0x030E20FD, 0xDFDC221F, 0x0C1BF50E, 0x1020CE21);
	r0 = D(r0, s0_1_2, 0xD91F19E5, 0xF8E5F525, 0x341B24EF, 0x9EFE040F);
	r1 = D(r1, s0_1_2, 0xF90101FE, 0x020605FD, 0xD9F9D711, 0xFDFFFF00);
	r2 = D(r2, s0_1_2, 0x08070BF3, 0x193409E1, 0xFB0FEE07, 0x10F9EFEE);
	r3 = D(r3, s0_1_2, 0xFAFC0107, 0x0BFA05FD, 0xFC0812FD, 0xFA030504);
	r4 = D(r4, s0_1_2, 0xEE0A10E9, 0xE703FC29, 0x00FB02F6, 0xFBEED83A);
	r5 = D(r5, s0_1_2, 0x0103F910, 0xE0ED04ED, 0xC71DF6F9, 0x0A05F7E4);
	r6 = D(r6, s0_1_2, 0x01FCFB03, 0xEC12E41E, 0x810AF79C, 0xEF010DF1);
	r7 = D(r7, s0_1_2, 0x05F6B409, 0xF7EFD906, 0x00EFED07, 0xD90CE719);
	r0 = D(r0, s0_2_0, 0xEFB806F6, 0xFF21FB08, 0x32C610CD, 0xF327FAF0);
	r1 = D(r1, s0_2_0, 0xFF020101, 0x05F805FC, 0x12EC0807, 0xFDFE0100);
	r2 = D(r2, s0_2_0, 0x89838181, 0x0AC403CF, 0xF70002FE, 0xFC03E128);
	r3 = D(r3, s0_2_0, 0x09FE0401, 0xF609FE03, 0x00000001, 0xF60106F3);
	r4 = D(r4, s0_2_0, 0x040C0A1B, 0x02D0FC10, 0xFD0AFA07, 0x17ECEA14);
	r5 = D(r5, s0_2_0, 0x0DF90902, 0xFEE3E5F6, 0x0DE802F4, 0xF81F0AF3);
	r6 = D(r6, s0_2_0, 0xFFFF0000, 0xDCF7F81A, 0xE4F6FE0D, 0xEC1100F0);
	r7 = D(r7, s0_2_0, 0x02F3E2FC, 0xEAE11CF7, 0x0D8118F4, 0x09F420FD);
	r0 = D(r0, s0_2_1, 0xECC823EB, 0xFC1330E6, 0x3005C7BF, 0x10241302);
	r1 = D(r1, s0_2_1, 0xFF0602FF, 0xFC05FC01, 0x0401F9FD, 0x01FAEF05);
	r2 = D(r2, s0_2_1, 0x01FBF8FD, 0x1B39F0EA, 0xFFEBEF02, 0x0DC5EC08);
	r3 = D(r3, s0_2_1, 0x06FF0402, 0xF71009FD, 0x00FE0201, 0x0B010506);
	r4 = D(r4, s0_2_1, 0xF501E5DC, 0x011720DE, 0xFB0600FC, 0x1EFD1608);
	r5 = D(r5, s0_2_1, 0xFF0BF21F, 0x0BF6EBE4, 0xE4E1DC1E, 0xEDFBF401);
	r6 = D(r6, s0_2_1, 0x0100FF03, 0xF20314D4, 0x0C1A16FE, 0x010E0DDF);
	r7 = D(r7, s0_2_1, 0x05061CDB, 0x0AE8DFFD, 0xE88107F0, 0x1A0215EB);
	r0 = D(r0, s0_2_2, 0x818181FF, 0xF81FE6FB, 0x0618CAB4, 0xFAE2D927);
	r1 = D(r1, s0_2_2, 0xFFFD0600, 0x01020002, 0x2E0614FA, 0xFCFF0205);
	r2 = D(r2, s0_2_2, 0xFE02F202, 0x180F0BD8, 0xFF0A05FA, 0xF6F1E02B);
	r3 = D(r3, s0_2_2, 0x0B03FF02, 0xEE0BF7F5, 0xFDFCF803, 0x0908F4FC);
	r4 = D(r4, s0_2_2, 0x00FE04E3, 0xF5FF0BE9, 0x1109FCFA, 0x8748813F);
	r5 = D(r5, s0_2_2, 0xEC03011D, 0x21F2FEE6, 0x03091018, 0xF303F502);
	r6 = D(r6, s0_2_2, 0xFF00F601, 0x17FA1CD3, 0x1BF2C1D4, 0xFF1214E4);
	r7 = D(r7, s0_2_2, 0x33FCF8E0, 0x03F1FD0A, 0xD405CF0B, 0xFB0A08DE);
	r0 = D(r0, s1_0_0, 0x16E90501, 0x0B01020B, 0xF6E304E3, 0xF324FF04);
	r1 = D(r1, s1_0_0, 0x0100FD01, 0xF601FE0B, 0x04F5FBF9, 0xFE000200);
	r2 = D(r2, s1_0_0, 0xF4FCF507, 0xF5C78FEC, 0xFD0C06F2, 0x000F1AFF);
	r3 = D(r3, s1_0_0, 0x81BB81F3, 0x010CFEF3, 0xFF0001FF, 0xC2818181);
	r4 = D(r4, s1_0_0, 0x0DFB0DFE, 0x1202110A, 0xFBFEFA06, 0xF70A0205);
	r5 = D(r5, s1_0_0, 0xFD0AF500, 0xEF0F132D, 0x24100705, 0x03F2F502);
	r6 = D(r6, s1_0_0, 0xFF0101FF, 0xF805FFE0, 0x16FF00FC, 0x01FA10F7);
	r7 = D(r7, s1_0_0, 0xFE071C04, 0x0D0ED101, 0x0FF61CFA, 0x1DEEF9EC);
	r0 = D(r0, s1_0_1, 0x09131110, 0x040004F6, 0xD8060513, 0xB51AEF00);
	r1 = D(r1, s1_0_1, 0x000104FE, 0x0805EF0D, 0x0C000BF3, 0x00FE0000);
	r2 = D(r2, s1_0_1, 0xFD02F900, 0xD30DD6DE, 0xEBE90314, 0x0717EB12);
	r3 = D(r3, s1_0_1, 0x04007E08, 0x0B0404F4, 0x0001F500, 0x0702E2FD);
	r4 = D(r4, s1_0_1, 0xF9FEFAEF, 0xE4FDFA07, 0x0AFE13F7, 0xE9021702);
	r5 = D(r5, s1_0_1, 0xEFFFFDFD, 0xA3E70F05, 0xD2F6FEF2, 0x140ADD1D);
	r6 = D(r6, s1_0_1, 0x02FDFA02, 0xEA11E4FA, 0xFD0D0FFA, 0x1112F607);
	r7 = D(r7, s1_0_1, 0xEBFBDD16, 0x1AFCC0F6, 0xDFF9CFFF, 0xEDF70B03);
	r0 = D(r0, s1_0_2, 0x0AFD001C, 0x1E071F11, 0x8129F136, 0x3208E5FE);
	r1 = D(r1, s1_0_2, 0x0101FA00, 0x05000104, 0xFCFFFBF1, 0x03FF0100);
	r2 = D(r2, s1_0_2, 0x02FE0704, 0x0C5CCB05, 0xFD130D03, 0x0703FEF7);
	r3 = D(r3, s1_0_2, 0xFEFCF302, 0x0CEEFAF9, 0x01010105, 0x08F6FC04);
	r4 = D(r4, s1_0_2, 0x04050003, 0x00FC070D, 0x0904FE01, 0xFF0606ED);
	r5 = D(r5, s1_0_2, 0x0C031009, 0xE51107FB, 0xF907FF14, 0x08060510);
	r6 = D(r6, s1_0_2, 0xFF020702, 0xFCE70604, 0x070C08F4, 0x0E0E0301);
	r7 = D(r7, s1_0_2, 0xDE09F4E7, 0xFC04E201, 0xF5FCDBE9, 0xE7061009);
	r0 = D(r0, s1_1_0, 0xDB1F0B08, 0x05ED0AE6, 0xF51800F4, 0xE80BEA14);
	r1 = D(r1, s1_1_0, 0x02FFFB00, 0xFC01FCFD, 0x1B2004EE, 0x03010002);
	r2 = D(r2, s1_1_0, 0xF607D6F5, 0xF8D91BFB, 0x1010FF11, 0x0303FB01);
	r3 = D(r3, s1_1_0, 0x01E8190A, 0xFF0A07FD, 0x0103FFFF, 0xEC080111);
	r4 = D(r4, s1_1_0, 0xFBF7FF09, 0xE9080900, 0xF8FD0808, 0x0AF6FAFB);
	r5 = D(r5, s1_1_0, 0xF3D0D916, 0xF1F5F4FE, 0xD61FDA2F, 0xFA11F519);
	r6 = D(r6, s1_1_0, 0x00FD03FE, 0x01FEFB0A, 0xFA0D2810, 0x120C0102);
	r7 = D(r7, s1_1_0, 0xF60C17FD, 0xCB160200, 0x8A36FD08, 0xF022F90E);
	r0 = D(r0, s1_1_1, 0xF4FC4F06, 0xD115F311, 0x8105191B, 0xF64A05F1);
	r1 = D(r1, s1_1_1, 0xFA0D36FF, 0xFF070C0B, 0xE7FAFE1F, 0xFBFE0BFC);
	r2 = D(r2, s1_1_1, 0xF508FCFA, 0xAF3002D8, 0x060DFDF2, 0xD3CC0E20);
	r3 = D(r3, s1_1_1, 0x01FDE6F7, 0xE709E40B, 0x03FC00FD, 0xFE160E06);
	r4 = D(r4, s1_1_1, 0x1206150A, 0xD21331EF, 0xEE111EE5, 0xE5F519EF);
	r5 = D(r5, s1_1_1, 0xDB1CECE8, 0x0C2203CE, 0x81F7D305, 0x01F8FF5F);
	r6 = D(r6, s1_1_1, 0x02F8DCFF, 0xFBFF1732, 0x35ED810B, 0xECFEE700);
	r7 = D(r7, s1_1_1, 0xDEC6F92B, 0x03EA1C09, 0xE9DB300C, 0xE5F7FA14);
	r0 = D(r0, s1_1_2, 0x04F1C9FF, 0xE0090AD5, 0x81D80681, 0xFD1CF6E9);
	r1 = D(r1, s1_1_2, 0x03FC4A06, 0x07FCFFFC, 0xF11407F4, 0x0103FE01);
	r2 = D(r2, s1_1_2, 0x0200FE00, 0x0802E7E6, 0xFDFD1605, 0x09012211);
	r3 = D(r3, s1_1_2, 0xFE0202FD, 0xF6FBCD01, 0xFAFF0004, 0xFAFAFA07);
	r4 = D(r4, s1_1_2, 0x18FCF7F1, 0x04FAF4EB, 0xFD0206EF, 0xF5F2B0F4);
	r5 = D(r5, s1_1_2, 0x06041401, 0x17F50512, 0x050103E3, 0xFFFEF705);
	r6 = D(r6, s1_1_2, 0xFD02D8FF, 0xFC02E6F5, 0x391E8702, 0xF502E5FA);
	r7 = D(r7, s1_1_2, 0xD21FFAD8, 0x0CF30302, 0xF7F3E6D6, 0x020B11D5);
	r0 = D(r0, s1_2_0, 0xF8DB07F3, 0x05F3F80B, 0x1AFAE6E5, 0xE8D90C15);
	r1 = D(r1, s1_2_0, 0x00FDFFFF, 0xFBFC04F9, 0x0B07FBF8, 0x0005F900);
	r2 = D(r2, s1_2_0, 0x818181AD, 0xE0CCF9F9, 0xFEF700F8, 0x1DFE0BF4);
	r3 = D(r3, s1_2_0, 0xFC06FF05, 0x0B03FF04, 0xFF010100, 0xF5EB1102);
	r4 = D(r4, s1_2_0, 0x0403FC0B, 0x06FDF702, 0xF8F90208, 0xFF1D0A11);
	r5 = D(r5, s1_2_0, 0x000705FB, 0x03FF0CFB, 0x0E0A19BF, 0x0FF2FAF3);
	r6 = D(r6, s1_2_0, 0xFF040101, 0xD830F421, 0x0B1706E4, 0xF91108F4);
	r7 = D(r7, s1_2_0, 0x0F1801F2, 0xF0020A03, 0x32EBE2EE, 0xFC1A04F1);
	r0 = D(r0, s1_2_1, 0xE28129DA, 0xF8050C03, 0xCE92123F, 0xE8F104D0);
	r1 = D(r1, s1_2_1, 0x05FF00FF, 0x03000302, 0xF8F40FF7, 0x01F609FB);
	r2 = D(r2, s1_2_1, 0xFB01FFFC, 0xB547F40F, 0x060BFDF9, 0xEE1FE8D3);
	r3 = D(r3, s1_2_1, 0x0203FCFC, 0xFEEFFCFF, 0xFF0A0000, 0xFCFBF701);
	r4 = D(r4, s1_2_1, 0xFE06F6FD, 0x0813EDE3, 0xECF80100, 0xF611D8FB);
	r5 = D(r5, s1_2_1, 0xE9FDFF1E, 0xF61818F0, 0xEE21160F, 0x02050A0C);
	r6 = D(r6, s1_2_1, 0xFE0702FF, 0x1CF705AB, 0xDB02F40E, 0xF4FAFD05);
	r7 = D(r7, s1_2_1, 0x0426F1CD, 0x03120AE6, 0x10F42101, 0x100AF4F7);
	r0 = D(r0, s1_2_2, 0x81818181, 0x07FA0609, 0x10F481B2, 0x16EFF310);
	r1 = D(r1, s1_2_2, 0x02FBFBFF, 0x02FBFCFC, 0xF403EDE6, 0x04FE0101);
	r2 = D(r2, s1_2_2, 0x01FFFF00, 0xF5FCFB29, 0xF217F4F0, 0x09F6FEF0);
	r3 = D(r3, s1_2_2, 0xFFFB0300, 0xF3F7FDF3, 0x0203FF00, 0x03F30806);
	r4 = D(r4, s1_2_2, 0x04080A17, 0x16F0FE06, 0xFF0E08FE, 0x81818183);
	r5 = D(r5, s1_2_2, 0xFDFBFFF5, 0x0506ECF0, 0x1BFFF3FC, 0x0DFE0B00);
	r6 = D(r6, s1_2_2, 0xFF0501FF, 0xFC25F00D, 0xD7030423, 0xF7F20E18);
	r7 = D(r7, s1_2_2, 0xE6E602EA, 0x0901F80B, 0x200811CF, 0x07F20B13);
	s0_0_0 = G[4][xy.y+0][xy.x+0]; s0_0_1 = G[4][xy.y+0][xy.x+1];
	s0_0_2 = G[4][xy.y+0][xy.x+2]; s0_1_0 = G[4][xy.y+1][xy.x+0];
	s0_1_1 = G[4][xy.y+1][xy.x+1]; s0_1_2 = G[4][xy.y+1][xy.x+2];
	s0_2_0 = G[4][xy.y+2][xy.x+0]; s0_2_1 = G[4][xy.y+2][xy.x+1];
	s0_2_2 = G[4][xy.y+2][xy.x+2]; s1_0_0 = G[5][xy.y+0][xy.x+0];
	s1_0_1 = G[5][xy.y+0][xy.x+1]; s1_0_2 = G[5][xy.y+0][xy.x+2];
	s1_1_0 = G[5][xy.y+1][xy.x+0]; s1_1_1 = G[5][xy.y+1][xy.x+1];
	s1_1_2 = G[5][xy.y+1][xy.x+2]; s1_2_0 = G[5][xy.y+2][xy.x+0];
	s1_2_1 = G[5][xy.y+2][xy.x+1]; s1_2_2 = G[5][xy.y+2][xy.x+2];
	r0 = D(r0, s0_0_0, 0x01F310F4, 0x02DF3A06, 0x0AFE4103, 0x0EEADBDE);
	r1 = D(r1, s0_0_0, 0x00000103, 0x00FF1AF4, 0xF7FB16E2, 0x0001FE01);
	r2 = D(r2, s0_0_0, 0x14FF060D, 0xFA3E16E6, 0xF5F0F4E3, 0xF10AF4F5);
	r3 = D(r3, s0_0_0, 0x81AAC081, 0xFF0003FF, 0x010002FE, 0xD6815122);
	r4 = D(r4, s0_0_0, 0xFC0DEE04, 0xFF070EE9, 0xFF0006F0, 0xF9F90102);
	r5 = D(r5, s0_0_0, 0xFD031606, 0xFE06F0D7, 0xFA120D14, 0x040C0581);
	r6 = D(r6, s0_0_0, 0x01000001, 0xF6FBD5CB, 0x03F5F8FE, 0x0211FE01);
	r7 = D(r7, s0_0_0, 0x0DFA0829, 0x020EDAFF, 0x04EC2DEC, 0xF9F303AA);
	r0 = D(r0, s0_0_1, 0x27EFECE5, 0x012624E9, 0xE1104AF1, 0x05F1F281);
	r1 = D(r1, s0_0_1, 0x00FFFBF9, 0x070C18E8, 0xFF0E05EB, 0x01000306);
	r2 = D(r2, s0_0_1, 0xFD040BFA, 0x21200D3C, 0xF80D1019, 0xFEFAFC01);
	r3 = D(r3, s0_0_1, 0x1102FBFC, 0x0204F623, 0x02000004, 0x0F0802F3);
	r4 = D(r4, s0_0_1, 0x0104EDE8, 0x0910F609, 0x03FFF515, 0x03000F02);
	r5 = D(r5, s0_0_1, 0xFD0214EA, 0xFEF6812E, 0x04022339, 0x09031709);
	r6 = D(r6, s0_0_1, 0x01000304, 0x061D21F8, 0xFEF71FDD, 0x080B0925);
	r7 = D(r7, s0_0_1, 0xE9DC14DD, 0xF3F6ECF6, 0x13073205, 0xFE0FF1EA);
	r0 = D(r0, s0_0_2, 0x1415FCE1, 0xF10BE719, 0x16C2483F, 0xEDE7C61B);
	r1 = D(r1, s0_0_2, 0x0301FD07, 0x060808F6, 0xFAFD1111, 0xFF01FF01);
	r2 = D(r2, s0_0_2, 0x01000103, 0x02FB41F8, 0xF9EC0C12, 0xEA0D12BD);
	r3 = D(r3, s0_0_2, 0x0AFDFBFF, 0xFC000214, 0x03FE0425, 0x1905F90B);
	r4 = D(r4, s0_0_2, 0x03F1FC04, 0x010FEA07, 0xFEFF0106, 0x02EF070A);
	r5 = D(r5, s0_0_2, 0x0900F608, 0x0FE2E7F8, 0x0310FF03, 0xED0007F8);
	r6 = D(r6, s0_0_2, 0x0000FFFA, 0x061DFE05, 0x02FF02EE, 0xF618F802);
	r7 = D(r7, s0_0_2, 0x060228C6, 0xF4070CDF, 0x1BED2323, 0xE5F00E06);
	r0 = D(r0, s0_1_0, 0x030020EC, 0x132D1ADD, 0x06FF3A0E, 0x0BFF1BBA);
	r1 = D(r1, s0_1_0, 0x0001FF00, 0x08FB0CF7, 0xF30F05E6, 0x0002FCFB);
	r2 = D(r2, s0_1_0, 0xFE010406, 0xF0CB1335, 0xFDEAF312, 0xFA11FD15);
	r3 = D(r3, s0_1_0, 0x01EAECFA, 0xFF04120C, 0x01030104, 0xFB09FB06);
	r4 = D(r4, s0_1_0, 0x001315FD, 0x090D07FA, 0x07000715, 0x0C09F00A);
	r5 = D(r5, s0_1_0, 0xFCFEFD14, 0x02B7FA06, 0xF821F6F2, 0x02111501);
	r6 = D(r6, s0_1_0, 0x00FF00FD, 0xFF082BE6, 0x01F9F6F3, 0x00ECFC26);
	r7 = D(r7, s0_1_0, 0x0E11DEE4, 0xFA0F09E8, 0xE6080EFA, 0x0703FC05);
	r0 = D(r0, s0_1_1, 0x0A181DFF, 0xF7C3FBD7, 0xFBD80FBB, 0x1C13E91B);
	r1 = D(r1, s0_1_1, 0x00FE0101, 0x07F909FB, 0xEA07050D, 0xFD00FEF9);
	r2 = D(r2, s0_1_1, 0xFEFEF70C, 0x2D26F9B0, 0xFEF0FCE8, 0x14F6F1CA);
	r3 = D(r3, s0_1_1, 0x20FA06F8, 0xFF0400F9, 0xFF00FF01, 0xFD020FF9);
	r4 = D(r4, s0_1_1, 0x110608F9, 0x18F70A13, 0x0F0B0AF6, 0x1D10003B);
	r5 = D(r5, s0_1_1, 0x07F50FDF, 0x1BF7E906, 0x0C0B11D3, 0xFD18C120);
	r6 = D(r6, s0_1_1, 0x0200000B, 0x17FFB929, 0xFEF2E181, 0x1F1D0411);
	r7 = D(r7, s0_1_1, 0xF70E12FF, 0xF2D4E0F8, 0xDEAE1910, 0xF6E00A1C);
	r0 = D(r0, s0_1_2, 0x020205FE, 0x0AFADC28, 0xA70FFECF, 0x1603282F);
	r1 = D(r1, s0_1_2, 0xFA05FE02, 0x040105FB, 0x0B0F0BEE, 0x00FF00FF);
	r2 = D(r2, s0_1_2, 0xFBF90A04, 0xCC09E4E5, 0xF9FBE70B, 0xCDFD3E2D);
	r3 = D(r3, s0_1_2, 0x0202FDFC, 0xF4030207, 0xF902FC1D, 0x14FA00F8);
	r4 = D(r4, s0_1_2, 0xFBF9FF0E, 0x29FA031E, 0x08020C06, 0xD9030AEA);
	r5 = D(r5, s0_1_2, 0x1DFDFC02, 0x32F6220F, 0x3517E4FD, 0xEB250800);
	r6 = D(r6, s0_1_2, 0x0400FEF5, 0x0BFD0EEC, 0xD3FA0505, 0x0F16E004);
	r7 = D(r7, s0_1_2, 0x22F7F8F1, 0xDBF4F110, 0x27FA0816, 0x28FB0804);
	r0 = D(r0, s0_2_0, 0xF906F00E, 0xFE07F1E3, 0x08221CC5, 0x141000E4);
	r1 = D(r1, s0_2_0, 0xFFFEFF00, 0xFDFDFA00, 0xF703040C, 0x01FD02FC);
	r2 = D(r2, s0_2_0, 0x8186C3A4, 0x27C8DCE9, 0xFFF6FEFF, 0xF913FBF5);
	r3 = D(r3, s0_2_0, 0x03080600, 0xFE0201FB, 0xFF0002FF, 0x06011104);
	r4 = D(r4, s0_2_0, 0xF20306F8, 0xFDFEFE0A, 0x04090611, 0xE4080CFF);
	r5 = D(r5, s0_2_0, 0xFAF307F4, 0x01F702E5, 0x0D1FFFFA, 0x01EE05F4);
	r6 = D(r6, s0_2_0, 0x01010100, 0xFE040A0D, 0xF1E10BE9, 0xF721E825);
	r7 = D(r7, s0_2_0, 0xECCD080C, 0xFA350519, 0x1DEDEBF7, 0xFC170213);
	r0 = D(r0, s0_2_1, 0x230D1283, 0x0CE50D00, 0xE6E7158B, 0x3BF0120C);
	r1 = D(r1, s0_2_1, 0x02FF0203, 0x05FA05FF, 0xFB0CCE15, 0x02FC01FD);
	r2 = D(r2, s0_2_1, 0x08F001FD, 0x2AEFE6F2, 0xEE0702EB, 0xE4C8F4EB);
	r3 = D(r3, s0_2_1, 0xFEFD0105, 0xFB041000, 0x0101FFFF, 0x11FEFFFB);
	r4 = D(r4, s0_2_1, 0x1309F114, 0x10F4EFF0, 0xFF04F9E5, 0x81F7FD0E);
	r5 = D(r5, s0_2_1, 0x810DFAF9, 0xEDF3F10C, 0xCE162C18, 0x0E090FF9);
	r6 = D(r6, s0_2_1, 0xFF00FB03, 0xF6021008, 0x0E29EFF9, 0x11FEDBEE);
	r7 = D(r7, s0_2_1, 0xF40CDF0E, 0x3CFF1604, 0xF20B13B8, 0x1F0AFC0B);
	r0 = D(r0, s0_2_2, 0x15C52395, 0xD10004F3, 0x50E0256E, 0x7F37F3D9);
	r1 = D(r1, s0_2_2, 0x000002FB, 0x04000606, 0xC8FFF516, 0x08FFFCFF);
	r2 = D(r2, s0_2_2, 0x1405FCFF, 0x5EEE20D5, 0xEAE90B11, 0x04030E02);
	r3 = D(r3, s0_2_2, 0xF8FE01FD, 0xE0FEF7E7, 0x0300FFFE, 0xECFF08FA);
	r4 = D(r4, s0_2_2, 0x14020F04, 0xFC0609F7, 0x06FFF6FE, 0x11568112);
	r5 = D(r5, s0_2_2, 0x1A03F900, 0x8113F516, 0x0FDDFD0C, 0x100908FD);
	r6 = D(r6, s0_2_2, 0xEAFFFE03, 0x14FD1504, 0x81281B20, 0x2706E7EF);
	r7 = D(r7, s0_2_2, 0x39FF07E8, 0x6107E8FA, 0xF709FF12, 0xC9EB0D18);
	r0 = D(r0, s1_0_0, 0xE60BF9F7, 0xE709DF15, 0x003FD71C, 0xC80F19E5);
	r1 = D(r1, s1_0_0, 0x0000FFFE, 0x0F050EE7, 0xF803EDEE, 0x01FFFC03);
	r2 = D(r2, s1_0_0, 0x0110E6FB, 0xFFD3E705, 0x08FF13F8, 0x1AF6FAF9);
	r3 = D(r3, s1_0_0, 0x81F08181, 0x0500FD00, 0xFE010200, 0x05928181);
	r4 = D(r4, s1_0_0, 0xF1F70D1E, 0xFA130CF1, 0xFD020AF4, 0x05F70EFC);
	r5 = D(r5, s1_0_0, 0xFF011D00, 0xF6042DEE, 0x09FE00F9, 0xFCF4810A);
	r6 = D(r6, s1_0_0, 0x00FF0301, 0x01150B04, 0xEEEE1002, 0x05010C04);
	r7 = D(r7, s1_0_0, 0xF508F3F8, 0x0C15DC0B, 0xE5FD1706, 0x041103F5);
	r0 = D(r0, s1_0_1, 0x011EE303, 0xF8061FD7, 0xDFDBF219, 0xF7023ED8);
	r1 = D(r1, s1_0_1, 0xFE00F1FE, 0x08FB0A0C, 0x06001AF8, 0x01FF0202);
	r2 = D(r2, s1_0_1, 0x0003EFF1, 0xC5ABE809, 0xFF02E003, 0xF919D427);
	r3 = D(r3, s1_0_1, 0xFD01ECE4, 0xE9FCEC0B, 0x01FEFF02, 0x03080AFF);
	r4 = D(r4, s1_0_1, 0x0810FA07, 0xE40A22F3, 0xF5F0EA10, 0x0DF030FD);
	r5 = D(r5, s1_0_1, 0xE90426F2, 0x1F200E1C, 0x20FF2CDB, 0xF4EAFDFC);
	r6 = D(r6, s1_0_1, 0x00010902, 0x160917F1, 0x1D08E522, 0x0EED03EA);
	r7 = D(r7, s1_0_1, 0x16ED48FF, 0xF2050707, 0x130A26FF, 0x071229E9);
	r0 = D(r0, s1_0_2, 0x163702F4, 0xE9D20EEF, 0x09EE81ED, 0x17C2E8F7);
	r1 = D(r1, s1_0_2, 0x03010503, 0x05FB0203, 0xF1FD0E07, 0xFF0001FE);
	r2 = D(r2, s1_0_2, 0x0303F507, 0xFFECFFDA, 0xFCF1F3EF, 0x0C1513F8);
	r3 = D(r3, s1_0_2, 0xF70104FF, 0x06FCB3E9, 0xFFFDCA08, 0xFB06F301);
	r4 = D(r4, s1_0_2, 0x04F70309, 0x00FEFB04, 0xF402FC01, 0xF9F41E08);
	r5 = D(r5, s1_0_2, 0xFAF007FE, 0x0BE50C28, 0x0BE312E0, 0x0500FBFB);
	r6 = D(r6, s1_0_2, 0xFE00F3FE, 0x0AE20A03, 0x06F208FD, 0xF1F1F5FC);
	r7 = D(r7, s1_0_2, 0x13F31F06, 0xFEFE001A, 0x071C10F7, 0x09F512E4);
	r0 = D(r0, s1_1_0, 0x0DF51C0A, 0xFE1306FC, 0x0B0FEB30, 0x2B18F8E5);
	r1 = D(r1, s1_1_0, 0x01FF00FF, 0xF8F101FE, 0x02E50CF2, 0xFC01FE01);
	r2 = D(r2, s1_1_0, 0xD5F1D7C7, 0x162FF5E7, 0xF3FB0803, 0xF105000D);
	r3 = D(r3, s1_1_0, 0x13FE0B24, 0x09FFFD13, 0x00FF03FF, 0x150DE9F4);
	r4 = D(r4, s1_1_0, 0x12F91D1F, 0x0913F110, 0xF70F06E6, 0xFA060B03);
	r5 = D(r5, s1_1_0, 0xFDFE02FB, 0x0EC1FBEE, 0xE5DAD004, 0xF5FB0507);
	r6 = D(r6, s1_1_0, 0x00FF01FF, 0x11F71301, 0x0B031EFE, 0xFBFB03FB);
	r7 = D(r7, s1_1_0, 0xE516EE20, 0x0707FFFD, 0x0FFFEE17, 0x090AEFDA);
	r0 = D(r0, s1_1_1, 0xF5EBDF0D, 0x0E0D040A, 0xF4F0FF06, 0xD2FFE7B9);
	r1 = D(r1, s1_1_1, 0x040207FA, 0x0CF5FDF4, 0x13120F14, 0x03FF710C);
	r2 = D(r2, s1_1_1, 0xFC03F820, 0x263007F0, 0x0B030AED, 0x1025F708);
	r3 = D(r3, s1_1_1, 0x04FD0609, 0xFFFA0D08, 0xF7FC03FE, 0xF607FB06);
	r4 = D(r4, s1_1_1, 0x0AFD0703, 0x1919E7F1, 0x0106F4F8, 0x1A1DF035);
	r5 = D(r5, s1_1_1, 0xEBF61411, 0x10E7E3E5, 0xEF2E070B, 0xFA1403F1);
	r6 = D(r6, s1_1_1, 0x04FCF00C, 0xFED0D31F, 0x9AD481CA, 0xFED2E1F2);
	r7 = D(r7, s1_1_1, 0x110DE7F5, 0xEA140BB0, 0x17E4DBD5, 0x0D05CB15);
	r0 = D(r0, s1_1_2, 0xD2088181, 0xEAFCEC05, 0x04EC1325, 0xD1E922F8);
	r1 = D(r1, s1_1_2, 0x01FFF4F2, 0x0EFF0303, 0x0EF605FB, 0xFE05FFFF);
	r2 = D(r2, s1_1_2, 0x02FA0409, 0x1FF2E430, 0x18FAFFF8, 0xF5F804E5);
	r3 = D(r3, s1_1_2, 0x01FF01FA, 0xF6030B02, 0xFB03F6FB, 0x03F6000E);
	r4 = D(r4, s1_1_2, 0x02F00906, 0x0EF8F4FA, 0xFE09FF0B, 0xF1063BF1);
	r5 = D(r5, s1_1_2, 0xFFFB010B, 0x06E704F2, 0x18EEE70D, 0x070E0105);
	r6 = D(r6, s1_1_2, 0xFF030124, 0xF91A03F7, 0xFE041800, 0xF80DF3FC);
	r7 = D(r7, s1_1_2, 0xF901FFF7, 0xFA140501, 0xD5101EC2, 0x0BCE01FA);
	r0 = D(r0, s1_2_0, 0x0A12F203, 0xF6ED030D, 0xF0151409, 0xF0FCFC2B);
	r1 = D(r1, s1_2_0, 0x01FFFE02, 0xF60204FD, 0xF6FBFDF1, 0x0302FCFD);
	r2 = D(r2, s1_2_0, 0x81820881, 0xEC2D00FE, 0xF5F607F4, 0xF7F2F70D);
	r3 = D(r3, s1_2_0, 0x030500F8, 0xF6FF0008, 0xFF000001, 0xFCFC0002);
	r4 = D(r4, s1_2_0, 0xF8FFF6FF, 0x01FB060B, 0xFE0402FB, 0xF40BFB14);
	r5 = D(r5, s1_2_0, 0xEA03F614, 0x17FCFF0D, 0xF404F01A, 0xFE0800E7);
	r6 = D(r6, s1_2_0, 0x010102FE, 0x14CE1DC2, 0xF0FD1DF1, 0xF20FF7E7);
	r7 = D(r7, s1_2_0, 0x07EE0FF3, 0x0E0401F6, 0xEF0AF9F3, 0xF7F407E3);
	r0 = D(r0, s1_2_1, 0x09E7E0DD, 0xFC13E90C, 0x43E724F6, 0x09F80DD5);
	r1 = D(r1, s1_2_1, 0x00FF0106, 0x01050101, 0x1202FCED, 0x0101FA0E);
	r2 = D(r2, s1_2_1, 0xFF05FF0D, 0xDEEC31C8, 0x05F307FF, 0x00F0F505);
	r3 = D(r3, s1_2_1, 0xFE010000, 0x00FB01FF, 0x0201FFFF, 0x02F60404);
	r4 = D(r4, s1_2_1, 0xF70D03E1, 0xEBF30FE6, 0x0C0E01F8, 0xEAF3EF12);
	r5 = D(r5, s1_2_1, 0xEA0001F8, 0x1102F717, 0xE71AF603, 0x0007F50E);
	r6 = D(r6, s1_2_1, 0xFD01FEFF, 0x0A0FF4F3, 0xF72802FB, 0xF316F6FA);
	r7 = D(r7, s1_2_1, 0x0E0301E3, 0x03F908FF, 0x130EED2D, 0x0115EBF6);
	r0 = D(r0, s1_2_2, 0xCF818124, 0xF2140008, 0xF5CA1EE1, 0x0114F903);
	r1 = D(r1, s1_2_2, 0x04FA03FC, 0x07FC0503, 0xFA0DFFF3, 0x02FCFFFF);
	r2 = D(r2, s1_2_2, 0xFC0300FF, 0x15F20607, 0xFBEF0AF1, 0xFC0AED11);
	r3 = D(r3, s1_2_2, 0x01FC0102, 0xF7FD06FF, 0x01FD0200, 0xFA000005);
	r4 = D(r4, s1_2_2, 0xFFF705F7, 0xF4E410F9, 0xF902FD05, 0x85818181);
	r5 = D(r5, s1_2_2, 0xF4F409F8, 0x0A09F900, 0x13FD07F0, 0x0801FD01);
	r6 = D(r6, s1_2_2, 0xFD05FE03, 0xE605FDEC, 0xED1DFBFE, 0xEB13FA02);
	r7 = D(r7, s1_2_2, 0x120BFBFA, 0x0906FC08, 0x2F09FA1B, 0x0106F7FA);
	s0_0_0 = G[6][xy.y+0][xy.x+0]; s0_0_1 = G[6][xy.y+0][xy.x+1];
	s0_0_2 = G[6][xy.y+0][xy.x+2]; s0_1_0 = G[6][xy.y+1][xy.x+0];
	s0_1_1 = G[6][xy.y+1][xy.x+1]; s0_1_2 = G[6][xy.y+1][xy.x+2];
	s0_2_0 = G[6][xy.y+2][xy.x+0]; s0_2_1 = G[6][xy.y+2][xy.x+1];
	s0_2_2 = G[6][xy.y+2][xy.x+2]; s1_0_0 = G[7][xy.y+0][xy.x+0];
	s1_0_1 = G[7][xy.y+0][xy.x+1]; s1_0_2 = G[7][xy.y+0][xy.x+2];
	s1_1_0 = G[7][xy.y+1][xy.x+0]; s1_1_1 = G[7][xy.y+1][xy.x+1];
	s1_1_2 = G[7][xy.y+1][xy.x+2]; s1_2_0 = G[7][xy.y+2][xy.x+0];
	s1_2_1 = G[7][xy.y+2][xy.x+1]; s1_2_2 = G[7][xy.y+2][xy.x+2];
	r0 = D(r0, s0_0_0, 0x0C0D08FE, 0x0D32FBE3, 0x020E07F3, 0x06EFFC02);
	r1 = D(r1, s0_0_0, 0x0400FE01, 0x09ED07F7, 0xE719DC0F, 0x0400FFFF);
	r2 = D(r2, s0_0_0, 0x00F9FE07, 0x11050505, 0xF6FC0D11, 0xD918EFE3);
	r3 = D(r3, s0_0_0, 0x2C8B81AD, 0xF919F90D, 0x020101FD, 0x81CF0281);
	r4 = D(r4, s0_0_0, 0xEB08FC02, 0xFC290FEB, 0xFD0407F9, 0x040003F3);
	r5 = D(r5, s0_0_0, 0xE7FD0205, 0xF128F207, 0x120FFC12, 0xFF09FE00);
	r6 = D(r6, s0_0_0, 0xFFFFFFFF, 0x0623060D, 0xF5F10D0D, 0x04FBF20D);
	r7 = D(r7, s0_0_0, 0xEF2725D7, 0xFD05E70B, 0xE0261BF7, 0x0DFEDD0D);
	r0 = D(r0, s0_0_1, 0x10ED03EA, 0xF50F0D04, 0xDDCC81FE, 0xC7D7CE32);
	r1 = D(r1, s0_0_1, 0x01010301, 0x14F3FAFB, 0xF813E70E, 0x0100FDFF);
	r2 = D(r2, s0_0_1, 0x020807F7, 0xFC8181F5, 0x080B1702, 0xF512F404);
	r3 = D(r3, s0_0_1, 0x03F1FE12, 0x000810FD, 0x02FEFEFF, 0xF5FC0505);
	r4 = D(r4, s0_0_1, 0x030C050A, 0x1108DDEF, 0xFF0206F3, 0x0311F500);
	r5 = D(r5, s0_0_1, 0x100308F5, 0xF69910FD, 0x17F4D523, 0x01F60C81);
	r6 = D(r6, s0_0_1, 0x01FDFD00, 0x20F7E218, 0xF9F8F708, 0xF9020BE0);
	r7 = D(r7, s0_0_1, 0x0005FBD9, 0xDAB6CF3B, 0xFD09F211, 0xF8F8E1E2);
	r0 = D(r0, s0_0_2, 0x21F00EE1, 0xDC1CE804, 0x1FCC33F4, 0x82D8F03C);
	r1 = D(r1, s0_0_2, 0x000203FE, 0x0CF902FE, 0xFF05F1FF, 0x01FDFF01);
	r2 = D(r2, s0_0_2, 0x0704FF07, 0xEB81D1AA, 0xFE02D1FE, 0x1216F3F0);
	r3 = D(r3, s0_0_2, 0x010101F3, 0xF90F2D07, 0xFD06FAFE, 0x0601071F);
	r4 = D(r4, s0_0_2, 0xFE1CF006, 0x0304ED03, 0xF40700F9, 0xE80A0FE8);
	r5 = D(r5, s0_0_2, 0xECFBFBEF, 0xF7F401CF, 0xE40100C7, 0xF104FEDF);
	r6 = D(r6, s0_0_2, 0xFFFE03FF, 0xEDEB04F8, 0x0EEF0344, 0xFCF90AF7);
	r7 = D(r7, s0_0_2, 0x2008012B, 0xFBF71A52, 0x0F080926, 0xEBEB12D9);
	r0 = D(r0, s0_1_0, 0xE907050C, 0x0D2700F8, 0x13220B0F, 0xDEFF0717);
	r1 = D(r1, s0_1_0, 0xFFFE0203, 0xF5E80D06, 0xFC0AF400, 0x0401FB00);
	r2 = D(r2, s0_1_0, 0x16F0E90F, 0xEDF605EC, 0xF8F30C07, 0xF5090215);
	r3 = D(r3, s0_1_0, 0x00EBF8F8, 0xF8100300, 0x02020402, 0x28F507F0);
	r4 = D(r4, s0_1_0, 0x00F310E7, 0x0A12F7F2, 0x09FF16FC, 0xF2FF12FC);
	r5 = D(r5, s0_1_0, 0xD6F105F9, 0xEFF3E506, 0xE028FDE4, 0xE5F3170B);
	r6 = D(r6, s0_1_0, 0x0000FFFF, 0xEAF3FB00, 0xFCF6EDEF, 0xF8F40FF0);
	r7 = D(r7, s0_1_0, 0x242A12FC, 0x173802F7, 0xE806FC03, 0x0EFDFEE9);
	r0 = D(r0, s0_1_1, 0x05F6DE1A, 0x14E6ECF3, 0xF1CB3E9A, 0xF8D5D1A2);
	r1 = D(r1, s0_1_1, 0x0007FEFE, 0x080C000A, 0x09EA08EB, 0x00FE0302);
	r2 = D(r2, s0_1_1, 0xF30C0902, 0xD1CBD10B, 0x1516FA04, 0xC7071BF4);
	r3 = D(r3, s0_1_1, 0xFAF50A0B, 0x04211AE5, 0xFC00FD00, 0x0EE30102);
	r4 = D(r4, s0_1_1, 0xFC0EF3F5, 0x01D505D9, 0x0B0C1509, 0x02F2DE00);
	r5 = D(r5, s0_1_1, 0x0101FAE3, 0xC912E0EA, 0xCAF61906, 0x091E04F7);
	r6 = D(r6, s0_1_1, 0xFEFF0200, 0xFEEBF7CC, 0xE0D7F7CF, 0x140AF6C5);
	r7 = D(r7, s0_1_1, 0xF805F9FA, 0xEBB9FECC, 0xECD9D205, 0xE60FF3E3);
	r0 = D(r0, s0_1_2, 0x26E1FDEF, 0xD5DC0719, 0xE181F7FD, 0xA2021E08);
	r1 = D(r1, s0_1_2, 0xFD00FD01, 0xFE000D02, 0x0FE9FC03, 0x03040302);
	r2 = D(r2, s0_1_2, 0xFCFE06F2, 0x0E81DA08, 0xFAE91805, 0x17CEF7F9);
	r3 = D(r3, s0_1_2, 0x010103FD, 0xEF160D08, 0x0901FD01, 0xFB040CFC);
	r4 = D(r4, s0_1_2, 0xE90BDE18, 0xF7080804, 0xFDFCF5F9, 0xF10C001A);
	r5 = D(r5, s0_1_2, 0xD80E01E3, 0x02E7EFB5, 0x11D2E9E7, 0x040312F8);
	r6 = D(r6, s0_1_2, 0x01060402, 0x11F6EB0F, 0xC90733F9, 0x2A060EF3);
	r7 = D(r7, s0_1_2, 0xF4F4E4DB, 0xFAE2CBEB, 0x07E806F5, 0x09FF05C5);
	r0 = D(r0, s0_2_0, 0x15F2F4F7, 0xF5010700, 0xEA41E91E, 0x20210DFE);
	r1 = D(r1, s0_2_0, 0xFF01FF00, 0xF7F90101, 0x01F9F4FD, 0x0202FC01);
	r2 = D(r2, s0_2_0, 0x81818186, 0x1D1506CA, 0xECFF040F, 0x0324DE1C);
	r3 = D(r3, s0_2_0, 0x08020000, 0xF81A04FC, 0x0100FFFF, 0xF0FD15FF);
	r4 = D(r4, s0_2_0, 0x04F20103, 0xFA0EF30F, 0x06F80D00, 0xF9F507FF);
	r5 = D(r5, s0_2_0, 0xF3FC00F9, 0x17E50D09, 0x2B1605E0, 0x040C0A00);
	r6 = D(r6, s0_2_0, 0x00010201, 0xEDF00108, 0xECFE0F0C, 0x140F0F02);
	r7 = D(r7, s0_2_0, 0xEF0EFA0A, 0x0E0104FC, 0x0FFCF4FE, 0x1500FFF0);
	r0 = D(r0, s0_2_1, 0x26161FF3, 0xFDD401F9, 0x1F49F71B, 0x0718E818);
	r1 = D(r1, s0_2_1, 0x0103FDFF, 0x05F90702, 0x0FFBFEF7, 0xFAFDFFFB);
	r2 = D(r2, s0_2_1, 0xFBFDFFFF, 0xE2280DFE, 0xF807F603, 0xD816F823);
	r3 = D(r3, s0_2_1, 0x0202FE02, 0xF30F0AFA, 0xFE000000, 0x02020402);
	r4 = D(r4, s0_2_1, 0x0E0D10F3, 0xE7000E06, 0x11F509FD, 0xF3F4FB1B);
	r5 = D(r5, s0_2_1, 0xE0B10AFD, 0x04F713DD, 0x20DD04F0, 0x02EE07F5);
	r6 = D(r6, s0_2_1, 0xFE0403FE, 0xD00AF2EC, 0xDA140BF3, 0xEB0403DD);
	r7 = D(r7, s0_2_1, 0x1A0CF2F2, 0x0BE10AFF, 0xEFF3040B, 0xFA000CF4);
	r0 = D(r0, s0_2_2, 0x96D0BF03, 0x0E01FFE8, 0xFB2EF118, 0xC6F00BFF);
	r1 = D(r1, s0_2_2, 0xFD03FEFF, 0xF1020104, 0x01EFFCEE, 0x02FDFEFF);
	r2 = D(r2, s0_2_2, 0x00FD0003, 0xDB1710E3, 0xD9020313, 0xB0ED01DF);
	r3 = D(r3, s0_2_2, 0xFF00FAFD, 0xDE1803FE, 0xFF0301FE, 0x010704FB);
	r4 = D(r4, s0_2_2, 0xEE10FB11, 0xFE18FD06, 0xF8FD04FF, 0x81D981D5);
	r5 = D(r5, s0_2_2, 0xEAF80217, 0x0A01F502, 0xFBF80606, 0xF7080403);
	r6 = D(r6, s0_2_2, 0x06FCFD00, 0x5016F3F4, 0xF0B90403, 0x420001EF);
	r7 = D(r7, s0_2_2, 0xF5F3F7D7, 0xF8ED0BF6, 0xFBF008E7, 0x070501E7);
	r0 = D(r0, s1_0_0, 0x0D000712, 0xFCFC0DFF, 0xECE71FF1, 0x1A01FD1F);
	r1 = D(r1, s1_0_0, 0x0100FF01, 0x0209FD00, 0x0C13F808, 0xFF0201FF);
	r2 = D(r2, s1_0_0, 0xFEF70503, 0xE707F0E1, 0xFBFAFBF8, 0x0506E201);
	r3 = D(r3, s1_0_0, 0x81818E12, 0x010600F0, 0xFE000002, 0x8DB68181);
	r4 = D(r4, s1_0_0, 0xE90505FD, 0x03F3FD03, 0x00FB09FB, 0x03FF0B04);
	r5 = D(r5, s1_0_0, 0xF5EB0406, 0x25190816, 0x0C091212, 0xFBFE07F1);
	r6 = D(r6, s1_0_0, 0x010101FF, 0xFEFCF81E, 0xEBFAFFF4, 0x0EEF0AFD);
	r7 = D(r7, s1_0_0, 0xDC1CF8F6, 0x0B01F501, 0x06F8EA06, 0xFECFF7F4);
	r0 = D(r0, s1_0_1, 0x070003FE, 0x0FFDEDF8, 0xF4EB2915, 0x05BCDE10);
	r1 = D(r1, s1_0_1, 0x05FFFF01, 0x1908050B, 0x05F9FFF5, 0xFB020200);
	r2 = D(r2, s1_0_1, 0x0201FC06, 0xDDF50924, 0x0501010F, 0xF5FF0B08);
	r3 = D(r3, s1_0_1, 0xF5FF1308, 0xF1030AFE, 0xFCFCFF01, 0x23FD091B);
	r4 = D(r4, s1_0_1, 0xE8F2F605, 0x131F11F9, 0x01FF0207, 0x05FFF7FE);
	r5 = D(r5, s1_0_1, 0xF7FEFCFF, 0xF8EF100A, 0x14E523F6, 0x02F80B19);
	r6 = D(r6, s1_0_1, 0xFAFEFFFE, 0x01DF0C06, 0xFFF41204, 0xFA05FBFC);
	r7 = D(r7, s1_0_1, 0xEBE409E7, 0x06E5EFF2, 0xF10807F4, 0xE5180F0A);
	r0 = D(r0, s1_0_2, 0x2AF5000E, 0x051D0F0D, 0x0266EBF8, 0xF3FAE9DA);
	r1 = D(r1, s1_0_2, 0x03FD00FF, 0x03090501, 0xF307FA01, 0xFEFF0100);
	r2 = D(r2, s1_0_2, 0x02FF0006, 0x31500EED, 0x032107F2, 0x06FCE701);
	r3 = D(r3, s1_0_2, 0x0CFEFAFA, 0xF6F8F8FF, 0x0502FD07, 0x08FFFCFD);
	r4 = D(r4, s1_0_2, 0x01030403, 0x08FC08FD, 0xFF00FEF7, 0xF20B0B0C);
	r5 = D(r5, s1_0_2, 0xF1090102, 0xC3F9ED00, 0x0725141A, 0x02F1FDFC);
	r6 = D(r6, s1_0_2, 0xFD000102, 0x111EF91E, 0xFA0403E2, 0xFEFCF307);
	r7 = D(r7, s1_0_2, 0xF822FD00, 0x09F5F900, 0xFC000AFC, 0xF42E13F4);
	r0 = D(r0, s1_1_0, 0xF504F71D, 0x0F20FA0D, 0xE60BF41E, 0xF1001F31);
	r1 = D(r1, s1_1_0, 0xFDFE0001, 0x08F703FF, 0x15F7F6EF, 0x0201FFFF);
	r2 = D(r2, s1_1_0, 0x09E9FE03, 0x2F0A38FC, 0xFAEFF903, 0xF5F905DB);
	r3 = D(r3, s1_1_0, 0xDDFFF6FC, 0x05F90E11, 0x000000FD, 0x240004FA);
	r4 = D(r4, s1_1_0, 0xFFEE1BDE, 0x0707EB0C, 0xF7FEFCFD, 0xF8FF02FF);
	r5 = D(r5, s1_1_0, 0x06FBFAF7, 0x00EDF70F, 0xEC00FE02, 0x14FE02FF);
	r6 = D(r6, s1_1_0, 0x010200FF, 0x29020AE1, 0x1BE2FF0C, 0xFDEFF00A);
	r7 = D(r7, s1_1_0, 0xF2290B28, 0x130BFC01, 0x1BFD2617, 0x140806FD);
	r0 = D(r0, s1_1_1, 0xF7031227, 0xB7F133C3, 0x292D1A1B, 0xF2F02799);
	r1 = D(r1, s1_1_1, 0x0B05FE03, 0xDDFBFD05, 0x11E8EA04, 0xFBFD04FA);
	r2 = D(r2, s1_1_1, 0x3309F8F7, 0x37FEE1F1, 0x08FDF3F2, 0x221ED707);
	r3 = D(r3, s1_1_1, 0x28FBF604, 0x080B120A, 0xFC03FF03, 0x0CF4FFF6);
	r4 = D(r4, s1_1_1, 0x05E70BE8, 0xD8FE10DD, 0xF5F6EAFF, 0x00DEFAF1);
	r5 = D(r5, s1_1_1, 0xE3C601EE, 0xA3E41E17, 0xE98607CE, 0x02140610);
	r6 = D(r6, s1_1_1, 0xF7FD02FA, 0xB217F5CE, 0xF610F1E6, 0x04080EFF);
	r7 = D(r7, s1_1_1, 0x03FB02F8, 0xEA1AFBE5, 0x05FB22EE, 0xF6080707);
	r0 = D(r0, s1_1_2, 0x152AF9D6, 0x37E8E52E, 0xD50F08C3, 0x05E50A19);
	r1 = D(r1, s1_1_2, 0xE30809FB, 0x080105FD, 0x0DF70117, 0x03FEFFFE);
	r2 = D(r2, s1_1_2, 0xFC0407FF, 0x1EDF1EF1, 0xF20F1A0B, 0xC81515DB);
	r3 = D(r3, s1_1_2, 0xFC0000FB, 0x4306FE0D, 0x29030001, 0x10080EFF);
	r4 = D(r4, s1_1_2, 0x0904FF02, 0x02EFFFF6, 0xF40308FE, 0x2BE60113);
	r5 = D(r5, s1_1_2, 0xF4F9F708, 0xD4F8FAF1, 0xF3DAF914, 0xFD04050B);
	r6 = D(r6, s1_1_2, 0x25FAF707, 0xF7F0DF0A, 0xEC81EE05, 0xE6EEBD07);
	r7 = D(r7, s1_1_2, 0xFAEAEFEB, 0xED1209E5, 0x2304FAF8, 0x10F7E007);
	r0 = D(r0, s1_2_0, 0xFFF807D1, 0xF306FDFE, 0x1B0F310D, 0xF7F1E820);
	r1 = D(r1, s1_2_0, 0x01000100, 0x0DFF0406, 0x03F2F8F7, 0x02010000);
	r2 = D(r2, s1_2_0, 0x818181AC, 0x0A391307, 0x07E90005, 0x0DFBF437);
	r3 = D(r3, s1_2_0, 0x140DFEFB, 0xFF0005FF, 0x01FFFF00, 0x03010603);
	r4 = D(r4, s1_2_0, 0xFCFD0601, 0x09FCF414, 0xFE04FD07, 0x04000905);
	r5 = D(r5, s1_2_0, 0x150602FB, 0x07F4250A, 0x301312F3, 0x02FDF5F8);
	r6 = D(r6, s1_2_0, 0xFF01FF00, 0x0613F817, 0xF4F10D16, 0xE100E3F6);
	r7 = D(r7, s1_2_0, 0xFA0AFCF9, 0x010A0B03, 0x0CF210FE, 0xF00AEBE8);
	r0 = D(r0, s1_2_1, 0xEAF0FDE6, 0xE4FDF6EE, 0xD02AB214, 0xE9151BEE);
	r1 = D(r1, s1_2_1, 0xF401FDFE, 0xEE02F908, 0x0705F5FB, 0xFAFEFD03);
	r2 = D(r2, s1_2_1, 0x04010807, 0xE909E22F, 0xD906F601, 0x20E90F15);
	r3 = D(r3, s1_2_1, 0x0501FDFC, 0xF80A01FB, 0xFE0300FF, 0xF6000203);
	r4 = D(r4, s1_2_1, 0x070EF30D, 0x27FD1C05, 0x32090CF9, 0xF7100A06);
	r5 = D(r5, s1_2_1, 0x15FF0117, 0xEBFD04E1, 0xFAE8D3D9, 0xF7010203);
	r6 = D(r6, s1_2_1, 0x0AFF0204, 0x2F0E1801, 0xEA2B37EE, 0xF9FC1C0F);
	r7 = D(r7, s1_2_1, 0xEE0AD7F2, 0xF70D17F0, 0xE1E9DBF4, 0x0A0EE8F8);
	r0 = D(r0, s1_2_2, 0x81819A81, 0x0DF8F70E, 0x24E01EFF, 0xFF111EB6);
	r1 = D(r1, s1_2_2, 0x18FE06FE, 0x02FEFD08, 0x03FA0113, 0x07FF0100);
	r2 = D(r2, s1_2_2, 0x0700FD01, 0x14050511, 0xFA0D160F, 0x082209FB);
	r3 = D(r3, s1_2_2, 0x0305FE01, 0x05070710, 0x02FE0100, 0x0703FA03);
	r4 = D(r4, s1_2_2, 0xFBFA0C0D, 0xFAFAE00C, 0xF5FE08FD, 0x81818181);
	r5 = D(r5, s1_2_2, 0x0CFC0A12, 0x07F6F7FC, 0x0405F9EE, 0x12F50800);
	r6 = D(r6, s1_2_2, 0xEE01FC05, 0xD702FDFB, 0x1819FC0F, 0xF3F2F0F8);
	r7 = D(r7, s1_2_2, 0xFC1FE8F4, 0x17121DFE, 0xF20613FC, 0xFA0EE8ED);
	f0 = vec4(r0) * 6.2000124e-05;
	f0 += vec4(2.249e-02, 6.887e-03, -3.851e-02, -1.429e-02);
	f0 = clamp(f0, vec4(0.0), vec4(1.0));
	imageStore(out_image, opos + ivec2(0, 0), f0);
	f1 = vec4(r1) * 6.2000124e-05;
	f1 += vec4(-3.745e-03, -1.296e-02, -2.203e-02, -8.904e-03);
	f1 = clamp(f1, vec4(0.0), vec4(1.0));
	imageStore(out_image, opos + ivec2(1, 0), f1);
	f2 = vec4(r2) * 6.2000124e-05;
	f2 += vec4(-9.122e-03, -1.068e-01, -2.188e-02, -2.777e-02);
	f2 = clamp(f2, vec4(0.0), vec4(1.0));
	imageStore(out_image, opos + ivec2(0, 1), f2);
	f3 = vec4(r3) * 6.2000124e-05;
	f3 += vec4(8.274e-03, 1.677e-02, -1.772e-02, 8.690e-03);
	f3 = clamp(f3, vec4(0.0), vec4(1.0));
	imageStore(out_image, opos + ivec2(1, 1), f3);
	f4 = vec4(r4) * 6.2000124e-05;
	f4 += vec4(-3.054e-02, -1.376e-02, -2.740e-02, 1.739e-03);
	f4 = clamp(f4, vec4(0.0), vec4(1.0));
	imageStore(out_image, opos + ivec2(2, 0), f4);
	f5 = vec4(r5) * 6.2000124e-05;
	f5 += vec4(-1.187e-02, 2.732e-02, -6.792e-03, -6.711e-02);
	f5 = clamp(f5, vec4(0.0), vec4(1.0));
	imageStore(out_image, opos + ivec2(3, 0), f5);
	f6 = vec4(r6) * 6.2000124e-05;
	f6 += vec4(-6.733e-03, -4.140e-03, -3.650e-02, -2.972e-02);
	f6 = clamp(f6, vec4(0.0), vec4(1.0));
	imageStore(out_image, opos + ivec2(2, 1), f6);
	f7 = vec4(r7) * 6.2000124e-05;
	f7 += vec4(-3.658e-03, 9.442e-03, -6.172e-03, -8.173e-03);
	f7 = clamp(f7, vec4(0.0), vec4(1.0));
	imageStore(out_image, opos + ivec2(3, 1), f7);
}

//!DESC CuNNy-8x32-conv4
//!HOOK LUMA
//!COMPUTE 32 16 8 8
//!BIND conv3
//!BIND LUMA
//!SAVE conv4
//!WIDTH LUMA.w 4 *
//!HEIGHT LUMA.h 2 *
//!COMPONENTS 4
//!WHEN OUTPUT.w LUMA.w / 1.3 > OUTPUT.h LUMA.h / 1.3 > *
#extension GL_EXT_spirv_intrinsics : require
spirv_instruction (extensions = ["SPV_KHR_integer_dot_product"], capabilities = [6019, 6018], id = 4450)
int dp4(int a, int b, spirv_literal int fmt);
#define D(r, s, a, b, c, d) r + ivec4(dp4(s, a, 0), dp4(s, b, 0), dp4(s, c, 0), dp4(s, d, 0))
shared int G[8][10][10];
void hook() {
	ivec2 xy = ivec2(gl_LocalInvocationID.xy);
	ivec2 pos = ivec2(gl_WorkGroupID.xy) * ivec2(8, 8) + xy;
	ivec2 opos = pos * ivec2(4, 2);
	ivec2 sz = ivec2(LUMA_size) - ivec2(1);
	for (int y = 0; y < 10; y += 8) {
		int ay = xy.y + y;
		if (ay >= 10) break;
		for (int x = 0; x < 10; x += 8) {
			int ax = xy.x + x;
			if (ax >= 10) break;
			vec2 p;
			vec4 r, g, b, a;
			p = vec2(clamp(pos + ivec2(x - 1, y - 1), ivec2(0), sz) * ivec2(4, 2) + ivec2(1, 1)) * conv3_pt;
			r = conv3_gather(p, 0);
			g = conv3_gather(p, 1);
			b = conv3_gather(p, 2);
			a = conv3_gather(p, 3);
			vec4 v0 = vec4(r.w, g.w, b.w, a.w) * 1.0000000e+00;
			vec4 v1 = vec4(r.z, g.z, b.z, a.z) * 1.0000000e+00;
			vec4 v2 = vec4(r.x, g.x, b.x, a.x) * 1.0000000e+00;
			vec4 v3 = vec4(r.y, g.y, b.y, a.y) * 1.0000000e+00;
			p = vec2(clamp(pos + ivec2(x - 1, y - 1), ivec2(0), sz) * ivec2(4, 2) + ivec2(3, 1)) * conv3_pt;
			r = conv3_gather(p, 0);
			g = conv3_gather(p, 1);
			b = conv3_gather(p, 2);
			a = conv3_gather(p, 3);
			vec4 v4 = vec4(r.w, g.w, b.w, a.w) * 1.0000000e+00;
			vec4 v5 = vec4(r.z, g.z, b.z, a.z) * 1.0000000e+00;
			vec4 v6 = vec4(r.x, g.x, b.x, a.x) * 1.0000000e+00;
			vec4 v7 = vec4(r.y, g.y, b.y, a.y) * 1.0000000e+00;
			G[0][ay][ax] = int(packSnorm4x8(v0));
			G[1][ay][ax] = int(packSnorm4x8(v1));
			G[2][ay][ax] = int(packSnorm4x8(v2));
			G[3][ay][ax] = int(packSnorm4x8(v3));
			G[4][ay][ax] = int(packSnorm4x8(v4));
			G[5][ay][ax] = int(packSnorm4x8(v5));
			G[6][ay][ax] = int(packSnorm4x8(v6));
			G[7][ay][ax] = int(packSnorm4x8(v7));
		}
	}
	barrier();
	int s0_0_0, s0_0_1, s0_0_2, s0_1_0, s0_1_1, s0_1_2, s0_2_0, s0_2_1, s0_2_2, s1_0_0, s1_0_1, s1_0_2, s1_1_0, s1_1_1, s1_1_2, s1_2_0, s1_2_1, s1_2_2;
	ivec4 r0, r1, r2, r3, r4, r5, r6, r7;
	vec4 f0, f1, f2, f3, f4, f5, f6, f7;
	r0 = ivec4(0); r1 = ivec4(0); r2 = ivec4(0); r3 = ivec4(0); r4 = ivec4(0); r5 = ivec4(0); r6 = ivec4(0); r7 = ivec4(0);
	s0_0_0 = G[0][xy.y+0][xy.x+0]; s0_0_1 = G[0][xy.y+0][xy.x+1];
	s0_0_2 = G[0][xy.y+0][xy.x+2]; s0_1_0 = G[0][xy.y+1][xy.x+0];
	s0_1_1 = G[0][xy.y+1][xy.x+1]; s0_1_2 = G[0][xy.y+1][xy.x+2];
	s0_2_0 = G[0][xy.y+2][xy.x+0]; s0_2_1 = G[0][xy.y+2][xy.x+1];
	s0_2_2 = G[0][xy.y+2][xy.x+2]; s1_0_0 = G[1][xy.y+0][xy.x+0];
	s1_0_1 = G[1][xy.y+0][xy.x+1]; s1_0_2 = G[1][xy.y+0][xy.x+2];
	s1_1_0 = G[1][xy.y+1][xy.x+0]; s1_1_1 = G[1][xy.y+1][xy.x+1];
	s1_1_2 = G[1][xy.y+1][xy.x+2]; s1_2_0 = G[1][xy.y+2][xy.x+0];
	s1_2_1 = G[1][xy.y+2][xy.x+1]; s1_2_2 = G[1][xy.y+2][xy.x+2];
	r0 = D(r0, s0_0_0, 0x0D1E00F4, 0xF210FF7F, 0x2E9DF9B1, 0xFB02F0E8);
	r1 = D(r1, s0_0_0, 0x04C50751, 0x0A06FD2D, 0xF1E10F81, 0x0502001C);
	r2 = D(r2, s0_0_0, 0xD9CB0EB7, 0x0BF8FBF0, 0x00B4F4ED, 0xFE380281);
	r3 = D(r3, s0_0_0, 0xEF0A008E, 0x03FA01ED, 0xFFFA04DB, 0xFE07FEE3);
	r4 = D(r4, s0_0_0, 0xF1110612, 0x01FD02E7, 0xF107067F, 0x0A0E0F34);
	r5 = D(r5, s0_0_0, 0xFEF00E7F, 0x0103FBE5, 0x00FF0299, 0x01F4FC99);
	r6 = D(r6, s0_0_0, 0xFDF009BA, 0x04D50F96, 0xED2E1481, 0x35E6E43D);
	r7 = D(r7, s0_0_0, 0xFC090105, 0xFE01F40C, 0xFCDD0A49, 0xFCF408D0);
	r0 = D(r0, s0_0_1, 0x1D0F0810, 0x10E9F9FF, 0x1B00D644, 0x13F8F2F4);
	r1 = D(r1, s0_0_1, 0x010A0201, 0x09F9FF00, 0xFDDC1D81, 0x03FEFCC4);
	r2 = D(r2, s0_0_1, 0xF2F702DC, 0x06E6FEDF, 0x29C50C81, 0x0B160934);
	r3 = D(r3, s0_0_1, 0x0E0F0101, 0xFEFF01FF, 0x0E1C0F25, 0x020EFE2B);
	r4 = D(r4, s0_0_1, 0xF9050419, 0xFF0200FF, 0xEE0E11B9, 0xFCF00504);
	r5 = D(r5, s0_0_1, 0x1513031E, 0xFC0B01F0, 0xFD0AFD02, 0x00F3FB21);
	r6 = D(r6, s0_0_1, 0xF5E509ED, 0x01F51411, 0xED160115, 0x1920E2E0);
	r7 = D(r7, s0_0_1, 0x04040527, 0x12F6FA2A, 0xEB0304FD, 0x021A0322);
	r0 = D(r0, s0_0_2, 0x04000EE9, 0x0B09F903, 0xDE05D713, 0x0B00FAFB);
	r1 = D(r1, s0_0_2, 0x01F0FBFA, 0x03EB000C, 0xE5FA0F05, 0xFD0BFC00);
	r2 = D(r2, s0_0_2, 0xDA061506, 0x00F10327, 0x2587ED01, 0x22110BF2);
	r3 = D(r3, s0_0_2, 0xFB03FD12, 0xFCFCFEFE, 0xF4FF0AF1, 0x0A0A01FC);
	r4 = D(r4, s0_0_2, 0xFC04080E, 0xFC01FDFF, 0xE21006F8, 0x0A02F90F);
	r5 = D(r5, s0_0_2, 0xF5F805F6, 0x0A10FF04, 0x0203F5F9, 0x07FBF804);
	r6 = D(r6, s0_0_2, 0xF2020C0A, 0xD61CF7CA, 0xF21A02FF, 0x34FDFFEE);
	r7 = D(r7, s0_0_2, 0xFD040603, 0xFCEFFC07, 0x0C0D0DFB, 0xF70B050F);
	r0 = D(r0, s0_1_0, 0xFEE0FED5, 0xF0E4002E, 0x17EF0033, 0xFD0CFD3E);
	r1 = D(r1, s0_1_0, 0xF9EA03F4, 0x0701012F, 0x1DEB04E9, 0x0404FFCD);
	r2 = D(r2, s0_1_0, 0xFE231F23, 0xF613EA42, 0xF456FCD5, 0xFD1907D1);
	r3 = D(r3, s0_1_0, 0x08EC01E6, 0xFDF8FFFE, 0x0DF1FA09, 0x0102FCE0);
	r4 = D(r4, s0_1_0, 0xFE14FFF7, 0x00FA030A, 0x061AFB1A, 0x1411060C);
	r5 = D(r5, s0_1_0, 0x02EB0CC1, 0xFEDD02DA, 0x020403FB, 0x0501FD04);
	r6 = D(r6, s0_1_0, 0x040C06F6, 0xFE090860, 0x00E50125, 0xF9160070);
	r7 = D(r7, s0_1_0, 0xFF0803FD, 0xFD14FC81, 0xF9F10F18, 0x02FC0203);
	r0 = D(r0, s0_1_1, 0xF8270312, 0x0CEDFECC, 0xF630E3B8, 0x0905F112);
	r1 = D(r1, s0_1_1, 0xFF0A0306, 0x0305FF0F, 0x06E706FF, 0xFCEFF921);
	r2 = D(r2, s0_1_1, 0x21CB244B, 0xFF140511, 0x2190213E, 0x07F80F12);
	r3 = D(r3, s0_1_1, 0xFFF804FF, 0xFDF8031F, 0x01FE0D04, 0x06040424);
	r4 = D(r4, s0_1_1, 0x0117FA0D, 0xFF00010B, 0xF9EA0DFB, 0x15E7F305);
	r5 = D(r5, s0_1_1, 0x0512FAF0, 0x12080014, 0x030FF6FB, 0x01F5FBF3);
	r6 = D(r6, s0_1_1, 0xFE1C0681, 0xE5B6F7F0, 0x09DDF317, 0x021A0950);
	r7 = D(r7, s0_1_1, 0xFD0B0614, 0x0E09FF81, 0xEF2002FD, 0xFB0B03E4);
	r0 = D(r0, s0_1_2, 0xFE0A1610, 0x0D2AEFF8, 0x0C1ACC14, 0x0D19F61A);
	r1 = D(r1, s0_1_2, 0xF5040AF4, 0x08FD0203, 0xF8D4FBEE, 0xFDF000FE);
	r2 = D(r2, s0_1_2, 0xD5E82CFD, 0x0F1C15FB, 0x1E00D718, 0xEEDFF207);
	r3 = D(r3, s0_1_2, 0xF9F50C06, 0xFCFBFFFE, 0x090017F5, 0x01FCFDFA);
	r4 = D(r4, s0_1_2, 0xFAF205FE, 0xFC02FF01, 0xE5E1EE01, 0x0EEFF2F1);
	r5 = D(r5, s0_1_2, 0x06040108, 0x0008F8FA, 0x0913F20C, 0x0600FDFF);
	r6 = D(r6, s0_1_2, 0xFD2108F3, 0x09CC04FC, 0xFDE90C07, 0x24E809F9);
	r7 = D(r7, s0_1_2, 0xFD020902, 0x0DF806F6, 0xF9FE0A0B, 0xE1F90528);
	r0 = D(r0, s0_2_0, 0x00F20802, 0xFE3E070D, 0x01310108, 0x00E7F905);
	r1 = D(r1, s0_2_0, 0x091300FC, 0xEE0E04EF, 0xF7E1033D, 0xFE03FBF1);
	r2 = D(r2, s0_2_0, 0xFC290B03, 0x1230F606, 0x1E810A0B, 0xFEF90E10);
	r3 = D(r3, s0_2_0, 0x050306EC, 0x00FD0106, 0x091EF414, 0x0406FBF9);
	r4 = D(r4, s0_2_0, 0xFC020606, 0xFFFC0407, 0x04EDFE09, 0x04150419);
	r5 = D(r5, s0_2_0, 0x04811407, 0xFEE30B17, 0x08EC0002, 0x01FDFD02);
	r6 = D(r6, s0_2_0, 0x01E805F9, 0xFA0E05F4, 0xEDE611E1, 0x044CEF0D);
	r7 = D(r7, s0_2_0, 0xFE0E02FD, 0x1216E8F8, 0xFA11080A, 0x05DE090C);
	r0 = D(r0, s0_2_1, 0x05C008FB, 0x02DD0718, 0x1D33EB0A, 0x07E5FC08);
	r1 = D(r1, s0_2_1, 0x080BFE0A, 0xCC00FD08, 0x21EAFBDC, 0x0317FEF7);
	r2 = D(r2, s0_2_1, 0x05250DE3, 0x0524F5E6, 0x071C2907, 0x0B1103FC);
	r3 = D(r3, s0_2_1, 0xFC03FD01, 0xFEFC02FC, 0x0DF70EF0, 0xFEF90507);
	r4 = D(r4, s0_2_1, 0xFD0AFCFC, 0x000400FB, 0xFAE50AF9, 0x1A0EFEEC);
	r5 = D(r5, s0_2_1, 0xFE1BFD1F, 0xFBD8FDF6, 0x02EDFF04, 0x04FEFE01);
	r6 = D(r6, s0_2_1, 0xFFC80301, 0x0B3FFF06, 0xE716040F, 0xCFF51213);
	r7 = D(r7, s0_2_1, 0xFF06FF00, 0x041EF3ED, 0xF71903F7, 0x091707F3);
	r0 = D(r0, s0_2_2, 0x09FFF5FD, 0x15ECF8F9, 0x270CE3F7, 0x0112FA02);
	r1 = D(r1, s0_2_2, 0x06FB020B, 0x0FFEFCFF, 0xF8020201, 0x0205FEFF);
	r2 = D(r2, s0_2_2, 0xE01B080C, 0x06150A06, 0x070FF516, 0x100D0EF8);
	r3 = D(r3, s0_2_2, 0xF8030401, 0x01FF00FE, 0x05F20602, 0x000001FF);
	r4 = D(r4, s0_2_2, 0xFB0306FA, 0x02FFFE00, 0xEEEF04FC, 0x1300F0FE);
	r5 = D(r5, s0_2_2, 0xFFF206FA, 0xFD0AF5F7, 0xFBF6F705, 0x0301FE03);
	r6 = D(r6, s0_2_2, 0x17D2F504, 0x052A0012, 0x05F71202, 0xCF1FFAF3);
	r7 = D(r7, s0_2_2, 0xFD0201FC, 0x19FDF810, 0x00160409, 0xFD08FD07);
	r0 = D(r0, s1_0_0, 0x0F0907F7, 0xFFF91A01, 0x1D470F2B, 0x17F1F716);
	r1 = D(r1, s1_0_0, 0xF2F4FB0A, 0xFF02FDF3, 0xE0020623, 0xF5050400);
	r2 = D(r2, s1_0_0, 0x86140BEB, 0xEBE9E3B3, 0xAD001001, 0xEDE50500);
	r3 = D(r3, s1_0_0, 0x0D0713FB, 0xF9FE00FB, 0xFF04FEF4, 0x00FFFE1C);
	r4 = D(r4, s1_0_0, 0xF70CFFFB, 0x04FC010A, 0x06F3FA0C, 0xFEE105FD);
	r5 = D(r5, s1_0_0, 0x81F4029D, 0xFDFF0B0A, 0x0002030D, 0xFD06FFF1);
	r6 = D(r6, s1_0_0, 0xF0FBFCFB, 0xF30A0DEE, 0xE32B0003, 0x0ACCF5DA);
	r7 = D(r7, s1_0_0, 0x01FC04F5, 0x15FD121B, 0xE6040806, 0xFE0006F5);
	r0 = D(r0, s1_0_1, 0xF9070EFB, 0xC7F5FBF4, 0xFBBE0D21, 0x0300170C);
	r1 = D(r1, s1_0_1, 0x0CF6F5B2, 0xFCF4FE05, 0x81DC0CFE, 0xDC0701FD);
	r2 = D(r2, s1_0_1, 0x8111FBDF, 0xE0F5F2CE, 0x34DE2104, 0x30DFF92A);
	r3 = D(r3, s1_0_1, 0x03030BF5, 0x24FF0103, 0xFD0402F8, 0xF20A0502);
	r4 = D(r4, s1_0_1, 0xC701FF04, 0x0102FEFF, 0xAEF30A02, 0x8F1CF800);
	r5 = D(r5, s1_0_1, 0x1FFA10FD, 0x01FB0602, 0x3209060B, 0x3003FEF3);
	r6 = D(r6, s1_0_1, 0x0EF0F810, 0xD8420DE0, 0x02FC05FE, 0x27E9FC1F);
	r7 = D(r7, s1_0_1, 0x5004FC02, 0x0CF02102, 0x04F9F914, 0xEC050AFF);
	r0 = D(r0, s1_0_2, 0xFE0303F4, 0xE209FB0A, 0x0CF903EF, 0xFDFBF602);
	r1 = D(r1, s1_0_2, 0x04E11015, 0x0BFA0DFB, 0xE62501E9, 0xF706F2FC);
	r2 = D(r2, s1_0_2, 0x0F1C06FF, 0x160408F1, 0x10F9FD09, 0xF7C3FCF9);
	r3 = D(r3, s1_0_2, 0x10F207FF, 0x01FEFDFD, 0x021105F9, 0xFF050703);
	r4 = D(r4, s1_0_2, 0x0600FCFD, 0x03FE0200, 0xDFF10F0B, 0xFF050AF3);
	r5 = D(r5, s1_0_2, 0x08F40701, 0x01FB1DFE, 0x07FDFE05, 0x090501FF);
	r6 = D(r6, s1_0_2, 0x00F6F807, 0xF50205ED, 0x001000FB, 0xF90BFCFE);
	r7 = D(r7, s1_0_2, 0x080100FD, 0x09FC0E00, 0xFB070509, 0xF4FC0202);
	r0 = D(r0, s1_1_0, 0x01E5F5C4, 0xFFE6FEBC, 0xFE051ADC, 0xE2FEF3C7);
	r1 = D(r1, s1_1_0, 0x25FBF91F, 0x0BF40106, 0xEC211107, 0x0608050F);
	r2 = D(r2, s1_1_0, 0xED110F13, 0x25CBE4D0, 0x170ADFE6, 0xF6D806F0);
	r3 = D(r3, s1_1_0, 0x14F30A0E, 0x0803FF61, 0xF8ECFFFF, 0xFD11FC18);
	r4 = D(r4, s1_1_0, 0xF601F9E7, 0x02F902F3, 0x050207FB, 0x001106F3);
	r5 = D(r5, s1_1_0, 0x964819A6, 0xD80E0603, 0xF8F70113, 0x0205FFF8);
	r6 = D(r6, s1_1_0, 0x08FCFBF8, 0xF40F010C, 0xFA0706EB, 0xFE00FA1F);
	r7 = D(r7, s1_1_0, 0x02FAFDF8, 0x12E6018C, 0xEC0A0CEF, 0xFDFAFF04);
	r0 = D(r0, s1_1_1, 0x0702FA2E, 0x4BF32D2A, 0x19C8EA35, 0x18F30509);
	r1 = D(r1, s1_1_1, 0x100BF1D6, 0xEA10FCE6, 0x81C9F4DB, 0xF4E801FF);
	r2 = D(r2, s1_1_1, 0xDFEFE602, 0x14F5F7F0, 0xFAF42201, 0xE91106C2);
	r3 = D(r3, s1_1_1, 0x0CFDF903, 0x0BF61209, 0x05FFE911, 0x10FAEC07);
	r4 = D(r4, s1_1_1, 0xE1E9ECEF, 0xF8FFFD04, 0xDF0608E4, 0x1AF61002);
	r5 = D(r5, s1_1_1, 0xFB081BF5, 0xF6EF05ED, 0x0A07FA02, 0x08070FF2);
	r6 = D(r6, s1_1_1, 0xFCF3FF01, 0x01DDFF10, 0x33F6DA1E, 0x0CFC011A);
	r7 = D(r7, s1_1_1, 0x14050807, 0xE80710F3, 0xE30700F2, 0x8112FF82);
	r0 = D(r0, s1_1_2, 0xFF0804F5, 0x010DEC01, 0x13E9E102, 0x0508FB09);
	r1 = D(r1, s1_1_2, 0x0FE81306, 0xFF071000, 0xF9060B0B, 0xFE00E9FE);
	r2 = D(r2, s1_1_2, 0xF2FF1019, 0xF2FEE80C, 0xFD010D03, 0x20D83AF6);
	r3 = D(r3, s1_1_2, 0x01FD11FF, 0x02FFFAFF, 0x04F909FB, 0x010701FD);
	r4 = D(r4, s1_1_2, 0xF9F71B08, 0x00FC0002, 0xDFCB070E, 0xF90100FB);
	r5 = D(r5, s1_1_2, 0x0A000E01, 0xFF1C2501, 0x030323FF, 0xF805F60A);
	r6 = D(r6, s1_1_2, 0x81F61005, 0x10FFDAFD, 0x06FBEB0C, 0xFDEFF1F7);
	r7 = D(r7, s1_1_2, 0x05FD05FE, 0xFBFFFC07, 0xF8011505, 0xF5010D0B);
	r0 = D(r0, s1_2_0, 0x00EA04F7, 0x010BEA08, 0x07CFE409, 0x06EC06FD);
	r1 = D(r1, s1_2_0, 0x0903FE02, 0xF40B0CEE, 0x01150604, 0x00110D05);
	r2 = D(r2, s1_2_0, 0x060CF1FC, 0x021C15FB, 0x0CBA10F5, 0xFAE5F710);
	r3 = D(r3, s1_2_0, 0x01E1FF01, 0xFFFF0801, 0x05F00CF6, 0x0000FB05);
	r4 = D(r4, s1_2_0, 0xFF0200FD, 0x00FD0400, 0x0DF60AF6, 0x03E70A04);
	r5 = D(r5, s1_2_0, 0xEF01E8E3, 0xF00EFDFE, 0xFD02F5FF, 0x01FCFF01);
	r6 = D(r6, s1_2_0, 0x09F3F503, 0xF4EB0900, 0x08F4F009, 0x0CDF1707);
	r7 = D(r7, s1_2_0, 0xFD02FEFD, 0xFAF4F000, 0xFAFCFCFC, 0x01FAF8F7);
	r0 = D(r0, s1_2_1, 0x0006F20F, 0x0412F00F, 0xFA05E9F7, 0x0AF10312);
	r1 = D(r1, s1_2_1, 0x05FF04F7, 0xF2F108E5, 0xEAE61104, 0xF9FCFFF4);
	r2 = D(r2, s1_2_1, 0x04051FFE, 0xF8160105, 0xDEF3D800, 0xFDEDE2FC);
	r3 = D(r3, s1_2_1, 0x06E907FD, 0xFFFB0301, 0xFFECEB01, 0x04FD08FD);
	r4 = D(r4, s1_2_1, 0xFFFC0AF4, 0xFFFC0501, 0xFC1106F9, 0xFE03F406);
	r5 = D(r5, s1_2_1, 0xEFFDE0FF, 0xF30203FE, 0xF707F605, 0x03040204);
	r6 = D(r6, s1_2_1, 0x06F5FAE1, 0xF7F8EE0A, 0x05F9F9F3, 0x05FFF702);
	r7 = D(r7, s1_2_1, 0x0200FDFE, 0x06FEFCFC, 0x0202F9FD, 0xEF230FFC);
	r0 = D(r0, s1_2_2, 0x00FF03F5, 0x020016F5, 0x09F8F7FD, 0x08FE0E05);
	r1 = D(r1, s1_2_2, 0xFD03FE08, 0xF303F602, 0x0409DA08, 0xFBFCF501);
	r2 = D(r2, s1_2_2, 0x09F01205, 0x06F4F9FE, 0xFE04FB0C, 0x0BCCF802);
	r3 = D(r3, s1_2_2, 0x04000301, 0x010001FF, 0x07FBFBF8, 0xFF04FD00);
	r4 = D(r4, s1_2_2, 0x01FB0706, 0x0100FF00, 0xFD0CE5FC, 0xFE130CF9);
	r5 = D(r5, s1_2_2, 0xF9FBF20B, 0xFD11DC08, 0xFC08F802, 0xFF00FC00);
	r6 = D(r6, s1_2_2, 0x05EDF705, 0xF5010307, 0x13F22A04, 0x18F40F01);
	r7 = D(r7, s1_2_2, 0x00FDFA01, 0x01FEF6FE, 0xFE05F6FF, 0xF514040B);
	s0_0_0 = G[2][xy.y+0][xy.x+0]; s0_0_1 = G[2][xy.y+0][xy.x+1];
	s0_0_2 = G[2][xy.y+0][xy.x+2]; s0_1_0 = G[2][xy.y+1][xy.x+0];
	s0_1_1 = G[2][xy.y+1][xy.x+1]; s0_1_2 = G[2][xy.y+1][xy.x+2];
	s0_2_0 = G[2][xy.y+2][xy.x+0]; s0_2_1 = G[2][xy.y+2][xy.x+1];
	s0_2_2 = G[2][xy.y+2][xy.x+2]; s1_0_0 = G[3][xy.y+0][xy.x+0];
	s1_0_1 = G[3][xy.y+0][xy.x+1]; s1_0_2 = G[3][xy.y+0][xy.x+2];
	s1_1_0 = G[3][xy.y+1][xy.x+0]; s1_1_1 = G[3][xy.y+1][xy.x+1];
	s1_1_2 = G[3][xy.y+1][xy.x+2]; s1_2_0 = G[3][xy.y+2][xy.x+0];
	s1_2_1 = G[3][xy.y+2][xy.x+1]; s1_2_2 = G[3][xy.y+2][xy.x+2];
	r0 = D(r0, s0_0_0, 0x01F5FE12, 0xFDFB09F9, 0xE099E603, 0xE7E7F408);
	r1 = D(r1, s0_0_0, 0xEEF1F300, 0xFE07FC03, 0xFF0B0104, 0x02020203);
	r2 = D(r2, s0_0_0, 0x2414FE01, 0xFC00DD0D, 0xCF0AF6FD, 0x0707EF06);
	r3 = D(r3, s0_0_0, 0xFD12F301, 0xFE0104FE, 0xFE0900FC, 0x06FC0508);
	r4 = D(r4, s0_0_0, 0xF9FFFA07, 0x000001FB, 0xF2040308, 0xF9FE020C);
	r5 = D(r5, s0_0_0, 0x05FB0E0A, 0x0C0200FF, 0x06F20107, 0xFB0EFAFC);
	r6 = D(r6, s0_0_0, 0x0905F300, 0xFBD804F2, 0x0DFD01F9, 0xF810F30D);
	r7 = D(r7, s0_0_0, 0x0405FE02, 0xFDF5F4F8, 0x0BF80400, 0x04FEFBF9);
	r0 = D(r0, s0_0_1, 0x04F3F9FE, 0xF606FFDF, 0xFAFECBF3, 0xECF306E8);
	r1 = D(r1, s0_0_1, 0x0AFA1705, 0xF6060FF9, 0xFE1C0E0A, 0x0905FC05);
	r2 = D(r2, s0_0_1, 0xFE071D04, 0x022217F3, 0xDD082305, 0xEDF1FC0F);
	r3 = D(r3, s0_0_1, 0xEF070E01, 0x000403EF, 0x0A0209E7, 0xFAFAFF10);
	r4 = D(r4, s0_0_1, 0x00070F11, 0xFDFF0211, 0xF8E80000, 0x00151220);
	r5 = D(r5, s0_0_1, 0xFAF7ED04, 0xFE0B0919, 0x04F1F90E, 0xFE0B032B);
	r6 = D(r6, s0_0_1, 0x06F4FE06, 0xC6FA03B9, 0xF802F7E2, 0xF0F00E0B);
	r7 = D(r7, s0_0_1, 0xFC02010A, 0xF0F7F727, 0x03F7F9EF, 0xFF020302);
	r0 = D(r0, s0_0_2, 0x0212F9D8, 0x03010586, 0x100F067F, 0xFF0AF088);
	r1 = D(r1, s0_0_2, 0xD7E20388, 0xF4020D6E, 0x03050E81, 0x040BFA81);
	r2 = D(r2, s0_0_2, 0x16FFFFA6, 0x02111A83, 0xE5F8F8D3, 0x0900FC81);
	r3 = D(r3, s0_0_2, 0xFB02FE7E, 0x010301F6, 0x11010781, 0xFD00FB0A);
	r4 = D(r4, s0_0_2, 0x0302F9F4, 0x0102020F, 0x0AFF0B7F, 0xF719189A);
	r5 = D(r5, s0_0_2, 0xFF0802E2, 0x0205F31C, 0xFDFB017F, 0xFB010204);
	r6 = D(r6, s0_0_2, 0x0601F1E3, 0x0A0900D1, 0x0506F5C1, 0xE80FFA7F);
	r7 = D(r7, s0_0_2, 0x02FFFF2A, 0xFE01F8F3, 0xFCFE007F, 0x010D04E3);
	r0 = D(r0, s0_1_0, 0x08E8FD0D, 0x02F212F8, 0xE6B313DA, 0xF7050BFD);
	r1 = D(r1, s0_1_0, 0xFBEA0B10, 0x070307EC, 0xFC020AFC, 0xFEFB030A);
	r2 = D(r2, s0_1_0, 0x1EEB09F8, 0x031A04EE, 0xEE1B05FD, 0x0BF10A00);
	r3 = D(r3, s0_1_0, 0xF916F7F2, 0xFCFCFEFD, 0x0312FE02, 0xFA0C05FC);
	r4 = D(r4, s0_1_0, 0x0CF60803, 0xFFFAFF01, 0xFAFB01FD, 0x06C81513);
	r5 = D(r5, s0_1_0, 0x0FF41801, 0x04EFF1FB, 0x03F2F7F0, 0xFD050105);
	r6 = D(r6, s0_1_0, 0x0F1003F0, 0xFFC50400, 0x05C509ED, 0xE0F9E8F5);
	r7 = D(r7, s0_1_0, 0x000BFDFE, 0x08F30001, 0x0AF309FD, 0xF60B0101);
	r0 = D(r0, s0_1_1, 0x000BF73D, 0x0CE8F721, 0xFCC2D5E7, 0xE8FFFD32);
	r1 = D(r1, s0_1_1, 0xF005F5E8, 0x100DFEE7, 0xD8F5002D, 0x0AFEFE3F);
	r2 = D(r2, s0_1_1, 0x04D81A81, 0x1BDF3EDA, 0x95FD143E, 0x14EE10DD);
	r3 = D(r3, s0_1_1, 0xF9F60DF3, 0xFD00FCF5, 0x0DF709E3, 0x05171016);
	r4 = D(r4, s0_1_1, 0xEDDB0253, 0xFDFA0456, 0x08F313F5, 0x08BA0D07);
	r5 = D(r5, s0_1_1, 0xF0ECE081, 0xF80FFCA9, 0xE7FD088B, 0xF80809E5);
	r6 = D(r6, s0_1_1, 0x070D090D, 0xE3B79CB1, 0xFFD2E204, 0xFCFB2981);
	r7 = D(r7, s0_1_1, 0x010409E9, 0xFB040D32, 0x000A070E, 0xF0E10A19);
	r0 = D(r0, s0_1_2, 0xE9FFEFF9, 0x0C0F0181, 0xD3D4EE6A, 0xEDFFEA48);
	r1 = D(r1, s0_1_2, 0xDBEEF422, 0xFB09090F, 0xE2201181, 0xFC02010C);
	r2 = D(r2, s0_1_2, 0x290181A4, 0xF1FAFF5B, 0xFBE5CFFF, 0x02D4E88D);
	r3 = D(r3, s0_1_2, 0xFF040581, 0x00010428, 0x0602F6DD, 0xFC020604);
	r4 = D(r4, s0_1_2, 0xFDFEF3E7, 0x0001063D, 0x07F2FDB5, 0xECCFDFCE);
	r5 = D(r5, s0_1_2, 0x14F70EDD, 0x0D1010A0, 0x050421CC, 0xF900FF0B);
	r6 = D(r6, s0_1_2, 0x1BFC0C44, 0xF5FB0426, 0xFAEDED61, 0xE8072824);
	r7 = D(r7, s0_1_2, 0x0702F6E8, 0xFE02F581, 0x03FF1106, 0x05120581);
	r0 = D(r0, s0_2_0, 0x010DFAE7, 0xF602F3F9, 0xF6FAD60C, 0xED1B08FF);
	r1 = D(r1, s0_2_0, 0xF403E705, 0xF9F10CFD, 0xF7EC0306, 0xFEF201F8);
	r2 = D(r2, s0_2_0, 0x0DEE0B09, 0xE11304FC, 0xF1F90807, 0xFEE0F000);
	r3 = D(r3, s0_2_0, 0xFEF8DC11, 0x00FA0307, 0x010B0101, 0x02FB0003);
	r4 = D(r4, s0_2_0, 0xFE0FFAF9, 0x0101FE04, 0xF9FFEE02, 0xFB0703F9);
	r5 = D(r5, s0_2_0, 0x071520E6, 0x120602F1, 0x01000FF8, 0x00FFFEFC);
	r6 = D(r6, s0_2_0, 0x0408F60A, 0x0FF70218, 0x02F0FE11, 0xE9032C11);
	r7 = D(r7, s0_2_0, 0x0201FA03, 0xFF120BF9, 0x0601FF05, 0x0011FA05);
	r0 = D(r0, s0_2_1, 0x0F1AD8F6, 0x060BEDEB, 0x00DDDCF3, 0xFB0F140F);
	r1 = D(r1, s0_2_1, 0xE9D304FD, 0xFF0EE314, 0xFCFCDA06, 0xFE1D0005);
	r2 = D(r2, s0_2_1, 0x08F9F81A, 0xFA0A1817, 0x13DB26FF, 0xFBF902F4);
	r3 = D(r3, s0_2_1, 0xFEEF0FFF, 0xFEFCFCF3, 0x0B1D11EE, 0xFB02FCFC);
	r4 = D(r4, s0_2_1, 0x030802FC, 0x02FC02FC, 0x0D1706FC, 0x17EDEDC1);
	r5 = D(r5, s0_2_1, 0x0810FDE5, 0x06000D06, 0xF707DEFA, 0xFAFDF604);
	r6 = D(r6, s0_2_1, 0x02D4F9E7, 0xFBE51F15, 0x180D0E0B, 0xE70A0112);
	r7 = D(r7, s0_2_1, 0x04000A04, 0x1B16E6D9, 0x14FF0FF3, 0x01D80204);
	r0 = D(r0, s0_2_2, 0xF5E71C05, 0x1705F413, 0xE61911F2, 0xF5F80BFD);
	r1 = D(r1, s0_2_2, 0xE3EB2E11, 0xFCFC130B, 0x071790FF, 0xFCF9FFFF);
	r2 = D(r2, s0_2_2, 0x20E08116, 0x0300461F, 0xDB03E5E3, 0x0501C826);
	r3 = D(r3, s0_2_2, 0x00FDF7FD, 0x0200060A, 0x1209F917, 0x0702FC01);
	r4 = D(r4, s0_2_2, 0x08090BFE, 0x01010808, 0x09FCE31C, 0xFDEEC706);
	r5 = D(r5, s0_2_2, 0x0CEE812A, 0x0C04C824, 0xEC06DAEB, 0xFB0501FC);
	r6 = D(r6, s0_2_2, 0x03FFFAF2, 0xFC06B0FA, 0x14F6F8F8, 0xE5031609);
	r7 = D(r7, s0_2_2, 0x0500FA0E, 0xF900F2FD, 0x12061506, 0xF8FBACAE);
	r0 = D(r0, s1_0_0, 0xFFFC01F8, 0xFCFCEA03, 0x0D0B81F8, 0xF908E907);
	r1 = D(r1, s1_0_0, 0xF310E70A, 0x01FF0800, 0xFDF70B00, 0xFD0003FF);
	r2 = D(r2, s1_0_0, 0x02F608FD, 0xF6CB0305, 0x15E4F600, 0xFA0D15F2);
	r3 = D(r3, s1_0_0, 0x040407FA, 0x00FCFDFF, 0x0EF7F706, 0x001409FF);
	r4 = D(r4, s1_0_0, 0xFFF903FC, 0x0005FC01, 0xFF02F3F7, 0x10F5F9F7);
	r5 = D(r5, s1_0_0, 0xF9FA01FB, 0xED0504F4, 0xFB0D03F8, 0x00F8FB00);
	r6 = D(r6, s1_0_0, 0xFEFE0F02, 0x0CEBE7FC, 0xF1F7FDF8, 0x09F90101);
	r7 = D(r7, s1_0_0, 0xFFFC0501, 0x0C1BE306, 0xFDEB0B03, 0x05F6FF00);
	r0 = D(r0, s1_0_1, 0xFFF3F0FC, 0x07FE0307, 0x041500F6, 0x0301ED0B);
	r1 = D(r1, s1_0_1, 0x0A080D05, 0x0DFC0E00, 0x09071909, 0x01FEFD00);
	r2 = D(r2, s1_0_1, 0x0404FC03, 0x13EFFBFF, 0xFDFAEB0D, 0x1105F5FD);
	r3 = D(r3, s1_0_1, 0x020708FD, 0xFE0100FE, 0xFBFC13FD, 0x020608FC);
	r4 = D(r4, s1_0_1, 0x02FCF6FE, 0xFEFF00FD, 0x1FF9FA05, 0x0AF017FA);
	r5 = D(r5, s1_0_1, 0x10FEF10D, 0x18040B01, 0x00030C03, 0xFF01FA01);
	r6 = D(r6, s1_0_1, 0xFFFE0300, 0x031315FC, 0x090606FE, 0x000FEB03);
	r7 = D(r7, s1_0_1, 0xFD040AFC, 0x0200F4F6, 0x03FB07FB, 0x08F706F9);
	r0 = D(r0, s1_0_2, 0x11FD0313, 0xEB04F525, 0x0E04FE1A, 0xFC01F918);
	r1 = D(r1, s1_0_2, 0x1A020307, 0xFCFC05F5, 0xFF060ADB, 0xFD010504);
	r2 = D(r2, s1_0_2, 0xE2051CDB, 0x07F9FAD2, 0x0F040438, 0xF602FA19);
	r3 = D(r3, s1_0_2, 0x09000403, 0x00FFFF04, 0x0EFC0FF2, 0xFE02020A);
	r4 = D(r4, s1_0_2, 0x00FF0208, 0xFC00FF02, 0xF700F5E0, 0x01FE0013);
	r5 = D(r5, s1_0_2, 0x16FF0500, 0x05010511, 0x0604F8FF, 0xFAFEFFF9);
	r6 = D(r6, s1_0_2, 0x00FF05FD, 0x0DFE000D, 0x08000E13, 0x0AFC0AF9);
	r7 = D(r7, s1_0_2, 0x03000300, 0x2301FF12, 0x0BFFFDF8, 0xF301040D);
	r0 = D(r0, s1_1_0, 0xFD160208, 0x1711F5FD, 0xF1D5EFF8, 0xFB21FA0B);
	r1 = D(r1, s1_1_0, 0xF1040CDD, 0x08E5F3FF, 0x060B0903, 0xFE2811FD);
	r2 = D(r2, s1_1_0, 0xF4C7E908, 0xEBA2CDF7, 0xDAB5D6EC, 0x0DBA0804);
	r3 = D(r3, s1_1_0, 0x12FDF208, 0x0607F9FB, 0x05FBFAFB, 0xFC30F602);
	r4 = D(r4, s1_1_0, 0xFC3BFFFE, 0x073B06FE, 0x16F1F701, 0xF024EC0B);
	r5 = D(r5, s1_1_0, 0x18818109, 0x06DBDA0F, 0x0AA5FD0B, 0x06F2FBFF);
	r6 = D(r6, s1_1_0, 0x01F41003, 0x158B0103, 0xFAEC0A09, 0xE3E9A303);
	r7 = D(r7, s1_1_0, 0xF8E8F8FB, 0x06FF040C, 0xF8E10603, 0x1402F705);
	r0 = D(r0, s1_1_1, 0xDC0AFBE9, 0x18F0B019, 0xA2EACA12, 0xF405FCF6);
	r1 = D(r1, s1_1_1, 0xEC13F108, 0x10F311F5, 0x2FFDE6F5, 0xFB0DEAFD);
	r2 = D(r2, s1_1_1, 0x12C8C7C4, 0x3B02E5B1, 0x63FBCF00, 0x1E152F01);
	r3 = D(r3, s1_1_1, 0x4A0EF124, 0x0AFCFBF2, 0x0A06F312, 0xE7060126);
	r4 = D(r4, s1_1_1, 0x2500DAFA, 0xFCFEFC1F, 0x1F06F1FA, 0x2CFBED1D);
	r5 = D(r5, s1_1_1, 0x0AF8F69F, 0x1406011D, 0x04F02308, 0x39FBF7EC);
	r6 = D(r6, s1_1_1, 0xF8070701, 0xFCF7D7F2, 0xD708E5AA, 0x040600E3);
	r7 = D(r7, s1_1_1, 0x0800FA05, 0x10F70528, 0x0B00F200, 0x11F9F3FF);
	r0 = D(r0, s1_1_2, 0xE604063E, 0x37FAEC8B, 0x750BE5B9, 0xCA04F4FD);
	r1 = D(r1, s1_1_2, 0x2D00F211, 0x0FFA0CE8, 0x0402FA85, 0xE703FDBD);
	r2 = D(r2, s1_1_2, 0x16E9F6BE, 0x020304D3, 0x0E05F0FC, 0x05FA101E);
	r3 = D(r3, s1_1_2, 0x4D040038, 0xFA00FE3C, 0x1002FE09, 0x2B0002FF);
	r4 = D(r4, s1_1_2, 0xEE00FE8A, 0x0D000104, 0x24F5089B, 0x3E0EE6EA);
	r5 = D(r5, s1_1_2, 0x6500011C, 0x17FC1917, 0x17FA0665, 0x0001FA5D);
	r6 = D(r6, s1_1_2, 0x0C01F525, 0xD00BFC84, 0x0D00022E, 0xF204FD01);
	r7 = D(r7, s1_1_2, 0xFAFE037D, 0x2E05F23C, 0x1CFAF822, 0xFBF80805);
	r0 = D(r0, s1_2_0, 0x0FECE427, 0xFBBCD106, 0x0EFAB1FE, 0xE9F6D704);
	r1 = D(r1, s1_2_0, 0x22FFFE08, 0x16E952F0, 0xF4200209, 0xF2280C05);
	r2 = D(r2, s1_2_0, 0x0F1101FE, 0x1A09F71A, 0x46F4B82B, 0x1BE7ED06);
	r3 = D(r3, s1_2_0, 0x03F4F6F4, 0x0604FAFC, 0x06EDFDFD, 0xFB03F7FA);
	r4 = D(r4, s1_2_0, 0x000507FA, 0x0911FC03, 0xFFF9F3F9, 0xD7C8EEFD);
	r5 = D(r5, s1_2_0, 0xF4CD15FC, 0x07FA0201, 0x0EE9F801, 0x0001FBFF);
	r6 = D(r6, s1_2_0, 0x15C20300, 0xECF901FA, 0x1FEDE20A, 0x14FAD806);
	r7 = D(r7, s1_2_0, 0x09FDFE03, 0x000BE506, 0x0CFBF500, 0x0D1BF6F6);
	r0 = D(r0, s1_2_1, 0x5318F7A2, 0xF3FB19AF, 0x7FF80E84, 0x2C08FEA8);
	r1 = D(r1, s1_2_1, 0x48040543, 0x1DFC1410, 0xCDFCF101, 0xBF07FF25);
	r2 = D(r2, s1_2_1, 0xFC14F208, 0x4115F9F1, 0x7FFCE370, 0xDEF8F6FA);
	r3 = D(r3, s1_2_1, 0xF508FA1A, 0x00FEFC77, 0xD2F0FA19, 0xD4FFF821);
	r4 = D(r4, s1_2_1, 0xE5FA04DA, 0x0A02FFF8, 0x16FCFF15, 0x11ECF7E6);
	r5 = D(r5, s1_2_1, 0x0E02EB81, 0xDFF2E7CC, 0xD4F00506, 0xDF07FCE2);
	r6 = D(r6, s1_2_1, 0x0DF44010, 0x58F401F5, 0x20FF0B02, 0x500A061F);
	r7 = D(r7, s1_2_1, 0x030302F3, 0xEE0EFD81, 0x1202FEF8, 0xFEC70E24);
	r0 = D(r0, s1_2_2, 0x810205C3, 0x8101EB16, 0xEF0CF770, 0x81FD0682);
	r1 = D(r1, s1_2_2, 0x8107FAC0, 0x17FF07E6, 0x9A0C0A0F, 0xB006FB81);
	r2 = D(r2, s1_2_2, 0x22FF0C70, 0x3706FF9A, 0xB30AF5CA, 0x9903FCEE);
	r3 = D(r3, s1_2_2, 0x5203FBA6, 0xE90100DB, 0xFDFCF881, 0x2B0001EB);
	r4 = D(r4, s1_2_2, 0x81FC03E8, 0xDA000181, 0x0DFC004F, 0x4300FFDC);
	r5 = D(r5, s1_2_2, 0xEFFF04D6, 0x710502CF, 0xE700FD7E, 0xCB02FE7F);
	r6 = D(r6, s1_2_2, 0x57FB07D5, 0x81FC0348, 0x2003FD27, 0x85FE0395);
	r7 = D(r7, s1_2_2, 0x26000596, 0x7F06FA27, 0xA2031101, 0x5BFC0636);
	s0_0_0 = G[4][xy.y+0][xy.x+0]; s0_0_1 = G[4][xy.y+0][xy.x+1];
	s0_0_2 = G[4][xy.y+0][xy.x+2]; s0_1_0 = G[4][xy.y+1][xy.x+0];
	s0_1_1 = G[4][xy.y+1][xy.x+1]; s0_1_2 = G[4][xy.y+1][xy.x+2];
	s0_2_0 = G[4][xy.y+2][xy.x+0]; s0_2_1 = G[4][xy.y+2][xy.x+1];
	s0_2_2 = G[4][xy.y+2][xy.x+2]; s1_0_0 = G[5][xy.y+0][xy.x+0];
	s1_0_1 = G[5][xy.y+0][xy.x+1]; s1_0_2 = G[5][xy.y+0][xy.x+2];
	s1_1_0 = G[5][xy.y+1][xy.x+0]; s1_1_1 = G[5][xy.y+1][xy.x+1];
	s1_1_2 = G[5][xy.y+1][xy.x+2]; s1_2_0 = G[5][xy.y+2][xy.x+0];
	s1_2_1 = G[5][xy.y+2][xy.x+1]; s1_2_2 = G[5][xy.y+2][xy.x+2];
	r0 = D(r0, s0_0_0, 0x3A11F4ED, 0xB603FD0C, 0x3327D918, 0xD2E6E7F6);
	r1 = D(r1, s0_0_0, 0x42FBFF08, 0x030400FC, 0x7F0EFCF7, 0xE3FD00FE);
	r2 = D(r2, s0_0_0, 0x8106F9FD, 0x3A16F7FE, 0x0C04160F, 0x3112ED08);
	r3 = D(r3, s0_0_0, 0x020E0205, 0x0701FE02, 0xF70601FA, 0x0AFF01FD);
	r4 = D(r4, s0_0_0, 0x370500FB, 0xEA00FC01, 0x7F09FC0B, 0xFA17FB16);
	r5 = D(r5, s0_0_0, 0xEB02010D, 0x810D0A06, 0x0F000504, 0x1E050603);
	r6 = D(r6, s0_0_0, 0x87FA010D, 0x2814ED08, 0xE1FE04F8, 0x7F1F100B);
	r7 = D(r7, s0_0_0, 0x11FE0101, 0x81F8F9FD, 0xBCFE0106, 0x03020106);
	r0 = D(r0, s0_0_1, 0xE50206F7, 0x0AFF140C, 0xF8D3AFEE, 0xD0D8E502);
	r1 = D(r1, s0_0_1, 0xE9C31212, 0x0A0B0300, 0xFEF4E70E, 0x81F70902);
	r2 = D(r2, s0_0_1, 0xDC05E0F9, 0xEB1146E0, 0xB212E3D8, 0xF4DFE405);
	r3 = D(r3, s0_0_1, 0x2E0DF1EA, 0xED0507FF, 0xFD08F706, 0x2A06EAFE);
	r4 = D(r4, s0_0_1, 0xFD01F6FD, 0x030B0300, 0xC10AF7FA, 0xDF0812FE);
	r5 = D(r5, s0_0_1, 0x0FFADC06, 0x2DFFEBFE, 0x8D10F913, 0x2C03FA02);
	r6 = D(r6, s0_0_1, 0xCAFE0915, 0x96ED2718, 0xF4FB02FF, 0xD033F0E5);
	r7 = D(r7, s0_0_1, 0x2AFFFAFA, 0x40EDEB1F, 0x00F3FFF3, 0x12100302);
	r0 = D(r0, s0_0_2, 0xDAE8F6F1, 0xD7F602E4, 0x2C03C1F6, 0x08F70103);
	r1 = D(r1, s0_0_2, 0x12FFF1F1, 0x1307F7F9, 0x21F6FEFA, 0xFBFA00FF);
	r2 = D(r2, s0_0_2, 0xE820ABF9, 0xFB1C020F, 0xEF02BDE5, 0x05E1EA05);
	r3 = D(r3, s0_0_2, 0x0FFBFCFB, 0x03FE0002, 0x090E0B04, 0x04FC05FE);
	r4 = D(r4, s0_0_2, 0x0805F706, 0xFEFF01FF, 0xE8F5F911, 0xFFF2F4E1);
	r5 = D(r5, s0_0_2, 0x1103EFF7, 0x1CF5F0EA, 0xF401F6F6, 0x0BFD0105);
	r6 = D(r6, s0_0_2, 0x04060F1C, 0x060CFD0F, 0xFDFBFDF6, 0x0AC90EE3);
	r7 = D(r7, s0_0_2, 0xFEFF0401, 0x1A00F4FB, 0xF404F9FC, 0x00FB0B05);
	r0 = D(r0, s0_1_0, 0x1701F402, 0x0108F2F8, 0x8122E0E2, 0x1413E3FB);
	r1 = D(r1, s0_1_0, 0x3C18E902, 0x810405FE, 0x28040206, 0x1AFFFFFD);
	r2 = D(r2, s0_1_0, 0x9EF2E909, 0xC11331F3, 0x81F2F0FE, 0xE90FFDF3);
	r3 = D(r3, s0_1_0, 0xE5FCFE0B, 0x190DFC01, 0xFC07EDFE, 0x05FB0906);
	r4 = D(r4, s0_1_0, 0x0FFCF8FF, 0x1707FB02, 0x241FFD0B, 0xCEEF10E2);
	r5 = D(r5, s0_1_0, 0xBDFEF806, 0xF904E8F4, 0x1506F8FE, 0x00F903FE);
	r6 = D(r6, s0_1_0, 0x00FB0C03, 0xF228F900, 0x0DF30917, 0x01F411E5);
	r7 = D(r7, s0_1_0, 0xFEFDFE02, 0x81EFDDF9, 0xF605FF0A, 0xC306F306);
	r0 = D(r0, s0_1_1, 0x03EFF112, 0x2F153423, 0x0B1CA5DB, 0x611CFDF3);
	r1 = D(r1, s0_1_1, 0x1B0B0EF8, 0xEC4211F7, 0xB1D708F0, 0xD10C0C03);
	r2 = D(r2, s0_1_1, 0xF2EEE50B, 0x2B0847D2, 0x12F0C7B9, 0x0A1F06DE);
	r3 = D(r3, s0_1_1, 0xFDFCEDF9, 0x20080005, 0x010FE8F8, 0x1E1615FB);
	r4 = D(r4, s0_1_1, 0x140FF6F7, 0x1E05FF08, 0xF30914FC, 0xFF30EAF4);
	r5 = D(r5, s0_1_1, 0xFFE7F40C, 0xE4FDD501, 0xEFF7EC15, 0x140711FC);
	r6 = D(r6, s0_1_1, 0x33EA0CF6, 0xEB07D4FF, 0x1F0917FD, 0x58C7E0FC);
	r7 = D(r7, s0_1_1, 0x2605F6FD, 0x11F4D7EF, 0x05FBEEFB, 0xF10FF404);
	r0 = D(r0, s0_1_2, 0x09FEEE01, 0x1CFCF9FB, 0x34EBF6E0, 0x120E0301);
	r1 = D(r1, s0_1_2, 0xF2F80607, 0xDB0E04F0, 0x10D8DEE8, 0x08F30BF6);
	r2 = D(r2, s0_1_2, 0x070D1510, 0xE6FBFC01, 0xE615D9E5, 0x0422FCF5);
	r3 = D(r3, s0_1_2, 0x06E70E02, 0x00FF0107, 0x09F4E901, 0x05FBF9FF);
	r4 = D(r4, s0_1_2, 0xEAFC21EF, 0x0202FE04, 0x0100F427, 0xFF0DE3EE);
	r5 = D(r5, s0_1_2, 0x0B1D14FC, 0x08DBFCF1, 0x110BE9FE, 0xFD04FFFC);
	r6 = D(r6, s0_1_2, 0xF800230D, 0x08FCEB27, 0x07F819E7, 0x1EF91708);
	r7 = D(r7, s0_1_2, 0x04FAFD06, 0xE8F210EF, 0xFDF6F5FD, 0x0FF5DCFA);
	r0 = D(r0, s0_2_0, 0xE203D90E, 0x150606FD, 0x3BF2EF10, 0x23FE0806);
	r1 = D(r1, s0_2_0, 0xFC14F5FD, 0x060DFEF7, 0x0B0402FD, 0xF007F701);
	r2 = D(r2, s0_2_0, 0x02FEFD08, 0xF8010E06, 0x1610C611, 0x1C06FD04);
	r3 = D(r3, s0_2_0, 0xF1FDF906, 0x0105FE00, 0x0E0E0303, 0xFF0102FE);
	r4 = D(r4, s0_2_0, 0x0F07FE00, 0x060101FF, 0x0F0FFA00, 0x27F2FE13);
	r5 = D(r5, s0_2_0, 0xA8F120FE, 0x0507F807, 0x12FFFA00, 0x0C000000);
	r6 = D(r6, s0_2_0, 0x18F11004, 0x000903F7, 0x1DFF0AFD, 0x241B021D);
	r7 = D(r7, s0_2_0, 0xFCFF0202, 0x07EBEFFF, 0xF200FD03, 0x1A0A0A03);
	r0 = D(r0, s0_2_1, 0x1412F503, 0x01E6F1FB, 0x2003F3FE, 0x0B11F613);
	r1 = D(r1, s0_2_1, 0x0E1507DF, 0xFC1109F7, 0xE2EFD204, 0x010101F2);
	r2 = D(r2, s0_2_1, 0xEB0BFEED, 0x01F412F3, 0xEB01D6BC, 0x00FC2117);
	r3 = D(r3, s0_2_1, 0x09FDF5F9, 0xFCFEFEFF, 0x0C08FD05, 0x0BFE01FE);
	r4 = D(r4, s0_2_1, 0xFB050FFC, 0xF9FE0002, 0xE90705F4, 0xEB05F8F9);
	r5 = D(r5, s0_2_1, 0x25171727, 0x14010D17, 0x00FCFC04, 0x02FDFF00);
	r6 = D(r6, s0_2_1, 0x11F31F0A, 0xE9FA051C, 0x1BFA17F8, 0x0E060619);
	r7 = D(r7, s0_2_1, 0xFF030300, 0xE50A0B02, 0x0E031E0A, 0xF0FDF50D);
	r0 = D(r0, s0_2_2, 0xF0F7F7DF, 0x0417CFEE, 0xEC2CFC0A, 0x0001DF0E);
	r1 = D(r1, s0_2_2, 0x100D04F8, 0xF6050A02, 0x071DF8F3, 0xFEF80C04);
	r2 = D(r2, s0_2_2, 0x05FD12F8, 0x10FAFD09, 0x04111FFE, 0x0EFE0EFD);
	r3 = D(r3, s0_2_2, 0xFC01FD02, 0x00010402, 0x0403FA0C, 0xFE03FEFC);
	r4 = D(r4, s0_2_2, 0xFDFB0A03, 0x02020302, 0xFE0F1012, 0x070BF6F4);
	r5 = D(r5, s0_2_2, 0xFB060214, 0xF1081110, 0x0408F2FF, 0x0003FBFE);
	r6 = D(r6, s0_2_2, 0x04F5BF15, 0x111E0002, 0x030DF9FB, 0x04090BFB);
	r7 = D(r7, s0_2_2, 0xFD0004FF, 0x05FFFCFD, 0x01FF0806, 0x0CFDF610);
	r0 = D(r0, s1_0_0, 0x0B1CF806, 0x050209FD, 0xFBF016CA, 0xEEF703FC);
	r1 = D(r1, s1_0_0, 0x02FFFEDA, 0x01FBFF02, 0xE309040F, 0xFCFD0302);
	r2 = D(r2, s1_0_0, 0xEB11FC0B, 0xF1EA0006, 0xDD06F712, 0x19F50CEA);
	r3 = D(r3, s1_0_0, 0xFF0501FC, 0x00FEFF04, 0x08FF0514, 0x04FBFD03);
	r4 = D(r4, s1_0_0, 0xF705FEFF, 0x03010001, 0x0608FCF8, 0xFDF315EA);
	r5 = D(r5, s1_0_0, 0x0215EAED, 0xEDFD0408, 0x01FC0002, 0x00FEFEFA);
	r6 = D(r6, s1_0_0, 0x07010201, 0x000A030B, 0x100203FB, 0x00062001);
	r7 = D(r7, s1_0_0, 0xFD000202, 0xF30207EA, 0x0AFA060F, 0x0C06FE00);
	r0 = D(r0, s1_0_1, 0xF703E232, 0xF2ECFF0A, 0xFD010AF3, 0xE9F6050E);
	r1 = D(r1, s1_0_1, 0x111509C8, 0xF303FEFD, 0xF017FB0B, 0x00FD000A);
	r2 = D(r2, s1_0_1, 0xEEF7EC0B, 0x81FD17FA, 0x10DC07D1, 0xEFF3F9DC);
	r3 = D(r3, s1_0_1, 0x0D0D07EE, 0xFEFE03FA, 0x00FF0010, 0x0D02F80B);
	r4 = D(r4, s1_0_1, 0xFBF4FCFD, 0x0AFF02FD, 0x12FB03F6, 0x0A020BEA);
	r5 = D(r5, s1_0_1, 0x0604EA02, 0xE610F603, 0x07FD090F, 0xFDFC00F7);
	r6 = D(r6, s1_0_1, 0xF40801FF, 0x20E507F5, 0xEE06FCC4, 0xE7FBF8F6);
	r7 = D(r7, s1_0_1, 0x0002FB06, 0x000109F8, 0xFCFE000E, 0xFE0A010A);
	r0 = D(r0, s1_0_2, 0xE4F3011C, 0xFB08FD14, 0x1800EA09, 0x03FD0604);
	r1 = D(r1, s1_0_2, 0xD70417E7, 0xFEFAFBF6, 0x0003F2F9, 0xF5050405);
	r2 = D(r2, s1_0_2, 0xD408E5FC, 0x8101F1F0, 0xF5E210F9, 0xF903FCF5);
	r3 = D(r3, s1_0_2, 0x070809FA, 0x01000400, 0xF4FF01F9, 0x0505FB05);
	r4 = D(r4, s1_0_2, 0xFFFBFCF7, 0xFEFF0203, 0x0107010D, 0xDDFD0CDF);
	r5 = D(r5, s1_0_2, 0xFD0DF004, 0x21080111, 0x0D00FE15, 0xFEFC00F9);
	r6 = D(r6, s1_0_2, 0x0802FCFF, 0xEEFE1103, 0xECF7FBF9, 0x160AF607);
	r7 = D(r7, s1_0_2, 0x0304FFFB, 0x22FE0903, 0xFC0AF3E6, 0x06FE0405);
	r0 = D(r0, s1_1_0, 0x0116FBFB, 0xEC01EFD5, 0x14D815F4, 0xE8F105F4);
	r1 = D(r1, s1_1_0, 0x0202FCF9, 0x0CFD00FD, 0x0B0CF804, 0x000401FD);
	r2 = D(r2, s1_1_0, 0x02221E06, 0x811C0AED, 0x819FE008, 0xECF208FF);
	r3 = D(r3, s1_1_0, 0x02080F01, 0x030301FA, 0xF2000E11, 0xF3F9FF05);
	r4 = D(r4, s1_1_0, 0x0509F90A, 0x080201FD, 0xFFFBF4FD, 0x060CF5B9);
	r5 = D(r5, s1_1_0, 0x0B2FE5F2, 0xDC0C140E, 0x04F20B0A, 0xFFFA0100);
	r6 = D(r6, s1_1_0, 0xFF06FCFC, 0x0B1AF5F8, 0xECD91CBD, 0x08170F0B);
	r7 = D(r7, s1_1_0, 0xF8050204, 0xEDF30CDA, 0x0502FB0A, 0xF706FDF5);
	r0 = D(r0, s1_1_1, 0xF2FFDB18, 0xF2FAE8DA, 0xA6162381, 0xEF04F2F8);
	r1 = D(r1, s1_1_1, 0x0AF60402, 0x20FFEF20, 0x09F5DE81, 0xFDFD0321);
	r2 = D(r2, s1_1_1, 0xF8FB0B0E, 0x8116C4E4, 0xFBE21A65, 0xAA0CEBD8);
	r3 = D(r3, s1_1_1, 0x2B0EFDD5, 0xF7FD0604, 0x0C0DFFF8, 0xE8FFF904);
	r4 = D(r4, s1_1_1, 0xDA02E304, 0xE7000701, 0xF5F3FDFC, 0xF7F305CD);
	r5 = D(r5, s1_1_1, 0xF616F5AB, 0xFE05E6EA, 0x0AFB0CE5, 0x22FB03FE);
	r6 = D(r6, s1_1_1, 0x13FE0B07, 0xCCE6101F, 0xE5FFFAB9, 0xF6F8CF02);
	r7 = D(r7, s1_1_1, 0xFB0DF9F7, 0xD60DFB08, 0x060EF9FD, 0x071DFFB4);
	r0 = D(r0, s1_1_2, 0x0FE808F2, 0x13EA00FE, 0x260BE216, 0x15FD050E);
	r1 = D(r1, s1_1_2, 0x0B0407DE, 0x110900F2, 0xF7FD06B8, 0x10FBFD14);
	r2 = D(r2, s1_1_2, 0x2C06F316, 0x81F4FB16, 0xE3D306C9, 0x8A01FCAF);
	r3 = D(r3, s1_1_2, 0x28FFF80F, 0x01FE01FC, 0x230AFF15, 0xF0020200);
	r4 = D(r4, s1_1_2, 0x0AFD0021, 0x01FD0004, 0x97F615DA, 0xFB01FF25);
	r5 = D(r5, s1_1_2, 0x1500F609, 0xD201F213, 0xE300FEF8, 0x01FF01FF);
	r6 = D(r6, s1_1_2, 0xFBF4FDDA, 0xE4F903C1, 0x13FA0419, 0x1912E900);
	r7 = D(r7, s1_1_2, 0xFA00FB08, 0x0C010910, 0x0200FEFD, 0x03000925);
	r0 = D(r0, s1_2_0, 0x01100409, 0x23E70115, 0x00DFF70E, 0x01F8F80A);
	r1 = D(r1, s1_2_0, 0x0A0DF2F6, 0x0403F70E, 0xF8F7F8F5, 0xFD0900F5);
	r2 = D(r2, s1_2_0, 0xC706D5F6, 0x15FB06FA, 0xC3F611FB, 0xF3FB04FD);
	r3 = D(r3, s1_2_0, 0xF4010BF7, 0x050305FC, 0x0EFF0D01, 0xFAFDFA03);
	r4 = D(r4, s1_2_0, 0xFF07FE03, 0xFE0109FD, 0xFE070DF0, 0x17EA070E);
	r5 = D(r5, s1_2_0, 0x02F91B22, 0x0F00011F, 0xF2EF140A, 0x01FC0503);
	r6 = D(r6, s1_2_0, 0x0811F0FA, 0x0704E4F4, 0x0FE217F5, 0x0404D8F2);
	r7 = D(r7, s1_2_0, 0x0205F903, 0xEFE62119, 0xFB08EB07, 0x04080C0A);
	r0 = D(r0, s1_2_1, 0x1006E10B, 0x1116DDE5, 0x080ED109, 0x0701F4EC);
	r1 = D(r1, s1_2_1, 0xDDFB0ADA, 0xBFEF0A08, 0xD60A8330, 0xF909F307);
	r2 = D(r2, s1_2_1, 0xCE11EB18, 0xDC05F3EE, 0xF2E23939, 0x18F3FB0A);
	r3 = D(r3, s1_2_1, 0x0006FCF5, 0x03030201, 0x0202F921, 0x0002000B);
	r4 = D(r4, s1_2_1, 0x16FBF7F4, 0xFC0203F9, 0xF70EFF07, 0x0EDFF4CE);
	r5 = D(r5, s1_2_1, 0x0D220B02, 0xB8F2EF17, 0xECFA0AF9, 0xFFFCFFFE);
	r6 = D(r6, s1_2_1, 0x00F5FF12, 0xFB0619FB, 0x1D10EBC5, 0xFDFE07EA);
	r7 = D(r7, s1_2_1, 0xFA02F9FB, 0xFEF6F1EE, 0x11FEFAE8, 0x04EF0205);
	r0 = D(r0, s1_2_2, 0xFD07F3F4, 0xCD12FA00, 0xF8F50E0E, 0x0A0806DE);
	r1 = D(r1, s1_2_2, 0x0AFDF0E1, 0x0B0F08FF, 0x1BF4FDFA, 0x1EFDFBFF);
	r2 = D(r2, s1_2_2, 0xEB0FF208, 0xEBF7190C, 0x15F1D1F5, 0xEA0CDDDA);
	r3 = D(r3, s1_2_2, 0xF200FE0D, 0xFB000102, 0x1AF8FEFB, 0x050301FD);
	r4 = D(r4, s1_2_2, 0xFAFCFDFC, 0xF7FF0004, 0xD40DF5FF, 0xEFF91183);
	r5 = D(r5, s1_2_2, 0xF906090E, 0xF303E90F, 0xFDFDF5FF, 0xFFFE04FF);
	r6 = D(r6, s1_2_2, 0xA8F410F8, 0x0120DE02, 0xEE0405DF, 0xF610F1F7);
	r7 = D(r7, s1_2_2, 0xFA04FD06, 0x0DFBFC01, 0x1A0305F2, 0x2FFB09FD);
	s0_0_0 = G[6][xy.y+0][xy.x+0]; s0_0_1 = G[6][xy.y+0][xy.x+1];
	s0_0_2 = G[6][xy.y+0][xy.x+2]; s0_1_0 = G[6][xy.y+1][xy.x+0];
	s0_1_1 = G[6][xy.y+1][xy.x+1]; s0_1_2 = G[6][xy.y+1][xy.x+2];
	s0_2_0 = G[6][xy.y+2][xy.x+0]; s0_2_1 = G[6][xy.y+2][xy.x+1];
	s0_2_2 = G[6][xy.y+2][xy.x+2]; s1_0_0 = G[7][xy.y+0][xy.x+0];
	s1_0_1 = G[7][xy.y+0][xy.x+1]; s1_0_2 = G[7][xy.y+0][xy.x+2];
	s1_1_0 = G[7][xy.y+1][xy.x+0]; s1_1_1 = G[7][xy.y+1][xy.x+1];
	s1_1_2 = G[7][xy.y+1][xy.x+2]; s1_2_0 = G[7][xy.y+2][xy.x+0];
	s1_2_1 = G[7][xy.y+2][xy.x+1]; s1_2_2 = G[7][xy.y+2][xy.x+2];
	r0 = D(r0, s0_0_0, 0xE2F513F2, 0xFA0101EE, 0xF21DB8E9, 0x0103F6F2);
	r1 = D(r1, s0_0_0, 0x0BFB06D7, 0xFCFE04F5, 0xF8F4140C, 0x05010102);
	r2 = D(r2, s0_0_0, 0xF3D81415, 0xF916FB34, 0x0003EA0B, 0xF00A0C05);
	r3 = D(r3, s0_0_0, 0xF8030309, 0xFFFEFF0E, 0xF1090004, 0x0101FBE8);
	r4 = D(r4, s0_0_0, 0xFB090818, 0x010200FE, 0x08040A05, 0x14ED090D);
	r5 = D(r5, s0_0_0, 0x08E20607, 0xF505FA08, 0x0008F8F0, 0x1501FF4A);
	r6 = D(r6, s0_0_0, 0x03FC02FE, 0x1A0007DC, 0x08F9080A, 0xC815E6FD);
	r7 = D(r7, s0_0_0, 0xF2FC030D, 0xF506FA05, 0x03F7FB04, 0x01020104);
	r0 = D(r0, s0_0_1, 0xDFFD04E9, 0x11FE0604, 0x8133E91C, 0xCA06F709);
	r1 = D(r1, s0_0_1, 0x0E140E10, 0x05FB0100, 0x0FFA09F2, 0xFB0100FE);
	r2 = D(r2, s0_0_1, 0x07E01600, 0x0113E90E, 0x0B1CF40E, 0x071E0DEF);
	r3 = D(r3, s0_0_1, 0xF00700F6, 0x01000203, 0x02F4F9FF, 0xFAFDFC0B);
	r4 = D(r4, s0_0_1, 0x13F705FF, 0xF5FF0109, 0x0DF0EF0B, 0x14F40210);
	r5 = D(r5, s0_0_1, 0xEEEC0CFC, 0x13FEFEF1, 0xE51AF5EC, 0xFA00FB16);
	r6 = D(r6, s0_0_1, 0x110AFFE1, 0xDC07F981, 0xF6FB07FF, 0x12E4F201);
	r7 = D(r7, s0_0_1, 0xFEF9050C, 0xF807F907, 0x08FF02FE, 0xF8FD05F5);
	r0 = D(r0, s0_0_2, 0x19FCF9F3, 0xE711F902, 0xB81D050F, 0xFC040201);
	r1 = D(r1, s0_0_2, 0xFBFD02EB, 0xFE05FC02, 0xFEFF0306, 0xF700FF01);
	r2 = D(r2, s0_0_2, 0xFEC725F1, 0x08EEF8FC, 0xDDFBDA03, 0xF514FFF4);
	r3 = D(r3, s0_0_2, 0xEAFE0B06, 0x03FFFF04, 0x01F7FC06, 0xFD05FCFF);
	r4 = D(r4, s0_0_2, 0x05FE08F9, 0xFFFFFF02, 0x00E806F5, 0x17F208FB);
	r5 = D(r5, s0_0_2, 0xFDFA1200, 0xF9040409, 0xF702FB0C, 0x00FFF908);
	r6 = D(r6, s0_0_2, 0xF8FBF902, 0xE10AFA0D, 0xFDFE0DFD, 0x1B07EB10);
	r7 = D(r7, s0_0_2, 0x01FF0302, 0x01030304, 0x0CFBFFFF, 0x13FC0600);
	r0 = D(r0, s0_1_0, 0x16FA0647, 0x0602031C, 0x8139AB06, 0xD109011F);
	r1 = D(r1, s0_1_0, 0xFA0609BE, 0x08F7F7EA, 0x0D0FFFE4, 0xF203FDE1);
	r2 = D(r2, s0_1_0, 0x1CC508D0, 0x10040659, 0x111607F6, 0x0CFC1BD6);
	r3 = D(r3, s0_1_0, 0x1E0004D2, 0x00F901E9, 0xDD04FF04, 0x0C00F9E2);
	r4 = D(r4, s0_1_0, 0x05F80B2A, 0xF9FC0041, 0x0B030FEE, 0x08F7F715);
	r5 = D(r5, s0_1_0, 0x0EE00881, 0xFAFEF5EA, 0xF102F1F1, 0x0702FC00);
	r6 = D(r6, s0_1_0, 0x000303FF, 0xC4030C0F, 0x09FA0010, 0x0FFBE3FD);
	r7 = D(r7, s0_1_0, 0x070305F4, 0xEF07FB3D, 0xFA000414, 0x03010201);
	r0 = D(r0, s0_1_1, 0x150F03D6, 0xEAE9DEDD, 0x8F2EE9C8, 0xFF07E4F3);
	r1 = D(r1, s0_1_1, 0x0B011015, 0xFEFB04F7, 0xE603F7EA, 0x00FF0CF3);
	r2 = D(r2, s0_1_1, 0xEFD316A5, 0xC012F618, 0xA60CCF17, 0xEF1CFF30);
	r3 = D(r3, s0_1_1, 0xEA0009D9, 0x02FF04FF, 0xEAFD01F1, 0x0B04FE04);
	r4 = D(r4, s0_1_1, 0xFF05FAEE, 0xFB000209, 0x0CF7FB1A, 0xC70CDA08);
	r5 = D(r5, s0_1_1, 0x14F505F7, 0xA9ED041E, 0x08FCEC03, 0x0403F813);
	r6 = D(r6, s0_1_1, 0xE2EDF481, 0x0411E7D7, 0xE40010ED, 0xE20512F6);
	r7 = D(r7, s0_1_1, 0xF7FE0912, 0x0006F303, 0xFEFEFF31, 0xFFFBFED5);
	r0 = D(r0, s0_1_2, 0xF80203EC, 0x0D03FFFA, 0x1B14FC01, 0x0D010406);
	r1 = D(r1, s0_1_2, 0xF60407F5, 0x0000FFEE, 0x1D03F20D, 0x0000FE07);
	r2 = D(r2, s0_1_2, 0x22AB24EA, 0xF70204EC, 0x080CF6FB, 0xDAFAF20C);
	r3 = D(r3, s0_1_2, 0x0EFF0AF8, 0x05FF0103, 0xEDF9030D, 0xFD03FA06);
	r4 = D(r4, s0_1_2, 0x010205FE, 0x030101FF, 0xF3F40FF7, 0x0D05EDF4);
	r5 = D(r5, s0_1_2, 0xF8FC03F9, 0xF0FF0109, 0x0A02FF06, 0xFF04FAFD);
	r6 = D(r6, s0_1_2, 0x0A0100F6, 0x3C08F40B, 0x12040702, 0x22FFF614);
	r7 = D(r7, s0_1_2, 0xF6FD0500, 0xEE08FBFE, 0xE5FD0107, 0xEAFC0D05);
	r0 = D(r0, s0_2_0, 0xF70708F4, 0x020E00FE, 0xD216D222, 0xF706F50B);
	r1 = D(r1, s0_2_0, 0x1B0110ED, 0xFEF507E6, 0x0401100C, 0xF4FFFF00);
	r2 = D(r2, s0_2_0, 0xFDF10D04, 0x1513F80D, 0x0408FD0E, 0xFDFB13F9);
	r3 = D(r3, s0_2_0, 0x130204F7, 0xFD000204, 0x0101F8FF, 0x0B01FFFD);
	r4 = D(r4, s0_2_0, 0x02FC0404, 0xF9010100, 0xF8FF0509, 0xFCF3EC14);
	r5 = D(r5, s0_2_0, 0xF7EB0CCA, 0xFCEC06F6, 0xF303F40A, 0x0404FC02);
	r6 = D(r6, s0_2_0, 0x05FE06F9, 0xF2030706, 0x1BF90903, 0x0AFF030D);
	r7 = D(r7, s0_2_0, 0x02FC06FF, 0xF30CEEF1, 0xEFF60806, 0x0FFF0801);
	r0 = D(r0, s0_2_1, 0xE20804E4, 0xE509FB0F, 0x2115E801, 0x0C04FF03);
	r1 = D(r1, s0_2_1, 0x0B0013FD, 0x09F605F2, 0xFCFFFE03, 0xFB0305F9);
	r2 = D(r2, s0_2_1, 0xF4BF20F5, 0xFF150BF7, 0xEF12F5F2, 0xF2FB0D06);
	r3 = D(r3, s0_2_1, 0x060201F7, 0xFBFF0401, 0xFA01FEFD, 0xFC00FE09);
	r4 = D(r4, s0_2_1, 0x01FC0006, 0xFD000201, 0xE8FDF3FA, 0x0CFEE80F);
	r5 = D(r5, s0_2_1, 0x03E902FD, 0xFFEFF3EE, 0xFC02EF00, 0x0305FB03);
	r6 = D(r6, s0_2_1, 0x03FBFAF1, 0xF6010300, 0x15011311, 0x0E0B05F9);
	r7 = D(r7, s0_2_1, 0x02FE04FE, 0x160AF2F0, 0xEDFE05FF, 0xE6FFFF81);
	r0 = D(r0, s0_2_2, 0xFA0613F6, 0xE5FF060F, 0x050FF704, 0xED040508);
	r1 = D(r1, s0_2_2, 0x1403FFF1, 0xF701FFF1, 0x1802EF00, 0xF9FFFF00);
	r2 = D(r2, s0_2_2, 0xFFE51506, 0xF805FC00, 0x0C09F9F6, 0x050918FA);
	r3 = D(r3, s0_2_2, 0x000201FE, 0x00FE0200, 0xFBFB0301, 0xFE030000);
	r4 = D(r4, s0_2_2, 0x0EFB03F9, 0x03FE0000, 0xFBF9F8FC, 0x18FFF1F1);
	r5 = D(r5, s0_2_2, 0x03FC0AF2, 0x15F2FBFF, 0xFF00F8FE, 0xFD02F904);
	r6 = D(r6, s0_2_2, 0x01FCFE04, 0xF10E0801, 0xFD041300, 0xD31AF919);
	r7 = D(r7, s0_2_2, 0x040006FC, 0x0A0AF301, 0x10FF0EEF, 0x0CF30704);
	r0 = D(r0, s1_0_0, 0xE116F904, 0x02F70CFD, 0x0EE3FE02, 0x01070201);
	r1 = D(r1, s1_0_0, 0xB508C5E6, 0xFB02F8FC, 0x010B0CFB, 0xF80203FB);
	r2 = D(r2, s1_0_0, 0x01C80203, 0x092B8108, 0xC4AFF5F9, 0x03F2E913);
	r3 = D(r3, s1_0_0, 0x06EEFE03, 0x0001FC00, 0x0FF309F9, 0xFD030700);
	r4 = D(r4, s1_0_0, 0x010518F7, 0x0004FC00, 0x0B08100C, 0x18FD0209);
	r5 = D(r5, s1_0_0, 0xFEE81EEC, 0xFEC7F801, 0x05FEFAFD, 0xFF03FDFB);
	r6 = D(r6, s1_0_0, 0x03090001, 0xDEF0F80B, 0xEAEEFEEB, 0x2EE692E2);
	r7 = D(r7, s1_0_0, 0x00F70204, 0xF8EDDF07, 0xFCFD0B01, 0xFCFB11F7);
	r0 = D(r0, s1_0_1, 0xEC160EF4, 0xFBF5FBF9, 0x01D3F014, 0xF7FE0E02);
	r1 = D(r1, s1_0_1, 0xDDF6A8F6, 0x010101FA, 0xFED70D05, 0xFFFB01F9);
	r2 = D(r2, s1_0_1, 0xF7DBFEEF, 0x17FB3A0E, 0xF4DCFC10, 0xFF14EF04);
	r3 = D(r3, s1_0_1, 0xFFF9F60C, 0xFFFCFBFF, 0xFB05F707, 0x03150B03);
	r4 = D(r4, s1_0_1, 0x0CFD0DF5, 0xFF0603FF, 0x06081103, 0x0EF90415);
	r5 = D(r5, s1_0_1, 0xF0C5DBEE, 0x04D6FB00, 0xF60307FC, 0xFBFF05FA);
	r6 = D(r6, s1_0_1, 0x05030D06, 0xF6D9F7E3, 0x0CF3E5E8, 0x1022E01A);
	r7 = D(r7, s1_0_1, 0xFB0DFD07, 0x04FDF70A, 0x0B1708FD, 0xF9E803F6);
	r0 = D(r0, s1_0_2, 0x05E6E400, 0xFC04F4FE, 0x0CBEC429, 0xF9FDF9FF);
	r1 = D(r1, s1_0_2, 0xC022BDF9, 0x0700F803, 0x000209FD, 0x0302F9FF);
	r2 = D(r2, s1_0_2, 0x0EDDE6FB, 0xEBCB8116, 0x24FED410, 0x04FD040C);
	r3 = D(r3, s1_0_2, 0x0004FA08, 0x01FF0101, 0x04FEF8FD, 0x000007FF);
	r4 = D(r4, s1_0_2, 0x06FAF0FF, 0x04FD0101, 0x010101FD, 0x21E6CF12);
	r5 = D(r5, s1_0_2, 0x03F91F01, 0xF60B0C0B, 0x06090F04, 0xFFF8FBFF);
	r6 = D(r6, s1_0_2, 0xF9060B03, 0xFBDFF1F5, 0x0EFD05F2, 0x000013F5);
	r7 = D(r7, s1_0_2, 0xFB030803, 0x00FF0BFE, 0xFD021F05, 0xFFFBFA04);
	r0 = D(r0, s1_1_0, 0xF61BE0F5, 0x1CF10504, 0x26DD2081, 0x03FEF9F7);
	r1 = D(r1, s1_1_0, 0xFC15D102, 0x0503FEF8, 0xEDE5F9F5, 0x00FE0408);
	r2 = D(r2, s1_1_0, 0xF7D411F5, 0x182BC2FE, 0x8181EB08, 0xFCEFFE06);
	r3 = D(r3, s1_1_0, 0xEA07FC00, 0x06020104, 0xFF00F200, 0x05FEFEFB);
	r4 = D(r4, s1_1_0, 0x11FFF701, 0x0204FC04, 0x0DF1EDF7, 0x25050300);
	r5 = D(r5, s1_1_0, 0x010217F3, 0xFCF30FE9, 0x05F806F3, 0x04010000);
	r6 = D(r6, s1_1_0, 0xFE150205, 0xFD0CF900, 0xF900F2E6, 0x061F11E8);
	r7 = D(r7, s1_1_0, 0xF8FE0002, 0xDFFCE6FE, 0x0B0A0A03, 0xF40301F9);
	r0 = D(r0, s1_1_1, 0x8104FA0C, 0x001BDEEB, 0xA336B10E, 0x0FF7E4FF);
	r1 = D(r1, s1_1_1, 0xB4F7A0E7, 0xF1F50900, 0x06F61D2C, 0xF910FC06);
	r2 = D(r2, s1_1_1, 0x0AFD10F9, 0x0708010B, 0x03F614C5, 0x140AECFD);
	r3 = D(r3, s1_1_1, 0xEDFBF602, 0xFCFDF6FE, 0x0E03F407, 0xF9F8F20D);
	r4 = D(r4, s1_1_1, 0xE8F5F605, 0xFF08FC00, 0x0CF31CFE, 0xB80DD3FA);
	r5 = D(r5, s1_1_1, 0xF1FC0BFB, 0x02EE0B05, 0x1DF50BFB, 0x000208FF);
	r6 = D(r6, s1_1_1, 0x0F0C010E, 0xEF18F1EE, 0xD8E7FB05, 0xE805120B);
	r7 = D(r7, s1_1_1, 0x020A0404, 0x00C4C3F2, 0x17010207, 0xFDC10CF9);
	r0 = D(r0, s1_1_2, 0xEAFCDBFA, 0xF10F0201, 0x10FBED12, 0xFFFF0A06);
	r1 = D(r1, s1_1_2, 0xB308D5F8, 0xFF0CFDFD, 0xDAF2C70B, 0xFCFC0601);
	r2 = D(r2, s1_1_2, 0xE50D020D, 0xEB10CE02, 0x2DFCE61E, 0x10FFCD10);
	r3 = D(r3, s1_1_2, 0xE9F0F5FE, 0xFFFD00FF, 0xF20709F8, 0xFD08FF01);
	r4 = D(r4, s1_1_2, 0xFFFE04FA, 0x03FD0002, 0xF1E30500, 0x0AD4ECF4);
	r5 = D(r5, s1_1_2, 0xF9071303, 0xFE07F105, 0x0EFFFA07, 0xFFFFFD02);
	r6 = D(r6, s1_1_2, 0x0CFE0603, 0xD228EBFC, 0x0A0513FB, 0x07052CFA);
	r7 = D(r7, s1_1_2, 0xFE05FCFD, 0x000000F8, 0x1A01E606, 0x04F2F706);
	r0 = D(r0, s1_2_0, 0xFF02FD04, 0x000DFAF6, 0x1D0500B1, 0x02F90701);
	r1 = D(r1, s1_2_0, 0xDD0BF7F6, 0x04000B04, 0xE0FF1204, 0x01FD0708);
	r2 = D(r2, s1_2_0, 0xF1FB01E5, 0x0EF2E4F9, 0x0609BEEC, 0xFEFD000D);
	r3 = D(r3, s1_2_0, 0xE8FD0000, 0xFD020102, 0x0B0AFA04, 0xFD030104);
	r4 = D(r4, s1_2_0, 0xFFF9FC02, 0xFFFEFFFE, 0xFB04F208, 0x20EAFCE5);
	r5 = D(r5, s1_2_0, 0xF41C0EEF, 0xF61018F5, 0xFC030302, 0x01FE0102);
	r6 = D(r6, s1_2_0, 0xF908010E, 0x00FFFCFD, 0x1AEEFDE3, 0xF9F7F736);
	r7 = D(r7, s1_2_0, 0x0001FDFB, 0x01FAFBFB, 0x0CFD00FD, 0xF00902F4);
	r0 = D(r0, s1_2_1, 0xFA06EFF9, 0x26FDFCFD, 0x1C1314D9, 0x0414F70A);
	r1 = D(r1, s1_2_1, 0xC30EE5F7, 0x03EBA4F5, 0xE10A082F, 0xF601FC08);
	r2 = D(r2, s1_2_1, 0x1006FDE1, 0xF20B0CFC, 0xF9EE0EDE, 0x0DEBF8FA);
	r3 = D(r3, s1_2_1, 0xFA0B0502, 0x010103FA, 0x030302FE, 0x01FDFE03);
	r4 = D(r4, s1_2_1, 0x09FB0303, 0x000003FD, 0x150B0001, 0x10DEFDDC);
	r5 = D(r5, s1_2_1, 0x07080AF7, 0x000CFEE1, 0x0D0203F3, 0x0202FD02);
	r6 = D(r6, s1_2_1, 0xFB080A05, 0x0B06F9F7, 0x0CF0FCEF, 0x0FDAF611);
	r7 = D(r7, s1_2_1, 0xF9010207, 0xFBEFEFF9, 0x05FEF6FE, 0xD9F0FFE9);
	r0 = D(r0, s1_2_2, 0xF206F0F9, 0x1A03EAFF, 0x161FFB1D, 0xFF09F705);
	r1 = D(r1, s1_2_2, 0xFF0401E6, 0xFAFDF505, 0x0EF10812, 0xFFF9FBFF);
	r2 = D(r2, s1_2_2, 0x05030E05, 0x05FBEB0B, 0x24EBE512, 0xFB05EB0D);
	r3 = D(r3, s1_2_2, 0xF6FF0301, 0x0401FEFE, 0xF6FD0003, 0x01000103);
	r4 = D(r4, s1_2_2, 0x01FD07FB, 0x0402FEFF, 0xF5F300FF, 0xF8FD03F4);
	r5 = D(r5, s1_2_2, 0xF40F0907, 0xF2FE0304, 0xFC01FF00, 0x0300FE03);
	r6 = D(r6, s1_2_2, 0xE3E0130C, 0xF60C06FE, 0x1004FE01, 0x0510FA0E);
	r7 = D(r7, s1_2_2, 0xFDFF0501, 0x0A0AED0A, 0x00FAFE00, 0xEE0019F9);
	f0 = vec4(r0) * 6.2000124e-05;
	f0 += vec4(-9.811e-03, 2.052e-02, 4.932e-03, 6.584e-03);
	f0 = clamp(f0, vec4(0.0), vec4(1.0));
	imageStore(out_image, opos + ivec2(0, 0), f0);
	f1 = vec4(r1) * 6.2000124e-05;
	f1 += vec4(-3.447e-03, -3.659e-02, -5.079e-04, -9.955e-03);
	f1 = clamp(f1, vec4(0.0), vec4(1.0));
	imageStore(out_image, opos + ivec2(1, 0), f1);
	f2 = vec4(r2) * 6.2000124e-05;
	f2 += vec4(-2.751e-02, -2.467e-02, -2.623e-02, 1.942e-02);
	f2 = clamp(f2, vec4(0.0), vec4(1.0));
	imageStore(out_image, opos + ivec2(0, 1), f2);
	f3 = vec4(r3) * 6.2000124e-05;
	f3 += vec4(7.991e-03, 3.718e-03, 9.051e-03, 7.903e-03);
	f3 = clamp(f3, vec4(0.0), vec4(1.0));
	imageStore(out_image, opos + ivec2(1, 1), f3);
	f4 = vec4(r4) * 6.2000124e-05;
	f4 += vec4(-1.221e-02, 6.565e-04, 1.414e-02, -1.822e-02);
	f4 = clamp(f4, vec4(0.0), vec4(1.0));
	imageStore(out_image, opos + ivec2(2, 0), f4);
	f5 = vec4(r5) * 6.2000124e-05;
	f5 += vec4(1.009e-03, 1.501e-02, 1.752e-02, 8.590e-03);
	f5 = clamp(f5, vec4(0.0), vec4(1.0));
	imageStore(out_image, opos + ivec2(3, 0), f5);
	f6 = vec4(r6) * 6.2000124e-05;
	f6 += vec4(-5.359e-03, 6.483e-02, -1.861e-02, -5.678e-02);
	f6 = clamp(f6, vec4(0.0), vec4(1.0));
	imageStore(out_image, opos + ivec2(2, 1), f6);
	f7 = vec4(r7) * 6.2000124e-05;
	f7 += vec4(1.022e-03, 9.111e-03, -5.644e-03, 1.636e-02);
	f7 = clamp(f7, vec4(0.0), vec4(1.0));
	imageStore(out_image, opos + ivec2(3, 1), f7);
}

//!DESC CuNNy-8x32-conv5
//!HOOK LUMA
//!COMPUTE 32 16 8 8
//!BIND conv4
//!BIND LUMA
//!SAVE conv5
//!WIDTH LUMA.w 4 *
//!HEIGHT LUMA.h 2 *
//!COMPONENTS 4
//!WHEN OUTPUT.w LUMA.w / 1.3 > OUTPUT.h LUMA.h / 1.3 > *
#extension GL_EXT_spirv_intrinsics : require
spirv_instruction (extensions = ["SPV_KHR_integer_dot_product"], capabilities = [6019, 6018], id = 4450)
int dp4(int a, int b, spirv_literal int fmt);
#define D(r, s, a, b, c, d) r + ivec4(dp4(s, a, 0), dp4(s, b, 0), dp4(s, c, 0), dp4(s, d, 0))
shared int G[8][10][10];
void hook() {
	ivec2 xy = ivec2(gl_LocalInvocationID.xy);
	ivec2 pos = ivec2(gl_WorkGroupID.xy) * ivec2(8, 8) + xy;
	ivec2 opos = pos * ivec2(4, 2);
	ivec2 sz = ivec2(LUMA_size) - ivec2(1);
	for (int y = 0; y < 10; y += 8) {
		int ay = xy.y + y;
		if (ay >= 10) break;
		for (int x = 0; x < 10; x += 8) {
			int ax = xy.x + x;
			if (ax >= 10) break;
			vec2 p;
			vec4 r, g, b, a;
			p = vec2(clamp(pos + ivec2(x - 1, y - 1), ivec2(0), sz) * ivec2(4, 2) + ivec2(1, 1)) * conv4_pt;
			r = conv4_gather(p, 0);
			g = conv4_gather(p, 1);
			b = conv4_gather(p, 2);
			a = conv4_gather(p, 3);
			vec4 v0 = vec4(r.w, g.w, b.w, a.w) * 1.0000000e+00;
			vec4 v1 = vec4(r.z, g.z, b.z, a.z) * 1.0000000e+00;
			vec4 v2 = vec4(r.x, g.x, b.x, a.x) * 1.0000000e+00;
			vec4 v3 = vec4(r.y, g.y, b.y, a.y) * 1.0000000e+00;
			p = vec2(clamp(pos + ivec2(x - 1, y - 1), ivec2(0), sz) * ivec2(4, 2) + ivec2(3, 1)) * conv4_pt;
			r = conv4_gather(p, 0);
			g = conv4_gather(p, 1);
			b = conv4_gather(p, 2);
			a = conv4_gather(p, 3);
			vec4 v4 = vec4(r.w, g.w, b.w, a.w) * 1.0000000e+00;
			vec4 v5 = vec4(r.z, g.z, b.z, a.z) * 1.0000000e+00;
			vec4 v6 = vec4(r.x, g.x, b.x, a.x) * 1.0000000e+00;
			vec4 v7 = vec4(r.y, g.y, b.y, a.y) * 1.0000000e+00;
			G[0][ay][ax] = int(packSnorm4x8(v0));
			G[1][ay][ax] = int(packSnorm4x8(v1));
			G[2][ay][ax] = int(packSnorm4x8(v2));
			G[3][ay][ax] = int(packSnorm4x8(v3));
			G[4][ay][ax] = int(packSnorm4x8(v4));
			G[5][ay][ax] = int(packSnorm4x8(v5));
			G[6][ay][ax] = int(packSnorm4x8(v6));
			G[7][ay][ax] = int(packSnorm4x8(v7));
		}
	}
	barrier();
	int s0_0_0, s0_0_1, s0_0_2, s0_1_0, s0_1_1, s0_1_2, s0_2_0, s0_2_1, s0_2_2, s1_0_0, s1_0_1, s1_0_2, s1_1_0, s1_1_1, s1_1_2, s1_2_0, s1_2_1, s1_2_2;
	ivec4 r0, r1, r2, r3, r4, r5, r6, r7;
	vec4 f0, f1, f2, f3, f4, f5, f6, f7;
	r0 = ivec4(0); r1 = ivec4(0); r2 = ivec4(0); r3 = ivec4(0); r4 = ivec4(0); r5 = ivec4(0); r6 = ivec4(0); r7 = ivec4(0);
	s0_0_0 = G[0][xy.y+0][xy.x+0]; s0_0_1 = G[0][xy.y+0][xy.x+1];
	s0_0_2 = G[0][xy.y+0][xy.x+2]; s0_1_0 = G[0][xy.y+1][xy.x+0];
	s0_1_1 = G[0][xy.y+1][xy.x+1]; s0_1_2 = G[0][xy.y+1][xy.x+2];
	s0_2_0 = G[0][xy.y+2][xy.x+0]; s0_2_1 = G[0][xy.y+2][xy.x+1];
	s0_2_2 = G[0][xy.y+2][xy.x+2]; s1_0_0 = G[1][xy.y+0][xy.x+0];
	s1_0_1 = G[1][xy.y+0][xy.x+1]; s1_0_2 = G[1][xy.y+0][xy.x+2];
	s1_1_0 = G[1][xy.y+1][xy.x+0]; s1_1_1 = G[1][xy.y+1][xy.x+1];
	s1_1_2 = G[1][xy.y+1][xy.x+2]; s1_2_0 = G[1][xy.y+2][xy.x+0];
	s1_2_1 = G[1][xy.y+2][xy.x+1]; s1_2_2 = G[1][xy.y+2][xy.x+2];
	r0 = D(r0, s0_0_0, 0x17EDF8FB, 0x04F9F4F5, 0x17F409E8, 0xF0F7FDFC);
	r1 = D(r1, s0_0_0, 0xFF21FF1B, 0x0405FF0E, 0x11070EF0, 0x1824FEF7);
	r2 = D(r2, s0_0_0, 0xF3F90906, 0xEAC7282B, 0x01041004, 0x19231F10);
	r3 = D(r3, s0_0_0, 0xED14EEE1, 0xF61416FD, 0xEBF30506, 0xF110F802);
	r4 = D(r4, s0_0_0, 0xFEF0F7FB, 0xFCFB0402, 0xFC1005F5, 0x0828FBEA);
	r5 = D(r5, s0_0_0, 0xFA0200FC, 0x10F80400, 0xFA07FB01, 0xFBF8FEFB);
	r6 = D(r6, s0_0_0, 0x01FE00FD, 0xFE050301, 0xEF0B04F9, 0x1DC2FDDC);
	r7 = D(r7, s0_0_0, 0xF4EDF91F, 0x031203F2, 0xFD000304, 0x141EFE28);
	r0 = D(r0, s0_0_1, 0xF600F721, 0x0F04020B, 0xEFFBE9F4, 0x0CCCF316);
	r1 = D(r1, s0_0_1, 0xC8F8131B, 0x03030D06, 0xE1FD0BFC, 0x0505FF02);
	r2 = D(r2, s0_0_1, 0x0604F600, 0xCDFF21B9, 0x2207F2E3, 0xE5E1EC06);
	r3 = D(r3, s0_0_1, 0xFD00F1E6, 0xE3FC1FFC, 0x06D60210, 0xF3FD0C0F);
	r4 = D(r4, s0_0_1, 0x09F103E7, 0x0303FDFE, 0xED0BF604, 0xE90604FC);
	r5 = D(r5, s0_0_1, 0x060102FC, 0x0006070D, 0xF8070608, 0x01010BF3);
	r6 = D(r6, s0_0_1, 0xF7020109, 0xFA02F301, 0xF0FCFFF3, 0x0AE00F03);
	r7 = D(r7, s0_0_1, 0x14EEF819, 0xFF0EF9FE, 0xFE03FD00, 0x0B09FDFE);
	r0 = D(r0, s0_0_2, 0xFEFAFE0C, 0xFE0501F1, 0xFAFCFBFE, 0xE9E10313);
	r1 = D(r1, s0_0_2, 0xFD150109, 0x09050407, 0xFBFA0309, 0x0616030B);
	r2 = D(r2, s0_0_2, 0x0206FD06, 0xDF0118DD, 0xD0FA00F3, 0x0917061D);
	r3 = D(r3, s0_0_2, 0x01FD04FC, 0xFE0706FB, 0x060805FA, 0xF503FD0C);
	r4 = D(r4, s0_0_2, 0x0AFAFA07, 0xFF00FFFF, 0x07FB0502, 0xFCE8F9EC);
	r5 = D(r5, s0_0_2, 0xFB0309F6, 0xEA0D0501, 0xF80402FC, 0x00FDFA0D);
	r6 = D(r6, s0_0_2, 0x01FCFCFF, 0x040802FE, 0x07FA03FB, 0x1DDD0EF7);
	r7 = D(r7, s0_0_2, 0x09E7F405, 0x000703FE, 0x04FFFF00, 0x0D0DFE04);
	r0 = D(r0, s0_1_0, 0xF8F3EBF3, 0x00F1F8F6, 0xEF051105, 0xF3E807F8);
	r1 = D(r1, s0_1_0, 0x1D0C0BFA, 0x10060CF5, 0xF4FE04FD, 0x011003EF);
	r2 = D(r2, s0_1_0, 0xF7FC04FE, 0x02080D19, 0x0104102F, 0x23DB18FF);
	r3 = D(r3, s0_1_0, 0x0B1703BA, 0xE520F813, 0xFD06FEFF, 0x00030200);
	r4 = D(r4, s0_1_0, 0xF5E7FBF9, 0xFEFCFF00, 0x1210F7FA, 0x140BF3E7);
	r5 = D(r5, s0_1_0, 0x000202FE, 0xED020A02, 0x030CF9F7, 0xFCFE0503);
	r6 = D(r6, s0_1_0, 0x0402FDFA, 0x00040307, 0x11E308F3, 0x18DB1BEA);
	r7 = D(r7, s0_1_0, 0xFDF9F9FE, 0xF6060CF8, 0x010001FF, 0x0C0A0500);
	r0 = D(r0, s0_1_1, 0xF5E900FF, 0x11F8F507, 0x0FF617D9, 0x0CFD08EC);
	r1 = D(r1, s0_1_1, 0x10E91522, 0xF3FE0505, 0x0A0111FB, 0xE20002F6);
	r2 = D(r2, s0_1_1, 0xF9F908F1, 0xE8FE21CC, 0xEBEF0FF0, 0xF0E9FF01);
	r3 = D(r3, s0_1_1, 0xFBF71FF5, 0xF3070FEC, 0xF5FC0200, 0x050E0302);
	r4 = D(r4, s0_1_1, 0x04F2F7F3, 0x11030603, 0x0B0701F8, 0xEDF40BF8);
	r5 = D(r5, s0_1_1, 0x0003FFFF, 0x08F01607, 0x0D0306FC, 0x09EB03FC);
	r6 = D(r6, s0_1_1, 0xFE01FE09, 0x0201FF06, 0x0AFF11F7, 0x020C0A22);
	r7 = D(r7, s0_1_1, 0x03221009, 0xFF0D01F6, 0xF8040105, 0x1C0E0107);
	r0 = D(r0, s0_1_2, 0x0001FC00, 0xFDF6FEFA, 0x04FD06FE, 0xF9F6F70A);
	r1 = D(r1, s0_1_2, 0x0AFB1502, 0x0FFCFD0C, 0xFBF902FC, 0x050A0604);
	r2 = D(r2, s0_1_2, 0x000502F9, 0xEF0D17D5, 0x0E0CE9E4, 0x0DFBF808);
	r3 = D(r3, s0_1_2, 0x01E92606, 0xFE1111EC, 0xFF0BFE0F, 0x070A030B);
	r4 = D(r4, s0_1_2, 0x08FB010F, 0xFE010401, 0xFF01F6F5, 0x1FE505ED);
	r5 = D(r5, s0_1_2, 0xFF01FEFC, 0xFBFD0EFD, 0xF80101FB, 0x09F7F905);
	r6 = D(r6, s0_1_2, 0x01FEFD01, 0xFD030000, 0xFFFE10FD, 0x09F700ED);
	r7 = D(r7, s0_1_2, 0x04F2FDE3, 0x030000FE, 0x0201FB00, 0x050003FB);
	r0 = D(r0, s0_2_0, 0xFCDCEFDE, 0x0AF50003, 0xFFFB0607, 0xF4F30800);
	r1 = D(r1, s0_2_0, 0x0221E908, 0xFFF3F812, 0xFDFDFD06, 0x0C10FDFA);
	r2 = D(r2, s0_2_0, 0x01030302, 0xFA010FFB, 0xFD09191B, 0x01FE3027);
	r3 = D(r3, s0_2_0, 0x1B23E8D9, 0x18000708, 0xFBF707F2, 0x0304FFFE);
	r4 = D(r4, s0_2_0, 0xFAE10400, 0x01010404, 0xFE00FDFB, 0x070EF800);
	r5 = D(r5, s0_2_0, 0x03000000, 0xF508000A, 0x0405FEFF, 0x0200020B);
	r6 = D(r6, s0_2_0, 0x02FCFF01, 0xFD0301FE, 0xFEF700FC, 0x17D81CEB);
	r7 = D(r7, s0_2_0, 0x1000F6F4, 0xFF08FBF3, 0xFB02FBFB, 0x05F80200);
	r0 = D(r0, s0_2_1, 0x0DE0FBFA, 0x0504FCFB, 0x0CEF0502, 0x14ED0A0F);
	r1 = D(r1, s0_2_1, 0x0DEBFCEA, 0xFFFAFAF3, 0x01F504F7, 0xFF090AFE);
	r2 = D(r2, s0_2_1, 0xFB0203FC, 0xF80AEB05, 0x03E80F0B, 0xD1D63221);
	r3 = D(r3, s0_2_1, 0xF908F910, 0x0208F50F, 0xFAF700F6, 0xFA0D04F8);
	r4 = D(r4, s0_2_1, 0x03E1FCFA, 0xFA050405, 0x07FDFD03, 0x0D0D05FD);
	r5 = D(r5, s0_2_1, 0x0104FFF7, 0x02FB090F, 0xF910FB00, 0xF404F705);
	r6 = D(r6, s0_2_1, 0x02FFFF01, 0xFC0100FE, 0xFEF50AFA, 0x0FE51BF5);
	r7 = D(r7, s0_2_1, 0xFF0E020B, 0x040505F9, 0x02F90106, 0xFDFE0209);
	r0 = D(r0, s0_2_2, 0x07F0F9F9, 0x04FDFDFA, 0x01FFFFF1, 0xFADA0006);
	r1 = D(r1, s0_2_2, 0x0A180004, 0xFEF9F60A, 0x03FBFFFC, 0x02080501);
	r2 = D(r2, s0_2_2, 0xFD0304F3, 0x0C24F9D5, 0x050C0707, 0xE3210317);
	r3 = D(r3, s0_2_2, 0x12DE05F5, 0x120EFA04, 0xFF0BF9FE, 0xFD0CFE01);
	r4 = D(r4, s0_2_2, 0xFCF8FB0A, 0x00060001, 0x0BF8FDFA, 0x06F50B10);
	r5 = D(r5, s0_2_2, 0xFE00FFFE, 0xFFEF0303, 0xFD05F800, 0x06FCFD08);
	r6 = D(r6, s0_2_2, 0x00FFFFFF, 0xFC040005, 0xFFF70BFC, 0x10F216EE);
	r7 = D(r7, s0_2_2, 0x11F209F9, 0x04FE04F8, 0x05010000, 0x03010205);
	r0 = D(r0, s1_0_0, 0x05060318, 0x06080AF6, 0xCE09E6FF, 0xEE0AEF04);
	r1 = D(r1, s1_0_0, 0x6D0AFB08, 0x07000403, 0x18F9F70C, 0xF0EE0B0F);
	r2 = D(r2, s1_0_0, 0xDE01FFF4, 0xF30D1913, 0x0AFCF6F1, 0xEB03DCEA);
	r3 = D(r3, s1_0_0, 0xD4E91BEF, 0x81E5E6F7, 0xEF000803, 0x16F90306);
	r4 = D(r4, s1_0_0, 0xF018F6FC, 0x0100FAFE, 0xC5F502F3, 0xD7E1000A);
	r5 = D(r5, s1_0_0, 0x04FAFD00, 0xE5FD05FC, 0xFC010402, 0xEC0C06FA);
	r6 = D(r6, s1_0_0, 0x0B00FA00, 0xF004FDFA, 0x06FC00EE, 0x031AD6CF);
	r7 = D(r7, s1_0_0, 0x12070704, 0xEC0E12ED, 0xFF02FC01, 0x28FCFE03);
	r0 = D(r0, s1_0_1, 0xDE0DF0F6, 0xFAFD2614, 0xED0100FF, 0xF50C73EA);
	r1 = D(r1, s1_0_1, 0x23F4F00D, 0x08F51106, 0xE4FDF902, 0x14EEFFFD);
	r2 = D(r2, s1_0_1, 0xE7F90AF9, 0x1BE3FFFD, 0x48F7D4F4, 0x1E0EAFE1);
	r3 = D(r3, s1_0_1, 0xE80CF7C3, 0xB9E800FF, 0xD50D1A18, 0xDF0B10F3);
	r4 = D(r4, s1_0_1, 0x25FA1B1B, 0xFEFFF9F8, 0xD7011D05, 0x0AD50EFC);
	r5 = D(r5, s1_0_1, 0x1D05EC02, 0x000D11E1, 0x0AFA330B, 0xFE00FE0C);
	r6 = D(r6, s1_0_1, 0x0501FD0A, 0xF9FD03EC, 0xD1EF0CF2, 0xD6F881F8);
	r7 = D(r7, s1_0_1, 0xE7F3CBF3, 0x1CFCE10A, 0xFD00F9F9, 0x0AF1D40B);
	r0 = D(r0, s1_0_2, 0xF205D80D, 0x01F20DFE, 0x2A01EA14, 0x070C28F4);
	r1 = D(r1, s1_0_2, 0xF4FF02EA, 0xFAF7F7F3, 0xEA0703FC, 0x0AEF0F05);
	r2 = D(r2, s1_0_2, 0x08FDFBFC, 0x4403F010, 0x14FBC2F3, 0x1B0BD1FE);
	r3 = D(r3, s1_0_2, 0xF60F0102, 0x24EB1012, 0x0A09F71B, 0x0000FEF5);
	r4 = D(r4, s1_0_2, 0x0F0AF002, 0xF900FF01, 0x030114FF, 0x190819E5);
	r5 = D(r5, s1_0_2, 0x09F71501, 0xFAFBF705, 0xF9FD0901, 0xF80AF8F9);
	r6 = D(r6, s1_0_2, 0xFD03F8FE, 0xFD0009FE, 0x0304F9FD, 0xE50F08D9);
	r7 = D(r7, s1_0_2, 0xE60CFD00, 0x10FC1201, 0xFE01FCFC, 0xF2050CFD);
	r0 = D(r0, s1_1_0, 0xE8FDE1E0, 0x0D09FBFD, 0x1509F2EC, 0x1D090201);
	r1 = D(r1, s1_1_0, 0xDFD3D3FF, 0xE202FBFF, 0xEA0405E3, 0x0DF6EBF9);
	r2 = D(r2, s1_1_0, 0x0DF2FFFC, 0x1C0A070A, 0x11F01702, 0x09E3FFFD);
	r3 = D(r3, s1_1_0, 0x81E9E7D9, 0xFFE40C0B, 0x0EF80410, 0x08060306);
	r4 = D(r4, s1_1_0, 0x0708F610, 0x080400FA, 0xD70C04FD, 0x811F0ADF);
	r5 = D(r5, s1_1_0, 0xFFFF000B, 0xF30E00F2, 0x02FEFB07, 0x0F0501FB);
	r6 = D(r6, s1_1_0, 0xF8FD0402, 0x0104FDF4, 0xDBFF0002, 0x1304F9FB);
	r7 = D(r7, s1_1_0, 0x22F30513, 0xFA0901FD, 0x020005FD, 0x05F6F7E2);
	r0 = D(r0, s1_1_1, 0x05FBF416, 0x1CFB062B, 0x1913F7F4, 0xE3F21CF6);
	r1 = D(r1, s1_1_1, 0xE805D90C, 0x0901F622, 0x06090A24, 0x06F3FA19);
	r2 = D(r2, s1_1_1, 0xF90605FE, 0xF0E4ECF5, 0xDC1823FE, 0x0F0BF71C);
	r3 = D(r3, s1_1_1, 0xEFBFF1E3, 0x81EA10DF, 0x020DF8EC, 0x15060CDA);
	r4 = D(r4, s1_1_1, 0x24010E10, 0x22031003, 0xD0F9F70B, 0x09170B08);
	r5 = D(r5, s1_1_1, 0x0D02FE01, 0x0606F9D9, 0x07F90704, 0xEE05FCF1);
	r6 = D(r6, s1_1_1, 0xFDFCFA06, 0x04000506, 0xFA0B0AE4, 0x24FF020F);
	r7 = D(r7, s1_1_1, 0x05FD13DC, 0x03FDE200, 0xFC0002FE, 0x130D1212);
	r0 = D(r0, s1_1_2, 0x0FFDDCFE, 0x07FC05EB, 0xF600F7FD, 0xF0FDF617);
	r1 = D(r1, s1_1_2, 0xF320DEFC, 0x060CF303, 0x04FEFFF2, 0x01F0F310);
	r2 = D(r2, s1_1_2, 0xFC00FE01, 0x15E4C7E5, 0xF8F20000, 0xFDE8EB29);
	r3 = D(r3, s1_1_2, 0x07122004, 0xFFF8F224, 0xF5FC0A1A, 0x0001FA12);
	r4 = D(r4, s1_1_2, 0x020CF803, 0x03FF060A, 0x00FAF8FD, 0x001AE70F);
	r5 = D(r5, s1_1_2, 0x00FE05F5, 0xEE03F9EC, 0x0501FE07, 0xF70C0106);
	r6 = D(r6, s1_1_2, 0x01FE00FF, 0x05FF0400, 0x0A070101, 0x220600E8);
	r7 = D(r7, s1_1_2, 0xFFFEFADD, 0xF8FFF9F2, 0xFA04FEFB, 0x05071501);
	r0 = D(r0, s1_2_0, 0xF215EE0F, 0x0E060400, 0x0D0A03FA, 0x0DFEFEFC);
	r1 = D(r1, s1_2_0, 0xD1EC15F5, 0x060403FF, 0x0904FD19, 0xF7F9FC05);
	r2 = D(r2, s1_2_0, 0x03FEFDF3, 0xEA06FF0A, 0x19F9FF1A, 0x34D7FE15);
	r3 = D(r3, s1_2_0, 0xDEDC03DE, 0xE4FB05F3, 0xF705FF1D, 0x0101FC07);
	r4 = D(r4, s1_2_0, 0xFE000206, 0x03FFFF04, 0xF9FBFDF0, 0xECE4FBDF);
	r5 = D(r5, s1_2_0, 0xF804FF00, 0x0E0502F8, 0x0606FC02, 0x0703FA06);
	r6 = D(r6, s1_2_0, 0x0102FEFE, 0x00FE0102, 0x0BFFFFE4, 0xEF18EEEF);
	r7 = D(r7, s1_2_0, 0xFB0502F2, 0xFF0305F7, 0x02FE0201, 0x0104FC06);
	r0 = D(r0, s1_2_1, 0x17FEE106, 0x01000402, 0xF61104FD, 0x03FF07F4);
	r1 = D(r1, s1_2_1, 0xE0F0E4FC, 0x09FA00E9, 0x0307FFF4, 0x09F20602);
	r2 = D(r2, s1_2_1, 0xFD000407, 0xF9080E0F, 0x0D1113F5, 0x030A1D46);
	r3 = D(r3, s1_2_1, 0xE8D41310, 0xE9F1FA13, 0xF5FA0317, 0x05FBFB08);
	r4 = D(r4, s1_2_1, 0x0B03F820, 0x05F9FD02, 0xF00101FE, 0x02E60C0C);
	r5 = D(r5, s1_2_1, 0xFE04FCFA, 0xF10106F3, 0xEFFEFDF7, 0xFDFCF901);
	r6 = D(r6, s1_2_1, 0x030201FD, 0xFFFFFD01, 0xFEFAF9EF, 0x0E1001E5);
	r7 = D(r7, s1_2_1, 0xFA0FEF02, 0x08010E1C, 0x00FC0B00, 0x0EF50FFE);
	r0 = D(r0, s1_2_2, 0xFD07ED03, 0xF7FD0109, 0x020202FA, 0xFE0010F7);
	r1 = D(r1, s1_2_2, 0xF61621F2, 0xF803FD0D, 0xFAFF080A, 0x0AFA07FE);
	r2 = D(r2, s1_2_2, 0x010000FA, 0x07E22D0A, 0xF20C13FA, 0xF2F4210A);
	r3 = D(r3, s1_2_2, 0xFF0AFF0B, 0xE6F611F8, 0x06F7FCF7, 0x01FEFC01);
	r4 = D(r4, s1_2_2, 0x03FA0000, 0xFFFE02FE, 0x0902FFF6, 0xFE070223);
	r5 = D(r5, s1_2_2, 0xFC01FD0A, 0xFC0003F6, 0x04FD0206, 0x04050501);
	r6 = D(r6, s1_2_2, 0xFF01FFFE, 0x01FF01FF, 0xFD0706F6, 0xF41E03E7);
	r7 = D(r7, s1_2_2, 0x0D061209, 0xFFFD0304, 0x05000301, 0x02030BFC);
	s0_0_0 = G[2][xy.y+0][xy.x+0]; s0_0_1 = G[2][xy.y+0][xy.x+1];
	s0_0_2 = G[2][xy.y+0][xy.x+2]; s0_1_0 = G[2][xy.y+1][xy.x+0];
	s0_1_1 = G[2][xy.y+1][xy.x+1]; s0_1_2 = G[2][xy.y+1][xy.x+2];
	s0_2_0 = G[2][xy.y+2][xy.x+0]; s0_2_1 = G[2][xy.y+2][xy.x+1];
	s0_2_2 = G[2][xy.y+2][xy.x+2]; s1_0_0 = G[3][xy.y+0][xy.x+0];
	s1_0_1 = G[3][xy.y+0][xy.x+1]; s1_0_2 = G[3][xy.y+0][xy.x+2];
	s1_1_0 = G[3][xy.y+1][xy.x+0]; s1_1_1 = G[3][xy.y+1][xy.x+1];
	s1_1_2 = G[3][xy.y+1][xy.x+2]; s1_2_0 = G[3][xy.y+2][xy.x+0];
	s1_2_1 = G[3][xy.y+2][xy.x+1]; s1_2_2 = G[3][xy.y+2][xy.x+2];
	r0 = D(r0, s0_0_0, 0xF2FC020E, 0x04FC0EF4, 0xFF06FBF9, 0xFAF603FB);
	r1 = D(r1, s0_0_0, 0xF5FAEFFA, 0x04FB0BF6, 0xF8FFF903, 0xF90105CD);
	r2 = D(r2, s0_0_0, 0x0A07F4AE, 0x0CFD24A8, 0xF106F6F5, 0xED02FCEB);
	r3 = D(r3, s0_0_0, 0x0107000D, 0x040E0CFA, 0x0401FF0F, 0xFFFFFC11);
	r4 = D(r4, s0_0_0, 0xFDFE0001, 0xFE01FE02, 0x06030507, 0xF81D02D6);
	r5 = D(r5, s0_0_0, 0x0402FB04, 0x0004F402, 0xFCFE0902, 0xFB0504FA);
	r6 = D(r6, s0_0_0, 0xFAFD08FC, 0xFE04FC07, 0xFF000100, 0x2AF900FD);
	r7 = D(r7, s0_0_0, 0xF705EB30, 0xFD01FEFC, 0xFE01FF03, 0xED0BF6FF);
	r0 = D(r0, s0_0_1, 0xE79A090D, 0x01050203, 0xEC060409, 0xFCEEFEFC);
	r1 = D(r1, s0_0_1, 0xF11AEFEB, 0x111209F7, 0xF30E0609, 0xF20C0EE0);
	r2 = D(r2, s0_0_1, 0xFDFA0101, 0xFF36FCC4, 0xED010DF9, 0xFCFC0608);
	r3 = D(r3, s0_0_1, 0xFFB11301, 0xFF050504, 0xFAFC0006, 0xF90100FA);
	r4 = D(r4, s0_0_1, 0xFAF6F7FE, 0xFFFD0500, 0x06FB0EFE, 0x08030304);
	r5 = D(r5, s0_0_1, 0x03FEF405, 0x05040603, 0x00F60009, 0xFBF1FD01);
	r6 = D(r6, s0_0_1, 0xFE050505, 0xFF0DFF01, 0xF905FFFE, 0x19FEF7F7);
	r7 = D(r7, s0_0_1, 0x12F7F703, 0xF20BF2FD, 0xFF03FE01, 0xE60DE210);
	r0 = D(r0, s0_0_2, 0xF107FD08, 0x002A0BEF, 0xE32FF8F6, 0x0602EC09);
	r1 = D(r1, s0_0_2, 0xE547FCF8, 0x0F200A03, 0xFFE1FA08, 0x0017F7C6);
	r2 = D(r2, s0_0_2, 0x05F8FEF7, 0x023DFEAD, 0xEE090BFC, 0xF6210C02);
	r3 = D(r3, s0_0_2, 0x0F0F02F2, 0x0F16F012, 0x0121FBF5, 0xF71CF004);
	r4 = D(r4, s0_0_2, 0xFBFDFE05, 0x00FF0101, 0x03EEF6FD, 0x11F7FDFE);
	r5 = D(r5, s0_0_2, 0x0007FE00, 0xFA1803FE, 0x00060204, 0xFFF10505);
	r6 = D(r6, s0_0_2, 0xFEFA0001, 0x01060407, 0x05D4FEFB, 0x25D6FEF8);
	r7 = D(r7, s0_0_2, 0x0AF31512, 0x0019FE00, 0x01F90000, 0x01DFFE08);
	r0 = D(r0, s0_1_0, 0xF4FD13CE, 0xF70509F9, 0xFF0214EC, 0x040902D4);
	r1 = D(r1, s0_1_0, 0x0A06034D, 0xF8030D18, 0xFA0309E0, 0xE8FE1AD7);
	r2 = D(r2, s0_1_0, 0xFA0307F8, 0x11F6FFB3, 0xEF050F12, 0x02F2F4ED);
	r3 = D(r3, s0_1_0, 0x0805DFD7, 0x1902EFCE, 0xFEFCFFF1, 0xF404CA0C);
	r4 = D(r4, s0_1_0, 0xFC01F313, 0xFE02FBF9, 0x0601F5D1, 0x10F6E8C9);
	r5 = D(r5, s0_1_0, 0x01020403, 0x02FF0CF4, 0x0E03FB0F, 0x19F8F9ED);
	r6 = D(r6, s0_1_0, 0x09FBFEFD, 0x04FFFB01, 0xF7FF0CEE, 0x04100FD1);
	r7 = D(r7, s0_1_0, 0xF9041014, 0xDC13D50F, 0xF90000FE, 0x04FAE6F2);
	r0 = D(r0, s0_1_1, 0xF4B30CE2, 0xFE0D16EA, 0x06150D0B, 0xF30D0109);
	r1 = D(r1, s0_1_1, 0x11F9FF16, 0xFF0203F3, 0x02F903FB, 0x040C1AF1);
	r2 = D(r2, s0_1_1, 0xF1FF0FFF, 0x1AFEF4C0, 0xF819FA13, 0xFE0F05FC);
	r3 = D(r3, s0_1_1, 0x09BC05F6, 0x1FFCB1E6, 0xFEFD1BF1, 0xFA0AD710);
	r4 = D(r4, s0_1_1, 0x08E7F6FD, 0x02F20FF7, 0x04FEF607, 0xF99BF1E7);
	r5 = D(r5, s0_1_1, 0x01090B01, 0x1010F70A, 0x000AEC0F, 0xF619FAE9);
	r6 = D(r6, s0_1_1, 0x030508FF, 0x00F2F614, 0xFF0908F1, 0x0F00F60F);
	r7 = D(r7, s0_1_1, 0xFAF90BFC, 0xFAFFEA03, 0xFC060800, 0x02EED8F5);
	r0 = D(r0, s0_1_2, 0xFB29FFF7, 0xFA0905F2, 0xF224F500, 0xFEF21012);
	r1 = D(r1, s0_1_2, 0x0530F301, 0x0024FDF0, 0xF701FCFE, 0xFF2706DB);
	r2 = D(r2, s0_1_2, 0x030A0301, 0xF4ECFBB3, 0xF4CEED07, 0xE5F7EA00);
	r3 = D(r3, s0_1_2, 0x11E30AF2, 0x0F16E7EF, 0x0314FD0E, 0xF803E108);
	r4 = D(r4, s0_1_2, 0xFE13FA06, 0x06040501, 0x06DBFE00, 0x08EF0711);
	r5 = D(r5, s0_1_2, 0xFAFAF800, 0xFCFBF8F9, 0xFF05FC06, 0x00FFF801);
	r6 = D(r6, s0_1_2, 0x02F30101, 0xFDFE03F9, 0x02FAFD01, 0x1AD5FEF4);
	r7 = D(r7, s0_1_2, 0x08EAD9EC, 0x06D80904, 0x00FF02FF, 0x0AFA09F7);
	r0 = D(r0, s0_2_0, 0x05F7F70A, 0x04FB0AFB, 0x00FC06F5, 0x0205F9FD);
	r1 = D(r1, s0_2_0, 0x05FD05EE, 0x03050502, 0xFBFEFE0A, 0xF90006F9);
	r2 = D(r2, s0_2_0, 0x000202F6, 0xEF1808DB, 0xE7FB0DEC, 0xDF010DFB);
	r3 = D(r3, s0_2_0, 0x1906EDDB, 0x1AFBFFDF, 0x05FFFE09, 0xF803ADFD);
	r4 = D(r4, s0_2_0, 0x0002010C, 0xFD000703, 0x06000D02, 0xF60807C7);
	r5 = D(r5, s0_2_0, 0xFF01FFFF, 0xFD0200F1, 0x01FD000A, 0x06FFF903);
	r6 = D(r6, s0_2_0, 0x0001FDFD, 0x01020103, 0xFE00F406, 0x14F8F0D4);
	r7 = D(r7, s0_2_0, 0xE7FBF90B, 0x11FDC70B, 0x0402F801, 0x03FE0DF4);
	r0 = D(r0, s0_2_1, 0xFAE7F1F7, 0xFD0B07F8, 0x062209FA, 0x0CF404EE);
	r1 = D(r1, s0_2_1, 0x050CFCD7, 0xFC0BFAF8, 0xFEFC02FD, 0x041200E8);
	r2 = D(r2, s0_2_1, 0x010308FD, 0x0020A3BC, 0x001F0302, 0xFC151908);
	r3 = D(r3, s0_2_1, 0xEBF414F0, 0x1C0CED02, 0x06F9FFFE, 0xFC05A200);
	r4 = D(r4, s0_2_1, 0x0DF8F90A, 0xF70208FE, 0x02F310F5, 0xDCE717EF);
	r5 = D(r5, s0_2_1, 0x0201F904, 0x010A000B, 0x0D09000B, 0x0BFDFF0D);
	r6 = D(r6, s0_2_1, 0x02040103, 0xFFFFFD01, 0xF40D0302, 0x00FC01F1);
	r7 = D(r7, s0_2_1, 0x00D31AFD, 0xF7EAFEFB, 0xFDF9FDFD, 0xFC010B06);
	r0 = D(r0, s0_2_2, 0xF9F2FD02, 0x012E01FB, 0xF90F03FE, 0x030C0AFE);
	r1 = D(r1, s0_2_2, 0xF4DE0708, 0x01FC0705, 0xFB0703FF, 0xFF19FCDB);
	r2 = D(r2, s0_2_2, 0x030902F9, 0xFC66A997, 0xF02CFDF4, 0xED5FE10F);
	r3 = D(r3, s0_2_2, 0xEBB207F8, 0x1206F2FA, 0xF91DFEFB, 0xF8ECFB06);
	r4 = D(r4, s0_2_2, 0xFB13F50E, 0x000E04FD, 0x0C000602, 0x01DBFE0C);
	r5 = D(r5, s0_2_2, 0xFE10FE0A, 0xFAEE0402, 0x02FDFF08, 0x02EE0A13);
	r6 = D(r6, s0_2_2, 0x00F80202, 0x00FEFFFC, 0xFA08FA02, 0x25080006);
	r7 = D(r7, s0_2_2, 0x051B1906, 0x01E9F9F9, 0x00FB03FB, 0xFE0C06FC);
	r0 = D(r0, s1_0_0, 0x0308FF12, 0xFAF80013, 0xE8EC0413, 0x08FBF60D);
	r1 = D(r1, s1_0_0, 0x030B110B, 0x0F07F803, 0x0614FD05, 0x0FEEFC0A);
	r2 = D(r2, s1_0_0, 0x0DEEF1FF, 0x000A05F7, 0xFA0B0803, 0xE30C0F10);
	r3 = D(r3, s1_0_0, 0x06F70FEF, 0x100601F8, 0xFBD5FEFA, 0xFF0509EF);
	r4 = D(r4, s1_0_0, 0xF40003FE, 0x02F9FEFC, 0x0202FCFA, 0x0B1712EE);
	r5 = D(r5, s1_0_0, 0xFCFE0901, 0x0A04F9F9, 0x06F70202, 0xFB0705FC);
	r6 = D(r6, s1_0_0, 0x05021008, 0x01F6F8FF, 0xF3040C07, 0xCBE8261D);
	r7 = D(r7, s1_0_0, 0x081D03C8, 0xFEF0110A, 0x000100FF, 0xEEFAFE0A);
	r0 = D(r0, s1_0_1, 0xFDFAF504, 0x051C0DEC, 0xE0FB2A02, 0xF2E7E605);
	r1 = D(r1, s1_0_1, 0x06E70104, 0x1908EF05, 0x02F10AFE, 0xFF03FBF7);
	r2 = D(r2, s1_0_1, 0xECFDDCE8, 0x0C12EFFF, 0xE80D1106, 0xFAD90714);
	r3 = D(r3, s1_0_1, 0x0A060D0D, 0x0CE20700, 0xF4F4FF02, 0x02F8E618);
	r4 = D(r4, s1_0_1, 0x04F9F2FD, 0x05010504, 0x07FEFDFF, 0x04F1FCF9);
	r5 = D(r5, s1_0_1, 0x0D1302F8, 0xFB1103FF, 0x07FDEBFC, 0xF8F8EEF7);
	r6 = D(r6, s1_0_1, 0x07FC3400, 0x23065507, 0x07EC03F6, 0xE4FB27F7);
	r7 = D(r7, s1_0_1, 0x2E30E212, 0xF2FBF5FB, 0xFEFF0402, 0x17E5D804);
	r0 = D(r0, s1_0_2, 0xF80912F6, 0xFE010209, 0x1603F7F6, 0x0810EEF8);
	r1 = D(r1, s1_0_2, 0xFF01EAFC, 0xFF05EDFE, 0xF6FBFAF7, 0x10EE0D03);
	r2 = D(r2, s1_0_2, 0xED02FD06, 0xFCEAE401, 0x0B00F80C, 0x23F5F10B);
	r3 = D(r3, s1_0_2, 0xF111FB17, 0x08FAF30A, 0x0F0901FB, 0xFE01ECF3);
	r4 = D(r4, s1_0_2, 0xF70CFEFF, 0x03FE0001, 0xFEFCFE05, 0x0305F015);
	r5 = D(r5, s1_0_2, 0xFEFEF5FD, 0xF9FA0A00, 0x04FEFB02, 0xFC040202);
	r6 = D(r6, s1_0_2, 0x020000FD, 0x03FF0FF9, 0xF711FA06, 0xF0FC1F2F);
	r7 = D(r7, s1_0_2, 0xFB0BF10B, 0x0503F201, 0x00010202, 0xFA02DFFD);
	r0 = D(r0, s1_1_0, 0xF60EDB08, 0xFD140807, 0xEB2EFB11, 0xFD02F202);
	r1 = D(r1, s1_1_0, 0xEDEE07F1, 0xF2FB18F8, 0xF101040D, 0x121D060B);
	r2 = D(r2, s1_1_0, 0x001303F1, 0xEE18FB3D, 0x06030AEA, 0xF4F71226);
	r3 = D(r3, s1_1_0, 0x0E171AD5, 0xE0FF0905, 0x00FBFA00, 0xFEF80905);
	r4 = D(r4, s1_1_0, 0x0A080006, 0xF30204FA, 0x05EE1204, 0xEECF0807);
	r5 = D(r5, s1_1_0, 0x02FF0802, 0x0910EEFF, 0xF903E300, 0x0EF8FEE4);
	r6 = D(r6, s1_1_0, 0x0BFE1006, 0xFEFDF8FF, 0x01F919EF, 0xD1050602);
	r7 = D(r7, s1_1_0, 0xFEEA04D0, 0x23F80302, 0x0206F801, 0xF40B09FC);
	r0 = D(r0, s1_1_1, 0x1806E81B, 0xFDED1302, 0xF714FD0C, 0x130DFF10);
	r1 = D(r1, s1_1_1, 0xFCE0C703, 0x01F81C1D, 0x1EC026FF, 0x130AFBFB);
	r2 = D(r2, s1_1_1, 0x0D030A01, 0xE11AF435, 0xECF91E00, 0xFD0E0D1D);
	r3 = D(r3, s1_1_1, 0x312ADAFA, 0xC9FDE7F6, 0x0712DF16, 0xDF0DF128);
	r4 = D(r4, s1_1_1, 0x0405C2FE, 0x2CFC09F6, 0x1909DA00, 0x19BAFF08);
	r5 = D(r5, s1_1_1, 0x03F711F8, 0x06FBF9FF, 0xE2FFA100, 0xECFDD7E4);
	r6 = D(r6, s1_1_1, 0x2904E708, 0x04F7FAF3, 0x30FF360D, 0xF8EEF925);
	r7 = D(r7, s1_1_1, 0x13E712F7, 0xF900BCFC, 0xFDF804F9, 0x04F628EB);
	r0 = D(r0, s1_1_2, 0x0F08FB06, 0xFCFAE30C, 0xF1111EE3, 0xFEFB1E11);
	r1 = D(r1, s1_1_2, 0xFFF6F4F5, 0x0401E901, 0xF6F4DC0C, 0x05D904FA);
	r2 = D(r2, s1_1_2, 0xFFF701FB, 0xDCD7E704, 0x1AF8D7EA, 0x0807DDF9);
	r3 = D(r3, s1_1_2, 0x0002F525, 0x0CEBFE0C, 0x03FF17F2, 0xFA0025FF);
	r4 = D(r4, s1_1_2, 0xEB0A1204, 0x00FF1604, 0x0812060B, 0xE6ECF008);
	r5 = D(r5, s1_1_2, 0xEF00EC00, 0x0701FB0B, 0x0104E804, 0xF707F8FB);
	r6 = D(r6, s1_1_2, 0x06FF0800, 0x0202FD07, 0x0DF204FA, 0xFFEBFAFE);
	r7 = D(r7, s1_1_2, 0x00D6E41D, 0xF80C0001, 0xFFFDFF01, 0x02F5FD07);
	r0 = D(r0, s1_2_0, 0x09F0FD0A, 0xFAFFFD10, 0xF6EEFF0C, 0xF6F0FBF9);
	r1 = D(r1, s1_2_0, 0x0329F3F5, 0x0211EAF9, 0x010B01ED, 0xFB080404);
	r2 = D(r2, s1_2_0, 0xF4FC030A, 0x1118F6F7, 0xF20E0AF3, 0x06FC06E0);
	r3 = D(r3, s1_2_0, 0x05FC0AF8, 0xFD0D0709, 0x04F101F7, 0xFFFD01F9);
	r4 = D(r4, s1_2_0, 0x02EEFD00, 0x0505FD03, 0x0C0601F4, 0x1C1BFE0D);
	r5 = D(r5, s1_2_0, 0xFA0204FC, 0x0CF4FC0D, 0x0A02FA06, 0xF0EF0016);
	r6 = D(r6, s1_2_0, 0xF8020301, 0x06FA00FF, 0xFA10F7FE, 0xE708111C);
	r7 = D(r7, s1_2_0, 0xF3F60CEC, 0x0706F9EE, 0x08F9FDFD, 0xFB140205);
	r0 = D(r0, s1_2_1, 0xFCE90800, 0xF40602F0, 0xE70118F3, 0xFC0019E6);
	r1 = D(r1, s1_2_1, 0x95EA07CA, 0x07ECF602, 0xF4FF06F6, 0x0BFF05FF);
	r2 = D(r2, s1_2_1, 0xF9010AFF, 0xF224F2E7, 0x17FDF4F2, 0x19F208FB);
	r3 = D(r3, s1_2_1, 0x10E4FFDD, 0x100CF50A, 0xFB0B0414, 0x1EFF05F7);
	r4 = D(r4, s1_2_1, 0x07F50612, 0x0B0AEC04, 0x10F4FDF6, 0x110DF1DE);
	r5 = D(r5, s1_2_1, 0xF70308FE, 0x000809EC, 0xED03FE05, 0xFD14011E);
	r6 = D(r6, s1_2_1, 0x01FFFF02, 0x0200FB02, 0xF801F5DD, 0x04E511E0);
	r7 = D(r7, s1_2_1, 0x001C05D9, 0x08F613FD, 0xFF011FFE, 0xF8FA08F6);
	r0 = D(r0, s1_2_2, 0xF70206FC, 0x05090204, 0xF80D14E1, 0xFFFEF1F7);
	r1 = D(r1, s1_2_2, 0x01F70F08, 0xF409FEF3, 0x030202FD, 0xFEF5F2F8);
	r2 = D(r2, s1_2_2, 0x01FFFF01, 0x21D7F211, 0x15F30F01, 0xF8F4F6E8);
	r3 = D(r3, s1_2_2, 0x110BEFFF, 0x19F90103, 0x01F6FDFA, 0x0BF2F9F8);
	r4 = D(r4, s1_2_2, 0x0102FEF4, 0x0EFCFC00, 0x06010908, 0x11FFFD0B);
	r5 = D(r5, s1_2_2, 0x00FB04FD, 0x0A00F8FC, 0xFDFDFB08, 0xFE030BFB);
	r6 = D(r6, s1_2_2, 0x00FD0202, 0x0101FDFE, 0x0802FF04, 0xEB02120F);
	r7 = D(r7, s1_2_2, 0x07ED0429, 0x06FDF800, 0xFEFFFE00, 0x03FC00FD);
	s0_0_0 = G[4][xy.y+0][xy.x+0]; s0_0_1 = G[4][xy.y+0][xy.x+1];
	s0_0_2 = G[4][xy.y+0][xy.x+2]; s0_1_0 = G[4][xy.y+1][xy.x+0];
	s0_1_1 = G[4][xy.y+1][xy.x+1]; s0_1_2 = G[4][xy.y+1][xy.x+2];
	s0_2_0 = G[4][xy.y+2][xy.x+0]; s0_2_1 = G[4][xy.y+2][xy.x+1];
	s0_2_2 = G[4][xy.y+2][xy.x+2]; s1_0_0 = G[5][xy.y+0][xy.x+0];
	s1_0_1 = G[5][xy.y+0][xy.x+1]; s1_0_2 = G[5][xy.y+0][xy.x+2];
	s1_1_0 = G[5][xy.y+1][xy.x+0]; s1_1_1 = G[5][xy.y+1][xy.x+1];
	s1_1_2 = G[5][xy.y+1][xy.x+2]; s1_2_0 = G[5][xy.y+2][xy.x+0];
	s1_2_1 = G[5][xy.y+2][xy.x+1]; s1_2_2 = G[5][xy.y+2][xy.x+2];
	r0 = D(r0, s0_0_0, 0xFDFEEA0D, 0xFD0EF604, 0xDB061417, 0x04FFF30C);
	r1 = D(r1, s0_0_0, 0xE6FFF012, 0x14020AF2, 0xF3F2FE02, 0x000BFA00);
	r2 = D(r2, s0_0_0, 0xFDF9F6F7, 0xF10028EB, 0xFBF80EF5, 0xF02AFB0A);
	r3 = D(r3, s0_0_0, 0x140306F6, 0x0CDBE8F5, 0xF7080F05, 0x07F90007);
	r4 = D(r4, s0_0_0, 0x07EA0FF5, 0x000103FF, 0x01F3FFF9, 0x0CEAF3FC);
	r5 = D(r5, s0_0_0, 0xFF030300, 0xF0F006FB, 0x0402FDFD, 0x05FB0603);
	r6 = D(r6, s0_0_0, 0xFFFEF40A, 0x0FFCFAFB, 0xF7FEF510, 0xFF0D20F7);
	r7 = D(r7, s0_0_0, 0xE7191FDA, 0x00021103, 0x01FDFE00, 0xFA00F9F8);
	r0 = D(r0, s0_0_1, 0xF700F215, 0x0309FC02, 0xFA1315FF, 0xF7010AFF);
	r1 = D(r1, s0_0_1, 0xFDF8F406, 0x02FEF7F7, 0xF7040B05, 0x0801FA10);
	r2 = D(r2, s0_0_1, 0xF9082FF7, 0x08EA23FD, 0x07FF1BEC, 0x1F0202D6);
	r3 = D(r3, s0_0_1, 0xF10110F7, 0x0B1413EC, 0xF1F21911, 0x16F1DC20);
	r4 = D(r4, s0_0_1, 0x1300F9FF, 0x01000AFE, 0x0EFE02FA, 0x0EF5FAF7);
	r5 = D(r5, s0_0_1, 0xFFFFF1F1, 0xFCFB0CF4, 0x0C05F9F7, 0x0A00F4FF);
	r6 = D(r6, s0_0_1, 0x0702E708, 0xF7FEE5FD, 0xF40B0907, 0xE51F150C);
	r7 = D(r7, s0_0_1, 0xE7F6ECFE, 0x140001FC, 0x02FCFE03, 0x0CFEF5EC);
	r0 = D(r0, s0_0_2, 0x08FFFF00, 0x06F4F7FD, 0x130FECDC, 0x0B0FFAFF);
	r1 = D(r1, s0_0_2, 0x10FA0611, 0x11F402FD, 0x00FD0FFC, 0x03E7F9F2);
	r2 = D(r2, s0_0_2, 0xF7FA0EFF, 0x10FB1003, 0x1508E804, 0x16F5D5FC);
	r3 = D(r3, s0_0_2, 0x06FD1005, 0x14001AC8, 0xF3F1ED08, 0x090C01F2);
	r4 = D(r4, s0_0_2, 0x0E030FF0, 0xF90005FF, 0x0FF5FC05, 0x0FFC02F5);
	r5 = D(r5, s0_0_2, 0xFC04FAFF, 0x040207FB, 0x03020100, 0x030406FE);
	r6 = D(r6, s0_0_2, 0x030106FB, 0x0C00F500, 0x02FE0503, 0xBDF7FE15);
	r7 = D(r7, s0_0_2, 0xF01A12FC, 0x0202F709, 0x010003FF, 0xEC060E02);
	r0 = D(r0, s0_1_0, 0x05FFE211, 0xF6000F01, 0xEFF4060C, 0xFAFBFCF4);
	r1 = D(r1, s0_1_0, 0x06411207, 0xF30B38F7, 0xF701FC03, 0xE70EEC1F);
	r2 = D(r2, s0_1_0, 0x0CFF1700, 0x200817E7, 0xFC0909F3, 0x1EE9FF0C);
	r3 = D(r3, s0_1_0, 0xFA2018D0, 0x1C020CB2, 0x030723FF, 0x0CF608FE);
	r4 = D(r4, s0_1_0, 0x15F9F018, 0xFD010FFE, 0xFC010000, 0x051EF110);
	r5 = D(r5, s0_1_0, 0x01F8F3FE, 0xEE0006FA, 0x15F4FBFF, 0x0F0DFFFA);
	r6 = D(r6, s0_1_0, 0x03FBF407, 0x02030DFE, 0xF022020B, 0xE8E420FC);
	r7 = D(r7, s0_1_0, 0xF4D01ACB, 0x151E2312, 0xFFFF0FFC, 0xFDFBEC12);
	r0 = D(r0, s0_1_1, 0x0A101D02, 0x010DFAFC, 0xE7F640DB, 0xF4F82310);
	r1 = D(r1, s0_1_1, 0xD6E5372D, 0xEB060CEC, 0xF9F1CF0A, 0xFBF20511);
	r2 = D(r2, s0_1_1, 0x0803F20F, 0xB6E0E6B5, 0x0813DA81, 0xBC0D00D1);
	r3 = D(r3, s0_1_1, 0xDEF0F4DB, 0x2DEF6C81, 0x19D6080F, 0x110BC9E6);
	r4 = D(r4, s0_1_1, 0x0C0906ED, 0xFBFE2223, 0x08FF27F7, 0xFD02F609);
	r5 = D(r5, s0_1_1, 0xFEFBF617, 0xE9ED22EC, 0x050F38E3, 0xF7FF3C00);
	r6 = D(r6, s0_1_1, 0xF7FB2205, 0x100EE204, 0xECF9E708, 0x190BE003);
	r7 = D(r7, s0_1_1, 0x17EBA407, 0xF420F7E4, 0x08002610, 0x08F9C910);
	r0 = D(r0, s0_1_2, 0x07F5FBF8, 0x05061AFE, 0xFB17DCDE, 0xFDFD010A);
	r1 = D(r1, s0_1_2, 0xE6DA1810, 0x06F709F1, 0x1AF71EFE, 0x1CEDF8F4);
	r2 = D(r2, s0_1_2, 0x05F20106, 0x532C0DC9, 0x1F1CF6C4, 0x05E6E3E4);
	r3 = D(r3, s0_1_2, 0xE0D0080A, 0x1F24EE82, 0xEA0FEDF7, 0xEF07F702);
	r4 = D(r4, s0_1_2, 0x050BE6FB, 0xFAFCF009, 0x0A0B14FC, 0xE6F81BF9);
	r5 = D(r5, s0_1_2, 0xFD010AFC, 0xECF70DF5, 0xFF0514F7, 0xF80018FF);
	r6 = D(r6, s0_1_2, 0xFB05F503, 0x08000A06, 0xFCFAE6FA, 0xDCED0306);
	r7 = D(r7, s0_1_2, 0xE0070114, 0xE10BF101, 0x07FB0801, 0x0BEF0F07);
	r0 = D(r0, s0_2_0, 0xF90A1101, 0xF4F901F5, 0xBC031AF0, 0xFA0F0EFE);
	r1 = D(r1, s0_2_0, 0xE00DF9AA, 0x0D08F10E, 0x1500F90F, 0x05FC10E4);
	r2 = D(r2, s0_2_0, 0x06FDFCFD, 0x09F2FF0C, 0xEF01F718, 0x4227C540);
	r3 = D(r3, s0_2_0, 0xEAF9159D, 0x180D00D9, 0x00F50000, 0x0B0CFA02);
	r4 = D(r4, s0_2_0, 0xF4020501, 0xFEFFF106, 0x0DFDF204, 0x1B09DA23);
	r5 = D(r5, s0_2_0, 0xFB01FEFC, 0xE9F605F6, 0xF7060AFC, 0xFAFB0BEF);
	r6 = D(r6, s0_2_0, 0x000102FF, 0xFD020203, 0x0D05FE1A, 0xDF060305);
	r7 = D(r7, s0_2_0, 0xEB0D01F2, 0x0803100B, 0x07050E04, 0x1404FE0F);
	r0 = D(r0, s0_2_1, 0x0F03F60C, 0x05FAF7F6, 0xFFFDFDF4, 0x0A00DD05);
	r1 = D(r1, s0_2_1, 0x08E6FFEF, 0x0A09FFF8, 0x0E060901, 0x0CF5FBE0);
	r2 = D(r2, s0_2_1, 0x0608FD06, 0x020215E3, 0x0D0806ED, 0x2AE51EF9);
	r3 = D(r3, s0_2_1, 0x1311CBEA, 0x09F227C2, 0x010917F6, 0x06FE0804);
	r4 = D(r4, s0_2_1, 0x01F30903, 0xFFFF15F9, 0x10F50BFB, 0x1DF20814);
	r5 = D(r5, s0_2_1, 0xF300F503, 0xF606F0F6, 0xE90415FD, 0xE00B0FFA);
	r6 = D(r6, s0_2_1, 0xFE020504, 0xF9020506, 0x0802010F, 0x0301E924);
	r7 = D(r7, s0_2_1, 0x1D0BB83F, 0xF306F21E, 0x0801ED01, 0x060B0204);
	r0 = D(r0, s0_2_2, 0x0E01FC02, 0xFDF2FCF5, 0x04FD00F9, 0x11F7080C);
	r1 = D(r1, s0_2_2, 0x0E0CEA16, 0xFD0701FE, 0x05050AEE, 0x12F504F8);
	r2 = D(r2, s0_2_2, 0x05FD0202, 0x121AF3F0, 0xD7F7F0E9, 0xF02409EA);
	r3 = D(r3, s0_2_2, 0x2BF80803, 0xF1FDE30B, 0x0706F509, 0xFDFF0104);
	r4 = D(r4, s0_2_2, 0xF516FC05, 0x03F701F6, 0x0AFDFF01, 0xE6DDE90C);
	r5 = D(r5, s0_2_2, 0xFB05FC01, 0x0CFE06FB, 0xF901FE03, 0xEE0BEC0F);
	r6 = D(r6, s0_2_2, 0xFA040104, 0xFFFDFEFC, 0x06FA04FD, 0xC3D0F805);
	r7 = D(r7, s0_2_2, 0xECFA1900, 0xFDF0FD0B, 0xFF03FD05, 0x0AF505F6);
	r0 = D(r0, s1_0_0, 0xF3080E10, 0xFA14EA0E, 0xF8F20111, 0xF204E508);
	r1 = D(r1, s1_0_0, 0x04021000, 0xFC00F701, 0x06FC0D07, 0x0B1101EB);
	r2 = D(r2, s1_0_0, 0xFDEDF715, 0x00F9FC04, 0x02DD24F8, 0xF4F3F1E3);
	r3 = D(r3, s1_0_0, 0xFDFE08E0, 0xFBF720EB, 0x0309E716, 0xF60CF102);
	r4 = D(r4, s1_0_0, 0x00F60402, 0x03FFFE01, 0x02FEF7F4, 0x01EE2402);
	r5 = D(r5, s1_0_0, 0x02FCF900, 0x08FB0411, 0xFFFA0D03, 0xF800FFFF);
	r6 = D(r6, s1_0_0, 0xFC0CF901, 0x04060E00, 0xFBFE04FB, 0xE501D91D);
	r7 = D(r7, s1_0_0, 0x0BCE1626, 0x08FA1C19, 0x0004FF00, 0x06041CF3);
	r0 = D(r0, s1_0_1, 0x12F302E4, 0x0A051104, 0xF5ED0BC9, 0xFE01E9FA);
	r1 = D(r1, s1_0_1, 0x06EB0E25, 0xFE08F6F6, 0x00FEFA02, 0x02030CE3);
	r2 = D(r2, s1_0_1, 0xF30A04F5, 0x06ED20CC, 0xECFD0E06, 0xFB05EDDA);
	r3 = D(r3, s1_0_1, 0xFBF7ED0B, 0x06E5FE0D, 0xF6E6F498, 0x0BFFEC0E);
	r4 = D(r4, s1_0_1, 0x01F60412, 0x00FFFCFC, 0x0A0602F6, 0x06FBFE1C);
	r5 = D(r5, s1_0_1, 0x02010609, 0xFAF505F6, 0x08030404, 0x000AF4E8);
	r6 = D(r6, s1_0_1, 0xF8FDFBFA, 0xF7021007, 0x0BF8FF13, 0xF9DD0C09);
	r7 = D(r7, s1_0_1, 0x06FA030A, 0x02FFFF05, 0x02FEFF00, 0x110F031B);
	r0 = D(r0, s1_0_2, 0xF50205F7, 0xFB0C02EA, 0x111E07FE, 0xF0F1FC1B);
	r1 = D(r1, s1_0_2, 0x0911FE05, 0x0FFDFC09, 0xFAFCFB06, 0x0C0704ED);
	r2 = D(r2, s1_0_2, 0xFFFBFF19, 0x0903F7D5, 0x0409F012, 0x050FEFF9);
	r3 = D(r3, s1_0_2, 0xF7EB12F9, 0x13FD05DD, 0x0707040C, 0x05020A02);
	r4 = D(r4, s1_0_2, 0xF6FF040E, 0x0004FFFF, 0x030403F4, 0xEF0602ED);
	r5 = D(r5, s1_0_2, 0x040006FE, 0x05FF02FE, 0x04FC0100, 0xF6F80307);
	r6 = D(r6, s1_0_2, 0x00010002, 0xFF01FEF5, 0x04F50807, 0xE9EBEFFB);
	r7 = D(r7, s1_0_2, 0xF5F3F6F2, 0x03FC06F6, 0xFF05FD02, 0x02FC00F6);
	r0 = D(r0, s1_1_0, 0x161D1207, 0x09FFFB08, 0xF1110105, 0x0522FF17);
	r1 = D(r1, s1_1_0, 0xFB06FA11, 0xF1E20915, 0x08F8EC14, 0x120108E5);
	r2 = D(r2, s1_1_0, 0xF9000F00, 0xEDEB22D6, 0xF711F503, 0xF4F2BB20);
	r3 = D(r3, s1_1_0, 0x06CE2999, 0x1112FDF0, 0xF4F6F8FB, 0xFB030103);
	r4 = D(r4, s1_1_0, 0xF6030701, 0xFDF8FF08, 0xFFE908BE, 0x151400E8);
	r5 = D(r5, s1_1_0, 0xF7FAFD02, 0x0416FF0A, 0x120506FE, 0x02020C08);
	r6 = D(r6, s1_1_0, 0x0E03F8FE, 0x03010704, 0xFBE0F909, 0xF4FBF706);
	r7 = D(r7, s1_1_0, 0xEA260007, 0xEBC2F5EF, 0x05090507, 0xFEE8F7FB);
	r0 = D(r0, s1_1_1, 0xE40CEE81, 0x0010F604, 0xD4FCE1E7, 0xF7CADA00);
	r1 = D(r1, s1_1_1, 0xDD05BAB4, 0xF327FA13, 0xEE25D6DF, 0xE2FEFF1D);
	r2 = D(r2, s1_1_1, 0x31FEFD10, 0x072A15FA, 0x0EDD0101, 0xF781C5CF);
	r3 = D(r3, s1_1_1, 0xFDFE01DA, 0xD38E3AC6, 0xDDE0F7D1, 0x19F00424);
	r4 = D(r4, s1_1_1, 0x0AE0FA07, 0xF5E6FDEF, 0xFDD10DBE, 0x05E0E981);
	r5 = D(r5, s1_1_1, 0x2C1CFFFF, 0xEB03F4FB, 0x0FF71DED, 0x03FB04E2);
	r6 = D(r6, s1_1_1, 0x0004FFFB, 0xFA100407, 0xDA07E6DE, 0xFDFFF8F5);
	r7 = D(r7, s1_1_1, 0x231CFAF2, 0x21E41607, 0x00F5FBF6, 0xDF07FFFC);
	r0 = D(r0, s1_1_2, 0x04FE000A, 0x0018FAE5, 0x22061220, 0xE002FEC8);
	r1 = D(r1, s1_1_2, 0xEF15FF0B, 0xFE10F80A, 0xF209FEFE, 0x2A02FDF6);
	r2 = D(r2, s1_1_2, 0x05FCFB0A, 0xF4061209, 0xEF0D16F6, 0x09F70A00);
	r3 = D(r3, s1_1_2, 0xE512D7C8, 0x17FD02FE, 0x0A0E080A, 0xFEFFF704);
	r4 = D(r4, s1_1_2, 0x00FD08F8, 0xF2FFFFFB, 0x06FF010A, 0xF40FE8E7);
	r5 = D(r5, s1_1_2, 0xF0FB05FA, 0xECF3FDF3, 0x0903FEEF, 0xF6F7FD08);
	r6 = D(r6, s1_1_2, 0xFFFF02FE, 0xF900FDFE, 0x07F9FCFF, 0x0119FEF7);
	r7 = D(r7, s1_1_2, 0xFD1DF6EF, 0xF90CF903, 0xFD03FC03, 0xF104FBFB);
	r0 = D(r0, s1_2_0, 0x150C0907, 0x0605F109, 0x01F6FDFE, 0x18EC09FC);
	r1 = D(r1, s1_2_0, 0x0F290BDB, 0xCA0F1128, 0xFCFD0809, 0x0C08EAE1);
	r2 = D(r2, s1_2_0, 0xF2FC05FF, 0x0416EAB1, 0xE2F31014, 0xEAF1163F);
	r3 = D(r3, s1_2_0, 0x072508E4, 0x0A06DC09, 0xE6F3F600, 0xF5F50B04);
	r4 = D(r4, s1_2_0, 0xF8EB090A, 0xFF010002, 0xFB010A0B, 0x1C0405E4);
	r5 = D(r5, s1_2_0, 0x06F90107, 0x0D0801FC, 0x17F5F801, 0x16EEFD16);
	r6 = D(r6, s1_2_0, 0x0403FE00, 0xFBFBFF04, 0xF3090807, 0x05E2D3FF);
	r7 = D(r7, s1_2_0, 0xF2F40AF3, 0xFE080F0B, 0x0A0408F4, 0x0C09F50A);
	r0 = D(r0, s1_2_1, 0xDEFA05F6, 0x10FAFCF5, 0x0EF4F41C, 0xDE0DFD18);
	r1 = D(r1, s1_2_1, 0xE7A6F50A, 0xDAF408E0, 0xF3ECFCF5, 0x0215F9DC);
	r2 = D(r2, s1_2_1, 0xF905020D, 0xEC0DFEC3, 0x15E612A8, 0xF5E70843);
	r3 = D(r3, s1_2_1, 0x0AE7FCF3, 0xE9E6FDFD, 0x18010004, 0xFDF80406);
	r4 = D(r4, s1_2_1, 0xF9F90218, 0xFE02F7FB, 0xBEFBFEF4, 0xE8B306DE);
	r5 = D(r5, s1_2_1, 0x0BED0507, 0x10FC08FE, 0x02F80B09, 0x39EA0F23);
	r6 = D(r6, s1_2_1, 0xFFFE0003, 0xFA0206FA, 0xD00211F8, 0xF5F4E2FE);
	r7 = D(r7, s1_2_1, 0x28E7FFF6, 0xE5FCFEF7, 0x2E070304, 0xE7FA0CF7);
	r0 = D(r0, s1_2_2, 0xFAF409F4, 0x1B01F3F9, 0x040610F3, 0xE615F6F6);
	r1 = D(r1, s1_2_2, 0x1201F82D, 0x0EFD0511, 0x10FA09FD, 0x120CFDD9);
	r2 = D(r2, s1_2_2, 0xFDFEFF03, 0x1E0CE5DC, 0xEFDC0FF1, 0x02270905);
	r3 = D(r3, s1_2_2, 0xF10603E8, 0xF10502FA, 0xF1020001, 0xF2040306);
	r4 = D(r4, s1_2_2, 0xDE060C0A, 0x0208FDFF, 0xF6F30601, 0xFCFDEF0D);
	r5 = D(r5, s1_2_2, 0x0601FE06, 0xF0FE03F1, 0xFC05FCFF, 0xF7F20714);
	r6 = D(r6, s1_2_2, 0xFD000102, 0xFD02FC01, 0x010401F8, 0xFF05D9DF);
	r7 = D(r7, s1_2_2, 0xFD0DF0DE, 0xFD0103FA, 0x03FF00F8, 0x0409F303);
	s0_0_0 = G[6][xy.y+0][xy.x+0]; s0_0_1 = G[6][xy.y+0][xy.x+1];
	s0_0_2 = G[6][xy.y+0][xy.x+2]; s0_1_0 = G[6][xy.y+1][xy.x+0];
	s0_1_1 = G[6][xy.y+1][xy.x+1]; s0_1_2 = G[6][xy.y+1][xy.x+2];
	s0_2_0 = G[6][xy.y+2][xy.x+0]; s0_2_1 = G[6][xy.y+2][xy.x+1];
	s0_2_2 = G[6][xy.y+2][xy.x+2]; s1_0_0 = G[7][xy.y+0][xy.x+0];
	s1_0_1 = G[7][xy.y+0][xy.x+1]; s1_0_2 = G[7][xy.y+0][xy.x+2];
	s1_1_0 = G[7][xy.y+1][xy.x+0]; s1_1_1 = G[7][xy.y+1][xy.x+1];
	s1_1_2 = G[7][xy.y+1][xy.x+2]; s1_2_0 = G[7][xy.y+2][xy.x+0];
	s1_2_1 = G[7][xy.y+2][xy.x+1]; s1_2_2 = G[7][xy.y+2][xy.x+2];
	r0 = D(r0, s0_0_0, 0xF320F904, 0x0AFF03F2, 0xFAFCF8FF, 0xFC0700EE);
	r1 = D(r1, s0_0_0, 0x0DF8FAEB, 0x07F6FA04, 0x020A02F2, 0x18F7E8E4);
	r2 = D(r2, s0_0_0, 0x04F510D5, 0x1EA2EAE5, 0xF0F403FD, 0x07FCBD0F);
	r3 = D(r3, s0_0_0, 0xFEEF07E0, 0x03E3041B, 0x0C00FFEE, 0xFFFEFF09);
	r4 = D(r4, s0_0_0, 0xF100050C, 0xFE0001F9, 0x0301041B, 0x080103F9);
	r5 = D(r5, s0_0_0, 0x01F8FFF7, 0xFA00FFFC, 0xFD020722, 0xF4070CF1);
	r6 = D(r6, s0_0_0, 0xFF0200F2, 0xF7070511, 0x010506E8, 0x0BD3E9F7);
	r7 = D(r7, s0_0_0, 0xE9CC1BE7, 0x051107FC, 0xFD03FEF9, 0xF7EC0B00);
	r0 = D(r0, s0_0_1, 0x0816FAF3, 0x0CE60414, 0xFFED03E6, 0x09EB011C);
	r1 = D(r1, s0_0_1, 0x192CF9EF, 0x0CFDFE05, 0x0D19FC0E, 0x190700F4);
	r2 = D(r2, s0_0_1, 0xFC020E02, 0x1581F5F2, 0xE5DA04F8, 0x20F4E0E1);
	r3 = D(r3, s0_0_1, 0x07FF1204, 0xFEE71BC0, 0x03FCF0EE, 0x060F0608);
	r4 = D(r4, s0_0_1, 0xF1070104, 0xFEFB0300, 0x030A0705, 0x0DE5FEFD);
	r5 = D(r5, s0_0_1, 0xFFF4040E, 0xFCF50804, 0xFD000704, 0x0110FFF9);
	r6 = D(r6, s0_0_1, 0x0006FEFB, 0xFF010C0C, 0xFFF205E9, 0xEAF3F6FE);
	r7 = D(r7, s0_0_1, 0x08F90210, 0x011700FD, 0xFF02FFFD, 0x051B0EF6);
	r0 = D(r0, s0_0_2, 0x090C0BFC, 0x05ECF8F8, 0x05120003, 0xFC0A0E13);
	r1 = D(r1, s0_0_2, 0x1613FDE2, 0x11EBFAFD, 0x0609FB00, 0x0FF8F9FD);
	r2 = D(r2, s0_0_2, 0x00000D0B, 0x230CFAEE, 0xF1E6F3F7, 0x15F1EC09);
	r3 = D(r3, s0_0_2, 0x0BF700F5, 0x140A05F6, 0xFC050E04, 0x07080509);
	r4 = D(r4, s0_0_2, 0xF8FFFC09, 0x01FD0100, 0x0BFD030C, 0xFCEDFD08);
	r5 = D(r5, s0_0_2, 0x02F602FF, 0x01EB03F9, 0x01020505, 0xFAF80206);
	r6 = D(r6, s0_0_2, 0xFEFD01FE, 0xFC080101, 0x02FA000A, 0xFEE7CBE5);
	r7 = D(r7, s0_0_2, 0xE8F6FCF2, 0xFFFF05F6, 0x0000FF00, 0x0B0A00FB);
	r0 = D(r0, s0_1_0, 0xE91FFF0B, 0x05F5F803, 0x06F8FEEE, 0x0D2D11E4);
	r1 = D(r1, s0_1_0, 0x14FDE1E9, 0x04F4070B, 0x0203080D, 0x0CF3EBEF);
	r2 = D(r2, s0_1_0, 0x0107FA04, 0x10B581F7, 0x040204EB, 0x030105FD);
	r3 = D(r3, s0_1_0, 0xFDADFCFB, 0x1A050CE6, 0x0407F5F6, 0x010B0D03);
	r4 = D(r4, s0_1_0, 0xFC040C16, 0x03000001, 0xF9F10618, 0xF9170921);
	r5 = D(r5, s0_1_0, 0x02F90109, 0x0008FCED, 0xFBF312F2, 0xF41B06E7);
	r6 = D(r6, s0_1_0, 0xFEFB00FF, 0x010605FD, 0x0AFDE7FF, 0xFFE8F402);
	r7 = D(r7, s0_1_0, 0x03F100EA, 0x0AFBF8DA, 0xFF06FFF4, 0x0AF50101);
	r0 = D(r0, s0_1_1, 0xF505070C, 0x04F2E7FE, 0xF8F7F5FA, 0x03FCFFF9);
	r1 = D(r1, s0_1_1, 0x1D15E5E8, 0x0809F7F0, 0xFF0202FA, 0x0C0710F2);
	r2 = D(r2, s0_1_1, 0xFFEFFDFA, 0xFA271381, 0xFB0900EF, 0xEF10CFA7);
	r3 = D(r3, s0_1_1, 0x12FBF502, 0x102AFBBB, 0x0DF7F402, 0x02070F0E);
	r4 = D(r4, s0_1_1, 0x040B0412, 0x05ECF903, 0xF70CFE14, 0xF307FC0A);
	r5 = D(r5, s0_1_1, 0xFD0B0A0C, 0x04D60512, 0xFE160909, 0x0015080D);
	r6 = D(r6, s0_1_1, 0xFDFC03FE, 0xFA0B08FF, 0xFADBEBFA, 0x06FCFDEF);
	r7 = D(r7, s0_1_1, 0xFCE1F30F, 0x100F0402, 0x02FEFDFC, 0x0DF008F8);
	r0 = D(r0, s0_1_2, 0xF90608FC, 0x0804F704, 0xF10105F7, 0x05F904F9);
	r1 = D(r1, s0_1_2, 0x01EAE8E9, 0x07EDFF01, 0x030C0100, 0x07EAF2F3);
	r2 = D(r2, s0_1_2, 0x01FF0104, 0x131B06EA, 0xF921FDEC, 0x151C0D0B);
	r3 = D(r3, s0_1_2, 0xFFDCF703, 0x070014F9, 0xFBFA0C00, 0x02F70C06);
	r4 = D(r4, s0_1_2, 0xFE090E05, 0x020000FD, 0x0015080D, 0x05000C06);
	r5 = D(r5, s0_1_2, 0x05030801, 0xF8EC0003, 0x030B0400, 0xFFFB0403);
	r6 = D(r6, s0_1_2, 0xFB030101, 0x060102FE, 0xFAF6F000, 0x09FCDEE9);
	r7 = D(r7, s0_1_2, 0x041604F2, 0xFD0709F5, 0xFDFDFDFF, 0x06030001);
	r0 = D(r0, s0_2_0, 0xF51503EF, 0x01F7F801, 0x08E40104, 0xFF000403);
	r1 = D(r1, s0_2_0, 0x0810FBD4, 0xFD021003, 0x0504F6FF, 0x0DF1F1FA);
	r2 = D(r2, s0_2_0, 0x01FD0003, 0x0DE3E807, 0x14F4FBF3, 0x22CED7DA);
	r3 = D(r3, s0_2_0, 0xFC1514EA, 0x10EBFE0A, 0xFCFFF505, 0x00FD0707);
	r4 = D(r4, s0_2_0, 0xFDF90903, 0x02FD0000, 0xFD0211FD, 0x1017F7F2);
	r5 = D(r5, s0_2_0, 0x01FD0305, 0xFFF403FE, 0x00F7FD0C, 0xFE02F813);
	r6 = D(r6, s0_2_0, 0x0101FEFF, 0xFEFF0202, 0xFF05FBFF, 0x0ED8F207);
	r7 = D(r7, s0_2_0, 0xF6FE1210, 0x00F803FA, 0xFC0401FB, 0x0400F8F9);
	r0 = D(r0, s0_2_1, 0x0209FC02, 0x0103FB01, 0xF4F902FD, 0x01EA0DFF);
	r1 = D(r1, s0_2_1, 0x0312FBCB, 0x04140108, 0x080602FD, 0x01FBFBF4);
	r2 = D(r2, s0_2_1, 0x00020200, 0x1611FEE2, 0x05E3FAFA, 0x3DC2C602);
	r3 = D(r3, s0_2_1, 0x0813E8F1, 0x0E0405F7, 0x03FB0304, 0x0003FF04);
	r4 = D(r4, s0_2_1, 0xF3F7080D, 0x0900FD00, 0xFF0E0A01, 0x1A01D308);
	r5 = D(r5, s0_2_1, 0x02FC0506, 0xF5F8FCFF, 0x070B0C01, 0xF7FC1107);
	r6 = D(r6, s0_2_1, 0xFD000300, 0x05FF0102, 0x020301FF, 0x07E6F5FE);
	r7 = D(r7, s0_2_1, 0x0212F5F4, 0x01F7FEFF, 0xFE00FDFC, 0x090509FE);
	r0 = D(r0, s0_2_2, 0xF90A07F6, 0x01FAF9FE, 0xFE12FAFB, 0x070BF602);
	r1 = D(r1, s0_2_2, 0x0EE1F4F2, 0xF9060008, 0x01000302, 0x05F9F8FC);
	r2 = D(r2, s0_2_2, 0x05FBFEFF, 0x1AE8F2F1, 0xFFF20BFC, 0x17F218F1);
	r3 = D(r3, s0_2_2, 0xF90AF9F7, 0x08F40500, 0x02060905, 0xFFFC0001);
	r4 = D(r4, s0_2_2, 0xFE020810, 0x07FB0201, 0x00000C02, 0x0BE8030B);
	r5 = D(r5, s0_2_2, 0x00000301, 0x0106FEFE, 0xFE030506, 0xF3FE0700);
	r6 = D(r6, s0_2_2, 0xFC0101FE, 0x06FF0004, 0x04FCFFFE, 0xF8E8E5EA);
	r7 = D(r7, s0_2_2, 0x0FFC0B01, 0x0402FF00, 0x0003FC01, 0x06FC0003);
	r0 = D(r0, s1_0_0, 0x9C23FB01, 0xBAF50909, 0xCD17FB11, 0x1816F510);
	r1 = D(r1, s1_0_0, 0xE314E0EB, 0xFD0A0E11, 0xFE0D05F5, 0x2BE9FCF3);
	r2 = D(r2, s1_0_0, 0x05F107E7, 0x21FE1508, 0x18130BF6, 0xED1201FE);
	r3 = D(r3, s1_0_0, 0x0C28FFF3, 0xDA0EFDF8, 0xE3DAF614, 0x20060704);
	r4 = D(r4, s1_0_0, 0x0A12FEFF, 0xFFFA0005, 0xF70301F4, 0x112CF8E4);
	r5 = D(r5, s1_0_0, 0x09FF02F8, 0xE7FCFEFF, 0xEFF8030E, 0xC40D08FE);
	r6 = D(r6, s1_0_0, 0xFBFF030B, 0xFBFCFB01, 0xF71001F9, 0xF1F124F9);
	r7 = D(r7, s1_0_0, 0x243300D8, 0xFD04FDEA, 0xFE03FE00, 0x26E2F6F2);
	r0 = D(r0, s1_0_1, 0x21F01903, 0xFAF700FC, 0x071801E9, 0x1EF11918);
	r1 = D(r1, s1_0_1, 0x3002F605, 0x05F304FE, 0xCDFDF0FF, 0xF504FCFC);
	r2 = D(r2, s1_0_1, 0x140B15D9, 0xC2010C01, 0xBC11F015, 0xF908001C);
	r3 = D(r3, s1_0_1, 0x2AFB1002, 0x2910FA04, 0x1DF10F11, 0x0F140F14);
	r4 = D(r4, s1_0_1, 0x0400F705, 0x0202FBFD, 0x120507F2, 0x0F1B06F1);
	r5 = D(r5, s1_0_1, 0xE705F9F9, 0xFD06FFFE, 0xF800FA04, 0x0EFBFC14);
	r6 = D(r6, s1_0_1, 0x08010602, 0xFFFAF1F0, 0x0E08FAF3, 0x0B01110A);
	r7 = D(r7, s1_0_1, 0xC6FD0206, 0xF8FFE8F9, 0x0102FFFD, 0xE8EBDC02);
	r0 = D(r0, s1_0_2, 0x01000BFE, 0x01F40BF4, 0xDE07FEF0, 0x092FFF13);
	r1 = D(r1, s1_0_2, 0xEDF4E608, 0x000208F7, 0x0C04050B, 0xFFFF03F3);
	r2 = D(r2, s1_0_2, 0x00FBF6FF, 0x11070510, 0xE714FEF1, 0x00250E0D);
	r3 = D(r3, s1_0_2, 0xF7F9010D, 0x05F5FF03, 0xE406FAF3, 0xF5FA0302);
	r4 = D(r4, s1_0_2, 0xF905090B, 0xFFFE0005, 0xFC0707FC, 0xFA090011);
	r5 = D(r5, s1_0_2, 0xFFF80207, 0x0EFE00FD, 0x09030001, 0xFEFF080E);
	r6 = D(r6, s1_0_2, 0xFF000203, 0x02FBF901, 0xF10401FF, 0x0100140D);
	r7 = D(r7, s1_0_2, 0x18C90815, 0xF8FC0309, 0xFF0100FE, 0x06FD080D);
	r0 = D(r0, s1_1_0, 0x03FCF00E, 0xF506060B, 0xE213FE19, 0x09F9F31C);
	r1 = D(r1, s1_1_0, 0x01EEE228, 0xC7070017, 0xE6ED0113, 0xE6EE160E);
	r2 = D(r2, s1_1_0, 0x050DFB16, 0xF5E2EAF1, 0x09250DEC, 0xDA0627FA);
	r3 = D(r3, s1_1_0, 0x150C07C7, 0x06BD09DF, 0x0AE90B0A, 0x0503FBEE);
	r4 = D(r4, s1_1_0, 0xF707FEF5, 0x0601FB07, 0x1406FAD4, 0xC804FCDE);
	r5 = D(r5, s1_1_0, 0x0AFC0109, 0x0405F718, 0x1BEBFE08, 0x0DFF06F2);
	r6 = D(r6, s1_1_0, 0xFFF10317, 0x0601F917, 0xD12606F9, 0xD2F8FBFF);
	r7 = D(r7, s1_1_0, 0x18340CF7, 0x0EF7F7BD, 0xF306F708, 0xF6E9FCFA);
	r0 = D(r0, s1_1_1, 0x022109EC, 0xF51B01DE, 0xFFE4FBFE, 0xF912FEEA);
	r1 = D(r1, s1_1_1, 0xCF041657, 0x16F3E608, 0x060AFEF3, 0xF007FF04);
	r2 = D(r2, s1_1_1, 0x000EFF07, 0x130581C4, 0x1110CECE, 0x0D120AF7);
	r3 = D(r3, s1_1_1, 0x0503E41D, 0x26D2E2F5, 0xFFEE0811, 0x11FC0FDD);
	r4 = D(r4, s1_1_1, 0x14FFFE33, 0x04F50F27, 0x0BF106AA, 0xF4F9091A);
	r5 = D(r5, s1_1_1, 0x0109043E, 0xECF808EF, 0xF3FC0003, 0x03FF1AED);
	r6 = D(r6, s1_1_1, 0xFEFDF7FF, 0x05020DF3, 0xFA07D80D, 0x040DBD10);
	r7 = D(r7, s1_1_1, 0xD321D713, 0x01E9F41F, 0xFFFE0316, 0x0BFC0222);
	r0 = D(r0, s1_1_2, 0x021D02F6, 0xF2F6050C, 0xF609F2DC, 0x0B05070C);
	r1 = D(r1, s1_1_2, 0x042811F4, 0xEF050905, 0x0BFA0112, 0x0707FFE8);
	r2 = D(r2, s1_1_2, 0x060BF7F9, 0x03D2F616, 0xFEEACC23, 0xE3FE1615);
	r3 = D(r3, s1_1_2, 0x0B2123FF, 0xF908EA05, 0xFD08F0EF, 0x04091008);
	r4 = D(r4, s1_1_2, 0xFD0FFBFC, 0x00FDFCFC, 0x030CFEEA, 0xFE0C2F14);
	r5 = D(r5, s1_1_2, 0xFE040601, 0x0CEEFE12, 0x02FFFB0B, 0x000E0904);
	r6 = D(r6, s1_1_2, 0x01FC03FA, 0x0204FA03, 0x0315F9FF, 0xDE26EEF4);
	r7 = D(r7, s1_1_2, 0x02D2F71E, 0x03F10001, 0x020200FF, 0x08FBFF0F);
	r0 = D(r0, s1_2_0, 0xF7000AF2, 0x02FDFEFB, 0x01EFEAFF, 0xFD03F9E0);
	r1 = D(r1, s1_2_0, 0x1802E5E4, 0x0114ED0E, 0x0EFBFEFB, 0xFDEE02F0);
	r2 = D(r2, s1_2_0, 0xFE05FDFF, 0x12FD1CE0, 0x1814FD28, 0x23D10712);
	r3 = D(r3, s1_2_0, 0x1915FFBE, 0x031902E4, 0xF2FD00FD, 0x0204FC0E);
	r4 = D(r4, s1_2_0, 0xF608FC15, 0x020100F0, 0x041908FF, 0xFC130AE3);
	r5 = D(r5, s1_2_0, 0xFF0503FF, 0x0BFCEEF7, 0xFA0101F5, 0xFCE2EDFF);
	r6 = D(r6, s1_2_0, 0x00FC010D, 0x0004FDF9, 0x10F31015, 0xE118E6E5);
	r7 = D(r7, s1_2_0, 0xF5180C10, 0x0BF4FDFA, 0x05FFFEFE, 0x14FC01FD);
	r0 = D(r0, s1_2_1, 0xFC180A17, 0xFFFC0103, 0x011703EC, 0x070F0317);
	r1 = D(r1, s1_2_1, 0xF50E24CE, 0x07FE020D, 0x040308FE, 0xFA05F7F2);
	r2 = D(r2, s1_2_1, 0xFD03F500, 0x09AD3FF9, 0xFF18FCF7, 0x11F4BFE4);
	r3 = D(r3, s1_2_1, 0x0C190B24, 0x0AEB16CF, 0x0CF2F8E9, 0x0B0BFDFC);
	r4 = D(r4, s1_2_1, 0x0EFBF9FD, 0x000503EF, 0x04110DD8, 0x07F82A0B);
	r5 = D(r5, s1_2_1, 0x050300FA, 0x03FB0416, 0x03F20107, 0x03EDE8FD);
	r6 = D(r6, s1_2_1, 0x00FBFC01, 0x010401FF, 0x04011418, 0xFF24F714);
	r7 = D(r7, s1_2_1, 0xE11F0EF0, 0xFC01070C, 0xFE060323, 0x0B02100C);
	r0 = D(r0, s1_2_2, 0x08070016, 0x00FB0CE8, 0x02170FF0, 0xFF0CFF0B);
	r1 = D(r1, s1_2_2, 0xE906FB15, 0xFBF407FB, 0x08F302FF, 0xFAF604FE);
	r2 = D(r2, s1_2_2, 0x08FFFE07, 0xF3B11CE6, 0xFAF90508, 0xF808F1E7);
	r3 = D(r3, s1_2_2, 0x022B0E0E, 0x0AFD0EDE, 0xFE0E0106, 0x02FD090A);
	r4 = D(r4, s1_2_2, 0x0805FE0E, 0x00FF00F7, 0x0A0300F7, 0x050FF510);
	r5 = D(r5, s1_2_2, 0x01080304, 0x08030A0A, 0xFFF904F9, 0x0507FD0E);
	r6 = D(r6, s1_2_2, 0x00FFFD01, 0xFFFC01FD, 0x040E0A00, 0xDEFB04F6);
	r7 = D(r7, s1_2_2, 0x020501DC, 0x010D04F9, 0x04000201, 0x051003F5);
	f0 = vec4(r0) * 6.2000124e-05;
	f0 += vec4(-1.570e-02, 7.079e-03, 1.020e-02, -1.681e-04);
	f0 = clamp(f0, vec4(0.0), vec4(1.0));
	imageStore(out_image, opos + ivec2(0, 0), f0);
	f1 = vec4(r1) * 6.2000124e-05;
	f1 += vec4(3.178e-02, -1.001e-02, -8.556e-03, 2.372e-02);
	f1 = clamp(f1, vec4(0.0), vec4(1.0));
	imageStore(out_image, opos + ivec2(1, 0), f1);
	f2 = vec4(r2) * 6.2000124e-05;
	f2 += vec4(-2.115e-02, -2.717e-02, 2.047e-03, -5.340e-03);
	f2 = clamp(f2, vec4(0.0), vec4(1.0));
	imageStore(out_image, opos + ivec2(0, 1), f2);
	f3 = vec4(r3) * 6.2000124e-05;
	f3 += vec4(-2.133e-02, -1.063e-04, -1.227e-02, -4.016e-02);
	f3 = clamp(f3, vec4(0.0), vec4(1.0));
	imageStore(out_image, opos + ivec2(1, 1), f3);
	f4 = vec4(r4) * 6.2000124e-05;
	f4 += vec4(-1.131e-02, 5.176e-03, 1.021e-02, -1.813e-02);
	f4 = clamp(f4, vec4(0.0), vec4(1.0));
	imageStore(out_image, opos + ivec2(2, 0), f4);
	f5 = vec4(r5) * 6.2000124e-05;
	f5 += vec4(-1.620e-02, -1.968e-02, -7.832e-03, -2.313e-02);
	f5 = clamp(f5, vec4(0.0), vec4(1.0));
	imageStore(out_image, opos + ivec2(3, 0), f5);
	f6 = vec4(r6) * 6.2000124e-05;
	f6 += vec4(-3.143e-03, -7.851e-03, -1.047e-02, 1.778e-02);
	f6 = clamp(f6, vec4(0.0), vec4(1.0));
	imageStore(out_image, opos + ivec2(2, 1), f6);
	f7 = vec4(r7) * 6.2000124e-05;
	f7 += vec4(-9.241e-03, 8.048e-03, 1.242e-03, 1.009e-02);
	f7 = clamp(f7, vec4(0.0), vec4(1.0));
	imageStore(out_image, opos + ivec2(3, 1), f7);
}

//!DESC CuNNy-8x32-conv6
//!HOOK LUMA
//!COMPUTE 32 16 8 8
//!BIND conv5
//!BIND LUMA
//!SAVE conv6
//!WIDTH LUMA.w 4 *
//!HEIGHT LUMA.h 2 *
//!COMPONENTS 4
//!WHEN OUTPUT.w LUMA.w / 1.3 > OUTPUT.h LUMA.h / 1.3 > *
#extension GL_EXT_spirv_intrinsics : require
spirv_instruction (extensions = ["SPV_KHR_integer_dot_product"], capabilities = [6019, 6018], id = 4450)
int dp4(int a, int b, spirv_literal int fmt);
#define D(r, s, a, b, c, d) r + ivec4(dp4(s, a, 0), dp4(s, b, 0), dp4(s, c, 0), dp4(s, d, 0))
shared int G[8][10][10];
void hook() {
	ivec2 xy = ivec2(gl_LocalInvocationID.xy);
	ivec2 pos = ivec2(gl_WorkGroupID.xy) * ivec2(8, 8) + xy;
	ivec2 opos = pos * ivec2(4, 2);
	ivec2 sz = ivec2(LUMA_size) - ivec2(1);
	for (int y = 0; y < 10; y += 8) {
		int ay = xy.y + y;
		if (ay >= 10) break;
		for (int x = 0; x < 10; x += 8) {
			int ax = xy.x + x;
			if (ax >= 10) break;
			vec2 p;
			vec4 r, g, b, a;
			p = vec2(clamp(pos + ivec2(x - 1, y - 1), ivec2(0), sz) * ivec2(4, 2) + ivec2(1, 1)) * conv5_pt;
			r = conv5_gather(p, 0);
			g = conv5_gather(p, 1);
			b = conv5_gather(p, 2);
			a = conv5_gather(p, 3);
			vec4 v0 = vec4(r.w, g.w, b.w, a.w) * 1.0000000e+00;
			vec4 v1 = vec4(r.z, g.z, b.z, a.z) * 1.0000000e+00;
			vec4 v2 = vec4(r.x, g.x, b.x, a.x) * 1.0000000e+00;
			vec4 v3 = vec4(r.y, g.y, b.y, a.y) * 1.0000000e+00;
			p = vec2(clamp(pos + ivec2(x - 1, y - 1), ivec2(0), sz) * ivec2(4, 2) + ivec2(3, 1)) * conv5_pt;
			r = conv5_gather(p, 0);
			g = conv5_gather(p, 1);
			b = conv5_gather(p, 2);
			a = conv5_gather(p, 3);
			vec4 v4 = vec4(r.w, g.w, b.w, a.w) * 1.0000000e+00;
			vec4 v5 = vec4(r.z, g.z, b.z, a.z) * 1.0000000e+00;
			vec4 v6 = vec4(r.x, g.x, b.x, a.x) * 1.0000000e+00;
			vec4 v7 = vec4(r.y, g.y, b.y, a.y) * 1.0000000e+00;
			G[0][ay][ax] = int(packSnorm4x8(v0));
			G[1][ay][ax] = int(packSnorm4x8(v1));
			G[2][ay][ax] = int(packSnorm4x8(v2));
			G[3][ay][ax] = int(packSnorm4x8(v3));
			G[4][ay][ax] = int(packSnorm4x8(v4));
			G[5][ay][ax] = int(packSnorm4x8(v5));
			G[6][ay][ax] = int(packSnorm4x8(v6));
			G[7][ay][ax] = int(packSnorm4x8(v7));
		}
	}
	barrier();
	int s0_0_0, s0_0_1, s0_0_2, s0_1_0, s0_1_1, s0_1_2, s0_2_0, s0_2_1, s0_2_2, s1_0_0, s1_0_1, s1_0_2, s1_1_0, s1_1_1, s1_1_2, s1_2_0, s1_2_1, s1_2_2;
	ivec4 r0, r1, r2, r3, r4, r5, r6, r7;
	vec4 f0, f1, f2, f3, f4, f5, f6, f7;
	r0 = ivec4(0); r1 = ivec4(0); r2 = ivec4(0); r3 = ivec4(0); r4 = ivec4(0); r5 = ivec4(0); r6 = ivec4(0); r7 = ivec4(0);
	s0_0_0 = G[0][xy.y+0][xy.x+0]; s0_0_1 = G[0][xy.y+0][xy.x+1];
	s0_0_2 = G[0][xy.y+0][xy.x+2]; s0_1_0 = G[0][xy.y+1][xy.x+0];
	s0_1_1 = G[0][xy.y+1][xy.x+1]; s0_1_2 = G[0][xy.y+1][xy.x+2];
	s0_2_0 = G[0][xy.y+2][xy.x+0]; s0_2_1 = G[0][xy.y+2][xy.x+1];
	s0_2_2 = G[0][xy.y+2][xy.x+2]; s1_0_0 = G[1][xy.y+0][xy.x+0];
	s1_0_1 = G[1][xy.y+0][xy.x+1]; s1_0_2 = G[1][xy.y+0][xy.x+2];
	s1_1_0 = G[1][xy.y+1][xy.x+0]; s1_1_1 = G[1][xy.y+1][xy.x+1];
	s1_1_2 = G[1][xy.y+1][xy.x+2]; s1_2_0 = G[1][xy.y+2][xy.x+0];
	s1_2_1 = G[1][xy.y+2][xy.x+1]; s1_2_2 = G[1][xy.y+2][xy.x+2];
	r0 = D(r0, s0_0_0, 0x04FCFC02, 0x83818181, 0xF3030CFB, 0x01F8FC04);
	r1 = D(r1, s0_0_0, 0x00FF0000, 0xF8F80819, 0x0FFCF6F9, 0x07FA0D01);
	r2 = D(r2, s0_0_0, 0x11F40CF1, 0xF8F716DE, 0x0C0111FA, 0x0AFD01FD);
	r3 = D(r3, s0_0_0, 0xFDFF0100, 0x01FBFE03, 0x03FF00FD, 0x1ADEEBF9);
	r4 = D(r4, s0_0_0, 0xFD0102FF, 0x02010000, 0x0B0D050B, 0xFF0004FE);
	r5 = D(r5, s0_0_0, 0xF8FAFC01, 0x07F801DA, 0xFDFCFFCF, 0xFD08F8F4);
	r6 = D(r6, s0_0_0, 0x0804F2FC, 0xEDF9F8DE, 0xF4F7FCF3, 0xFDFEFE0B);
	r7 = D(r7, s0_0_0, 0x05FFFFF8, 0x030BFAFC, 0x05FAF407, 0x0909F7FA);
	r0 = D(r0, s0_0_1, 0x0200F401, 0xFA0204FB, 0xF20209EC, 0x0AFDFEFE);
	r1 = D(r1, s0_0_1, 0x01FC0305, 0x05F90701, 0x0C0CF8E3, 0x13F50500);
	r2 = D(r2, s0_0_1, 0x19001901, 0xF00A000C, 0x00FB090B, 0x02FFFDF7);
	r3 = D(r3, s0_0_1, 0x0EFE02F9, 0x0801FC02, 0x06FE05FF, 0x01FFEED2);
	r4 = D(r4, s0_0_1, 0xFFFC03FF, 0x0002FBFC, 0x05010708, 0x01FE0C03);
	r5 = D(r5, s0_0_1, 0x16FB06EF, 0x10FB0B0E, 0x3813032C, 0x15FBFCFE);
	r6 = D(r6, s0_0_1, 0x07FFF701, 0xDA08DD0F, 0xFEF70405, 0xF9FFF40B);
	r7 = D(r7, s0_0_1, 0x0401F6FE, 0xFB0B07E6, 0x0103FFF2, 0x0100F2FC);
	r0 = D(r0, s0_0_2, 0xF702F7F9, 0x02FA0C0E, 0xF0FC0800, 0x0101FA04);
	r1 = D(r1, s0_0_2, 0xFF00FEFF, 0xFDFDFDFE, 0xF60A0600, 0x0CFF15E2);
	r2 = D(r2, s0_0_2, 0x0DFD0BF6, 0xF3F30EF8, 0xFFF60D13, 0xF904FF04);
	r3 = D(r3, s0_0_2, 0x0702FAFB, 0x0107FBFB, 0xFFFBFE05, 0x0BFCFA17);
	r4 = D(r4, s0_0_2, 0x0100FF03, 0xFF0101FD, 0x10FFEF0A, 0x00010100);
	r5 = D(r5, s0_0_2, 0x060C0418, 0xF9F8FEE8, 0x0A20F048, 0x0200FB05);
	r6 = D(r6, s0_0_2, 0xFF05FE01, 0xE625E929, 0xFEFA15EB, 0xFDFEFE09);
	r7 = D(r7, s0_0_2, 0xFD05F801, 0x05FAF905, 0xFB05F9FE, 0x07FF0300);
	r0 = D(r0, s0_1_0, 0xF801FC03, 0xCF19C602, 0xF40103F9, 0xFEFAFA09);
	r1 = D(r1, s0_1_0, 0x00FD0301, 0xFBFE07D5, 0x18F004DF, 0x0BFE02FA);
	r2 = D(r2, s0_1_0, 0x0D0603FA, 0xEBE91AF4, 0xD1F3FFE9, 0xF705F10F);
	r3 = D(r3, s0_1_0, 0x0401FBF6, 0x0B0907F7, 0x10030AFD, 0x1814F600);
	r4 = D(r4, s0_1_0, 0x00FF0000, 0x0703FD01, 0x06FF040A, 0x01FD00FE);
	r5 = D(r5, s0_1_0, 0xFC07EF07, 0xFE0F21E6, 0x19362D07, 0x03FE0EFD);
	r6 = D(r6, s0_1_0, 0x0605FC0A, 0xBC1A030E, 0xFA3C0A01, 0xFE03FB05);
	r7 = D(r7, s0_1_0, 0x02080401, 0x11EFEBF4, 0x0702FFE7, 0xFF00F003);
	r0 = D(r0, s0_1_1, 0x1E09F4ED, 0x04FBFEF7, 0xF9F6FDFE, 0xFDFEE7F8);
	r1 = D(r1, s0_1_1, 0x0604F701, 0x0AF7EFFF, 0xF5FE0E04, 0xFA2BF9DB);
	r2 = D(r2, s0_1_1, 0x1002DDE7, 0xD52BD00F, 0xE724DE27, 0x0B13F6E5);
	r3 = D(r3, s0_1_1, 0x1CF11AE0, 0x12FF0CF5, 0x090106FA, 0x0306FB0B);
	r4 = D(r4, s0_1_1, 0xFAFD0AFF, 0x0702FFF8, 0x01F410E8, 0x0102FE04);
	r5 = D(r5, s0_1_1, 0x2DCC070E, 0x0DFA1C0A, 0xF7EFE504, 0x110C0F09);
	r6 = D(r6, s0_1_1, 0x12EDEC11, 0xF9DD0318, 0x060B0207, 0xFA030815);
	r7 = D(r7, s0_1_1, 0x060505FA, 0x11DC12F8, 0x0AF8F9FE, 0x08EFFC0C);
	r0 = D(r0, s0_1_2, 0x0902FFF7, 0xFEFD0805, 0xEEFC0D02, 0x07FB0300);
	r1 = D(r1, s0_1_2, 0x00F901FC, 0xFD02F3F9, 0xF7EA09F9, 0x020C0101);
	r2 = D(r2, s0_1_2, 0x09FF1300, 0x07F1E909, 0x07D40D19, 0x03FC12EE);
	r3 = D(r3, s0_1_2, 0x060AF6F5, 0x05FCF405, 0x04FF07FC, 0xFEF3DEED);
	r4 = D(r4, s0_1_2, 0x000102FE, 0x0000F903, 0x010DF803, 0x01FF00FE);
	r5 = D(r5, s0_1_2, 0x071EE9F0, 0xFCFE04F9, 0x1DD70B0D, 0x0FEA0606);
	r6 = D(r6, s0_1_2, 0x03FDF801, 0xE3E5EFF2, 0x00F2D30B, 0xFC02FCF7);
	r7 = D(r7, s0_1_2, 0xFEF9FF0C, 0xF50CF0F4, 0xFCF8FBFC, 0x0113F4F7);
	r0 = D(r0, s0_2_0, 0x08F9FBF7, 0xF1041BF4, 0xFC020402, 0x02000401);
	r1 = D(r1, s0_2_0, 0x00FFFC03, 0x07F6F3F8, 0xFBF5FE00, 0x0B0FFC09);
	r2 = D(r2, s0_2_0, 0x0CFB04F9, 0x02FA04ED, 0xF5FE04E5, 0x0802FAFA);
	r3 = D(r3, s0_2_0, 0x0900FB05, 0xFFFDF803, 0x0306F901, 0xEEF2EEEC);
	r4 = D(r4, s0_2_0, 0xFF010300, 0x0100FFFB, 0x050D0514, 0x00FF0203);
	r5 = D(r5, s0_2_0, 0xFBF00AEE, 0xF3FDEFF8, 0x07FDFCFE, 0x08F9F416);
	r6 = D(r6, s0_2_0, 0xF4F601FF, 0xD6EBF5F2, 0x1DE5FF17, 0x0003010C);
	r7 = D(r7, s0_2_0, 0x02FCFA02, 0x02FF0607, 0x0202F102, 0x01F70F05);
	r0 = D(r0, s0_2_1, 0xFF0FFAE0, 0xFEFF0BFA, 0x01FF05F5, 0x0400F3FC);
	r1 = D(r1, s0_2_1, 0xFD00FF06, 0x000FEAE8, 0xDF1C0AF0, 0x03FDF6E2);
	r2 = D(r2, s0_2_1, 0x10040004, 0xFA0A20EB, 0xFBD3FDF7, 0x06FDEDFA);
	r3 = D(r3, s0_2_1, 0x12F50C03, 0xF00FEB03, 0x05FE01FB, 0x05050BFD);
	r4 = D(r4, s0_2_1, 0xFDFA0D03, 0x0203FDFE, 0x0010F6FD, 0x01020300);
	r5 = D(r5, s0_2_1, 0x0FEF0E07, 0xFBF90CEF, 0xE6EAF8FB, 0x0AFFE3EB);
	r6 = D(r6, s0_2_1, 0xFF09EFFB, 0xEA110C0F, 0x160BE817, 0x02000803);
	r7 = D(r7, s0_2_1, 0xFA06ECF7, 0x01FC1304, 0xF818EDF3, 0xF718ECE5);
	r0 = D(r0, s0_2_2, 0x01FD0303, 0xFE0205FE, 0xF9FE0FFE, 0x01FB02FF);
	r1 = D(r1, s0_2_2, 0x0100FC01, 0x03FB0704, 0xF4090809, 0xFDF60001);
	r2 = D(r2, s0_2_2, 0x0B030BFB, 0xFEF80DF5, 0x01FE18F6, 0x020000F0);
	r3 = D(r3, s0_2_2, 0x05FDFFF6, 0xFEFD0305, 0x02FFFEFD, 0x0803060A);
	r4 = D(r4, s0_2_2, 0xFD020001, 0x0301FD03, 0x09FFF1F9, 0x0200FC02);
	r5 = D(r5, s0_2_2, 0x031BEFE5, 0xF6F31804, 0x141A1AE0, 0x0404FE0E);
	r6 = D(r6, s0_2_2, 0x00FD02FD, 0xD70334EE, 0x02F00810, 0xFA00FDFA);
	r7 = D(r7, s0_2_2, 0x01FE07F5, 0xFE0D10F2, 0x01F80C08, 0x00EDF9F9);
	r0 = D(r0, s1_0_0, 0x07F9FC02, 0x8181811C, 0x0502FF05, 0x01020302);
	r1 = D(r1, s1_0_0, 0xFDFEFFFF, 0x13F4FBFD, 0x06F61013, 0xFFE60D0B);
	r2 = D(r2, s1_0_0, 0x0608FF08, 0x1613F8FE, 0x11F1FD0E, 0x01FD0301);
	r3 = D(r3, s1_0_0, 0xFCFDFDE5, 0x03FD0105, 0xFDFFFCF3, 0xF6EF0901);
	r4 = D(r4, s1_0_0, 0xFDFF00FF, 0x0402FE02, 0xDBF60BFB, 0x0205FD02);
	r5 = D(r5, s1_0_0, 0x0E0DF0E5, 0x0FF90806, 0xFCE31E14, 0xE4BA08F7);
	r6 = D(r6, s1_0_0, 0x070605FE, 0x0F0D2129, 0xE222EE19, 0xFFFEFFF6);
	r7 = D(r7, s1_0_0, 0xFFFFFE01, 0x010E0901, 0x04FF01FA, 0x040104F7);
	r0 = D(r0, s1_0_1, 0x06FFFCFB, 0x0527FF01, 0x0DFB0C0B, 0x02060801);
	r1 = D(r1, s1_0_1, 0x01FB0002, 0x0BD00602, 0x08110914, 0x01CAE406);
	r2 = D(r2, s1_0_1, 0xF4DDD701, 0x0C0D0DF1, 0xFA050704, 0xFFF6FB04);
	r3 = D(r3, s1_0_1, 0xFFF502DE, 0x08FDFA05, 0xFD00FDED, 0xFA1EF80F);
	r4 = D(r4, s1_0_1, 0xFE00FB01, 0x020C0402, 0xE917FF04, 0xFD02FF02);
	r5 = D(r5, s1_0_1, 0x0B0C1618, 0xFD0AF205, 0x0E32270E, 0xFFBE04F8);
	r6 = D(r6, s1_0_1, 0xFB080D04, 0x150D0C0A, 0xD4D413EF, 0xF4FC0BF5);
	r7 = D(r7, s1_0_1, 0x03020100, 0x0D2314FD, 0x030EF802, 0x05170506);
	r0 = D(r0, s1_0_2, 0x0508F905, 0xFFFEFE07, 0x0DF71201, 0x040601FE);
	r1 = D(r1, s1_0_2, 0x0004FC03, 0x0A09FB00, 0x0DF71009, 0x0B04F9FA);
	r2 = D(r2, s1_0_2, 0xFC0BF509, 0x04EE18F6, 0x060F2305, 0x02080201);
	r3 = D(r3, s1_0_2, 0x0000F7D6, 0x09000304, 0xFF0300EB, 0x0C141D04);
	r4 = D(r4, s1_0_2, 0xFD02FDFD, 0x00010204, 0xE5F6E9F4, 0xFEFDFE01);
	r5 = D(r5, s1_0_2, 0x0FEC01FF, 0x10020E02, 0xE0BF071F, 0xF2E2FE02);
	r6 = D(r6, s1_0_2, 0x06FE0604, 0x2BED1330, 0xD5E3FFCC, 0xFDF9FCEB);
	r7 = D(r7, s1_0_2, 0xFCFAFFFE, 0xFA060D00, 0x07100106, 0x09FBF802);
	r0 = D(r0, s1_1_0, 0xF8090308, 0xFD1F0E16, 0x0A10F8FD, 0x050BFF00);
	r1 = D(r1, s1_1_0, 0xFFFD0200, 0x00FAFE08, 0x06FC0805, 0x0001FAFF);
	r2 = D(r2, s1_1_0, 0xEFC40D11, 0x07020608, 0xF423D808, 0x0911FDFA);
	r3 = D(r3, s1_1_0, 0xF60205F5, 0x02FA0306, 0x0002FFFB, 0x09000904);
	r4 = D(r4, s1_1_0, 0x03000002, 0xFFFC0004, 0xF6000B02, 0x0101FE02);
	r5 = D(r5, s1_1_0, 0xEFE109EE, 0xFA18FC04, 0x058111F1, 0xF1DA14EE);
	r6 = D(r6, s1_1_0, 0xF9ED10F6, 0xFF100506, 0xFBED09FA, 0x00FA06FD);
	r7 = D(r7, s1_1_0, 0xFF020800, 0xF9170E07, 0xF80B0103, 0x03E710F8);
	r0 = D(r0, s1_1_1, 0xF4CE0613, 0xEB2CFB0D, 0x05090209, 0xFAD00702);
	r1 = D(r1, s1_1_1, 0x0605FF00, 0x0E2EFB0F, 0x020EE600, 0xEA310208);
	r2 = D(r2, s1_1_1, 0xE9E6E90B, 0xC9E52306, 0xDED63811, 0x02D0110F);
	r3 = D(r3, s1_1_1, 0x063400EF, 0x0612F90B, 0x07FC01F3, 0x0FF7DA03);
	r4 = D(r4, s1_1_1, 0x021C0305, 0xFAEC030A, 0x050A0DFC, 0x00FB00FD);
	r5 = D(r5, s1_1_1, 0xED280903, 0xED2D0616, 0xFA0D0007, 0x11D1F300);
	r6 = D(r6, s1_1_1, 0x03D1F8FB, 0x17F4EA13, 0x05BF20F3, 0x020B02EF);
	r7 = D(r7, s1_1_1, 0x00FA0305, 0xF60F0B09, 0x0C3301FC, 0x09F1E903);
	r0 = D(r0, s1_1_2, 0xFA0CF804, 0xFCF4FF04, 0x14F70B00, 0xFEFF0303);
	r1 = D(r1, s1_1_2, 0xF90C01FF, 0x030FFA06, 0xF8ECF0F9, 0xE507FC10);
	r2 = D(r2, s1_1_2, 0xF615F208, 0xEF030D08, 0xDEFAFD09, 0x020CF1FC);
	r3 = D(r3, s1_1_2, 0x0A040FFE, 0x0006FF05, 0xF9FDFFF9, 0xFB1A15F8);
	r4 = D(r4, s1_1_2, 0x00FD0402, 0x01FFFEFE, 0xFD00EC04, 0x03FDFF00);
	r5 = D(r5, s1_1_2, 0x12E0F501, 0x04F80BE9, 0xF089E513, 0xEFE0FCF5);
	r6 = D(r6, s1_1_2, 0x02010E03, 0xD41CCD24, 0x04ED11FF, 0x05E90DF6);
	r7 = D(r7, s1_1_2, 0x0C040603, 0x00F01FF7, 0xFA09F8FC, 0x0BE70505);
	r0 = D(r0, s1_2_0, 0x000FFE0B, 0x03FCF801, 0x09F2FCFF, 0x00050100);
	r1 = D(r1, s1_2_0, 0xFFFF03FF, 0x0509FE05, 0x0CFBFB00, 0xFBDC0C00);
	r2 = D(r2, s1_2_0, 0x03060A07, 0x1A0AE607, 0xF9FEF300, 0x01FC0500);
	r3 = D(r3, s1_2_0, 0x050308F7, 0xFFF6F904, 0xFE0305FD, 0xFC0E0601);
	r4 = D(r4, s1_2_0, 0xFF04FD00, 0x0103FE00, 0xE2F021F7, 0xFEFF03FF);
	r5 = D(r5, s1_2_0, 0xFBDB01FD, 0x12B1F3F7, 0x0AF409FD, 0x0ADA08FD);
	r6 = D(r6, s1_2_0, 0x09EFFF03, 0x0B15EF05, 0xFEF71703, 0xFD01FFFB);
	r7 = D(r7, s1_2_0, 0x0508FF01, 0x0EFBFF07, 0x030AFF00, 0x100AF7FF);
	r0 = D(r0, s1_2_1, 0xFF19F60D, 0x04FA04FD, 0x07F7F7FF, 0xFE080200);
	r1 = D(r1, s1_2_1, 0xFDFDFE01, 0xFC16EF09, 0xDD0AFAFA, 0x11EDFAFD);
	r2 = D(r2, s1_2_1, 0xF8150505, 0xFA1DF700, 0x1302F903, 0x11F902FF);
	r3 = D(r3, s1_2_1, 0x0000FFFF, 0xFC07F408, 0xFE00FFFD, 0xF5061500);
	r4 = D(r4, s1_2_1, 0x03FA0001, 0x03FA02FF, 0xF7E91900, 0xFEFD0000);
	r5 = D(r5, s1_2_1, 0xF500F606, 0x0205020F, 0xD90AF914, 0xF00605F9);
	r6 = D(r6, s1_2_1, 0xFE0502FF, 0xF049F612, 0xFAC521F7, 0xF7F903FE);
	r7 = D(r7, s1_2_1, 0x0313FC04, 0x0FFB0AFF, 0xFB0CF903, 0xF1140A02);
	r0 = D(r0, s1_2_2, 0xFD0CF508, 0x00FB0303, 0x0E060004, 0x0301FEFF);
	r1 = D(r1, s1_2_2, 0xFEFE01FF, 0x0B0DF109, 0x06F11502, 0x0CECF803);
	r2 = D(r2, s1_2_2, 0x01F5EE08, 0x080FF808, 0x1003FB04, 0xF41AFD03);
	r3 = D(r3, s1_2_2, 0xFF0102FA, 0x04F4FD04, 0xF90700FF, 0x0CF7FD01);
	r4 = D(r4, s1_2_2, 0xFFFFFEFF, 0x0300FF00, 0xE90812FA, 0xFEFB02FE);
	r5 = D(r5, s1_2_2, 0x11110CFD, 0xF406F2F4, 0xDCDC151A, 0x03E20D01);
	r6 = D(r6, s1_2_2, 0x07040203, 0x05040908, 0xE4FBEEFA, 0xFE0C05FC);
	r7 = D(r7, s1_2_2, 0xF71602FF, 0xF5F2FEFC, 0xFE050301, 0x0405FA03);
	s0_0_0 = G[2][xy.y+0][xy.x+0]; s0_0_1 = G[2][xy.y+0][xy.x+1];
	s0_0_2 = G[2][xy.y+0][xy.x+2]; s0_1_0 = G[2][xy.y+1][xy.x+0];
	s0_1_1 = G[2][xy.y+1][xy.x+1]; s0_1_2 = G[2][xy.y+1][xy.x+2];
	s0_2_0 = G[2][xy.y+2][xy.x+0]; s0_2_1 = G[2][xy.y+2][xy.x+1];
	s0_2_2 = G[2][xy.y+2][xy.x+2]; s1_0_0 = G[3][xy.y+0][xy.x+0];
	s1_0_1 = G[3][xy.y+0][xy.x+1]; s1_0_2 = G[3][xy.y+0][xy.x+2];
	s1_1_0 = G[3][xy.y+1][xy.x+0]; s1_1_1 = G[3][xy.y+1][xy.x+1];
	s1_1_2 = G[3][xy.y+1][xy.x+2]; s1_2_0 = G[3][xy.y+2][xy.x+0];
	s1_2_1 = G[3][xy.y+2][xy.x+1]; s1_2_2 = G[3][xy.y+2][xy.x+2];
	r0 = D(r0, s0_0_0, 0x000401FD, 0x3C8EA381, 0xFCFC05FE, 0xFCFBFF05);
	r1 = D(r1, s0_0_0, 0x00FE00FF, 0x090F05FA, 0xFFFDFA05, 0x021EF907);
	r2 = D(r2, s0_0_0, 0x090CEE0C, 0xFC0B02FE, 0x07F5070C, 0xFC0BFE04);
	r3 = D(r3, s0_0_0, 0x02020106, 0x01010705, 0xFFFCFF07, 0xFB06FC14);
	r4 = D(r4, s0_0_0, 0xFF0001FF, 0x01FF0102, 0xF6FCEB02, 0x01FE0200);
	r5 = D(r5, s0_0_0, 0x03010B13, 0x0FF80305, 0xFED4DD12, 0x0BF3F701);
	r6 = D(r6, s0_0_0, 0x06F20204, 0xFFE5E5F5, 0x09CE17FB, 0x060008FE);
	r7 = D(r7, s0_0_0, 0xFBFC0004, 0xFCEDFF02, 0x0007FE05, 0xFDF0FC03);
	r0 = D(r0, s0_0_1, 0x050012FD, 0x0BF3001E, 0x04FF02F5, 0x08FE0301);
	r1 = D(r1, s0_0_1, 0x010202FD, 0x0114F704, 0x0906F70E, 0xFA110304);
	r2 = D(r2, s0_0_1, 0x0408F30D, 0x01200906, 0x10FAF600, 0x010605FD);
	r3 = D(r3, s0_0_1, 0xF502F7FE, 0x0401FE00, 0xFA03FE04, 0x00C9F50F);
	r4 = D(r4, s0_0_1, 0xFEFB0101, 0x02FF04FE, 0x0004EBFA, 0x020507FE);
	r5 = D(r5, s0_0_1, 0x04F8EE04, 0x01EC0916, 0xFAB78110, 0x1404DDFD);
	r6 = D(r6, s0_0_1, 0x03FE0408, 0xFF0BF927, 0x11DE22F1, 0xFEF607FD);
	r7 = D(r7, s0_0_1, 0x0002FFFF, 0x03F7CE01, 0xFD01FD0E, 0x0907FFF0);
	r0 = D(r0, s0_0_2, 0x00FB0903, 0x070C040B, 0x020508FF, 0x02FD02FA);
	r1 = D(r1, s0_0_2, 0xFFFCFE00, 0x05000209, 0x06F80A05, 0xFC02060E);
	r2 = D(r2, s0_0_2, 0x07F7FF09, 0xFCDA140B, 0x07FF13FE, 0xFBFF0307);
	r3 = D(r3, s0_0_2, 0xF907FD02, 0x06020206, 0xFAF8FE08, 0x0DE203F7);
	r4 = D(r4, s0_0_2, 0xFF00FFFF, 0x01000200, 0x0503D9F9, 0x02020101);
	r5 = D(r5, s0_0_2, 0x06011507, 0xF6FA0707, 0x090B16F7, 0x00FF0705);
	r6 = D(r6, s0_0_2, 0x04FC0500, 0x1B08F711, 0xF6F5F7F6, 0xF3FDFA04);
	r7 = D(r7, s0_0_2, 0x01060108, 0x00130222, 0x0500FFFC, 0x00FE0D06);
	r0 = D(r0, s0_1_0, 0x00FFFEFC, 0x08D00925, 0xFEF701FD, 0x01020204);
	r1 = D(r1, s0_1_0, 0x00FE00FE, 0xF3FAF6FA, 0x05FF0110, 0x00F903FF);
	r2 = D(r2, s0_1_0, 0x0AF8F80F, 0x08FC0E22, 0x08030E11, 0x00FE01F2);
	r3 = D(r3, s0_1_0, 0xFB020613, 0xFB01FC00, 0x00010A08, 0x15F8ECF8);
	r4 = D(r4, s0_1_0, 0x02000302, 0xFF02FEFF, 0x04FDF7FE, 0x00010403);
	r5 = D(r5, s0_1_0, 0x0302FC17, 0x10EDFA0D, 0x0CF41C1F, 0x01FC0202);
	r6 = D(r6, s0_1_0, 0x01FF08FE, 0x25DDD911, 0x13161614, 0xFDFF0009);
	r7 = D(r7, s0_1_0, 0xFEFC0305, 0x08F9F82B, 0xFBFC0004, 0xF9FBF40E);
	r0 = D(r0, s0_1_1, 0x121C0524, 0x15E7F437, 0x0301FC11, 0x01FCFC0C);
	r1 = D(r1, s0_1_1, 0x01FD07FB, 0x03F4EBBF, 0x0EF8F413, 0x04D508FE);
	r2 = D(r2, s0_1_1, 0x08FDF70A, 0x0DEE11FF, 0xF6FD07F6, 0x0AF3FA0F);
	r3 = D(r3, s0_1_1, 0xE8ECEF06, 0x0903F405, 0xF50011D7, 0x05EDF605);
	r4 = D(r4, s0_1_1, 0xFFFC07FF, 0x030C010B, 0x0AFB0519, 0x0102050A);
	r5 = D(r5, s0_1_1, 0x14F0E3EA, 0x17260820, 0x3681E508, 0x06F9C8C1);
	r6 = D(r6, s0_1_1, 0xF312FE02, 0x1D01BCD9, 0x0325F3AF, 0xF6120CF9);
	r7 = D(r7, s0_1_1, 0x03FB0008, 0x01DBC9EF, 0x04DE0CFC, 0x01EAF502);
	r0 = D(r0, s0_1_2, 0xFE03090E, 0x03050E03, 0x010508FC, 0x0502FBF5);
	r1 = D(r1, s0_1_2, 0xFEFB0012, 0xFFFE0306, 0xF9F91C0B, 0x0801F71D);
	r2 = D(r2, s0_1_2, 0x08F90305, 0xF00A1A0F, 0x120F1C28, 0xFD0400FE);
	r3 = D(r3, s0_1_2, 0xF7FAF9F5, 0xFEF91403, 0xFA000209, 0xFDF4F30B);
	r4 = D(r4, s0_1_2, 0x00000200, 0xFFFE0002, 0xFC09ECFD, 0xFEFEFE0C);
	r5 = D(r5, s0_1_2, 0xFCE1F8EA, 0xFCF60BFB, 0x27F7D43C, 0xFF0CEAE9);
	r6 = D(r6, s0_1_2, 0x0A00FEF5, 0x2302EEEC, 0x1A0FF9F9, 0xFDF9EF09);
	r7 = D(r7, s0_1_2, 0x04EC0802, 0x0401F003, 0xFBFEF90C, 0x0904F501);
	r0 = D(r0, s0_2_0, 0x04FFFC0A, 0x0708FBE3, 0xFF0B0AFF, 0x02FFFF04);
	r1 = D(r1, s0_2_0, 0x00FF00FF, 0x04F9090F, 0x0CF91DF4, 0x03010906);
	r2 = D(r2, s0_2_0, 0x08F4F20A, 0x07F7F809, 0x04F511FB, 0xFF05F703);
	r3 = D(r3, s0_2_0, 0xF1FF010A, 0xFFFB080F, 0xFB010308, 0xFD03EE04);
	r4 = D(r4, s0_2_0, 0x01FE0202, 0x0306FDFA, 0xFA02DEFA, 0xFF010001);
	r5 = D(r5, s0_2_0, 0x0400FBFB, 0xFA070944, 0xEE07E1FA, 0xFD05010E);
	r6 = D(r6, s0_2_0, 0x09FF12FA, 0x1CFC310B, 0x03F312E9, 0xFA00FE01);
	r7 = D(r7, s0_2_0, 0x01FBFE03, 0x0DEBEADF, 0x03FDFD01, 0xFD060102);
	r0 = D(r0, s0_2_1, 0x09EE09E1, 0x04FC09DE, 0xFD010201, 0x02FDFCEF);
	r1 = D(r1, s0_2_1, 0x02FC00F5, 0x05F2FF0E, 0x19FA24DC, 0x070DEED8);
	r2 = D(r2, s0_2_1, 0x07FCF3E2, 0x0C050901, 0x0710FB14, 0x09F1F905);
	r3 = D(r3, s0_2_1, 0xF4FF0507, 0x040A0702, 0xF206F91A, 0x01FC0BE1);
	r4 = D(r4, s0_2_1, 0xFF07070C, 0xFEF70513, 0x01FDE4F7, 0xFFFFFBFE);
	r5 = D(r5, s0_2_1, 0x0FD7FFC6, 0x1E12F715, 0x1F0403DD, 0x00F4EDC4);
	r6 = D(r6, s0_2_1, 0x03FD1BBD, 0x13101CF8, 0xD0F62BDA, 0xED06FC15);
	r7 = D(r7, s0_2_1, 0x02F9090A, 0xFAFFE4E9, 0xFFF80002, 0x00FC02D8);
	r0 = D(r0, s0_2_2, 0x04060EF8, 0x070703F9, 0xFFFF0F0B, 0x05F8FEFC);
	r1 = D(r1, s0_2_2, 0xFF0401EA, 0x03F808FE, 0xFF192DE4, 0x0AF5ECFC);
	r2 = D(r2, s0_2_2, 0x05FCFA14, 0xFA001524, 0x0BF915E8, 0x080002ED);
	r3 = D(r3, s0_2_2, 0xFDF1FD13, 0xFE120F01, 0xFBFDFEFD, 0xFD040706);
	r4 = D(r4, s0_2_2, 0xFCFEFD03, 0x03FE02F1, 0x0201D6DD, 0xFF01FDFC);
	r5 = D(r5, s0_2_2, 0x19F1E918, 0xF10B1407, 0x33F2E0EB, 0x0E09F1F9);
	r6 = D(r6, s0_2_2, 0x05051E08, 0x09F61DEA, 0xE7E914F0, 0xEFFBF90A);
	r7 = D(r7, s0_2_2, 0x01FC0603, 0x04FCF919, 0xFE0408F2, 0x09F4FD0C);
	r0 = D(r0, s1_0_0, 0xF9FF06FE, 0x81338281, 0xF5071003, 0xFD0401F9);
	r1 = D(r1, s1_0_0, 0x01FDFFFF, 0xFFF40D10, 0x0E06F3EE, 0x0419F8F0);
	r2 = D(r2, s1_0_0, 0x16EDDEE6, 0xF3181B0A, 0xEE18010B, 0x0302FBED);
	r3 = D(r3, s1_0_0, 0x02FBF802, 0xFFFD02FC, 0x0504FC01, 0x051EFEC9);
	r4 = D(r4, s1_0_0, 0x00FFFF01, 0x00000002, 0xFB0BD5F1, 0xFEFDFF03);
	r5 = D(r5, s1_0_0, 0x08F8091B, 0xEFF8F6E7, 0xFCF2810F, 0xF0E6D5FC);
	r6 = D(r6, s1_0_0, 0x09060C06, 0x08F101F8, 0x0FFB08F4, 0x06FCFE07);
	r7 = D(r7, s1_0_0, 0xFF0304FF, 0xF10B07B5, 0x09FBFA01, 0x01F8F7FD);
	r0 = D(r0, s1_0_1, 0x06F80C06, 0x0430F8F7, 0xF50513FC, 0xF8FB09FE);
	r1 = D(r1, s1_0_1, 0x0508FDF9, 0x000C11F3, 0x060FE3EC, 0x0A33EEFD);
	r2 = D(r2, s1_0_1, 0x1000FAF9, 0xE310341B, 0xFFF8DD11, 0x03FC06FC);
	r3 = D(r3, s1_0_1, 0x080E02F4, 0xFF07F9FA, 0x0FFFF701, 0xF0E8FA10);
	r4 = D(r4, s1_0_1, 0x01FC01FF, 0xFE0000FF, 0x00010B11, 0x06FF0300);
	r5 = D(r5, s1_0_1, 0xF6E3DFF2, 0x03030AE3, 0x02F894F2, 0x07ECE5FC);
	r6 = D(r6, s1_0_1, 0x06FF1205, 0x100BDDE4, 0x0609160E, 0x000D0CFE);
	r7 = D(r7, s1_0_1, 0xFFFC0800, 0xD60D08FA, 0x0AFBEBF5, 0xF7F2F7FA);
	r0 = D(r0, s1_0_2, 0x05FC0D01, 0x0A06F509, 0xF21011FE, 0xFD0E04FC);
	r1 = D(r1, s1_0_2, 0xFFFE01FF, 0xF70908FB, 0xFA0B0F0D, 0xFEF01604);
	r2 = D(r2, s1_0_2, 0x08FCFA03, 0x01F01B02, 0xFCF5F7FF, 0x06F9FE06);
	r3 = D(r3, s1_0_2, 0x0505FDF9, 0xFFFFFB05, 0x04FDF9FE, 0x06FCF70E);
	r4 = D(r4, s1_0_2, 0x0201FF00, 0x01FFFF00, 0xF3F6E0FF, 0x0001FF00);
	r5 = D(r5, s1_0_2, 0x0B1FF5E0, 0xFBF303F8, 0xF007FF44, 0xFEF6050F);
	r6 = D(r6, s1_0_2, 0x0503FF00, 0x213BF22B, 0x0BE40D11, 0x07FD0301);
	r7 = D(r7, s1_0_2, 0x06EFFF04, 0xF00CFC02, 0x041400FE, 0x0603FC00);
	r0 = D(r0, s1_1_0, 0x03F207F9, 0xD9FFDD10, 0x00DE01FE, 0x04FEFAFA);
	r1 = D(r1, s1_1_0, 0xFF06FE00, 0x000BF7FD, 0xEFF8EBF2, 0xEEE1EA03);
	r2 = D(r2, s1_1_0, 0x1E26F9F8, 0xFA0911EA, 0xDE1518FF, 0x00E8ED01);
	r3 = D(r3, s1_1_0, 0xFC16F804, 0xF0040402, 0xFA010D03, 0xF2C0FCED);
	r4 = D(r4, s1_1_0, 0x040A0002, 0x09FD0100, 0x09F4F7FE, 0x03F5FF00);
	r5 = D(r5, s1_1_0, 0x030DE403, 0xD1ECF11C, 0x231BEDF8, 0xFE15ED0C);
	r6 = D(r6, s1_1_0, 0x080A150F, 0x081AF104, 0xF3010DE6, 0x0C0E0701);
	r7 = D(r7, s1_1_0, 0x03FFFE03, 0xCE1912FB, 0xFD1BECF7, 0x0B08D50E);
	r0 = D(r0, s1_1_1, 0x210F07F2, 0xFC030504, 0x02000EFA, 0xF90C0602);
	r1 = D(r1, s1_1_1, 0xF20A07FE, 0xDCEBF9F7, 0xDF18F0EF, 0xDBFE060B);
	r2 = D(r2, s1_1_1, 0x41D01FEC, 0xE50D2311, 0xFFDE0E04, 0x0902EFF1);
	r3 = D(r3, s1_1_1, 0xE0B3F209, 0xFFF9F200, 0xFC08F403, 0xF3FAF8FB);
	r4 = D(r4, s1_1_1, 0xF8F60202, 0x0C0C0500, 0xEC09E004, 0xFC1003FC);
	r5 = D(r5, s1_1_1, 0xB4FFE0EF, 0xFDD5ED1C, 0x81FB99E7, 0xE4F1E2F7);
	r6 = D(r6, s1_1_1, 0x07DF18FB, 0x91D1EA1A, 0x041A08F3, 0x00FC17FD);
	r7 = D(r7, s1_1_1, 0xF2E709FD, 0xBDE9FD08, 0xE113EFF1, 0xEFF2FDF7);
	r0 = D(r0, s1_1_2, 0x03F20EF4, 0x0200F709, 0xF11203F8, 0xF7200400);
	r1 = D(r1, s1_1_2, 0x06F8FDFD, 0x0205FCF6, 0x0BE51601, 0x16DEFB17);
	r2 = D(r2, s1_1_2, 0x111FD406, 0xE500F8FF, 0xFBF2EBF9, 0xFAE5FBFC);
	r3 = D(r3, s1_1_2, 0xF418020B, 0x08FEF905, 0x00000800, 0x13EB06F1);
	r4 = D(r4, s1_1_2, 0xFF050202, 0x01FD01FF, 0xEB0EEC0B, 0x0401FE00);
	r5 = D(r5, s1_1_2, 0xECFDFDF0, 0xF917050F, 0x00F5FFCF, 0x0AEE1BFE);
	r6 = D(r6, s1_1_2, 0x020F05FE, 0xF4EADD0A, 0xE019EBD5, 0xF70A02FF);
	r7 = D(r7, s1_1_2, 0xFA0DFD01, 0x10160B01, 0x12F710F9, 0x0816ED05);
	r0 = D(r0, s1_2_0, 0x14FAEF01, 0x09FE0501, 0xF9040905, 0x04F90203);
	r1 = D(r1, s1_2_0, 0xFEFF0001, 0x0301F8FE, 0x0B151D18, 0xF1FEFC09);
	r2 = D(r2, s1_2_0, 0x110CE505, 0x1107070B, 0xE5F81422, 0xF6F80502);
	r3 = D(r3, s1_2_0, 0xF6090807, 0x0301FC05, 0x02FCFFFF, 0x1004F106);
	r4 = D(r4, s1_2_0, 0xFF000001, 0xFAF604FD, 0x01F3DFF3, 0x00FDFFFE);
	r5 = D(r5, s1_2_0, 0xFE090117, 0xCA1828FD, 0xF41AFC0D, 0x0FE80201);
	r6 = D(r6, s1_2_0, 0x0D000F02, 0x09F8F11A, 0xFDE30FF7, 0x00060302);
	r7 = D(r7, s1_2_0, 0x06010104, 0xB60B07EF, 0xFA07FDFC, 0x0405FBFD);
	r0 = D(r0, s1_2_1, 0x2515EB05, 0x08FCFD00, 0xFA0B0BF9, 0xFD130B06);
	r1 = D(r1, s1_2_1, 0x0202FE01, 0x00F5E801, 0x14F81107, 0xFE2BFFFF);
	r2 = D(r2, s1_2_1, 0x16F4F208, 0xF8F30F0F, 0xE7EA060C, 0xEFFDE902);
	r3 = D(r3, s1_2_1, 0xFC0BFFF7, 0x0E02F8FD, 0xFDFC02FC, 0x0AD8F408);
	r4 = D(r4, s1_2_1, 0xF9F900FD, 0xEE080103, 0x001BE8FD, 0x0503FDFF);
	r5 = D(r5, s1_2_1, 0xEA0EEB01, 0x0C0D21F5, 0x05A72006, 0xF1E6E615);
	r6 = D(r6, s1_2_1, 0x18EB0406, 0x1117D8F3, 0x27DFFF0E, 0x02070500);
	r7 = D(r7, s1_2_1, 0xF6050F09, 0xDE120CF1, 0xF30E0109, 0x05ECEB07);
	r0 = D(r0, s1_2_2, 0x0D000405, 0xFE02F901, 0xF3050CFF, 0x05000305);
	r1 = D(r1, s1_2_2, 0xFFFF0300, 0xFEECFF01, 0xF5090C04, 0xFC30F503);
	r2 = D(r2, s1_2_2, 0xF1F9000E, 0xF3FF06FD, 0xF8F6FD09, 0x0CE5EB01);
	r3 = D(r3, s1_2_2, 0xFA06F7F8, 0x00F7FDFE, 0x01FE0201, 0xF8FDF904);
	r4 = D(r4, s1_2_2, 0x02020200, 0x03FBFF02, 0xFAE2EBFF, 0xFF02FE00);
	r5 = D(r5, s1_2_2, 0xF9F804FC, 0x00F11C0D, 0xE2EED42B, 0xFFE1E6FA);
	r6 = D(r6, s1_2_2, 0x05F6FF04, 0x02EDEF09, 0x0EF31A1D, 0x070201FF);
	r7 = D(r7, s1_2_2, 0xF5E40B02, 0x06EA03F4, 0x05FFFB05, 0x0BF3F204);
	s0_0_0 = G[4][xy.y+0][xy.x+0]; s0_0_1 = G[4][xy.y+0][xy.x+1];
	s0_0_2 = G[4][xy.y+0][xy.x+2]; s0_1_0 = G[4][xy.y+1][xy.x+0];
	s0_1_1 = G[4][xy.y+1][xy.x+1]; s0_1_2 = G[4][xy.y+1][xy.x+2];
	s0_2_0 = G[4][xy.y+2][xy.x+0]; s0_2_1 = G[4][xy.y+2][xy.x+1];
	s0_2_2 = G[4][xy.y+2][xy.x+2]; s1_0_0 = G[5][xy.y+0][xy.x+0];
	s1_0_1 = G[5][xy.y+0][xy.x+1]; s1_0_2 = G[5][xy.y+0][xy.x+2];
	s1_1_0 = G[5][xy.y+1][xy.x+0]; s1_1_1 = G[5][xy.y+1][xy.x+1];
	s1_1_2 = G[5][xy.y+1][xy.x+2]; s1_2_0 = G[5][xy.y+2][xy.x+0];
	s1_2_1 = G[5][xy.y+2][xy.x+1]; s1_2_2 = G[5][xy.y+2][xy.x+2];
	r0 = D(r0, s0_0_0, 0x05FDFA05, 0x81818181, 0x1100F9FF, 0x05FF0007);
	r1 = D(r1, s0_0_0, 0x01FF0300, 0xEDF701FE, 0x090B02E5, 0xF7FF010C);
	r2 = D(r2, s0_0_0, 0xEFF713FE, 0x0A01EBF4, 0x0C0AE7E9, 0x02FF05FF);
	r3 = D(r3, s0_0_0, 0xFD0507F5, 0x05020305, 0xFA0E02FB, 0x1306EBE5);
	r4 = D(r4, s0_0_0, 0x010200FE, 0x01FF0303, 0xFAFFFF16, 0x01FC0903);
	r5 = D(r5, s0_0_0, 0xFCFA08F8, 0x03FC11FE, 0x0CF3FF06, 0xED04FDEE);
	r6 = D(r6, s0_0_0, 0xFBFF0BF8, 0x1BFCE588, 0x27F20B0C, 0xF20705FE);
	r7 = D(r7, s0_0_0, 0x0605FEFB, 0xFC1514C9, 0xFAF7F8EC, 0xF904FEF1);
	r0 = D(r0, s0_0_1, 0xFB01F0F7, 0xE9E205D9, 0x0E03F007, 0x03FDF701);
	r1 = D(r1, s0_0_1, 0xFF061800, 0x0707F611, 0x0811E709, 0xDF0703FD);
	r2 = D(r2, s0_0_1, 0xEA0C08E0, 0x01DCF2E1, 0x07CC0BEB, 0xFEFCEFF5);
	r3 = D(r3, s0_0_1, 0x03FD0DFF, 0x010501FB, 0x05F922FD, 0x08E5DBE8);
	r4 = D(r4, s0_0_1, 0x0500FAFE, 0xFAFEF703, 0xF1F81312, 0x01FCFFFC);
	r5 = D(r5, s0_0_1, 0x0BF9DE0F, 0x04F0F6F7, 0x0BDD15D8, 0xFC06F9F6);
	r6 = D(r6, s0_0_1, 0x0BF807FA, 0x0D03D005, 0xD3E923F2, 0x061116FD);
	r7 = D(r7, s0_0_1, 0x01F6FDFB, 0xF8D9EFFF, 0x090BF400, 0x04EAF5EB);
	r0 = D(r0, s0_0_2, 0x01F50201, 0xFA020208, 0xFF06FFF1, 0xF5FEFAFA);
	r1 = D(r1, s0_0_2, 0x0401FDFC, 0xFD0BFD00, 0x0B02FA07, 0x03FA01FA);
	r2 = D(r2, s0_0_2, 0xF8E805FD, 0x11F704E8, 0x150609E9, 0xFFF90500);
	r3 = D(r3, s0_0_2, 0xF8030AF8, 0xFD000300, 0x020201FE, 0x02EBF3FB);
	r4 = D(r4, s0_0_2, 0x01FE02FF, 0xFD0103FF, 0xFE020103, 0x01FDFB00);
	r5 = D(r5, s0_0_2, 0xF7F90AE9, 0x09FB00FF, 0x1CA40FC3, 0xFCFF04F8);
	r6 = D(r6, s0_0_2, 0x030202FC, 0x00FC12DC, 0xFAF1100C, 0x08050B04);
	r7 = D(r7, s0_0_2, 0x01FBFCF8, 0x010E0200, 0x06FE00F0, 0xF50305FE);
	r0 = D(r0, s0_1_0, 0xFDFD100C, 0xFAE9552C, 0x0A101605, 0x0D0B07FC);
	r1 = D(r1, s0_1_0, 0x0002FAFD, 0x0E0006F6, 0x0BEAF00D, 0x0420F70D);
	r2 = D(r2, s0_1_0, 0xF9CA10FD, 0x01151716, 0x1A1E03ED, 0x070F0D02);
	r3 = D(r3, s0_1_0, 0x02FCE8FB, 0x03FFFCF6, 0x03FFE8F6, 0x040A0BED);
	r4 = D(r4, s0_1_0, 0xFE010303, 0x01FE16FF, 0xF502EFF3, 0x00F804FD);
	r5 = D(r5, s0_1_0, 0xDBB411E3, 0x2A0DB310, 0xBBE3FA01, 0xE8E8F708);
	r6 = D(r6, s0_1_0, 0x0BF5DC02, 0x17D52808, 0xEF0503E9, 0xFAFC0601);
	r7 = D(r7, s0_1_0, 0x0B05FBF8, 0xF61CEBC6, 0x1200F909, 0xF8F8F80A);
	r0 = D(r0, s0_1_1, 0xE2F6DAF5, 0x05FB0B04, 0x04FFFCFA, 0xF0F1EBFD);
	r1 = D(r1, s0_1_1, 0xFB0F4105, 0x04EF16E9, 0xDF02F8EA, 0x04E707F2);
	r2 = D(r2, s0_1_1, 0x0E05C009, 0x15CA03F6, 0x05E100DC, 0xE6F415EB);
	r3 = D(r3, s0_1_1, 0x140AE606, 0xFEF7FEE8, 0x070C040F, 0x090E0607);
	r4 = D(r4, s0_1_1, 0x0BFD0CFF, 0xF80601F1, 0x01E812EA, 0xFC0002FB);
	r5 = D(r5, s0_1_1, 0x00D413EF, 0x15FFDC02, 0xE9EF0AE3, 0xF3071EEB);
	r6 = D(r6, s0_1_1, 0x05FEDF08, 0xE9FA0504, 0xE005C602, 0x092213EE);
	r7 = D(r7, s0_1_1, 0xFAFD08FB, 0x09DDF40B, 0xFAF817E0, 0xECD40DEC);
	r0 = D(r0, s0_1_2, 0xFCF70D01, 0xF900FF03, 0x04000DFF, 0xFDF7FAFD);
	r1 = D(r1, s0_1_2, 0xFF010603, 0x010C12F1, 0x0EF8F200, 0xFFEF0808);
	r2 = D(r2, s0_1_2, 0x08ECF4FE, 0x14052208, 0x0EFF03FB, 0xF9FB000C);
	r3 = D(r3, s0_1_2, 0xFA070504, 0xFFF7FCFA, 0x020003FB, 0x060A0509);
	r4 = D(r4, s0_1_2, 0x00FC0100, 0x00FD02FF, 0xF8F8F3FE, 0x01FFFAFF);
	r5 = D(r5, s0_1_2, 0xFC0B0A09, 0x0803EE01, 0xF2EA1E02, 0x0307F800);
	r6 = D(r6, s0_1_2, 0xFC040CF4, 0x0A1000BA, 0x020A22FE, 0xFF000FFC);
	r7 = D(r7, s0_1_2, 0xFEFA18F9, 0x01070AFB, 0x070803F5, 0xF00203F6);
	r0 = D(r0, s0_2_0, 0x0A00FD04, 0x05F8FEF0, 0xFFF603F5, 0x02FDFDFB);
	r1 = D(r1, s0_2_0, 0x01FE0303, 0x00070FFD, 0x08F309F2, 0x05EAF90D);
	r2 = D(r2, s0_2_0, 0xFF0AFF09, 0x0B040D02, 0x0BE326D0, 0xFDF9FEF9);
	r3 = D(r3, s0_2_0, 0xFB07FA07, 0x04E70004, 0xFB02FAFF, 0x1DE1F302);
	r4 = D(r4, s0_2_0, 0x000200FF, 0xFC00F802, 0xE909FD02, 0xFF000202);
	r5 = D(r5, s0_2_0, 0x01E402FA, 0x12C007F8, 0x05FC2200, 0x1BF30B09);
	r6 = D(r6, s0_2_0, 0x0EEAFCF6, 0x29E908B3, 0xFDEFF709, 0xFB0600FF);
	r7 = D(r7, s0_2_0, 0x03FCFCFD, 0xF402111C, 0xF60709FA, 0x080A04FD);
	r0 = D(r0, s0_2_1, 0xFE05020B, 0xFA03F3F1, 0x03FAFFFB, 0xFBF9060D);
	r1 = D(r1, s0_2_1, 0xFFFB0401, 0x01FB0B0C, 0x17FA05FE, 0xFD010008);
	r2 = D(r2, s0_2_1, 0x11F4F30C, 0x10FE0BF9, 0x0CF411F1, 0xED0B170D);
	r3 = D(r3, s0_2_1, 0xFCFCFAF6, 0x0C03E70E, 0x02FC0307, 0x101101ED);
	r4 = D(r4, s0_2_1, 0x010002FA, 0x060206FF, 0x0B0FFC0E, 0xFD02FEFF);
	r5 = D(r5, s0_2_1, 0x08FDEE13, 0x09F81EE0, 0x17F50704, 0xFC0A12FA);
	r6 = D(r6, s0_2_1, 0x12FDFAFD, 0xFC0F0E14, 0xF1E312F6, 0x0AFAFFF7);
	r7 = D(r7, s0_2_1, 0x0205040C, 0xF6100B05, 0x060101FC, 0x03FC0801);
	r0 = D(r0, s0_2_2, 0x08F7F906, 0xFE0201FE, 0x03F90DEF, 0xFD030101);
	r1 = D(r1, s0_2_2, 0x0200FF01, 0x02FC0304, 0x07EE1100, 0x0011FB02);
	r2 = D(r2, s0_2_2, 0x04FCF30D, 0x060A0CF7, 0x030A0FDE, 0xFCFF02FA);
	r3 = D(r3, s0_2_2, 0xF602120C, 0x0BFEFF01, 0x0001FE05, 0xFD0DF704);
	r4 = D(r4, s0_2_2, 0x00FE0100, 0x0005F902, 0x030DF310, 0x00010001);
	r5 = D(r5, s0_2_2, 0xF8FE1106, 0xFCFF0307, 0x00E7F132, 0xFBEF04FA);
	r6 = D(r6, s0_2_2, 0x020304FE, 0x010715E7, 0xFE04FFF7, 0xFD040107);
	r7 = D(r7, s0_2_2, 0xFE010CFB, 0x05FE02FD, 0x02FEFF04, 0xFEF711FE);
	r0 = D(r0, s1_0_0, 0xF3FE1201, 0x818186B4, 0x01F804F9, 0x04FC04F9);
	r1 = D(r1, s1_0_0, 0xFF0201FB, 0xEF08F103, 0x13EDFB01, 0x05EFEC02);
	r2 = D(r2, s1_0_0, 0xF1F9DCE3, 0xFBFBFFFA, 0xF7F31400, 0xFDF912FB);
	r3 = D(r3, s1_0_0, 0xFEFF030B, 0x0900FB08, 0x07FD040B, 0xF9D444F5);
	r4 = D(r4, s1_0_0, 0xFFFE0402, 0xFD0402FB, 0x07FA04F3, 0xFE0501FD);
	r5 = D(r5, s1_0_0, 0xF40DE0EB, 0x00F50E0C, 0x0FF7DBBF, 0xEEF112F5);
	r6 = D(r6, s1_0_0, 0x0EFB0208, 0x11B6F424, 0x0FE5F50C, 0x0509020B);
	r7 = D(r7, s1_0_0, 0xFDF70C00, 0xFAFD06F3, 0x0404F905, 0xEEF712F6);
	r0 = D(r0, s1_0_1, 0xF009F506, 0x1D061104, 0xFAE00901, 0xFD00F600);
	r1 = D(r1, s1_0_1, 0xFD02FEEF, 0xF1CD1B05, 0x15E40C19, 0x0EED0804);
	r2 = D(r2, s1_0_1, 0x0FD72106, 0xDAE8ED02, 0xEA26E515, 0x03F80E02);
	r3 = D(r3, s1_0_1, 0x02F5080E, 0xFFF6F811, 0x0300F904, 0x020FE9EB);
	r4 = D(r4, s1_0_1, 0x02040503, 0xFF06FC03, 0x0C06EAE2, 0x010E0703);
	r5 = D(r5, s1_0_1, 0x14FB19F8, 0x05F8F811, 0xF438E002, 0xFF000DFE);
	r6 = D(r6, s1_0_1, 0x03FB0A0B, 0x49B9D0FD, 0xCAD107D6, 0xF8F41203);
	r7 = D(r7, s1_0_1, 0x00040802, 0x042BF617, 0x09F81405, 0x080E1603);
	r0 = D(r0, s1_0_2, 0xF30C0004, 0xFFFCF0FF, 0x000AECFC, 0x0205FBFF);
	r1 = D(r1, s1_0_2, 0xFFFF00FE, 0x0BFE0F02, 0xEFFB0100, 0x05F51808);
	r2 = D(r2, s1_0_2, 0x01F81003, 0xD7F3F904, 0xF5F1F8FC, 0xFD13EEF6);
	r3 = D(r3, s1_0_2, 0x05F70504, 0x02FE0804, 0x01FB03FE, 0x0705DAEE);
	r4 = D(r4, s1_0_2, 0x00010000, 0x01FEFB01, 0x1002F10C, 0x0000FBFD);
	r5 = D(r5, s1_0_2, 0x0809F205, 0x0AF71005, 0xF50AE718, 0x0FF604F9);
	r6 = D(r6, s1_0_2, 0x0BFDF706, 0xFACCF9FE, 0x17E6FD00, 0xFD0BFC09);
	r7 = D(r7, s1_0_2, 0x0508FA01, 0xF0FDE3F8, 0xFC0700FC, 0xF9FD0808);
	r0 = D(r0, s1_1_0, 0xF80515F8, 0x01F608F8, 0xFC0405F8, 0xFEFF15ED);
	r1 = D(r1, s1_1_0, 0xFE0501F4, 0xFB08120B, 0xF702F6FA, 0xF60208FA);
	r2 = D(r2, s1_1_0, 0x03E8EBC7, 0xF7E9270B, 0xD815E9DF, 0xF7000DF9);
	r3 = D(r3, s1_1_0, 0x01020F05, 0xFE050FF5, 0xFC040107, 0x16F7BEDC);
	r4 = D(r4, s1_1_0, 0xFC0201F9, 0xFAF7F9F4, 0xFC01F0F9, 0x000304FC);
	r5 = D(r5, s1_1_0, 0xF8F6E60A, 0x01BB2BE3, 0x0EF2AF29, 0xFEF11BF3);
	r6 = D(r6, s1_1_0, 0x00FBEFDE, 0x0C08FC25, 0x0EB4FA25, 0x0905F509);
	r7 = D(r7, s1_1_0, 0x00F7FF04, 0x12EBFEDD, 0x0100FC00, 0xFA021903);
	r0 = D(r0, s1_1_1, 0x11E4E9EB, 0x02ECFA24, 0xF8FF0A1D, 0x04F1FA3F);
	r1 = D(r1, s1_1_1, 0x0504FE0B, 0x191DF710, 0x2414F0FF, 0x17DBF0FB);
	r2 = D(r2, s1_1_1, 0xDADD8FFF, 0xCA3CCAD5, 0xC9DA11F3, 0xF7DF14FD);
	r3 = D(r3, s1_1_1, 0xEDFB20F1, 0x250A0202, 0xF11403EA, 0x2CFBBBE0);
	r4 = D(r4, s1_1_1, 0xF4FE0C1C, 0x08C415FC, 0xFCF30C10, 0xFDFFF51E);
	r5 = D(r5, s1_1_1, 0x14BF330C, 0x0DB709FC, 0x0B24F2F3, 0xFF090802);
	r6 = D(r6, s1_1_1, 0xEBDB0E1F, 0x20F803EF, 0xF507F1CF, 0xFB120AFB);
	r7 = D(r7, s1_1_1, 0x100DF017, 0x36D52125, 0x1A03DBFE, 0x0D050C29);
	r0 = D(r0, s1_1_2, 0xFDF11406, 0xF807F504, 0xFAF6FBFA, 0xFDFC05FE);
	r1 = D(r1, s1_1_2, 0xFDFA0BFD, 0x0CFB0402, 0xD7033110, 0xF0FBFF0F);
	r2 = D(r2, s1_1_2, 0xFB07130C, 0xD900F9F5, 0xF30C0309, 0x06FF0C0A);
	r3 = D(r3, s1_1_2, 0x06F8E003, 0xFA0A010C, 0x03F705FF, 0xDFFD23ED);
	r4 = D(r4, s1_1_2, 0xFB02F4FD, 0x03FA0601, 0x1918DAE9, 0xFD0408FF);
	r5 = D(r5, s1_1_2, 0xF215D50B, 0xECF700F8, 0x14E4B507, 0xF2F51713);
	r6 = D(r6, s1_1_2, 0x0BFE0606, 0x00F50A2B, 0x340CC102, 0x040800F6);
	r7 = D(r7, s1_1_2, 0x16130900, 0xE5FEECE7, 0xEBFE11FF, 0x0C0B00FB);
	r0 = D(r0, s1_2_0, 0x0604FAF3, 0x03F606F8, 0x0003F809, 0xFB04F9FE);
	r1 = D(r1, s1_2_0, 0xFF0101FE, 0x04FB11FE, 0xF60604F5, 0xFA04EB01);
	r2 = D(r2, s1_2_0, 0x0DEF1A04, 0xF6FB000A, 0xD7FEF2FD, 0xF909FDFE);
	r3 = D(r3, s1_2_0, 0x000EF804, 0xF50BFED5, 0xFE040304, 0x00EF21FE);
	r4 = D(r4, s1_2_0, 0x0101FB04, 0x01FE02FE, 0x09F3E105, 0x02FE02FD);
	r5 = D(r5, s1_2_0, 0xF414081D, 0xDD27F39A, 0xF7F6EB1C, 0x0BFB1F00);
	r6 = D(r6, s1_2_0, 0x00FD0F03, 0xEADC19EC, 0x22DB080E, 0xFF050807);
	r7 = D(r7, s1_2_0, 0xF8FF06F2, 0xF10B0202, 0x04000AFD, 0xFFFE0BF3);
	r0 = D(r0, s1_2_1, 0x040105FF, 0x00FBF5FF, 0x02F6F910, 0xFE03FE12);
	r1 = D(r1, s1_2_1, 0x02FFFFF3, 0x12F7F7FF, 0xD60515CF, 0x0711EE09);
	r2 = D(r2, s1_2_1, 0xFDF20B07, 0xFAF21713, 0xE3100426, 0x07F90FFA);
	r3 = D(r3, s1_2_1, 0x0905F809, 0xE811FCF2, 0x020500FE, 0x0DEBF500);
	r4 = D(r4, s1_2_1, 0x02FC0510, 0x03FAF9FD, 0x0FF606F5, 0x020000F7);
	r5 = D(r5, s1_2_1, 0x17E1EA1D, 0xF428DDD2, 0x07C409E6, 0xDE0B1410);
	r6 = D(r6, s1_2_1, 0x02FEE6F1, 0xE10DF4F4, 0x0F15ECF2, 0xF80600FF);
	r7 = D(r7, s1_2_1, 0x0A070600, 0xF3091F09, 0x060AF5F1, 0xF0FC0FFE);
	r0 = D(r0, s1_2_2, 0xFE04F511, 0xFA06FEFC, 0xF10503FE, 0x00FE0304);
	r1 = D(r1, s1_2_2, 0xFF00FB04, 0x03F7F20B, 0xD007FFF4, 0x02020B11);
	r2 = D(r2, s1_2_2, 0xFFFAF9FB, 0xF2E90D00, 0xF0F60404, 0xFFF51205);
	r3 = D(r3, s1_2_2, 0x02060C03, 0xF8FEF902, 0x03FFF8FE, 0x06FDEDF9);
	r4 = D(r4, s1_2_2, 0xFF010201, 0xFD01FE04, 0x18F6000F, 0x03000002);
	r5 = D(r5, s1_2_2, 0xFA07DEF9, 0xEAF40DED, 0x09E29B20, 0xFEFCFD02);
	r6 = D(r6, s1_2_2, 0xFA0400FF, 0xBF050BFE, 0x19F0F72A, 0xFE0702FF);
	r7 = D(r7, s1_2_2, 0xFBFEF900, 0xFB06F5FB, 0xF8FEFC0C, 0x03021707);
	s0_0_0 = G[6][xy.y+0][xy.x+0]; s0_0_1 = G[6][xy.y+0][xy.x+1];
	s0_0_2 = G[6][xy.y+0][xy.x+2]; s0_1_0 = G[6][xy.y+1][xy.x+0];
	s0_1_1 = G[6][xy.y+1][xy.x+1]; s0_1_2 = G[6][xy.y+1][xy.x+2];
	s0_2_0 = G[6][xy.y+2][xy.x+0]; s0_2_1 = G[6][xy.y+2][xy.x+1];
	s0_2_2 = G[6][xy.y+2][xy.x+2]; s1_0_0 = G[7][xy.y+0][xy.x+0];
	s1_0_1 = G[7][xy.y+0][xy.x+1]; s1_0_2 = G[7][xy.y+0][xy.x+2];
	s1_1_0 = G[7][xy.y+1][xy.x+0]; s1_1_1 = G[7][xy.y+1][xy.x+1];
	s1_1_2 = G[7][xy.y+1][xy.x+2]; s1_2_0 = G[7][xy.y+2][xy.x+0];
	s1_2_1 = G[7][xy.y+2][xy.x+1]; s1_2_2 = G[7][xy.y+2][xy.x+2];
	r0 = D(r0, s0_0_0, 0x0006FFFD, 0x814B9081, 0x00F5F207, 0xF90A0205);
	r1 = D(r1, s0_0_0, 0x02FFFF00, 0xEBE504FE, 0x04FD0A03, 0xFB150600);
	r2 = D(r2, s0_0_0, 0xF00509EB, 0xEEF1EA00, 0xEB05F6FA, 0xFA0B0203);
	r3 = D(r3, s0_0_0, 0xF6FD08FB, 0x02FF0100, 0x040405FF, 0xE917070E);
	r4 = D(r4, s0_0_0, 0x010200FF, 0xFF0201FD, 0xF5FA04F4, 0x0405FE00);
	r5 = D(r5, s0_0_0, 0xDFF10500, 0x082B0704, 0xB2572AF5, 0xF7E1F401);
	r6 = D(r6, s0_0_0, 0x02FE000A, 0xD839090D, 0x0A0B02EB, 0xFEF402FE);
	r7 = D(r7, s0_0_0, 0xFF04FF02, 0x0A03E610, 0xF8F60704, 0xFCFFF902);
	r0 = D(r0, s0_0_1, 0xFD13FA00, 0x07F8FB05, 0x03FFFB12, 0xFDF803F6);
	r1 = D(r1, s0_0_1, 0xFC00FFFF, 0xFBE1FFF6, 0x001805FE, 0xF9F3FDFE);
	r2 = D(r2, s0_0_1, 0xFBEFFA00, 0xF60FFF06, 0xFE010EF4, 0xF7FDFFFE);
	r3 = D(r3, s0_0_1, 0x00FC08F9, 0x02F808FE, 0x00040DEB, 0xEF060AE9);
	r4 = D(r4, s0_0_1, 0x02FD0004, 0xFC1000FF, 0xF8190802, 0x0009FD06);
	r5 = D(r5, s0_0_1, 0x0407ED10, 0xFDF30019, 0x0608E7FC, 0xFAF1FF08);
	r6 = D(r6, s0_0_1, 0x02080BFA, 0x031712F4, 0xF0F218E1, 0xFF04FD00);
	r7 = D(r7, s0_0_1, 0xFA000000, 0x031DF722, 0xFFF601FF, 0xF8100708);
	r0 = D(r0, s0_0_2, 0xFB0FFE07, 0xFD0104FF, 0xFCFF07F3, 0xFCFF0004);
	r1 = D(r1, s0_0_2, 0x020400FB, 0xF3EBFDF6, 0xF5140BF1, 0xEE07F612);
	r2 = D(r2, s0_0_2, 0x010FFDFE, 0xE1110203, 0xF90202F0, 0xFA0F0502);
	r3 = D(r3, s0_0_2, 0xFAF303F5, 0x00FEFDFD, 0x0202FDFB, 0xEF090A06);
	r4 = D(r4, s0_0_2, 0x02FE0100, 0xFB0200FF, 0xFCE7FD10, 0x03030008);
	r5 = D(r5, s0_0_2, 0xDE190303, 0x091D0600, 0xB2031AE8, 0xFBF4FE02);
	r6 = D(r6, s0_0_2, 0xFDFD08F8, 0xF2020CF2, 0xF70A10DA, 0x01FC08F6);
	r7 = D(r7, s0_0_2, 0xFD020605, 0x05FD000D, 0xF404FA01, 0xF4F701F2);
	r0 = D(r0, s0_1_0, 0xFE03FB10, 0xFAF9CAFC, 0x0DF7FFFF, 0xFDFA02FD);
	r1 = D(r1, s0_1_0, 0xFEF8FEFF, 0x020610FB, 0xFBF2FA00, 0xF312F30C);
	r2 = D(r2, s0_1_0, 0xFA18F4F0, 0x0801F4F7, 0xE1CCE2FE, 0xFAF7FB06);
	r3 = D(r3, s0_1_0, 0xF2FA0202, 0x0015FCFE, 0xFFF20FF8, 0xFC002204);
	r4 = D(r4, s0_1_0, 0x0202FC01, 0x00FE0B00, 0xF1040913, 0x0106FE08);
	r5 = D(r5, s0_1_0, 0xED03E507, 0x010CD9EC, 0xFD0ECD24, 0xFF02090F);
	r6 = D(r6, s0_1_0, 0xF6FD09FC, 0xFCF0B7F5, 0x0DF9F5F8, 0xFBF8F802);
	r7 = D(r7, s0_1_0, 0x030307FD, 0x0215EAF4, 0xFD02F603, 0xFE0B010B);
	r0 = D(r0, s0_1_1, 0x02F8FCEF, 0x010A15F9, 0x09040EE2, 0x01FFF3FB);
	r1 = D(r1, s0_1_1, 0xFFF7F12C, 0x04092010, 0x0903E630, 0xF12DF60E);
	r2 = D(r2, s0_1_1, 0x000986BE, 0xE40AFCE2, 0xEEE9DF14, 0xF817F002);
	r3 = D(r3, s0_1_1, 0x01000D1C, 0x051913FE, 0x01FB0A30, 0xF92BF3F0);
	r4 = D(r4, s0_1_1, 0x0318F911, 0xFFF805D1, 0xF403F0F1, 0x0401FBE4);
	r5 = D(r5, s0_1_1, 0x05CEFC04, 0xF81018EF, 0x2819E1FA, 0x0ACFFE0B);
	r6 = D(r6, s0_1_1, 0x00E807E6, 0x06F3F315, 0xFC0E2B36, 0x04D8000D);
	r7 = D(r7, s0_1_1, 0xFC1F05F1, 0x03F8D0C9, 0x08EF0123, 0x0303F7D1);
	r0 = D(r0, s0_1_2, 0xFAF3F2F1, 0xF7030208, 0xFFFF04F6, 0xFC050725);
	r1 = D(r1, s0_1_2, 0xFEF7F5F4, 0xFEF908F2, 0xF008060E, 0xF10EE9F3);
	r2 = D(r2, s0_1_2, 0x07F5E11C, 0xF5FA1CDE, 0xFDF71CF4, 0x03DFED0B);
	r3 = D(r3, s0_1_2, 0xEC0701FD, 0xFE0D05FC, 0xFFF8FEFA, 0xEAEEF9FC);
	r4 = D(r4, s0_1_2, 0x02020111, 0x02FF03F6, 0xF9FF0E1F, 0xFF01F913);
	r5 = D(r5, s0_1_2, 0xE81AF1F3, 0xEE06FE00, 0xF6071BE1, 0xECCADE0B);
	r6 = D(r6, s0_1_2, 0x000A0CEF, 0xF22608EF, 0x0B150BF1, 0x02EEF7EF);
	r7 = D(r7, s0_1_2, 0x02140AF2, 0xFA080EFD, 0xF6F1EE09, 0xFB110D0E);
	r0 = D(r0, s0_2_0, 0xF50801F5, 0x04FB0CFA, 0x02FCFEFE, 0xF80303FA);
	r1 = D(r1, s0_2_0, 0x02FEF802, 0xFD01FFFE, 0xEFEBFF0E, 0xF102E8FD);
	r2 = D(r2, s0_2_0, 0xF901ECFF, 0x110B0905, 0xE4F006F2, 0xECFA07F4);
	r3 = D(r3, s0_2_0, 0xFE0500F9, 0xEFFEFEFB, 0xFC0207FE, 0xF800E906);
	r4 = D(r4, s0_2_0, 0x01FE05FD, 0xFF050803, 0xF2040EFB, 0x01FD0004);
	r5 = D(r5, s0_2_0, 0xE630E9F9, 0xE7A8DDFB, 0xAAF0F2FB, 0xF4FFFCF9);
	r6 = D(r6, s0_2_0, 0x03FDF111, 0xD1F5E5FB, 0x0629DCF9, 0x03FEF602);
	r7 = D(r7, s0_2_0, 0xFAFEFC04, 0x08E5150B, 0xF6F808FE, 0xF8F7FFFE);
	r0 = D(r0, s0_2_1, 0x0C1CD722, 0xFEFE091D, 0x02F50A0A, 0xF8FA0709);
	r1 = D(r1, s0_2_1, 0x020101FA, 0x0524ECD8, 0xECDFBBFE, 0xF5150DE6);
	r2 = D(r2, s0_2_1, 0xFC12F30F, 0x0AEEF502, 0x08E7141E, 0x07E91013);
	r3 = D(r3, s0_2_1, 0x02F7F9EA, 0xF9FBF6FD, 0x05FCF1ED, 0xFFF6FEF7);
	r4 = D(r4, s0_2_1, 0xFFFB1D1B, 0x010A354A, 0xFFF6FF09, 0x0100FB02);
	r5 = D(r5, s0_2_1, 0x0EE60F1A, 0x03113914, 0x00F4C80F, 0xE5E2D9EC);
	r6 = D(r6, s0_2_1, 0xFFFFF919, 0xF0FDDB11, 0xCEADE711, 0xFBFFE6F8);
	r7 = D(r7, s0_2_1, 0xFCFEEF07, 0x00FE0408, 0xF80705EC, 0xF60704EC);
	r0 = D(r0, s0_2_2, 0xF908F9F2, 0xFFFAFC03, 0xFD0104F1, 0xFCFEED04);
	r1 = D(r1, s0_2_2, 0x00FF07FA, 0x011108FB, 0xD9FD0A00, 0x050A0907);
	r2 = D(r2, s0_2_2, 0x0105FB07, 0x08050AED, 0xF0F606E9, 0xF506F4F0);
	r3 = D(r3, s0_2_2, 0x00F4F3F4, 0xF909FDF5, 0xFB02F7F9, 0xF90312F3);
	r4 = D(r4, s0_2_2, 0x05020305, 0x0101000C, 0xF6050807, 0x02000105);
	r5 = D(r5, s0_2_2, 0xF105F3FF, 0xF5030216, 0xAC123616, 0x02EC07F8);
	r6 = D(r6, s0_2_2, 0xFA00FEFE, 0xE515F3FF, 0x04C9CDFE, 0x02F5FBF5);
	r7 = D(r7, s0_2_2, 0xF601E7CE, 0x06FFFA0A, 0xF404FBFF, 0xFBFAF0E9);
	r0 = D(r0, s1_0_0, 0x060600FC, 0x81818181, 0x02F807F7, 0x06F60003);
	r1 = D(r1, s1_0_0, 0x03F80200, 0x04110301, 0xFC00F50A, 0x0E00030D);
	r2 = D(r2, s1_0_0, 0x0509E409, 0x02EBFFE4, 0x0D0301D6, 0xFFFAFEF4);
	r3 = D(r3, s1_0_0, 0xFD00FF06, 0xFD01FF07, 0xFCF8FD02, 0x05FFF108);
	r4 = D(r4, s1_0_0, 0x01020000, 0x0003FCFE, 0xFCFBF913, 0xFD08FFFB);
	r5 = D(r5, s1_0_0, 0x09F3FF11, 0xECFBFD01, 0x29F00DFC, 0x17140A07);
	r6 = D(r6, s1_0_0, 0x05F606FA, 0xFAF927F1, 0xEC0803F9, 0x0301FE02);
	r7 = D(r7, s1_0_0, 0x02FA01FE, 0xEAD5F71A, 0xF8FD0008, 0x010F00FD);
	r0 = D(r0, s1_0_1, 0x081D0BFC, 0xFCECB2F3, 0xFE1104F2, 0xFE1B02FF);
	r1 = D(r1, s1_0_1, 0xFEF40304, 0x1AFAFA03, 0xEFDAF7F6, 0x02E6E611);
	r2 = D(r2, s1_0_1, 0x07E5010B, 0x080A07E9, 0xF60FFBF2, 0xFE050005);
	r3 = D(r3, s1_0_1, 0x09F5F805, 0x04E9F802, 0xFDF0F301, 0xF517FEF9);
	r4 = D(r4, s1_0_1, 0x0115FD00, 0xFC0C02FF, 0xE7090905, 0xFE42FDFD);
	r5 = D(r5, s1_0_1, 0x060B0A00, 0x0F01E6F4, 0xE1070FFE, 0x04EC0300);
	r6 = D(r6, s1_0_1, 0xFFFEF900, 0x07DEF000, 0x242C9213, 0x01C904F8);
	r7 = D(r7, s1_0_1, 0xFB0904FC, 0xC9F8DEFD, 0x0DE0FF05, 0xF3FD00FC);
	r0 = D(r0, s1_0_2, 0x07FFFCFE, 0x010604F9, 0xFE0301FC, 0xFDF9F701);
	r1 = D(r1, s1_0_2, 0xFC0B0100, 0x15F007FB, 0xF80410FB, 0x07E5FA03);
	r2 = D(r2, s1_0_2, 0x00F10406, 0x020D03E9, 0x050F12F9, 0x020E03FF);
	r3 = D(r3, s1_0_2, 0x0003F606, 0x05F002FB, 0xFA0100FC, 0xFE11F805);
	r4 = D(r4, s1_0_2, 0xFEFBFB02, 0x04FEFF00, 0xF7F0ED06, 0xFF03FDFF);
	r5 = D(r5, s1_0_2, 0xFFF40706, 0xEDF10FF5, 0xFFB60DF1, 0x05030306);
	r6 = D(r6, s1_0_2, 0xFFFFFCFC, 0xFCE40C09, 0xEEFFBE0C, 0xF5EFF404);
	r7 = D(r7, s1_0_2, 0x02F00201, 0x04FBE801, 0xFB0EF901, 0x07FA0400);
	r0 = D(r0, s1_1_0, 0x02EA02FC, 0xD41104F2, 0xFE0000F5, 0xFFF70100);
	r1 = D(r1, s1_1_0, 0x01FF01FF, 0x12F6FBFE, 0xFD06F0FE, 0xFE12FBF5);
	r2 = D(r2, s1_1_0, 0x01DDFA0A, 0xF9F207DD, 0x110A03D5, 0x06FD02FF);
	r3 = D(r3, s1_1_0, 0x03FEFDFC, 0x00FF0501, 0x02FEFF03, 0x0B1DF5FC);
	r4 = D(r4, s1_1_0, 0x01FA00FF, 0x03F704FE, 0x060EFD09, 0xFFFF01FF);
	r5 = D(r5, s1_1_0, 0xFAEA0C0E, 0xC0CE0AE6, 0x03C9F722, 0x1FE3F80A);
	r6 = D(r6, s1_1_0, 0x06CE0E02, 0x02DAFA16, 0xFAEAF20D, 0x06FE02FF);
	r7 = D(r7, s1_1_0, 0x06FD0309, 0xDC061106, 0x0402FB03, 0x0DEB0110);
	r0 = D(r0, s1_1_1, 0x0BF6FC02, 0xD82120ED, 0x00F003F5, 0x1402010B);
	r1 = D(r1, s1_1_1, 0xF9180205, 0xEEFDEFF9, 0xD71811F7, 0xDB070900);
	r2 = D(r2, s1_1_1, 0x1BEFF018, 0x16FA09F9, 0xF1E722F8, 0xF6E9FC09);
	r3 = D(r3, s1_1_1, 0xEBD7D7F8, 0xE037F600, 0xF7EBF103, 0xBC13FBFD);
	r4 = D(r4, s1_1_1, 0xF50002FA, 0x0EF7F002, 0x16F60A05, 0x050B00FE);
	r5 = D(r5, s1_1_1, 0x0103CBDE, 0x1C06DFF4, 0xFC0E8FFD, 0xD52A0FF0);
	r6 = D(r6, s1_1_1, 0x10F00506, 0x9D00DB06, 0x3B0DA40D, 0xFC050EFC);
	r7 = D(r7, s1_1_1, 0x002DFE0E, 0xFDE4D700, 0xDA0AF8F3, 0xF226F1FF);
	r0 = D(r0, s1_1_2, 0x0FE803FF, 0xFB0FFFFC, 0xF801FA00, 0x0100D3FF);
	r1 = D(r1, s1_1_2, 0xFCFE1500, 0xF9F8FE08, 0x06F712F1, 0x00F510F7);
	r2 = D(r2, s1_1_2, 0x04F600F6, 0x091303F4, 0x0706F5F5, 0x07EE05FD);
	r3 = D(r3, s1_1_2, 0xF9F2DA04, 0xFF0007FB, 0x0705F6FE, 0xE9100DF1);
	r4 = D(r4, s1_1_2, 0x02FDFB00, 0xFFFC0DFE, 0x110D06FD, 0x02FE0202);
	r5 = D(r5, s1_1_2, 0x03F3EB01, 0x0702E8F9, 0x0BF7E810, 0x17F4F607);
	r6 = D(r6, s1_1_2, 0xFC05F901, 0xDA181CD9, 0x01DED102, 0x00FF0107);
	r7 = D(r7, s1_1_2, 0xE911EE04, 0xFA09E70C, 0xFEF707F5, 0xFCF4F702);
	r0 = D(r0, s1_2_0, 0x0504FCFF, 0x0BFD0CFC, 0xFAFD0400, 0xFF02FD02);
	r1 = D(r1, s1_2_0, 0x0302FF01, 0x0EFFFE0A, 0x01F10DF6, 0x0602F010);
	r2 = D(r2, s1_2_0, 0xFDEEF605, 0x0009FAEF, 0xF80703ED, 0xFD02FD01);
	r3 = D(r3, s1_2_0, 0x04FF010A, 0x05FAF706, 0xFCFEFE03, 0xE2F201F2);
	r4 = D(r4, s1_2_0, 0x010100FF, 0xFD00FE02, 0xEF08FD05, 0x01000000);
	r5 = D(r5, s1_2_0, 0xE7030C0A, 0xB6ED0B0C, 0xF0F81200, 0x01F9FCF5);
	r6 = D(r6, s1_2_0, 0x02EF09FF, 0x0E1508F0, 0x0AF01D1E, 0x06FA0203);
	r7 = D(r7, s1_2_0, 0xFC00FCFD, 0xEC02041A, 0x02FF05FC, 0xF6FFFDF8);
	r0 = D(r0, s1_2_1, 0xFC010100, 0xFE05FDF8, 0x040BFDFB, 0xFC010400);
	r1 = D(r1, s1_2_1, 0x00FD0502, 0xFB0EF509, 0xF00202FA, 0xE7FDFC10);
	r2 = D(r2, s1_2_1, 0xF8FDF4FD, 0xF701FE02, 0xFE0205FE, 0xF6FBFD05);
	r3 = D(r3, s1_2_1, 0x0004F404, 0xEBF4FD03, 0x01FFFE01, 0xEF0FF408);
	r4 = D(r4, s1_2_1, 0xFF05FDFD, 0xF500FE02, 0x200602FC, 0x01FE0002);
	r5 = D(r5, s1_2_1, 0x040201F0, 0xED0F3111, 0xF71DE419, 0x0B0004FC);
	r6 = D(r6, s1_2_1, 0x0C13EE06, 0xE2061000, 0xDBF8CEDF, 0xFFF803FE);
	r7 = D(r7, s1_2_1, 0xF80002FF, 0x0B01FE04, 0xEF080804, 0x0103FCFD);
	r0 = D(r0, s1_2_2, 0xFF06FBFC, 0x03000203, 0x010205FE, 0x03FEFFFD);
	r1 = D(r1, s1_2_2, 0xFC020200, 0xFB04F509, 0x0104E6F8, 0x03FE0301);
	r2 = D(r2, s1_2_2, 0x04F8FEFC, 0xFB04EEFB, 0xF509F8F5, 0xFE020AFC);
	r3 = D(r3, s1_2_2, 0x0FFC0AFE, 0xFBFCEE02, 0x01000201, 0xFEFDF508);
	r4 = D(r4, s1_2_2, 0x0202FE01, 0xFF040300, 0xF5FCFB08, 0xFE00FE01);
	r5 = D(r5, s1_2_2, 0x09FD1407, 0xFA00FCEA, 0xFEFBEB07, 0x04FEEF04);
	r6 = D(r6, s1_2_2, 0xF401FEFF, 0xF408E4E6, 0xFFE9F508, 0xFE00FD04);
	r7 = D(r7, s1_2_2, 0xF605FFFB, 0xFD0400F8, 0xFEFCFBF8, 0xFA00FA00);
	f0 = vec4(r0) * 6.2000124e-05;
	f0 += vec4(-1.757e-02, 1.400e-02, -1.260e-02, 2.133e-03);
	f0 = clamp(f0, vec4(0.0), vec4(1.0));
	imageStore(out_image, opos + ivec2(0, 0), f0);
	f1 = vec4(r1) * 6.2000124e-05;
	f1 += vec4(-1.071e-02, -2.894e-02, -7.818e-03, -1.454e-02);
	f1 = clamp(f1, vec4(0.0), vec4(1.0));
	imageStore(out_image, opos + ivec2(1, 0), f1);
	f2 = vec4(r2) * 6.2000124e-05;
	f2 += vec4(3.522e-03, -2.589e-02, -1.693e-02, -9.811e-03);
	f2 = clamp(f2, vec4(0.0), vec4(1.0));
	imageStore(out_image, opos + ivec2(0, 1), f2);
	f3 = vec4(r3) * 6.2000124e-05;
	f3 += vec4(-1.015e-02, -1.855e-02, -1.319e-02, -4.127e-03);
	f3 = clamp(f3, vec4(0.0), vec4(1.0));
	imageStore(out_image, opos + ivec2(1, 1), f3);
	f4 = vec4(r4) * 6.2000124e-05;
	f4 += vec4(-4.643e-03, -8.224e-03, -6.313e-03, 2.165e-03);
	f4 = clamp(f4, vec4(0.0), vec4(1.0));
	imageStore(out_image, opos + ivec2(2, 0), f4);
	f5 = vec4(r5) * 6.2000124e-05;
	f5 += vec4(-1.848e-02, -2.401e-02, -4.563e-02, -1.228e-02);
	f5 = clamp(f5, vec4(0.0), vec4(1.0));
	imageStore(out_image, opos + ivec2(3, 0), f5);
	f6 = vec4(r6) * 6.2000124e-05;
	f6 += vec4(3.042e-02, -2.056e-02, -3.178e-02, 4.910e-03);
	f6 = clamp(f6, vec4(0.0), vec4(1.0));
	imageStore(out_image, opos + ivec2(2, 1), f6);
	f7 = vec4(r7) * 6.2000124e-05;
	f7 += vec4(-2.414e-03, 9.063e-03, -4.952e-03, -8.089e-03);
	f7 = clamp(f7, vec4(0.0), vec4(1.0));
	imageStore(out_image, opos + ivec2(3, 1), f7);
}

//!DESC CuNNy-8x32-conv7
//!HOOK LUMA
//!COMPUTE 32 16 8 8
//!BIND conv6
//!BIND LUMA
//!SAVE conv7
//!WIDTH LUMA.w 4 *
//!HEIGHT LUMA.h 2 *
//!COMPONENTS 4
//!WHEN OUTPUT.w LUMA.w / 1.3 > OUTPUT.h LUMA.h / 1.3 > *
#extension GL_EXT_spirv_intrinsics : require
spirv_instruction (extensions = ["SPV_KHR_integer_dot_product"], capabilities = [6019, 6018], id = 4450)
int dp4(int a, int b, spirv_literal int fmt);
#define D(r, s, a, b, c, d) r + ivec4(dp4(s, a, 0), dp4(s, b, 0), dp4(s, c, 0), dp4(s, d, 0))
shared int G[8][10][10];
void hook() {
	ivec2 xy = ivec2(gl_LocalInvocationID.xy);
	ivec2 pos = ivec2(gl_WorkGroupID.xy) * ivec2(8, 8) + xy;
	ivec2 opos = pos * ivec2(4, 2);
	ivec2 sz = ivec2(LUMA_size) - ivec2(1);
	for (int y = 0; y < 10; y += 8) {
		int ay = xy.y + y;
		if (ay >= 10) break;
		for (int x = 0; x < 10; x += 8) {
			int ax = xy.x + x;
			if (ax >= 10) break;
			vec2 p;
			vec4 r, g, b, a;
			p = vec2(clamp(pos + ivec2(x - 1, y - 1), ivec2(0), sz) * ivec2(4, 2) + ivec2(1, 1)) * conv6_pt;
			r = conv6_gather(p, 0);
			g = conv6_gather(p, 1);
			b = conv6_gather(p, 2);
			a = conv6_gather(p, 3);
			vec4 v0 = vec4(r.w, g.w, b.w, a.w) * 1.0000000e+00;
			vec4 v1 = vec4(r.z, g.z, b.z, a.z) * 1.0000000e+00;
			vec4 v2 = vec4(r.x, g.x, b.x, a.x) * 1.0000000e+00;
			vec4 v3 = vec4(r.y, g.y, b.y, a.y) * 1.0000000e+00;
			p = vec2(clamp(pos + ivec2(x - 1, y - 1), ivec2(0), sz) * ivec2(4, 2) + ivec2(3, 1)) * conv6_pt;
			r = conv6_gather(p, 0);
			g = conv6_gather(p, 1);
			b = conv6_gather(p, 2);
			a = conv6_gather(p, 3);
			vec4 v4 = vec4(r.w, g.w, b.w, a.w) * 1.0000000e+00;
			vec4 v5 = vec4(r.z, g.z, b.z, a.z) * 1.0000000e+00;
			vec4 v6 = vec4(r.x, g.x, b.x, a.x) * 1.0000000e+00;
			vec4 v7 = vec4(r.y, g.y, b.y, a.y) * 1.0000000e+00;
			G[0][ay][ax] = int(packSnorm4x8(v0));
			G[1][ay][ax] = int(packSnorm4x8(v1));
			G[2][ay][ax] = int(packSnorm4x8(v2));
			G[3][ay][ax] = int(packSnorm4x8(v3));
			G[4][ay][ax] = int(packSnorm4x8(v4));
			G[5][ay][ax] = int(packSnorm4x8(v5));
			G[6][ay][ax] = int(packSnorm4x8(v6));
			G[7][ay][ax] = int(packSnorm4x8(v7));
		}
	}
	barrier();
	int s0_0_0, s0_0_1, s0_0_2, s0_1_0, s0_1_1, s0_1_2, s0_2_0, s0_2_1, s0_2_2, s1_0_0, s1_0_1, s1_0_2, s1_1_0, s1_1_1, s1_1_2, s1_2_0, s1_2_1, s1_2_2;
	ivec4 r0, r1, r2, r3, r4, r5, r6, r7;
	vec4 f0, f1, f2, f3, f4, f5, f6, f7;
	r0 = ivec4(0); r1 = ivec4(0); r2 = ivec4(0); r3 = ivec4(0); r4 = ivec4(0); r5 = ivec4(0); r6 = ivec4(0); r7 = ivec4(0);
	s0_0_0 = G[0][xy.y+0][xy.x+0]; s0_0_1 = G[0][xy.y+0][xy.x+1];
	s0_0_2 = G[0][xy.y+0][xy.x+2]; s0_1_0 = G[0][xy.y+1][xy.x+0];
	s0_1_1 = G[0][xy.y+1][xy.x+1]; s0_1_2 = G[0][xy.y+1][xy.x+2];
	s0_2_0 = G[0][xy.y+2][xy.x+0]; s0_2_1 = G[0][xy.y+2][xy.x+1];
	s0_2_2 = G[0][xy.y+2][xy.x+2]; s1_0_0 = G[1][xy.y+0][xy.x+0];
	s1_0_1 = G[1][xy.y+0][xy.x+1]; s1_0_2 = G[1][xy.y+0][xy.x+2];
	s1_1_0 = G[1][xy.y+1][xy.x+0]; s1_1_1 = G[1][xy.y+1][xy.x+1];
	s1_1_2 = G[1][xy.y+1][xy.x+2]; s1_2_0 = G[1][xy.y+2][xy.x+0];
	s1_2_1 = G[1][xy.y+2][xy.x+1]; s1_2_2 = G[1][xy.y+2][xy.x+2];
	r0 = D(r0, s0_0_0, 0xFE00FE04, 0xFFFC0305, 0xFCFE02FE, 0x0600FEFE);
	r1 = D(r1, s0_0_0, 0x0502FD02, 0xFF06FD07, 0x00F40406, 0xF803FBF5);
	r2 = D(r2, s0_0_0, 0x01FB0501, 0xF300FFFD, 0x0300FE07, 0xFBF5FE08);
	r3 = D(r3, s0_0_0, 0x1306FDFC, 0xFDFD0105, 0x01F60400, 0x17F9FBFD);
	r4 = D(r4, s0_0_0, 0xFEF5071D, 0x0103FB01, 0xF9F900F4, 0x0FF90305);
	r5 = D(r5, s0_0_0, 0xFFFCFD06, 0xF6FF010C, 0xF8EF0206, 0x05010102);
	r6 = D(r6, s0_0_0, 0x090002F6, 0x00FE0003, 0x18FE04D8, 0x0000FE07);
	r7 = D(r7, s0_0_0, 0x04FD00FC, 0xFF0005FB, 0xF9F4FF02, 0x05F0FEF6);
	r0 = D(r0, s0_0_1, 0xFEFE0403, 0x0A050003, 0x060DFC0E, 0xFCF805FF);
	r1 = D(r1, s0_0_1, 0xFDFA010A, 0x05050003, 0x11FAF5EE, 0x0307FF03);
	r2 = D(r2, s0_0_1, 0xF8F8FB13, 0xEEFBFF20, 0x02F2F200, 0x05F1FA07);
	r3 = D(r3, s0_0_1, 0xFEF3FFFF, 0x00020002, 0xEEF8FDFA, 0xFB00FF09);
	r4 = D(r4, s0_0_1, 0x00FCFE19, 0x01020614, 0xF70201EC, 0x241001DC);
	r5 = D(r5, s0_0_1, 0xFDED0B05, 0xF40E0AF7, 0x0A07F811, 0x04F202FD);
	r6 = D(r6, s0_0_1, 0xE803FFEF, 0xFB010703, 0xF9ED0002, 0x02FD0102);
	r7 = D(r7, s0_0_1, 0xFD0A0004, 0xF9FF020B, 0x02F90209, 0x030203FB);
	r0 = D(r0, s0_0_2, 0x00FDFDFE, 0x08FE0DFC, 0x03040404, 0xFB02FDFF);
	r1 = D(r1, s0_0_2, 0x0107FDFD, 0x03050505, 0x010608FD, 0x000C02FC);
	r2 = D(r2, s0_0_2, 0x0204FF04, 0x0100FA06, 0x05FE0009, 0x04010608);
	r3 = D(r3, s0_0_2, 0xFFFF0209, 0xFF030004, 0x04F005FE, 0x01FFFA04);
	r4 = D(r4, s0_0_2, 0x02010606, 0xF8FA0706, 0x04FDFC02, 0x05F90000);
	r5 = D(r5, s0_0_2, 0x030305FF, 0xFDFE0300, 0x0A04FE07, 0x060400FB);
	r6 = D(r6, s0_0_2, 0xFEF904FE, 0x0100FF02, 0xFEF8FAFD, 0x0300FF06);
	r7 = D(r7, s0_0_2, 0x02FFFF03, 0x0103FE07, 0x07FCFF03, 0x0415FDF9);
	r0 = D(r0, s0_1_0, 0xF8FE0301, 0x04F00100, 0x0501090D, 0x0DF5FEF0);
	r1 = D(r1, s0_1_0, 0x0BF7FBFE, 0xF3020606, 0xF4FCFC0A, 0xD5010A04);
	r2 = D(r2, s0_1_0, 0xF7FBF90A, 0xF2FE05FF, 0x070308E8, 0xDEF20511);
	r3 = D(r3, s0_1_0, 0x1AF7FC04, 0xFC030006, 0x09F6FEFA, 0x201004F2);
	r4 = D(r4, s0_1_0, 0x0FEF0200, 0x08FF0202, 0x0301FDF9, 0x13030402);
	r5 = D(r5, s0_1_0, 0x0B060811, 0xF8FA11F5, 0xFD09FDFE, 0x020103FD);
	r6 = D(r6, s0_1_0, 0xF6FBFE01, 0x02F803FF, 0xECFC0F03, 0xFEFF0509);
	r7 = D(r7, s0_1_0, 0x01010001, 0x020201FB, 0x0601FFFB, 0x080C02FB);
	r0 = D(r0, s0_1_1, 0x12020C15, 0x2603F4FB, 0xFEFA2223, 0x040C0800);
	r1 = D(r1, s0_1_1, 0xFBF93D24, 0x0DF80218, 0x200C10E4, 0xF0F115DB);
	r2 = D(r2, s0_1_1, 0x0AFFEDF8, 0xCDF9EF11, 0xF8040406, 0x0B04022A);
	r3 = D(r3, s0_1_1, 0xE2F232FE, 0xF80103EB, 0x06112CF9, 0x0FDD0EED);
	r4 = D(r4, s0_1_1, 0xFC005D0B, 0xFA1310F0, 0x120AB4E4, 0x17072FFE);
	r5 = D(r5, s0_1_1, 0xE40610F7, 0x030806E8, 0xF2F207DB, 0x05F6F2DD);
	r6 = D(r6, s0_1_1, 0x02085103, 0x080437FA, 0xEA110E09, 0x0500092B);
	r7 = D(r7, s0_1_1, 0x09F911D5, 0xFAF91CF0, 0xF90FE200, 0xECEA01CA);
	r0 = D(r0, s0_1_2, 0xFFFFFE02, 0xFC042308, 0x01FEFA06, 0x05F904FE);
	r1 = D(r1, s0_1_2, 0x0D0006FD, 0x05040603, 0x15001B04, 0x02FD0906);
	r2 = D(r2, s0_1_2, 0x050ACB03, 0xF50D070A, 0x0705E8F6, 0x090E0F02);
	r3 = D(r3, s0_1_2, 0xFB0D0AFC, 0x0AFDD208, 0xFEFF0804, 0x00140001);
	r4 = D(r4, s0_1_2, 0x010B0E06, 0x0DF50706, 0xFDFDF608, 0x12F2F2FF);
	r5 = D(r5, s0_1_2, 0x0EF50B0B, 0xF2F9190E, 0x0EF8F403, 0x01041303);
	r6 = D(r6, s0_1_2, 0xFD011502, 0x01F81A03, 0xF60709F3, 0x02FF0906);
	r7 = D(r7, s0_1_2, 0x0409050D, 0x00020101, 0xFF04AAFB, 0x00FC1202);
	r0 = D(r0, s0_2_0, 0x00FAF901, 0xFEFCEDFF, 0xFCFEF204, 0xF7FC0501);
	r1 = D(r1, s0_2_0, 0x080007FC, 0xEDEC00F2, 0x06FEF9FC, 0xF401FE06);
	r2 = D(r2, s0_2_0, 0x02FD04FF, 0xFDFE0002, 0xF6F4F607, 0xF7F9FFFF);
	r3 = D(r3, s0_2_0, 0x01020206, 0xFDFF0801, 0x00F7FF01, 0x080AF60E);
	r4 = D(r4, s0_2_0, 0x09FDF500, 0x000A0600, 0x01FB0503, 0x05FEFEFE);
	r5 = D(r5, s0_2_0, 0x08F6FF00, 0xF30203FD, 0x170DF900, 0x0DFCFE00);
	r6 = D(r6, s0_2_0, 0x00FE0200, 0xFD0404FC, 0x03F2FF02, 0xF5FDF903);
	r7 = D(r7, s0_2_0, 0xFD0501FF, 0xFBFEFD02, 0xFE0305FF, 0x02010108);
	r0 = D(r0, s0_2_1, 0x0002FB0B, 0xFD01F2FB, 0x0B0306F6, 0xF80F6501);
	r1 = D(r1, s0_2_1, 0xFAFE13FE, 0xF4FA04EF, 0x0FEA08FF, 0x0006F4FA);
	r2 = D(r2, s0_2_1, 0x08FC0507, 0x08FAF407, 0x0FFD1705, 0x04F7DC03);
	r3 = D(r3, s0_2_1, 0xF6001EFC, 0x02070F0F, 0xF7001C04, 0x04F67FFE);
	r4 = D(r4, s0_2_1, 0xFDFCE704, 0x02F600F4, 0x06032E06, 0x01F9FBFF);
	r5 = D(r5, s0_2_1, 0x07EE13FF, 0xF0020603, 0x0CECF1ED, 0x09FFED00);
	r6 = D(r6, s0_2_1, 0x03F8ECFF, 0xF8020900, 0x010925FE, 0x0C0008F9);
	r7 = D(r7, s0_2_1, 0xF702B2FF, 0x07F91F02, 0x13000905, 0x0D0D0300);
	r0 = D(r0, s0_2_2, 0x05FE3A00, 0xFF039803, 0xF1F67EFC, 0x05FB50FF);
	r1 = D(r1, s0_2_2, 0xFF094BFD, 0x0A147FFE, 0x0802CB03, 0x090A5A07);
	r2 = D(r2, s0_2_2, 0x09FBBE03, 0x05FBAF04, 0xFEFED2FE, 0x06018103);
	r3 = D(r3, s0_2_2, 0xFA03E900, 0x01067F0C, 0x00F235FB, 0x01FF6D02);
	r4 = D(r4, s0_2_2, 0x01FF5100, 0x01F52BFE, 0x04007FFF, 0xFC09DC02);
	r5 = D(r5, s0_2_2, 0x0CFF35FD, 0xFCF67FF6, 0xFE0ECC06, 0x08FF5601);
	r6 = D(r6, s0_2_2, 0xFFFE8C00, 0xFE011500, 0x070004FF, 0xFE001203);
	r7 = D(r7, s0_2_2, 0x03F92303, 0xFF003500, 0x09FCE200, 0x0BF3FFFF);
	r0 = D(r0, s1_0_0, 0x00FF0200, 0xFA01FE03, 0x03010CFB, 0x03080301);
	r1 = D(r1, s1_0_0, 0x09080204, 0x0101FB05, 0xF7010701, 0x0F000200);
	r2 = D(r2, s1_0_0, 0xFC0101F6, 0x02030108, 0x0FFF08FB, 0x06FE07FE);
	r3 = D(r3, s1_0_0, 0x070A07FD, 0xFA010203, 0x0404FFFE, 0x03040BFB);
	r4 = D(r4, s1_0_0, 0xF709FCF9, 0xFD060000, 0xFB06FDFC, 0xFF0201FB);
	r5 = D(r5, s1_0_0, 0xFC0308F7, 0xF7FAFBFE, 0xFAFE0102, 0xFD040DEF);
	r6 = D(r6, s1_0_0, 0x070001FB, 0xFF01FF0B, 0x13F605EF, 0x03000500);
	r7 = D(r7, s1_0_0, 0x00FF03FF, 0x03000002, 0xF20304F7, 0x02090DFB);
	r0 = D(r0, s1_0_1, 0xFFFBFD01, 0xFE00FDFD, 0xF307F3FB, 0x08030D00);
	r1 = D(r1, s1_0_1, 0x0E040A03, 0xFB00F403, 0xF7F2E6FC, 0x0DF9FE01);
	r2 = D(r2, s1_0_1, 0xFAFCF5FB, 0x0212F60E, 0x050209FC, 0x05020500);
	r3 = D(r3, s1_0_1, 0x11FF090E, 0xFB03F2FF, 0xFCFFFEFF, 0x0106F506);
	r4 = D(r4, s1_0_1, 0x010B00FC, 0xFA020D01, 0xFBFC07F6, 0x04FEF0FC);
	r5 = D(r5, s1_0_1, 0x031209FB, 0xF6FBF4F9, 0x0100F3ED, 0xF70BFF07);
	r6 = D(r6, s1_0_1, 0x0BF8051F, 0x00000706, 0x0DFF1309, 0xFBFF06FD);
	r7 = D(r7, s1_0_1, 0xF801FA01, 0xFF00FF04, 0x070504F2, 0xF505F103);
	r0 = D(r0, s1_0_2, 0xFE00FC00, 0x05FD0406, 0x10020AFC, 0xFC000601);
	r1 = D(r1, s1_0_2, 0x0003FC01, 0xFC030606, 0xF2FDFA07, 0xF3FDFB06);
	r2 = D(r2, s1_0_2, 0x0102FC01, 0x0E020502, 0x00FF0402, 0x02010200);
	r3 = D(r3, s1_0_2, 0xE808F3F2, 0x02FFFFFC, 0x0001FFFF, 0x0302FFF8);
	r4 = D(r4, s1_0_2, 0x020001FE, 0xF5FBFA02, 0xFCFD0101, 0x02050BFC);
	r5 = D(r5, s1_0_2, 0xFFFFFBFE, 0x0800FDFE, 0x080401FF, 0x0AFF01FC);
	r6 = D(r6, s1_0_2, 0xFFFF0207, 0xFF01FF02, 0xFBFB0504, 0x0400FB01);
	r7 = D(r7, s1_0_2, 0x01FFFE00, 0xFEFF0100, 0xF7FE01FC, 0x07FDF3FE);
	r0 = D(r0, s1_1_0, 0x0301FD19, 0x00FE09FE, 0xFF060406, 0xFBF60A1A);
	r1 = D(r1, s1_1_0, 0xFC050719, 0xF8F60402, 0xFEF40000, 0xDD01EFDE);
	r2 = D(r2, s1_1_0, 0x02FE060C, 0xFE08F900, 0x11F6040A, 0x0809F1F9);
	r3 = D(r3, s1_1_0, 0xF70B1211, 0xFE0103FF, 0xFBFB0411, 0xFA030CFB);
	r4 = D(r4, s1_1_0, 0xFF151081, 0xF303F81B, 0xFCFD04EF, 0x08010104);
	r5 = D(r5, s1_1_0, 0x0809FE0B, 0x0CF9FCF2, 0x0109F4FC, 0x010205F3);
	r6 = D(r6, s1_1_0, 0xFA01FB0A, 0xF9FD052C, 0xEE0C0612, 0x08F7060A);
	r7 = D(r7, s1_1_0, 0xF5FFFEF6, 0x05FE0300, 0x070501EF, 0xF70CF0FC);
	r0 = D(r0, s1_1_1, 0xE60606E7, 0xF902FA0A, 0xEB11FB04, 0xF512EAF7);
	r1 = D(r1, s1_1_1, 0xFC0EF3CC, 0x16EEF3FC, 0x0BEA190D, 0x1EFAFFF1);
	r2 = D(r2, s1_1_1, 0x140908FE, 0xE20B06DF, 0xF2F8FBFD, 0xD80C0501);
	r3 = D(r3, s1_1_1, 0x121B01F7, 0x0EFD0AEA, 0xF9FCFBF1, 0x0F050304);
	r4 = D(r4, s1_1_1, 0xF9F411F4, 0xE801F007, 0xFDF9F51B, 0xF8F71210);
	r5 = D(r5, s1_1_1, 0xFDFD0008, 0x14F3FF33, 0xFBE7251C, 0x0AFE073A);
	r6 = D(r6, s1_1_1, 0x1109FAF2, 0x0205F133, 0x0C09EB0A, 0xFCEFFB00);
	r7 = D(r7, s1_1_1, 0x0D020209, 0x18FB0A11, 0x01F80812, 0x1AEA0902);
	r0 = D(r0, s1_1_2, 0x0200FDFE, 0xFF09010D, 0x0D01FD08, 0xF8020204);
	r1 = D(r1, s1_1_2, 0x090501F7, 0x00F90305, 0x0C02FEF5, 0x08FDFFF8);
	r2 = D(r2, s1_1_2, 0xFDF404FF, 0x0BF20DFB, 0xFEFEFA05, 0x03020002);
	r3 = D(r3, s1_1_2, 0xDBF0F406, 0x07F50CFB, 0xFB040302, 0xF5FA0007);
	r4 = D(r4, s1_1_2, 0xFBFD0401, 0xEDF9040B, 0xFB000600, 0x020EFC04);
	r5 = D(r5, s1_1_2, 0x0C03FF05, 0xFEF908FF, 0x050EF404, 0xF3FDF7EF);
	r6 = D(r6, s1_1_2, 0xFF02FCFC, 0xFCFE03FE, 0xE1F9FD05, 0x01FC0000);
	r7 = D(r7, s1_1_2, 0xF4FFFA04, 0xF9FD00FA, 0x03020201, 0x0BF90AFA);
	r0 = D(r0, s1_2_0, 0xFBFE01FF, 0xFC0000FD, 0xFDFB060D, 0xFF07030C);
	r1 = D(r1, s1_2_0, 0xFB09FFFF, 0x0B0400F9, 0xFA050603, 0x04F5FCF9);
	r2 = D(r2, s1_2_0, 0x02040201, 0xFF020400, 0xF201FEF9, 0x010405FC);
	r3 = D(r3, s1_2_0, 0xFF090811, 0x07FE0400, 0x03FE020C, 0x0DFF0205);
	r4 = D(r4, s1_2_0, 0xFA0505FA, 0xE8F7F307, 0x02FA0207, 0xFF0003FE);
	r5 = D(r5, s1_2_0, 0xFE0005F8, 0x0DFB01FF, 0x03FB07F8, 0x020901FA);
	r6 = D(r6, s1_2_0, 0xFE03FFFD, 0xFCFE010B, 0xF5FF04FA, 0x09F400F4);
	r7 = D(r7, s1_2_0, 0x0700FEF5, 0x0602FFFC, 0xFB010204, 0x01F5FE02);
	r0 = D(r0, s1_2_1, 0xF3FC0515, 0x00F6FF04, 0x2707061A, 0x0AFAFAED);
	r1 = D(r1, s1_2_1, 0x0609FCF7, 0x092327F2, 0xF809FAFF, 0xF0FA06F2);
	r2 = D(r2, s1_2_1, 0xFB02FE01, 0xFB03000C, 0xFE05F705, 0xFDF40305);
	r3 = D(r3, s1_2_1, 0xF808020B, 0xFC020103, 0x04F9FEFF, 0xF9080500);
	r4 = D(r4, s1_2_1, 0x0401FE02, 0xE101050B, 0x11FD04FB, 0x04FFF7FC);
	r5 = D(r5, s1_2_1, 0x070602FB, 0xFBFBFBFB, 0xF5FBF425, 0xF7FC0C1C);
	r6 = D(r6, s1_2_1, 0xFD0AFFFD, 0x06FE0204, 0x0BEE00F7, 0xDBDE0CF8);
	r7 = D(r7, s1_2_1, 0xEBF703FF, 0xF905FC01, 0x0705FC09, 0x1E0507EF);
	r0 = D(r0, s1_2_2, 0x0100FD03, 0xF1FDFFFA, 0x09EA0208, 0x0503FBFC);
	r1 = D(r1, s1_2_2, 0xF702FE02, 0x0904F50E, 0xF90AFF09, 0xFC05FE08);
	r2 = D(r2, s1_2_2, 0x0106FF00, 0xFC0AFA09, 0x0D0101FC, 0x08060402);
	r3 = D(r3, s1_2_2, 0xF303F9F8, 0xFA05F8FD, 0xFB0005F9, 0x030105FD);
	r4 = D(r4, s1_2_2, 0x0301FFFE, 0xF7F80A02, 0x0000FEFB, 0x030200FE);
	r5 = D(r5, s1_2_2, 0xF7050503, 0xEFFF0207, 0x06FEFFFE, 0xF91100F9);
	r6 = D(r6, s1_2_2, 0xFA000002, 0x01FE01FC, 0x0CF90304, 0x060BFD00);
	r7 = D(r7, s1_2_2, 0x03FD0001, 0x010100FE, 0x0C03FDF8, 0xFC1101FD);
	s0_0_0 = G[2][xy.y+0][xy.x+0]; s0_0_1 = G[2][xy.y+0][xy.x+1];
	s0_0_2 = G[2][xy.y+0][xy.x+2]; s0_1_0 = G[2][xy.y+1][xy.x+0];
	s0_1_1 = G[2][xy.y+1][xy.x+1]; s0_1_2 = G[2][xy.y+1][xy.x+2];
	s0_2_0 = G[2][xy.y+2][xy.x+0]; s0_2_1 = G[2][xy.y+2][xy.x+1];
	s0_2_2 = G[2][xy.y+2][xy.x+2]; s1_0_0 = G[3][xy.y+0][xy.x+0];
	s1_0_1 = G[3][xy.y+0][xy.x+1]; s1_0_2 = G[3][xy.y+0][xy.x+2];
	s1_1_0 = G[3][xy.y+1][xy.x+0]; s1_1_1 = G[3][xy.y+1][xy.x+1];
	s1_1_2 = G[3][xy.y+1][xy.x+2]; s1_2_0 = G[3][xy.y+2][xy.x+0];
	s1_2_1 = G[3][xy.y+2][xy.x+1]; s1_2_2 = G[3][xy.y+2][xy.x+2];
	r0 = D(r0, s0_0_0, 0xFD0002FB, 0xF90406FF, 0xF7010AFD, 0xF9FF0606);
	r1 = D(r1, s0_0_0, 0xFC040608, 0xFF06090C, 0xF90007FD, 0xE1FFFEF3);
	r2 = D(r2, s0_0_0, 0x01FB05FA, 0xFC0100FC, 0xFB01FFF7, 0x0A0901FA);
	r3 = D(r3, s0_0_0, 0xFD0B0516, 0x05FD02FB, 0xF8F6F4FA, 0x020AFB03);
	r4 = D(r4, s0_0_0, 0xD8040DF7, 0xF1F9E80B, 0x0EFF0801, 0x070B0501);
	r5 = D(r5, s0_0_0, 0xFB04EC10, 0x01FCFBFC, 0x080006F9, 0xF105F600);
	r6 = D(r6, s0_0_0, 0xFA01F701, 0x02020105, 0xDF05FD0D, 0xFEFDFEFD);
	r7 = D(r7, s0_0_0, 0x0A0102FB, 0x09FC0004, 0x140206FE, 0x15FE0406);
	r0 = D(r0, s0_0_1, 0xFE02FF00, 0x0004FB03, 0xF10B06EF, 0xFCFD04FD);
	r1 = D(r1, s0_0_1, 0xF8080500, 0x00FF0D14, 0xFE050500, 0xF8090010);
	r2 = D(r2, s0_0_1, 0x040B00FE, 0xC50803FB, 0x0B02FEFF, 0x1608FFF3);
	r3 = D(r3, s0_0_1, 0xF5F602ED, 0xFB000803, 0x10FCF7EE, 0xFEF80314);
	r4 = D(r4, s0_0_1, 0xEC08FFF9, 0xE700EDFD, 0x020507DA, 0x0400F607);
	r5 = D(r5, s0_0_1, 0x0D0EFD17, 0x05FEF60F, 0xF604FF0D, 0x1811FB0B);
	r6 = D(r6, s0_0_1, 0x0606F4E4, 0x0AFF0102, 0x1110FAEF, 0xFA000103);
	r7 = D(r7, s0_0_1, 0x1106F800, 0x01FE03FF, 0xEDF70FFF, 0x16FE1005);
	r0 = D(r0, s0_0_2, 0x06FF0001, 0x0C00FCF7, 0x130300F5, 0x01FE00FB);
	r1 = D(r1, s0_0_2, 0x06000202, 0xFFFF0302, 0xECFF0506, 0x00010205);
	r2 = D(r2, s0_0_2, 0xFF020300, 0x0D03FE17, 0xFFFD06FD, 0xFF01FEFE);
	r3 = D(r3, s0_0_2, 0xE7F80BF7, 0x05FF0008, 0x04FCFEF8, 0x08030200);
	r4 = D(r4, s0_0_2, 0x0603FEFD, 0xF5FCFC02, 0xF6030001, 0x0EFCF9FC);
	r5 = D(r5, s0_0_2, 0xFEFC060D, 0x0802F405, 0xFC05FC02, 0x0A0707FB);
	r6 = D(r6, s0_0_2, 0xF9FE0402, 0xFD000001, 0xF904010B, 0xFA0103FD);
	r7 = D(r7, s0_0_2, 0x02FFFF08, 0xFAFE00FD, 0xF80408FA, 0x0A03F9FF);
	r0 = D(r0, s0_1_0, 0xFFFD0301, 0xF9FD03FC, 0xFA06080D, 0xFA02FA01);
	r1 = D(r1, s0_1_0, 0xF6050802, 0xFE0B01F8, 0xF50B09F5, 0xFC0117EA);
	r2 = D(r2, s0_1_0, 0xF10503F6, 0x0B0A08FD, 0x0400040D, 0x0C0F17FB);
	r3 = D(r3, s0_1_0, 0xFFF90309, 0x07FC0001, 0x01EDF0F7, 0x14F8EA11);
	r4 = D(r4, s0_1_0, 0x0D06091E, 0xF5E8F30B, 0x09F7FC04, 0xFF0C0107);
	r5 = D(r5, s0_1_0, 0xF4FB0403, 0x07F5F7FA, 0x17120B04, 0x01F5EF08);
	r6 = D(r6, s0_1_0, 0xF503F603, 0xFB01FF06, 0xF9F4F6F8, 0x0DF3FBF9);
	r7 = D(r7, s0_1_0, 0x0DFF0406, 0x04FFFC00, 0x0C050704, 0x0D08F30B);
	r0 = D(r0, s0_1_1, 0xFBFBFE01, 0xF70B0007, 0x23030709, 0xDEF302F0);
	r1 = D(r1, s0_1_1, 0xED0E09F6, 0xE30B00E5, 0xEEF0F505, 0x0EF207F9);
	r2 = D(r2, s0_1_1, 0x0CFC021D, 0xEC150409, 0xFBEE0F0A, 0xD900151D);
	r3 = D(r3, s0_1_1, 0x22F81509, 0xEAFF09AA, 0xFBFC0320, 0x3B07F6A9);
	r4 = D(r4, s0_1_1, 0xF604060A, 0xD6F4F80B, 0xF40503F1, 0xF6E9F102);
	r5 = D(r5, s0_1_1, 0xFBFD07E7, 0xF9FCEA81, 0xDF0CE9E9, 0x0314E407);
	r6 = D(r6, s0_1_1, 0x0DF7FB0D, 0x19FF00D9, 0xFA02F9D5, 0x00FCF625);
	r7 = D(r7, s0_1_1, 0x3A06F600, 0xFA0302D6, 0xFE02F1E8, 0x0B04E601);
	r0 = D(r0, s0_1_2, 0x0B04FDF5, 0x08FEEBF9, 0xF904FD06, 0x050302FC);
	r1 = D(r1, s0_1_2, 0x04060501, 0x11FDFEE3, 0xFF08F1EB, 0xFE08FFE2);
	r2 = D(r2, s0_1_2, 0xFA03FF0E, 0xE4FB000A, 0xFF0407F5, 0x0B0301F7);
	r3 = D(r3, s0_1_2, 0xC0FB0601, 0x140309D7, 0x0702F7F8, 0xF1010410);
	r4 = D(r4, s0_1_2, 0x0202FBFB, 0x0704F8F5, 0xFBFF0A0F, 0x0509FA00);
	r5 = D(r5, s0_1_2, 0x18FE0004, 0x04FDF6FC, 0xF7FCFD00, 0xF9ED0A13);
	r6 = D(r6, s0_1_2, 0xFF01F6FA, 0xFBFFFFFD, 0xD8FFEE19, 0xFEFF05F4);
	r7 = D(r7, s0_1_2, 0xF402FF07, 0xFDFE010F, 0x01F40BA4, 0x23EF0A0A);
	r0 = D(r0, s0_2_0, 0x020108F7, 0x05FDFE02, 0xF5ED00F6, 0xFDFD0107);
	r1 = D(r1, s0_2_0, 0x04000601, 0xE21213DD, 0x040A0001, 0x011309E6);
	r2 = D(r2, s0_2_0, 0x0702FB0B, 0xFE0602FD, 0xFBEFF7F5, 0xF90605FB);
	r3 = D(r3, s0_2_0, 0x0005FC01, 0xFEFB0107, 0xFCF7F8FF, 0x0704FD0F);
	r4 = D(r4, s0_2_0, 0x020302FA, 0xFEF5F4FF, 0x02FF0206, 0x0003FDFE);
	r5 = D(r5, s0_2_0, 0xFEFEFB0A, 0x01FA0213, 0x0303FA0C, 0x020D0102);
	r6 = D(r6, s0_2_0, 0x05FDFEFE, 0x0301FF07, 0xFDFFFCF1, 0x01FFF9FE);
	r7 = D(r7, s0_2_0, 0x01FF07FA, 0x07FEFE03, 0xFDFF02FC, 0xF50E06FC);
	r0 = D(r0, s0_2_1, 0xF9050507, 0xFD0B03F3, 0x14FEFEF7, 0x0C01FF1A);
	r1 = D(r1, s0_2_1, 0x0506FF07, 0x1EEE1481, 0x0BFDFC06, 0xF50B0104);
	r2 = D(r2, s0_2_1, 0x0000F803, 0xFFFF00F4, 0xF107FF81, 0xFB010C06);
	r3 = D(r3, s0_2_1, 0x000204FC, 0x0AF909ED, 0xFFF000F5, 0x0507F1F7);
	r4 = D(r4, s0_2_1, 0x080402F3, 0xF204FBE8, 0x09FBFD0B, 0x0505F4FF);
	r5 = D(r5, s0_2_1, 0xFEFDF918, 0xFEF6FC04, 0xF708FE01, 0xF900F5FB);
	r6 = D(r6, s0_2_1, 0xFF0601FE, 0x0206FD0B, 0xFEFE0B11, 0x06DBF865);
	r7 = D(r7, s0_2_1, 0xF20001E9, 0xFBFF0121, 0x02FCFD16, 0x0FEFFD09);
	r0 = D(r0, s0_2_2, 0x02030100, 0xFB05FC01, 0xF8FE08FD, 0x0B04FF00);
	r1 = D(r1, s0_2_2, 0xF9010501, 0x080EFFE4, 0xFE04FE01, 0xF710FEF5);
	r2 = D(r2, s0_2_2, 0xFDFD0004, 0x000200F7, 0x05FC05FD, 0x040800F4);
	r3 = D(r3, s0_2_2, 0xF60208FA, 0x03F807AA, 0xFDFAF7FA, 0x02F60A06);
	r4 = D(r4, s0_2_2, 0x000001FD, 0xF5040314, 0x02FF0006, 0x00090102);
	r5 = D(r5, s0_2_2, 0xFB110407, 0xFBFEFCF8, 0xF8F40316, 0x02040900);
	r6 = D(r6, s0_2_2, 0xFD0200FD, 0x04FE0202, 0x05FEFA09, 0x0D01FAFF);
	r7 = D(r7, s0_2_2, 0x10FB00FC, 0xFC00FF05, 0x03FDFB01, 0x0603FB07);
	r0 = D(r0, s1_0_0, 0x010403FC, 0x0001F203, 0xF9F00803, 0x0507F309);
	r1 = D(r1, s1_0_0, 0x000B0803, 0x0003FAFF, 0xFF0A0002, 0xFF000B01);
	r2 = D(r2, s1_0_0, 0x020905FA, 0xFD02FCF1, 0x0000F605, 0xFF010DED);
	r3 = D(r3, s1_0_0, 0x0804FC0F, 0x0100F801, 0x00F9F507, 0xFC09F2F4);
	r4 = D(r4, s1_0_0, 0x05F7FB08, 0x040A12F8, 0x03F9DE08, 0xF8040605);
	r5 = D(r5, s1_0_0, 0x040814FC, 0xF3FBF10D, 0xFA020DFF, 0x00FF0603);
	r6 = D(r6, s1_0_0, 0xFF0207FC, 0x010800F9, 0x02FF06FE, 0xFF0006FD);
	r7 = D(r7, s1_0_0, 0x00FE0201, 0x00FFFF00, 0x00F5FB0B, 0xFDFFF009);
	r0 = D(r0, s1_0_1, 0x01FC10FF, 0x00020FE8, 0x06170FE9, 0xF1F9E300);
	r1 = D(r1, s1_0_1, 0xF7FF07F7, 0x0B0306FE, 0xFCF80DEB, 0x0608050D);
	r2 = D(r2, s1_0_1, 0x01E82FF5, 0x08FB0E18, 0xF2FEEDFD, 0xFE0707F6);
	r3 = D(r3, s1_0_1, 0xEE0004DA, 0x0500FF00, 0xFFF7F0FB, 0x00F9D8F9);
	r4 = D(r4, s1_0_1, 0x050632F8, 0xF3F3F507, 0x0207CB0B, 0x0AF7F1E7);
	r5 = D(r5, s1_0_1, 0xFAF1C705, 0x09F5E3ED, 0x05FFFB04, 0xFFF7EF00);
	r6 = D(r6, s1_0_1, 0xFBF308E8, 0xFAFEE7FE, 0xF201F709, 0x0200FC00);
	r7 = D(r7, s1_0_1, 0x0207FFF8, 0xFF0000FB, 0x010DB614, 0x0801FA06);
	r0 = D(r0, s1_0_2, 0x05FD0A07, 0xF100F105, 0xF8000A10, 0xFF00F704);
	r1 = D(r1, s1_0_2, 0x02FD1101, 0xFAFDFFFE, 0x05F8E807, 0x00FDF901);
	r2 = D(r2, s1_0_2, 0xFFFCFFFA, 0x08F31AF6, 0x010201FF, 0xFD030F03);
	r3 = D(r3, s1_0_2, 0x00081003, 0x07FC1802, 0xF803FA04, 0x030606FC);
	r4 = D(r4, s1_0_2, 0x02030A02, 0xFBF7EC01, 0xF8F9F100, 0xF609FB06);
	r5 = D(r5, s1_0_2, 0x0304FB00, 0x0EFC0AFE, 0xF4FFECFC, 0x0DFD19EF);
	r6 = D(r6, s1_0_2, 0xFE000406, 0xFC000700, 0xF3FEFF00, 0xFCFF03FB);
	r7 = D(r7, s1_0_2, 0xFEFDFA00, 0x020104FF, 0x0902EC00, 0x0802FEFE);
	r0 = D(r0, s1_1_0, 0x070DF40B, 0xF901F504, 0x0E0616FA, 0xFD030BDE);
	r1 = D(r1, s1_1_0, 0x021501F3, 0x020A19E0, 0x030C0902, 0x0CF2E610);
	r2 = D(r2, s1_1_0, 0xFC0C0DFD, 0xFC00FEFB, 0x0204FCC2, 0xFEF802F5);
	r3 = D(r3, s1_1_0, 0x040D0C00, 0x03FF0305, 0xFF0E0FE4, 0x0D1A00E6);
	r4 = D(r4, s1_1_0, 0xEFF711F6, 0x08FBE2F8, 0xF006050B, 0x020003FE);
	r5 = D(r5, s1_1_0, 0x08F5FEF9, 0xE0E90EFE, 0x13F0FC08, 0x02FB0902);
	r6 = D(r6, s1_1_0, 0x03FEFF05, 0xFC090100, 0xFC0BFB05, 0xFF00FF08);
	r7 = D(r7, s1_1_0, 0x05F0FF17, 0x03020BFA, 0xF6F70009, 0xF7F4EA16);
	r0 = D(r0, s1_1_1, 0xF815020F, 0x0BF4EAFD, 0xE402F218, 0x10D5FC07);
	r1 = D(r1, s1_1_1, 0x14FDEA0A, 0xFDF5FAED, 0xF0D8FFEA, 0x26EB01FB);
	r2 = D(r2, s1_1_1, 0xF3C5FFDA, 0x00F112ED, 0x0501FEED, 0x0705E5D6);
	r3 = D(r3, s1_1_1, 0x04E2F10E, 0xF10C0114, 0x02E4080B, 0xEAE1FD0A);
	r4 = D(r4, s1_1_1, 0xEFFFFDF7, 0x0AE903EF, 0x083A0F0C, 0xECE90711);
	r5 = D(r5, s1_1_1, 0xEAB20DE7, 0xFCFCFEF5, 0xDE1DFABD, 0xEE17EEDB);
	r6 = D(r6, s1_1_1, 0x08F2F3FD, 0x0DDB1608, 0x13D8E7B9, 0x030E1910);
	r7 = D(r7, s1_1_1, 0x0601D4E4, 0xFED400F0, 0x053A1257, 0xF11316E2);
	r0 = D(r0, s1_1_2, 0xF10BF305, 0xED0DF508, 0xDA02CD06, 0xF903F501);
	r1 = D(r1, s1_1_2, 0x060001FE, 0xFCF714FE, 0x0E021A15, 0x10FB0D09);
	r2 = D(r2, s1_1_2, 0xFFDF0C0D, 0xF0E9FD04, 0x0C04FE00, 0x04111903);
	r3 = D(r3, s1_1_2, 0xDEF4F607, 0xF024F20D, 0x05FD0501, 0x01F905FE);
	r4 = D(r4, s1_1_2, 0xFA0405FE, 0x05FF0AFE, 0xFC01FFFC, 0x0E1B0502);
	r5 = D(r5, s1_1_2, 0x0903130A, 0xE5DBF903, 0x05030B06, 0xF1EE19F3);
	r6 = D(r6, s1_1_2, 0xFEFC0204, 0x00000EFE, 0x00EE0808, 0x01000300);
	r7 = D(r7, s1_1_2, 0x07F70704, 0x00FF0201, 0x06120C0A, 0xFA03F9F9);
	r0 = D(r0, s1_2_0, 0xFA0A05FE, 0xF90203FB, 0xFA0701F9, 0x0708FF02);
	r1 = D(r1, s1_2_0, 0x00060005, 0x060BF5EA, 0x1305FF01, 0xEDE802F4);
	r2 = D(r2, s1_2_0, 0x0A07FF01, 0xFEFE0201, 0x06090306, 0xEFFC0104);
	r3 = D(r3, s1_2_0, 0xF90706FC, 0xF600070A, 0x0702FFFE, 0xF3030A00);
	r4 = D(r4, s1_2_0, 0x0B050303, 0xF8F30107, 0xFEF70602, 0x050402FD);
	r5 = D(r5, s1_2_0, 0x0308FA05, 0x0404F808, 0xEEFE0F06, 0xFE0307FE);
	r6 = D(r6, s1_2_0, 0x030100FF, 0xFB020503, 0xE90C0004, 0x050DFFF8);
	r7 = D(r7, s1_2_0, 0xF5F1F8FB, 0x040400FD, 0x00FAFF05, 0xF1F5090A);
	r0 = D(r0, s1_2_1, 0xF0090E03, 0x060A0200, 0xD9C9F4FB, 0xF5EF0304);
	r1 = D(r1, s1_2_1, 0x1005F7F5, 0x1112D8EF, 0x140C0002, 0x09EE0500);
	r2 = D(r2, s1_2_1, 0x0D1B0109, 0x0D00FC03, 0x0E0C080A, 0x01E7F304);
	r3 = D(r3, s1_2_1, 0x0810F9FD, 0x070FFE16, 0xF100FF05, 0xF803FC04);
	r4 = D(r4, s1_2_1, 0xFC1303FC, 0x0E06030B, 0xF4FCFF06, 0xFB01FFFF);
	r5 = D(r5, s1_2_1, 0x0C110506, 0x0409FEFD, 0x11F9FE0A, 0xE90F060F);
	r6 = D(r6, s1_2_1, 0x0E0A04FE, 0xF603FE01, 0xF8FB0608, 0xDE38F207);
	r7 = D(r7, s1_2_1, 0x03110A0F, 0x0A110208, 0x02FEFA07, 0xF0ECF2FB);
	r0 = D(r0, s1_2_2, 0x0001FD01, 0xFDFAFF01, 0x07E309F9, 0x11040501);
	r1 = D(r1, s1_2_2, 0xFCFF0101, 0x00F4FD03, 0xFD020101, 0x0203010A);
	r2 = D(r2, s1_2_2, 0x06080303, 0x04160002, 0x000703FD, 0x0302FF01);
	r3 = D(r3, s1_2_2, 0x04F8FCFB, 0x0F030806, 0xFDFE0206, 0xFEFE0400);
	r4 = D(r4, s1_2_2, 0x05060002, 0x04FFFF03, 0x09050200, 0xF4EEFFFF);
	r5 = D(r5, s1_2_2, 0x0B00000B, 0x010BFB04, 0xD80604FC, 0x09F5FB00);
	r6 = D(r6, s1_2_2, 0xFD0301FE, 0x070503FF, 0xFB060601, 0xFA0BFFFA);
	r7 = D(r7, s1_2_2, 0xFCF0FDFB, 0x000B02FF, 0x04040606, 0x0608FE07);
	s0_0_0 = G[4][xy.y+0][xy.x+0]; s0_0_1 = G[4][xy.y+0][xy.x+1];
	s0_0_2 = G[4][xy.y+0][xy.x+2]; s0_1_0 = G[4][xy.y+1][xy.x+0];
	s0_1_1 = G[4][xy.y+1][xy.x+1]; s0_1_2 = G[4][xy.y+1][xy.x+2];
	s0_2_0 = G[4][xy.y+2][xy.x+0]; s0_2_1 = G[4][xy.y+2][xy.x+1];
	s0_2_2 = G[4][xy.y+2][xy.x+2]; s1_0_0 = G[5][xy.y+0][xy.x+0];
	s1_0_1 = G[5][xy.y+0][xy.x+1]; s1_0_2 = G[5][xy.y+0][xy.x+2];
	s1_1_0 = G[5][xy.y+1][xy.x+0]; s1_1_1 = G[5][xy.y+1][xy.x+1];
	s1_1_2 = G[5][xy.y+1][xy.x+2]; s1_2_0 = G[5][xy.y+2][xy.x+0];
	s1_2_1 = G[5][xy.y+2][xy.x+1]; s1_2_2 = G[5][xy.y+2][xy.x+2];
	r0 = D(r0, s0_0_0, 0x000302FF, 0x00F903FC, 0x0B04FCFC, 0x00FDFF04);
	r1 = D(r1, s0_0_0, 0xFB040204, 0xFCDF0403, 0x0202FDFB, 0xFFF50701);
	r2 = D(r2, s0_0_0, 0x02FDFAF7, 0xFBFE060A, 0xFDF908FA, 0x0204F4FB);
	r3 = D(r3, s0_0_0, 0xF8F9F503, 0x0103FE01, 0x060D02F2, 0xFDFAF4FA);
	r4 = D(r4, s0_0_0, 0x0201F6FA, 0xFA04F308, 0x0600FBFB, 0x01FEF901);
	r5 = D(r5, s0_0_0, 0x0005FFFD, 0xFBFCFD05, 0xFFFCFE00, 0x01FA0202);
	r6 = D(r6, s0_0_0, 0x02FF00FC, 0xFDFFFB07, 0xFD080DF8, 0x0006FAFF);
	r7 = D(r7, s0_0_0, 0xFDFEFCFF, 0xFF000009, 0x0301FAF8, 0xFD0A00F1);
	r0 = D(r0, s0_0_1, 0x0006F6FF, 0x02FBE601, 0xF30BCB26, 0x01FE07EC);
	r1 = D(r1, s0_0_1, 0x0A040EE9, 0x03E21403, 0x03F9FCFB, 0xFF0113FB);
	r2 = D(r2, s0_0_1, 0x0604D5F4, 0x07FEFEF1, 0x0107F2F7, 0x0405E6F0);
	r3 = D(r3, s0_0_1, 0x0AEF18EA, 0x0008F5FE, 0xF90BF70E, 0x00030902);
	r4 = D(r4, s0_0_1, 0xFDFFF70C, 0x040FFD00, 0xFA07DB02, 0x03080902);
	r5 = D(r5, s0_0_1, 0xFF080C05, 0xFCFA0F21, 0xFD0FF209, 0x08FDF8F7);
	r6 = D(r6, s0_0_1, 0xF8FF10FC, 0xFE0208FA, 0xF80017E2, 0x01FF0701);
	r7 = D(r7, s0_0_1, 0xFD03020A, 0x02F91A11, 0x0400E405, 0x01FA1204);
	r0 = D(r0, s0_0_2, 0xFF02FD03, 0x020100FD, 0x03FCE2FC, 0x0000FF00);
	r1 = D(r1, s0_0_2, 0x010001F8, 0xFDE00003, 0xF9FE2110, 0x00F9FF07);
	r2 = D(r2, s0_0_2, 0xFB02FFFA, 0x0B02F4F0, 0x01FA03F9, 0x03FE02FB);
	r3 = D(r3, s0_0_2, 0x02FFE704, 0x0103F4FF, 0xFF07FCFE, 0xFE02FE00);
	r4 = D(r4, s0_0_2, 0x0304FAFE, 0x04FCFD11, 0x000205FC, 0xF7FBEE02);
	r5 = D(r5, s0_0_2, 0xFBFD1006, 0x04FFFA0E, 0xFEFB0DF2, 0xF8FCFE02);
	r6 = D(r6, s0_0_2, 0x0500FCF2, 0x00000001, 0x03030EF8, 0x01060100);
	r7 = D(r7, s0_0_2, 0xFD04FC02, 0xFFFF05FD, 0xFCFA02FD, 0xF9FD0103);
	r0 = D(r0, s0_1_0, 0xFCFE0806, 0xEFFD09FF, 0x0B04F7F6, 0x00FEFD06);
	r1 = D(r1, s0_1_0, 0xF200FE02, 0xF9D9EF1E, 0xF9FC02F4, 0x00FD0AE4);
	r2 = D(r2, s0_1_0, 0xFB00FC01, 0x07FE04FA, 0x02F11702, 0xFCFD07E6);
	r3 = D(r3, s0_1_0, 0x11FDF710, 0xFF02F905, 0x080503F8, 0x0B07F904);
	r4 = D(r4, s0_1_0, 0x0107F901, 0x03F2F802, 0x0603F806, 0x00F303FB);
	r5 = D(r5, s0_1_0, 0xFD01FC03, 0x15010201, 0xFEF7F9FA, 0x0FFE07FB);
	r6 = D(r6, s0_1_0, 0x010002FA, 0xF404F80F, 0x17060AF0, 0xF806FD08);
	r7 = D(r7, s0_1_0, 0x060100F8, 0x0401FA17, 0x0303F80D, 0x15F9FEFC);
	r0 = D(r0, s0_1_1, 0xFD071612, 0x2CF6F909, 0x01FFD0F0, 0x27FB0BF3);
	r1 = D(r1, s0_1_1, 0x2B03F513, 0xF9E108D5, 0x05090627, 0x05FA0F1C);
	r2 = D(r2, s0_1_1, 0x07041B14, 0xBE0A0ECF, 0x25FB301A, 0x25060A0F);
	r3 = D(r3, s0_1_1, 0x04FA06CD, 0xE606ED19, 0x2F030E2A, 0xF7F5EEFC);
	r4 = D(r4, s0_1_1, 0xFAFEF7F9, 0x15091B29, 0xDA00FEF9, 0x15FEF620);
	r5 = D(r5, s0_1_1, 0x0D11F81F, 0xD2FEF907, 0xF60BFC05, 0xF2F500FD);
	r6 = D(r6, s0_1_1, 0x3DFEFF08, 0x25060CED, 0x41FEF607, 0x120781CA);
	r7 = D(r7, s0_1_1, 0xF4FDFE23, 0xE7020B42, 0xD90616D2, 0xEBFCF7FE);
	r0 = D(r0, s0_1_2, 0xFC010E0A, 0x02F600FF, 0xFCFCE9FA, 0x01FD05F6);
	r1 = D(r1, s0_1_2, 0xF70001F4, 0xF9DFF600, 0xE8FEFCEC, 0xF7F8010A);
	r2 = D(r2, s0_1_2, 0xFF000503, 0x0E090122, 0xF7FC00FD, 0xFB0401FB);
	r3 = D(r3, s0_1_2, 0xF6030607, 0xF300F3ED, 0xFF09FA02, 0x000400FC);
	r4 = D(r4, s0_1_2, 0xFC03FF07, 0xEE03FE00, 0x00FE0309, 0xE5FFFEF1);
	r5 = D(r5, s0_1_2, 0xFA06F2E9, 0x15FF0617, 0x04FCFB05, 0x0700FFF5);
	r6 = D(r6, s0_1_2, 0x10FC03F6, 0x01FDFE00, 0x170204E9, 0xFA030503);
	r7 = D(r7, s0_1_2, 0xF902FE01, 0x07FEFDFF, 0xF603FE0A, 0x01FD05FB);
	r0 = D(r0, s0_2_0, 0xF8080601, 0x000102F9, 0xFA050011, 0x04FE01FE);
	r1 = D(r1, s0_2_0, 0xFEFF00FF, 0xEADAFC1C, 0xFDF8FF09, 0xF50804FD);
	r2 = D(r2, s0_2_0, 0xFEFC0005, 0x0003FF01, 0xF200FC01, 0xFC0503F7);
	r3 = D(r3, s0_2_0, 0x08FEFD08, 0xFD0003FF, 0xFF050500, 0xFB06FA0A);
	r4 = D(r4, s0_2_0, 0xFF07FF03, 0x0EFC01FC, 0x0303FF03, 0x00000200);
	r5 = D(r5, s0_2_0, 0xEC0802FC, 0x0C0602FB, 0xFC08FD08, 0x0700FD07);
	r6 = D(r6, s0_2_0, 0x01FDFE01, 0x010201F9, 0xF70300FC, 0x02FDFB05);
	r7 = D(r7, s0_2_0, 0x0602FDFC, 0x07FBFE0B, 0xFE000400, 0xF10904FD);
	r0 = D(r0, s0_2_1, 0xCF0809EF, 0xF9FF0200, 0x0A0AF1FC, 0x0E01FF01);
	r1 = D(r1, s0_2_1, 0xF60002F9, 0x1EE2F118, 0xF0F6FF02, 0xFF04020A);
	r2 = D(r2, s0_2_1, 0xF2FA01FC, 0xFB010200, 0xD4010DE4, 0xF6FC04FF);
	r3 = D(r3, s0_2_1, 0xF6FFFFF9, 0x1705F70C, 0x0C000107, 0xF100FDFF);
	r4 = D(r4, s0_2_1, 0x0302FD05, 0xEEFF06F3, 0xFC04FC0D, 0x00FCFE00);
	r5 = D(r5, s0_2_1, 0xFB05FE0C, 0x07F903FF, 0xF6F905EA, 0xF1F802F5);
	r6 = D(r6, s0_2_1, 0xF2020001, 0x06FD0205, 0x06FF0109, 0xEB02FC02);
	r7 = D(r7, s0_2_1, 0x1BFF04FA, 0xDF0205F6, 0xFAF9FE09, 0x09F8F806);
	r0 = D(r0, s0_2_2, 0xF3030703, 0x01FDFDFF, 0x0E01F315, 0xF703FFFE);
	r1 = D(r1, s0_2_2, 0xF90000FC, 0xE4E2F803, 0xEA030200, 0xF40204F6);
	r2 = D(r2, s0_2_2, 0xEB0002FF, 0xE60103FF, 0x00000002, 0xFBFFFEFD);
	r3 = D(r3, s0_2_2, 0xF4040201, 0xFD0401FC, 0x060202FD, 0x010100FF);
	r4 = D(r4, s0_2_2, 0xFD01FEFF, 0xFB04FF01, 0x040103FA, 0x03010001);
	r5 = D(r5, s0_2_2, 0xF107FFF5, 0x01FC05F8, 0xF5FAFD06, 0xEDFC00FE);
	r6 = D(r6, s0_2_2, 0x0000FF00, 0x05FDFFFD, 0xFAFEFEFD, 0x02FDFB03);
	r7 = D(r7, s0_2_2, 0xFC0002FD, 0xFEFF0102, 0xFCFCFD01, 0xEFFE0000);
	r0 = D(r0, s1_0_0, 0x05FE02FD, 0x0FFD0505, 0xF5F006EE, 0xFB060005);
	r1 = D(r1, s1_0_0, 0x0508FE07, 0xFD09FE02, 0x1009010B, 0xEAF700EE);
	r2 = D(r2, s1_0_0, 0x0906FE03, 0xFCFD04FD, 0xFA0003FE, 0xF3FF0202);
	r3 = D(r3, s1_0_0, 0x0F110006, 0x0404FBFB, 0x0A070403, 0x110FFB06);
	r4 = D(r4, s1_0_0, 0xC1FA11E0, 0xE3FE09FF, 0x08F5FDFE, 0xF504FA05);
	r5 = D(r5, s1_0_0, 0xFE0A0701, 0xF1FBFEF9, 0xF6EF0103, 0xFF08FDFF);
	r6 = D(r6, s1_0_0, 0xF3FFFD06, 0x04030102, 0x0A0CF304, 0xFD0101FC);
	r7 = D(r7, s1_0_0, 0x01EEF8FE, 0xFE000002, 0x00F500FD, 0xFCF6F302);
	r0 = D(r0, s1_0_1, 0x03FF0BFB, 0x1004F9F9, 0x1A13EF24, 0x02F1FFFF);
	r1 = D(r1, s1_0_1, 0xFFFA02FC, 0xFD0B0905, 0xED02FF00, 0x0D0E0107);
	r2 = D(r2, s1_0_1, 0xF0030F02, 0xE6030AF6, 0x12050F07, 0x0704F10C);
	r3 = D(r3, s1_0_1, 0xDDE01408, 0x03060402, 0xFBF8F5FC, 0xE7031907);
	r4 = D(r4, s1_0_1, 0x0DFE080B, 0x0105FCF8, 0xFEEC1100, 0x1609E514);
	r5 = D(r5, s1_0_1, 0x0807020A, 0xFA02EEE8, 0x0510F10E, 0xF200F600);
	r6 = D(r6, s1_0_1, 0xFEFA0202, 0xFC040406, 0xDEE90E08, 0x03FF0603);
	r7 = D(r7, s1_0_1, 0xFB06FD04, 0xFDFDFD06, 0x1102F105, 0xFCFAF6FC);
	r0 = D(r0, s1_0_2, 0xFDFD03FC, 0xEDFF1700, 0xF0F7F8EA, 0xFFFDF6F9);
	r1 = D(r1, s1_0_2, 0xFEF902FD, 0xFBFCFF01, 0x00FEDC04, 0xFD0BFC00);
	r2 = D(r2, s1_0_2, 0x0A05F004, 0x0907190F, 0x01FAFCFF, 0x03FE02FE);
	r3 = D(r3, s1_0_2, 0xFDFE0D04, 0x08FD04F8, 0x0C0607FF, 0x01000601);
	r4 = D(r4, s1_0_2, 0xFF030E07, 0x00FA11F0, 0x02FDF70C, 0xF6EEEBF1);
	r5 = D(r5, s1_0_2, 0xFD080B05, 0x0A011904, 0xEF04F200, 0x090E160C);
	r6 = D(r6, s1_0_2, 0xF9FEF2FD, 0x0202FFFD, 0x04E5FE12, 0x03020006);
	r7 = D(r7, s1_0_2, 0x0501FF05, 0x0303FB04, 0xFF0AF708, 0x0804020A);
	r0 = D(r0, s1_1_0, 0x01F8FFFF, 0xF804FE0B, 0x0DFC0507, 0x00150A04);
	r1 = D(r1, s1_1_0, 0x0411030C, 0xF40E090E, 0xFCFE010F, 0xF617060B);
	r2 = D(r2, s1_1_0, 0x00F6F706, 0xFDF8F8F0, 0x0102FAF3, 0x0306EEFA);
	r3 = D(r3, s1_1_0, 0xEE14030B, 0xFEECFDFE, 0xFC020503, 0xEEF8FBFF);
	r4 = D(r4, s1_1_0, 0x03E9F8E1, 0xF6F20AFC, 0xF9FCFBFE, 0x03F2FFFE);
	r5 = D(r5, s1_1_0, 0x0002F900, 0x04DC05F3, 0xF4E70402, 0xFCF7FDFD);
	r6 = D(r6, s1_1_0, 0x01010701, 0xFF070208, 0x0417020C, 0xF80FFC04);
	r7 = D(r7, s1_1_0, 0xEEFB01FC, 0xF8030201, 0x0200F4F8, 0xF8EBFDF5);
	r0 = D(r0, s1_1_1, 0xFFFE17F3, 0xE9F8FF01, 0xFBF90512, 0xF1080F00);
	r1 = D(r1, s1_1_1, 0xFC050CF9, 0x13021E12, 0xFFFEF2FE, 0x070A04FC);
	r2 = D(r2, s1_1_1, 0x05F0F1EC, 0x03F504FE, 0xF9020C0D, 0x080D111C);
	r3 = D(r3, s1_1_1, 0xFCD0F70D, 0x1401EF10, 0x04FC0502, 0x05F0E706);
	r4 = D(r4, s1_1_1, 0xFAFF0814, 0x2904010D, 0xFDFB0CFC, 0x020F0110);
	r5 = D(r5, s1_1_1, 0x020B050B, 0x0BF315FF, 0x03FC1722, 0x14F4D003);
	r6 = D(r6, s1_1_1, 0xEFFEF6F7, 0xF3000B01, 0xEA13EA00, 0xFF0003F4);
	r7 = D(r7, s1_1_1, 0x0F00F9FF, 0x01FD01FE, 0xFF070D0C, 0x05F10305);
	r0 = D(r0, s1_1_2, 0x01FAFC08, 0x0A01F8FD, 0x0EFA2909, 0xF902F6FE);
	r1 = D(r1, s1_1_2, 0x00050504, 0x02F726FB, 0xFCFCFAE7, 0xFAED14FD);
	r2 = D(r2, s1_1_2, 0xFCF5EAFC, 0x0100F11F, 0xF90BEC08, 0xF507CAFB);
	r3 = D(r3, s1_1_2, 0x1CFBE514, 0xEDDA0CE7, 0xF800FA03, 0x10FB1507);
	r4 = D(r4, s1_1_2, 0xFFFCF307, 0xF6FEEE03, 0x0303FC02, 0xF3F80FF5);
	r5 = D(r5, s1_1_2, 0xF605F8F4, 0x07F90106, 0xFEF10210, 0xFD0CF310);
	r6 = D(r6, s1_1_2, 0x02020404, 0x0106F903, 0xFC1BE5FB, 0xF90BFEFA);
	r7 = D(r7, s1_1_2, 0x0D03FF06, 0x02FFFE01, 0xF8FEF2E9, 0xF1F5FA04);
	r0 = D(r0, s1_2_0, 0xFC060001, 0xFEFE020A, 0xF91C080C, 0xF4010001);
	r1 = D(r1, s1_2_0, 0xFB15FF08, 0x1005060B, 0xFE100401, 0xFFE602D4);
	r2 = D(r2, s1_2_0, 0x04090000, 0xFF020103, 0xF9000907, 0x01FCFD04);
	r3 = D(r3, s1_2_0, 0x060F0403, 0x0107FF00, 0xFEFEFA03, 0x140408FE);
	r4 = D(r4, s1_2_0, 0x0003FFFC, 0xF8EF04F4, 0x02F702FF, 0xFF030402);
	r5 = D(r5, s1_2_0, 0xFD130109, 0x04F7F7FA, 0xFFF7FCFC, 0x07FD0003);
	r6 = D(r6, s1_2_0, 0xFE040004, 0xFE00FB02, 0xF30B0707, 0x05E90102);
	r7 = D(r7, s1_2_0, 0x0CFF01F7, 0x03FE0201, 0xFB0001F9, 0x00F20604);
	r0 = D(r0, s1_2_1, 0xFD060106, 0x05FAFFFC, 0x06E806D3, 0xF0F7FEFE);
	r1 = D(r1, s1_2_1, 0xFE01FFF7, 0x0DFDEA22, 0xFF090708, 0xEB040007);
	r2 = D(r2, s1_2_1, 0xFE06FB04, 0xF604FA04, 0xF4FC07EB, 0xFA03040A);
	r3 = D(r3, s1_2_1, 0x00FA0107, 0xFA13040B, 0xFAFDFCFB, 0x05FEE405);
	r4 = D(r4, s1_2_1, 0x0501FD01, 0xFF0F0D04, 0x05F6FEFE, 0x060FFC04);
	r5 = D(r5, s1_2_1, 0xF110F310, 0x0200ECF6, 0xEAF7060B, 0xFE0E090C);
	r6 = D(r6, s1_2_1, 0x000100FE, 0x05F50403, 0xEAE7FEED, 0xEDF3FEF3);
	r7 = D(r7, s1_2_1, 0xFE05FB00, 0xF8FC00FB, 0x07030709, 0x00FC01FE);
	r0 = D(r0, s1_2_2, 0x01020105, 0x0903FE05, 0x0015E605, 0x02F903FF);
	r1 = D(r1, s1_2_2, 0xFF00F2FE, 0xF8F7FAF2, 0xF90BE6FF, 0xFA0A06FE);
	r2 = D(r2, s1_2_2, 0xFB08F902, 0x02140303, 0xF70503FD, 0xFDFCF701);
	r3 = D(r3, s1_2_2, 0x08F9F4F3, 0x0505FDEB, 0x01FDFCFD, 0x01020601);
	r4 = D(r4, s1_2_2, 0xFD07FDFE, 0xEDF6FDFF, 0x04000B03, 0x03F500FB);
	r5 = D(r5, s1_2_2, 0x0910F205, 0xF609F1F3, 0xF506F30A, 0x02FCFFFF);
	r6 = D(r6, s1_2_2, 0xFB080506, 0x00FCFE01, 0xFBF30309, 0x04FC01FD);
	r7 = D(r7, s1_2_2, 0x0201FD01, 0x00000102, 0x0701FCFE, 0x01FD04F5);
	s0_0_0 = G[6][xy.y+0][xy.x+0]; s0_0_1 = G[6][xy.y+0][xy.x+1];
	s0_0_2 = G[6][xy.y+0][xy.x+2]; s0_1_0 = G[6][xy.y+1][xy.x+0];
	s0_1_1 = G[6][xy.y+1][xy.x+1]; s0_1_2 = G[6][xy.y+1][xy.x+2];
	s0_2_0 = G[6][xy.y+2][xy.x+0]; s0_2_1 = G[6][xy.y+2][xy.x+1];
	s0_2_2 = G[6][xy.y+2][xy.x+2]; s1_0_0 = G[7][xy.y+0][xy.x+0];
	s1_0_1 = G[7][xy.y+0][xy.x+1]; s1_0_2 = G[7][xy.y+0][xy.x+2];
	s1_1_0 = G[7][xy.y+1][xy.x+0]; s1_1_1 = G[7][xy.y+1][xy.x+1];
	s1_1_2 = G[7][xy.y+1][xy.x+2]; s1_2_0 = G[7][xy.y+2][xy.x+0];
	s1_2_1 = G[7][xy.y+2][xy.x+1]; s1_2_2 = G[7][xy.y+2][xy.x+2];
	r0 = D(r0, s0_0_0, 0x00F70103, 0xFAF6FEFD, 0xF90F0006, 0x04EFFFFB);
	r1 = D(r1, s0_0_0, 0x06EF04FC, 0x02FB03FE, 0x0206F7FE, 0x04EDFF00);
	r2 = D(r2, s0_0_0, 0xFCFDF9FF, 0xFB040200, 0x07030001, 0x06FB0004);
	r3 = D(r3, s0_0_0, 0x05EAFD00, 0xFF03FCFE, 0x00FEFBFF, 0x08E30300);
	r4 = D(r4, s0_0_0, 0xFB150D06, 0x0AF7FDFF, 0xFCF8F502, 0x0004FEFF);
	r5 = D(r5, s0_0_0, 0x0A040F03, 0x000300FB, 0xF9060401, 0x0600030B);
	r6 = D(r6, s0_0_0, 0x06FA0500, 0x03F901FC, 0x01F5F8F9, 0x02090201);
	r7 = D(r7, s0_0_0, 0xFFFCFEFE, 0xFF0101FE, 0xF705F501, 0xFFF70301);
	r0 = D(r0, s0_0_1, 0xFD030400, 0xF9E904FF, 0xFFEEF6F4, 0x010304FF);
	r1 = D(r1, s0_0_1, 0x040604FB, 0x000202F1, 0xF80E09FD, 0xFFCE0003);
	r2 = D(r2, s0_0_1, 0xF6F4F709, 0x09200707, 0x03FDFA04, 0x03F2FA00);
	r3 = D(r3, s0_0_1, 0xF8FD0DF6, 0x03FBFDF9, 0x000C040B, 0xFF130FF2);
	r4 = D(r4, s0_0_1, 0x00F30209, 0x020E0306, 0x0307F4F0, 0xFFFC02F6);
	r5 = D(r5, s0_0_1, 0x08F8F9FD, 0xFFFF02FF, 0x02F7FF08, 0x04FE03F3);
	r6 = D(r6, s0_0_1, 0x02FBFFF3, 0xFC05FF00, 0x0BF906F2, 0xFE0FFA01);
	r7 = D(r7, s0_0_1, 0xFFF10201, 0xFF0400FD, 0xFBFEF4EF, 0xFBF8FCF4);
	r0 = D(r0, s0_0_2, 0x01FAFF01, 0xFDFF04F6, 0x040204F4, 0xFDFFFB01);
	r1 = D(r1, s0_0_2, 0xFDF60200, 0xFC0704FA, 0xEF090AFF, 0x021204F7);
	r2 = D(r2, s0_0_2, 0x01140403, 0x07F809F8, 0xFF0300F6, 0x020903FD);
	r3 = D(r3, s0_0_2, 0xFA06F308, 0x0417F9FA, 0x01F8FFFD, 0xFEF70403);
	r4 = D(r4, s0_0_2, 0xFF0401FF, 0xFD07FEFB, 0xFE0100FB, 0x010505FC);
	r5 = D(r5, s0_0_2, 0x000105F3, 0xFC09FE0B, 0x050408E3, 0xFD09FA06);
	r6 = D(r6, s0_0_2, 0xFFFC0100, 0x000901FF, 0xFDCAF0FF, 0x000DFFFD);
	r7 = D(r7, s0_0_2, 0x00FB0002, 0x000601FD, 0x000F02F6, 0xFE090A08);
	r0 = D(r0, s0_1_0, 0xFB070002, 0x08FAFF05, 0xFD090503, 0x020406FA);
	r1 = D(r1, s0_1_0, 0xFDFB0BFD, 0x01FF0601, 0x0AFB09FF, 0xF411FCFA);
	r2 = D(r2, s0_1_0, 0x01F10702, 0xF601FAFF, 0xEAED0EFB, 0xE31C0A0C);
	r3 = D(r3, s0_1_0, 0x0FFA0CFC, 0x0605F306, 0x06000601, 0xFC01FDFD);
	r4 = D(r4, s0_1_0, 0xF506E712, 0xF50304FE, 0x0F0EF903, 0xFE0603FC);
	r5 = D(r5, s0_1_0, 0x0602F102, 0x02F8F505, 0xFF04010C, 0x0803F902);
	r6 = D(r6, s0_1_0, 0x000208FE, 0x02FD0300, 0x0D080D09, 0xFA0B0002);
	r7 = D(r7, s0_1_0, 0x04FE0302, 0x03F709FA, 0xFE07F106, 0xFC000E04);
	r0 = D(r0, s0_1_1, 0xF30CF11B, 0xF30E040C, 0xECFDFC01, 0x01F4FAFF);
	r1 = D(r1, s0_1_1, 0xFA09FFFD, 0x000BFBFF, 0xB2F3FAED, 0xFA050303);
	r2 = D(r2, s0_1_1, 0xDDEBFEF1, 0x3E09F003, 0x03ED01F4, 0xF5F807FA);
	r3 = D(r3, s0_1_1, 0xF104F200, 0x03F2ECF9, 0xDF0306F8, 0x101008EF);
	r4 = D(r4, s0_1_1, 0x11F3ED0A, 0xEF030605, 0x0113FE02, 0xC1F20400);
	r5 = D(r5, s0_1_1, 0xD90609DD, 0xE7EC0CF4, 0x04DC06DD, 0xE1F30DE0);
	r6 = D(r6, s0_1_1, 0xF7FDFE07, 0xF500FBF7, 0xFB2709F2, 0x09090516);
	r7 = D(r7, s0_1_1, 0xF7FF01EA, 0xFFFDFFFD, 0xF9D3FAE0, 0xF9EB13D0);
	r0 = D(r0, s0_1_2, 0xFC04FC08, 0xF80A070C, 0xF709FF07, 0x0207FFF9);
	r1 = D(r1, s0_1_2, 0x010005FA, 0xFDFD06F9, 0xF7EB11E5, 0xF8F502DE);
	r2 = D(r2, s0_1_2, 0xF8FC10F4, 0xF5FD050A, 0x02020302, 0xFF130A02);
	r3 = D(r3, s0_1_2, 0x04C1EE00, 0xFE1AF5E5, 0x010A03FF, 0x05F4F5FB);
	r4 = D(r4, s0_1_2, 0xFD0107FE, 0xF50F0303, 0x0509F9F6, 0x0915F3FA);
	r5 = D(r5, s0_1_2, 0x0CFE0AE4, 0xFEDD0B05, 0xFC0301F6, 0x0FF2FAF1);
	r6 = D(r6, s0_1_2, 0x01FD0AFF, 0x0402FF00, 0x000512F8, 0x020803FD);
	r7 = D(r7, s0_1_2, 0xFCFFFEFE, 0x04FA05FA, 0x0005F8F1, 0x0DEFF6EF);
	r0 = D(r0, s0_2_0, 0xFBF9F805, 0x02FE0000, 0x03F11500, 0xFD0407FF);
	r1 = D(r1, s0_2_0, 0xFD000002, 0xEC050501, 0x00FD0DFC, 0x0012F305);
	r2 = D(r2, s0_2_0, 0xFEFE08FF, 0xFEFF0200, 0xFE071001, 0xFB140EFE);
	r3 = D(r3, s0_2_0, 0xFE020803, 0xFC02F3FD, 0x000700FC, 0xE4000100);
	r4 = D(r4, s0_2_0, 0x0009FC02, 0xF80000F9, 0xFCFDFFFC, 0x01FF01FD);
	r5 = D(r5, s0_2_0, 0x01F806FD, 0xFC0AF602, 0x0406F504, 0x05070403);
	r6 = D(r6, s0_2_0, 0x02F90102, 0xFCFF00FE, 0xF8F6FF01, 0x030A0503);
	r7 = D(r7, s0_2_0, 0xFE00F7FE, 0xFC0105FD, 0xF305FEFD, 0x03F8FFF9);
	r0 = D(r0, s0_2_1, 0x1004EBFD, 0xFB010201, 0x0114F3F9, 0xF1F5F8FE);
	r1 = D(r1, s0_2_1, 0x050DF901, 0x2614F6FE, 0xFFF90C02, 0xFEF002FA);
	r2 = D(r2, s0_2_1, 0xF2F60D07, 0x0206FFFE, 0xF30E09D5, 0xF908100D);
	r3 = D(r3, s0_2_1, 0xF0E80201, 0xF6ECFCFF, 0xF1090B02, 0xF508EEF0);
	r4 = D(r4, s0_2_1, 0xFDF90305, 0xF9FE01F1, 0x000100F5, 0x05EB01FC);
	r5 = D(r5, s0_2_1, 0xF7F70EFD, 0x0E120405, 0xF9E710F0, 0xF2E610FB);
	r6 = D(r6, s0_2_1, 0x03FF0000, 0xFDFE05FB, 0xEA13F6FD, 0x03F80306);
	r7 = D(r7, s0_2_1, 0xF7E0FDFD, 0xF7FB0702, 0xF0F9FDF3, 0xFFEAED08);
	r0 = D(r0, s0_2_2, 0xFE00F6FF, 0xFCF0F702, 0x03E1FB0B, 0x03F6FE07);
	r1 = D(r1, s0_2_2, 0xFF04FD03, 0xF3FB04FA, 0xFF07FDF9, 0xFA080CF2);
	r2 = D(r2, s0_2_2, 0xFC0009F4, 0xFEF60705, 0xFDFC0FF7, 0x010E0BFD);
	r3 = D(r3, s0_2_2, 0xFBFB0000, 0x0315F8EF, 0xFCFB0AF8, 0x04F706F7);
	r4 = D(r4, s0_2_2, 0xFE010303, 0x01040303, 0x0303FEFB, 0x02FAF5FE);
	r5 = D(r5, s0_2_2, 0xF70EF9F8, 0xF5FF0502, 0xFA0CF9E3, 0xFE0E00F9);
	r6 = D(r6, s0_2_2, 0x01FC04FE, 0x010101FB, 0x0001FEFD, 0xFF110404);
	r7 = D(r7, s0_2_2, 0xFFF501F2, 0xFF010BFF, 0xFF07FEFC, 0xFEF0FFFE);
	r0 = D(r0, s1_0_0, 0xFDFE02FD, 0xFF0200F1, 0x00030106, 0xFAF401FE);
	r1 = D(r1, s1_0_0, 0x03F20102, 0x01050106, 0xFBFBFDF9, 0x0C000100);
	r2 = D(r2, s1_0_0, 0x05FFF9D9, 0xF5FA03FF, 0x04FD02FC, 0x07FF02F4);
	r3 = D(r3, s1_0_0, 0xFDFB05F8, 0xFC010103, 0xF3FE0305, 0x0E010000);
	r4 = D(r4, s1_0_0, 0xF81A01F5, 0xF2F50501, 0xF40500F4, 0xEBFEFF0E);
	r5 = D(r5, s1_0_0, 0x1700FFFA, 0xFB060418, 0x1303020B, 0x060201F3);
	r6 = D(r6, s1_0_0, 0x07FF0113, 0x00F505FC, 0xDBF9F8FF, 0x00020206);
	r7 = D(r7, s1_0_0, 0x07FEFF02, 0xFDFFFE04, 0xFF000301, 0x0CFD00F9);
	r0 = D(r0, s1_0_1, 0x03FA03FD, 0x1DFBFF0D, 0xDDBFFFF7, 0xF91003FD);
	r1 = D(r1, s1_0_1, 0xFE15FF01, 0x08FFFE03, 0x0017F420, 0x04FBFA08);
	r2 = D(r2, s1_0_1, 0x0A09EBF5, 0xFB0C020C, 0xF004FEFC, 0xF6FDF2F9);
	r3 = D(r3, s1_0_1, 0x001E0D09, 0xEF02FC04, 0xF5F700FD, 0x06FF07FD);
	r4 = D(r4, s1_0_1, 0x01F50301, 0xE8020409, 0x06030205, 0xE70602F8);
	r5 = D(r5, s1_0_1, 0x00F5F710, 0x01F70311, 0xFD05FCF5, 0xF8EA0B01);
	r6 = D(r6, s1_0_1, 0xED110813, 0xFB05FEFD, 0xD8E9FF0B, 0xFEFAFD07);
	r7 = D(r7, s1_0_1, 0x07FDFEFE, 0x00FDFBFE, 0x0DF6FCED, 0x1303FA14);
	r0 = D(r0, s1_0_2, 0x01FC00FE, 0xFDFC0101, 0x0AF900FD, 0x0705F900);
	r1 = D(r1, s1_0_2, 0xFF01F901, 0x03FE0102, 0xF60F0107, 0x0802FA03);
	r2 = D(r2, s1_0_2, 0xFEF4F4FF, 0xF5F30303, 0x09050200, 0x060902FD);
	r3 = D(r3, s1_0_2, 0x02F8FCF3, 0x090301FE, 0x060101FE, 0x020200FE);
	r4 = D(r4, s1_0_2, 0x01F701FC, 0x00070404, 0x020302FF, 0x041D0903);
	r5 = D(r5, s1_0_2, 0x060307FD, 0xEED404FE, 0x0E100100, 0xF1E40101);
	r6 = D(r6, s1_0_2, 0xFDFC0203, 0x06FB00FE, 0x020203FE, 0xFDFD00FF);
	r7 = D(r7, s1_0_2, 0x01020401, 0xFDFDFD01, 0x090302FD, 0xF9FDFA02);
	r0 = D(r0, s1_1_0, 0x0E0302DF, 0x15FD04FC, 0xFC11FCDC, 0x06110410);
	r1 = D(r1, s1_1_0, 0xFE0403F7, 0xF2F507F9, 0x0FFD0602, 0xD822FD1B);
	r2 = D(r2, s1_1_0, 0x0EF5F605, 0x0CFBFD01, 0x0C01FA1C, 0xF00AECE0);
	r3 = D(r3, s1_1_0, 0x010304F8, 0x0B08FF02, 0x080302E9, 0x13F9F509);
	r4 = D(r4, s1_1_0, 0xB7E401FA, 0xE117FF09, 0x06F80014, 0xFE07FBED);
	r5 = D(r5, s1_1_0, 0xE1F6F812, 0xF0F005F9, 0x031AFC01, 0xF50201FB);
	r6 = D(r6, s1_1_0, 0x01FD0508, 0x01FF0005, 0xF4ECFF0B, 0x010305F4);
	r7 = D(r7, s1_1_0, 0x0305FC0E, 0x03FA0102, 0xF6F30116, 0x0015F313);
	r0 = D(r0, s1_1_1, 0xFEEA02ED, 0xD7EFEC05, 0xCED1FFD7, 0xF307FFF3);
	r1 = D(r1, s1_1_1, 0xF501F2ED, 0xF7210406, 0xF9FFF2FC, 0xF516F525);
	r2 = D(r2, s1_1_1, 0xE2ECE90F, 0xF2EAF9FD, 0x05E1F2FF, 0x2DE5DEFA);
	r3 = D(r3, s1_1_1, 0xF3F9FFE9, 0xFFDA01FF, 0x05FD140C, 0xC90D17F7);
	r4 = D(r4, s1_1_1, 0x0D1807FE, 0xED040401, 0xEC1BF804, 0x010D02F8);
	r5 = D(r5, s1_1_1, 0x20020FFF, 0x07E2020F, 0xDF09021E, 0x08FF0704);
	r6 = D(r6, s1_1_1, 0xF8000002, 0x1C0DFC05, 0xD8E10714, 0x19FCF7FD);
	r7 = D(r7, s1_1_1, 0xFDEFFF14, 0x0404FF02, 0x15010907, 0x2FF01500);
	r0 = D(r0, s1_1_2, 0x0A00FFFB, 0x11F50907, 0x1C1500F3, 0x050AF5FF);
	r1 = D(r1, s1_1_2, 0x04FAF001, 0xFD160409, 0xE81C1702, 0xEF080206);
	r2 = D(r2, s1_1_2, 0xFF10F608, 0x172203FF, 0xF6FAF806, 0xFB08F700);
	r3 = D(r3, s1_1_2, 0xF720F105, 0xEF100102, 0xFBF6FCFF, 0x03F60100);
	r4 = D(r4, s1_1_2, 0x0303FDFD, 0xE8FC0205, 0x02070702, 0xF4F70001);
	r5 = D(r5, s1_1_2, 0xFAF817FD, 0xFCE603FA, 0x0AF706F5, 0x0DEF0A00);
	r6 = D(r6, s1_1_2, 0x12040500, 0xFEFD00FF, 0xF6EC090A, 0xF309FFFF);
	r7 = D(r7, s1_1_2, 0xFFFB0103, 0x05070202, 0xE70A0207, 0x120B04F7);
	r0 = D(r0, s1_2_0, 0x090300F9, 0xFEFF0201, 0x090C02FD, 0xFC080901);
	r1 = D(r1, s1_2_0, 0xFE04F8FC, 0xF3090608, 0xFF06FCFD, 0x00EF0004);
	r2 = D(r2, s1_2_0, 0xFB04FD08, 0x05FC0307, 0x1000090D, 0x04F1FA0E);
	r3 = D(r3, s1_2_0, 0xF7FAFF02, 0x02FF01FD, 0xFCFD02FE, 0xF5F60202);
	r4 = D(r4, s1_2_0, 0xFFFFFE00, 0xEF0500FE, 0xF90706FF, 0x0301FDFD);
	r5 = D(r5, s1_2_0, 0x02050CFC, 0xF6F20008, 0x0102F8F8, 0xF6FBFF02);
	r6 = D(r6, s1_2_0, 0x0102FFFA, 0x03FFFFFA, 0x09FF0107, 0x09F504FE);
	r7 = D(r7, s1_2_0, 0xF204FE0A, 0xFA040201, 0x02FA09FF, 0x14FE00FA);
	r0 = D(r0, s1_2_1, 0x10F9FAFA, 0x07EDFE04, 0xBCBBF3FA, 0xF5120306);
	r1 = D(r1, s1_2_1, 0x0FFEEFFA, 0x18D90302, 0x070BF9FE, 0xFD0DF7FF);
	r2 = D(r2, s1_2_1, 0x0B090402, 0xFE000101, 0x16F40BFF, 0xFB0CE2FF);
	r3 = D(r3, s1_2_1, 0x03F0FC0A, 0x08FDFC06, 0x04F500FD, 0x0F010BFA);
	r4 = D(r4, s1_2_1, 0xFE040102, 0x0EFEFBFF, 0xFB060707, 0x09FC0401);
	r5 = D(r5, s1_2_1, 0x050CF9FE, 0xF9F0060A, 0x021705FF, 0x06F00BFB);
	r6 = D(r6, s1_2_1, 0x0801FEFF, 0xFBFF0202, 0xEF0AFB00, 0xE4F60506);
	r7 = D(r7, s1_2_1, 0x020CFEFF, 0x0AFF00FD, 0xF7FD0601, 0xFF06F50F);
	r0 = D(r0, s1_2_2, 0xFB00FFFE, 0x04010202, 0xF5FBFD02, 0xFDFDF902);
	r1 = D(r1, s1_2_2, 0xFEFAE903, 0xFC0DFE09, 0x03F50205, 0x00F8FBFE);
	r2 = D(r2, s1_2_2, 0x08FF0801, 0x08FF0100, 0xFDFB0402, 0x02FBFE02);
	r3 = D(r3, s1_2_2, 0xF1FAFD07, 0x04F80505, 0xFC0702FE, 0xF7040502);
	r4 = D(r4, s1_2_2, 0xFC010000, 0xFEFA06FA, 0x000203FF, 0xFD010202);
	r5 = D(r5, s1_2_2, 0x11FA1203, 0x03EE04FB, 0x06170B00, 0x00000F05);
	r6 = D(r6, s1_2_2, 0x07FE00FF, 0xFE030101, 0x01010702, 0x00FE00FE);
	r7 = D(r7, s1_2_2, 0x040402FF, 0x04FF01FF, 0xF7030901, 0x0CF50501);
	f0 = vec4(r0) * 6.2000124e-05;
	f0 += vec4(1.330e-02, -2.125e-02, 7.972e-03, -1.966e-02);
	f0 = clamp(f0, vec4(0.0), vec4(1.0));
	imageStore(out_image, opos + ivec2(0, 0), f0);
	f1 = vec4(r1) * 6.2000124e-05;
	f1 += vec4(-2.910e-03, -1.073e-02, -1.745e-02, 1.649e-02);
	f1 = clamp(f1, vec4(0.0), vec4(1.0));
	imageStore(out_image, opos + ivec2(1, 0), f1);
	f2 = vec4(r2) * 6.2000124e-05;
	f2 += vec4(-4.371e-03, 1.559e-02, -1.285e-02, -2.280e-03);
	f2 = clamp(f2, vec4(0.0), vec4(1.0));
	imageStore(out_image, opos + ivec2(0, 1), f2);
	f3 = vec4(r3) * 6.2000124e-05;
	f3 += vec4(-4.354e-03, 1.329e-02, -1.822e-02, -1.697e-02);
	f3 = clamp(f3, vec4(0.0), vec4(1.0));
	imageStore(out_image, opos + ivec2(1, 1), f3);
	f4 = vec4(r4) * 6.2000124e-05;
	f4 += vec4(6.869e-03, -9.075e-03, -6.756e-03, -2.005e-02);
	f4 = clamp(f4, vec4(0.0), vec4(1.0));
	imageStore(out_image, opos + ivec2(2, 0), f4);
	f5 = vec4(r5) * 6.2000124e-05;
	f5 += vec4(-5.312e-02, -1.973e-02, -1.013e-02, -8.335e-03);
	f5 = clamp(f5, vec4(0.0), vec4(1.0));
	imageStore(out_image, opos + ivec2(3, 0), f5);
	f6 = vec4(r6) * 6.2000124e-05;
	f6 += vec4(-2.799e-02, 9.385e-04, -1.232e-02, 5.494e-03);
	f6 = clamp(f6, vec4(0.0), vec4(1.0));
	imageStore(out_image, opos + ivec2(2, 1), f6);
	f7 = vec4(r7) * 6.2000124e-05;
	f7 += vec4(-1.991e-02, 3.363e-03, 8.296e-03, -1.945e-02);
	f7 = clamp(f7, vec4(0.0), vec4(1.0));
	imageStore(out_image, opos + ivec2(3, 1), f7);
}

//!DESC CuNNy-8x32-conv8
//!HOOK LUMA
//!COMPUTE 32 16 8 8
//!BIND conv7
//!BIND LUMA
//!SAVE conv8
//!WIDTH LUMA.w 4 *
//!HEIGHT LUMA.h 2 *
//!COMPONENTS 4
//!WHEN OUTPUT.w LUMA.w / 1.3 > OUTPUT.h LUMA.h / 1.3 > *
#extension GL_EXT_spirv_intrinsics : require
spirv_instruction (extensions = ["SPV_KHR_integer_dot_product"], capabilities = [6019, 6018], id = 4450)
int dp4(int a, int b, spirv_literal int fmt);
#define D(r, s, a, b, c, d) r + ivec4(dp4(s, a, 0), dp4(s, b, 0), dp4(s, c, 0), dp4(s, d, 0))
shared int G[8][10][10];
void hook() {
	ivec2 xy = ivec2(gl_LocalInvocationID.xy);
	ivec2 pos = ivec2(gl_WorkGroupID.xy) * ivec2(8, 8) + xy;
	ivec2 opos = pos * ivec2(4, 2);
	ivec2 sz = ivec2(LUMA_size) - ivec2(1);
	for (int y = 0; y < 10; y += 8) {
		int ay = xy.y + y;
		if (ay >= 10) break;
		for (int x = 0; x < 10; x += 8) {
			int ax = xy.x + x;
			if (ax >= 10) break;
			vec2 p;
			vec4 r, g, b, a;
			p = vec2(clamp(pos + ivec2(x - 1, y - 1), ivec2(0), sz) * ivec2(4, 2) + ivec2(1, 1)) * conv7_pt;
			r = conv7_gather(p, 0);
			g = conv7_gather(p, 1);
			b = conv7_gather(p, 2);
			a = conv7_gather(p, 3);
			vec4 v0 = vec4(r.w, g.w, b.w, a.w) * 1.0000000e+00;
			vec4 v1 = vec4(r.z, g.z, b.z, a.z) * 1.0000000e+00;
			vec4 v2 = vec4(r.x, g.x, b.x, a.x) * 1.0000000e+00;
			vec4 v3 = vec4(r.y, g.y, b.y, a.y) * 1.0000000e+00;
			p = vec2(clamp(pos + ivec2(x - 1, y - 1), ivec2(0), sz) * ivec2(4, 2) + ivec2(3, 1)) * conv7_pt;
			r = conv7_gather(p, 0);
			g = conv7_gather(p, 1);
			b = conv7_gather(p, 2);
			a = conv7_gather(p, 3);
			vec4 v4 = vec4(r.w, g.w, b.w, a.w) * 1.0000000e+00;
			vec4 v5 = vec4(r.z, g.z, b.z, a.z) * 1.0000000e+00;
			vec4 v6 = vec4(r.x, g.x, b.x, a.x) * 1.0000000e+00;
			vec4 v7 = vec4(r.y, g.y, b.y, a.y) * 1.0000000e+00;
			G[0][ay][ax] = int(packSnorm4x8(v0));
			G[1][ay][ax] = int(packSnorm4x8(v1));
			G[2][ay][ax] = int(packSnorm4x8(v2));
			G[3][ay][ax] = int(packSnorm4x8(v3));
			G[4][ay][ax] = int(packSnorm4x8(v4));
			G[5][ay][ax] = int(packSnorm4x8(v5));
			G[6][ay][ax] = int(packSnorm4x8(v6));
			G[7][ay][ax] = int(packSnorm4x8(v7));
		}
	}
	barrier();
	int s0_0_0, s0_0_1, s0_0_2, s0_1_0, s0_1_1, s0_1_2, s0_2_0, s0_2_1, s0_2_2, s1_0_0, s1_0_1, s1_0_2, s1_1_0, s1_1_1, s1_1_2, s1_2_0, s1_2_1, s1_2_2;
	ivec4 r0, r1, r2, r3, r4, r5, r6, r7;
	vec4 f0, f1, f2, f3, f4, f5, f6, f7;
	r0 = ivec4(0); r1 = ivec4(0); r2 = ivec4(0); r3 = ivec4(0); r4 = ivec4(0); r5 = ivec4(0); r6 = ivec4(0); r7 = ivec4(0);
	s0_0_0 = G[0][xy.y+0][xy.x+0]; s0_0_1 = G[0][xy.y+0][xy.x+1];
	s0_0_2 = G[0][xy.y+0][xy.x+2]; s0_1_0 = G[0][xy.y+1][xy.x+0];
	s0_1_1 = G[0][xy.y+1][xy.x+1]; s0_1_2 = G[0][xy.y+1][xy.x+2];
	s0_2_0 = G[0][xy.y+2][xy.x+0]; s0_2_1 = G[0][xy.y+2][xy.x+1];
	s0_2_2 = G[0][xy.y+2][xy.x+2]; s1_0_0 = G[1][xy.y+0][xy.x+0];
	s1_0_1 = G[1][xy.y+0][xy.x+1]; s1_0_2 = G[1][xy.y+0][xy.x+2];
	s1_1_0 = G[1][xy.y+1][xy.x+0]; s1_1_1 = G[1][xy.y+1][xy.x+1];
	s1_1_2 = G[1][xy.y+1][xy.x+2]; s1_2_0 = G[1][xy.y+2][xy.x+0];
	s1_2_1 = G[1][xy.y+2][xy.x+1]; s1_2_2 = G[1][xy.y+2][xy.x+2];
	r0 = D(r0, s0_0_0, 0xFCF90704, 0xF8E3E6F2, 0x050307FE, 0x00FD07FE);
	r1 = D(r1, s0_0_0, 0x0201FDFE, 0x01FEFEFF, 0x01020201, 0x0007FD02);
	r2 = D(r2, s0_0_0, 0x0604FDFF, 0xF7D9F1E8, 0xFB13FDEF, 0x03F1FEFF);
	r3 = D(r3, s0_0_0, 0xFCFBFCFC, 0x020906FE, 0x000101FF, 0x01FE05FE);
	r4 = D(r4, s0_0_0, 0x03FC0103, 0x03010301, 0xFFFE0001, 0xF7F60001);
	r5 = D(r5, s0_0_0, 0x01E80700, 0x02F0FC03, 0x06DB0108, 0x06FDFF06);
	r6 = D(r6, s0_0_0, 0xFC010300, 0xFCFD0300, 0xFBF305FC, 0xFEFF00FF);
	r7 = D(r7, s0_0_0, 0x02FF0202, 0x02FAFF06, 0x06FE0003, 0x00FE0000);
	r0 = D(r0, s0_0_1, 0x020CFBFB, 0x2256E3E0, 0x1006FA07, 0xFDFD03F9);
	r1 = D(r1, s0_0_1, 0xFCF808FB, 0x0C020001, 0xFCF50AFF, 0xF3FA02F9);
	r2 = D(r2, s0_0_1, 0xF2FFF9F3, 0xEBDDFCFA, 0xDFDDFF14, 0xF7F0F7ED);
	r3 = D(r3, s0_0_1, 0xFDF8FAF5, 0x0A0F0EBC, 0x0402FFFC, 0x0604FF04);
	r4 = D(r4, s0_0_1, 0xF5000000, 0xFCF801FC, 0xFF01FF01, 0x1B00FE07);
	r5 = D(r5, s0_0_1, 0x08F60416, 0x1005FFFE, 0x12F106FA, 0xEDF8000B);
	r6 = D(r6, s0_0_1, 0xFFFAFAF7, 0x1008FCFC, 0x0CF8FC03, 0x02FC0103);
	r7 = D(r7, s0_0_1, 0xF80104F7, 0x0A0CFDF7, 0xFDE90211, 0x00FFFFFE);
	r0 = D(r0, s0_0_2, 0xF8FB00FF, 0xF1D4FF0E, 0xFA0201FE, 0xF8FF0001);
	r1 = D(r1, s0_0_2, 0x090AFF07, 0x00FF0000, 0x0FFDFF0B, 0x02020002);
	r2 = D(r2, s0_0_2, 0x0701FEFE, 0xF50301F3, 0x0802FD0D, 0x0401FF02);
	r3 = D(r3, s0_0_2, 0xEFF801F1, 0xFF05FFF0, 0xF2000001, 0x06FD0100);
	r4 = D(r4, s0_0_2, 0x0901FC02, 0x0DFFFE09, 0xFFFD0000, 0xFB02FE00);
	r5 = D(r5, s0_0_2, 0x020000FF, 0x03000003, 0x0705FFFA, 0x0502FE01);
	r6 = D(r6, s0_0_2, 0xFC03FFFE, 0x06F4FF09, 0x0507FCFD, 0xFB0000FF);
	r7 = D(r7, s0_0_2, 0x05FDFF08, 0xEEF4FD0C, 0x1002FEFF, 0xFF010000);
	r0 = D(r0, s0_1_0, 0xF70613FD, 0x0413F5F5, 0xF9002CFB, 0x07FC1903);
	r1 = D(r1, s0_1_0, 0x0501F5FE, 0x00FAFCFF, 0x0201FB02, 0x01FBFF03);
	r2 = D(r2, s0_1_0, 0x09FFF6FE, 0x0011D9F1, 0x0D03EA05, 0x04F6F502);
	r3 = D(r3, s0_1_0, 0x03FF0A01, 0x03F9DD0D, 0xFE000200, 0xFD010BF9);
	r4 = D(r4, s0_1_0, 0x0400FBFB, 0x01FFFA09, 0x00010000, 0xFD010504);
	r5 = D(r5, s0_1_0, 0x00F1EFFB, 0x02EAF5FB, 0xF5E5E7FF, 0x05FEF506);
	r6 = D(r6, s0_1_0, 0x04FA0201, 0x02030FFB, 0x00F8F4F3, 0x00FCEDFE);
	r7 = D(r7, s0_1_0, 0x0200F602, 0x00000401, 0x07FB0601, 0x00FEFE04);
	r0 = D(r0, s0_1_1, 0x05F8F6FD, 0xEEDEFCEB, 0x24FFEDD3, 0x09FBFDED);
	r1 = D(r1, s0_1_1, 0xFCFA05FC, 0xF8F10211, 0x02070807, 0x13E70413);
	r2 = D(r2, s0_1_1, 0x130000F1, 0xF2EBDFD9, 0xFB130BF2, 0x20FBFDFB);
	r3 = D(r3, s0_1_1, 0xF2F8F5FA, 0x10E71017, 0x0A0007FF, 0x10FEFAE6);
	r4 = D(r4, s0_1_1, 0xE500101B, 0x13F3E315, 0x0505F602, 0xFCF8F706);
	r5 = D(r5, s0_1_1, 0x0500F2FA, 0x02F2FA1A, 0xDBFCDE18, 0xFB07F3F9);
	r6 = D(r6, s0_1_1, 0x17EEE7EF, 0xFAF61A01, 0xDFE3ECF5, 0xF8EDF881);
	r7 = D(r7, s0_1_1, 0xFFFE0C00, 0x1406EC00, 0x08FF0AF6, 0x0DFC0117);
	r0 = D(r0, s0_1_2, 0xFF0302FB, 0x161CE305, 0xF9FF00F9, 0x01FE03FF);
	r1 = D(r1, s0_1_2, 0x04F5EF05, 0x1A0201FE, 0x01F6EFFC, 0x06F80303);
	r2 = D(r2, s0_1_2, 0x0500FCFF, 0xE2EFF6FF, 0xF003020B, 0x0101FCFE);
	r3 = D(r3, s0_1_2, 0x03FBFEEA, 0xFDFC0BF6, 0x100203FE, 0xFC0301F8);
	r4 = D(r4, s0_1_2, 0x0C03FF00, 0x0AFAFDF8, 0xFAFFFCFF, 0x060104FD);
	r5 = D(r5, s0_1_2, 0xF808F907, 0x09FE01FC, 0x0305F906, 0x0100FA07);
	r6 = D(r6, s0_1_2, 0x10FCFFFB, 0xF20EF309, 0xF9FCFDFD, 0x0AFEFFFE);
	r7 = D(r7, s0_1_2, 0x01010CFA, 0xC80304FF, 0x0100FD0A, 0xFF02FF00);
	r0 = D(r0, s0_2_0, 0xFF080000, 0x0527FCFA, 0x0402FCFF, 0x01FE00FD);
	r1 = D(r1, s0_2_0, 0x01FFFA02, 0xFE010400, 0x0200FF00, 0x00F6FD01);
	r2 = D(r2, s0_2_0, 0x02010201, 0xF7FCF709, 0x04EE0708, 0x06FFF9FF);
	r3 = D(r3, s0_2_0, 0x0204FEFF, 0x06FBF605, 0xFF000300, 0xFE0205FF);
	r4 = D(r4, s0_2_0, 0xFE0005FF, 0x05FE0300, 0x00000101, 0xFEFA02FF);
	r5 = D(r5, s0_2_0, 0xFF050701, 0x02FEF9FF, 0xFD07FEFB, 0xFFFF0302);
	r6 = D(r6, s0_2_0, 0x04FFF800, 0x00030100, 0x0603F401, 0x00000C00);
	r7 = D(r7, s0_2_0, 0x0001FC00, 0x01FF03FF, 0x00000200, 0xFBFC0600);
	r0 = D(r0, s0_2_1, 0xFDFCF600, 0x0BBFFD19, 0xF8020D00, 0xF7FE0A01);
	r1 = D(r1, s0_2_1, 0x02FF0006, 0x05F6E402, 0x02F90601, 0x03F0E7FA);
	r2 = D(r2, s0_2_1, 0xFF05FFFE, 0xF7010309, 0x0C2409FB, 0xFBFDFF00);
	r3 = D(r3, s0_2_1, 0xFF020003, 0xFEF50702, 0xFD011500, 0x0302F0F9);
	r4 = D(r4, s0_2_1, 0xFA00F800, 0x00FAF800, 0x0902E4FD, 0x03FBF9FE);
	r5 = D(r5, s0_2_1, 0xFFFE0701, 0x03F6F902, 0xFEFCF0FE, 0x06FFF700);
	r6 = D(r6, s0_2_1, 0xF7000702, 0x0DF70400, 0xE502FD00, 0x07FBF801);
	r7 = D(r7, s0_2_1, 0xFDFE01FF, 0x07F80400, 0x04F1F2FF, 0x05F6F8FE);
	r0 = D(r0, s0_2_2, 0xFE0605FD, 0x0D1305F9, 0x020006FF, 0x01FE01FF);
	r1 = D(r1, s0_2_2, 0x09FAF4FC, 0x02FEFEFE, 0x02FE06FF, 0xFFFDF8FF);
	r2 = D(r2, s0_2_2, 0x0101FF00, 0x010609FB, 0x17F4FAFF, 0x01010001);
	r3 = D(r3, s0_2_2, 0xFC010102, 0xF0FEFFFE, 0x01FFFB00, 0x14FD05F9);
	r4 = D(r4, s0_2_2, 0xFBFFFCFF, 0xFBFE0001, 0x1BFFFE03, 0xFEFEFFFF);
	r5 = D(r5, s0_2_2, 0x0301FF00, 0x0202FC01, 0xF503F9FB, 0x06FDFDFF);
	r6 = D(r6, s0_2_2, 0x02FD0100, 0x09030201, 0xF1010305, 0xFC010200);
	r7 = D(r7, s0_2_2, 0x0104FDFF, 0x0C0DFEFD, 0x0200FD01, 0x05FF01FE);
	r0 = D(r0, s1_0_0, 0x02F80CFB, 0xBC22DD0C, 0x00060A03, 0xFA020801);
	r1 = D(r1, s1_0_0, 0x01FFFE00, 0xFE0303FF, 0xFFFE0100, 0xFEFE00FF);
	r2 = D(r2, s1_0_0, 0x0302F7FF, 0xE905FCFC, 0xF8FC0806, 0x00FFFBFB);
	r3 = D(r3, s1_0_0, 0xF702FF03, 0x0DFA05EF, 0xFEFC0101, 0xFFFDFF01);
	r4 = D(r4, s1_0_0, 0x03FBFDFD, 0xFE0504FD, 0x00010001, 0xFE020602);
	r5 = D(r5, s1_0_0, 0xF7FBFCFC, 0xFC06FF02, 0x0BFCFBFB, 0xFCFEFD02);
	r6 = D(r6, s1_0_0, 0xFE020101, 0x05FF0404, 0x06FBFCFA, 0xFE00FE03);
	r7 = D(r7, s1_0_0, 0x000200FC, 0x0301FEFD, 0xF8010403, 0xFF0204FF);
	r0 = D(r0, s1_0_1, 0xFA02F9FD, 0xE3F709E8, 0xFB081C01, 0xFB03FEFA);
	r1 = D(r1, s1_0_1, 0x050204FE, 0x02050AFF, 0x00F10A01, 0x03020AFE);
	r2 = D(r2, s1_0_1, 0xFF03FF08, 0x0CFFF4F3, 0xE00BF8EF, 0xFA090104);
	r3 = D(r3, s1_0_1, 0x03010003, 0x0AF6F60A, 0xF3040C04, 0xFDFEF7FB);
	r4 = D(r4, s1_0_1, 0x0200F0F7, 0x00FD01FE, 0x010000FF, 0x0BFEFDF5);
	r5 = D(r5, s1_0_1, 0x14FFF100, 0x0300FA04, 0x03EA0710, 0xFFF410F4);
	r6 = D(r6, s1_0_1, 0xFD08FCFF, 0xE7FBEEFA, 0x09F9EAF2, 0x05FEF5FE);
	r7 = D(r7, s1_0_1, 0x03F91400, 0x000003FB, 0x06FBF4F8, 0x00010503);
	r0 = D(r0, s1_0_2, 0xFF000401, 0xE9010124, 0x01FF0002, 0xFF01FE04);
	r1 = D(r1, s1_0_2, 0x0300FEFA, 0xFF0002FE, 0xF904FDF8, 0x00020205);
	r2 = D(r2, s1_0_2, 0x01FE09FE, 0x040707F7, 0x09F40812, 0x07FD0106);
	r3 = D(r3, s1_0_2, 0x0701FE09, 0x01FDFF0A, 0xFCFBF8FF, 0xFE02FD01);
	r4 = D(r4, s1_0_2, 0xFFFEFEFD, 0x0006F8F8, 0x01FFFFFF, 0x0002FB00);
	r5 = D(r5, s1_0_2, 0x000702FB, 0xFF0303FD, 0xFAF902F8, 0x02010809);
	r6 = D(r6, s1_0_2, 0x02050204, 0xFD001CFE, 0xFFFCFAFD, 0x000100FF);
	r7 = D(r7, s1_0_2, 0xFC05F4F6, 0x00050500, 0xFD000704, 0xFFFFFFFF);
	r0 = D(r0, s1_1_0, 0xFFEF05FD, 0x00FBFF07, 0x03E401FA, 0xFDFCFCF7);
	r1 = D(r1, s1_1_0, 0x00040001, 0xF0FF0101, 0xFE0100FE, 0x01010101);
	r2 = D(r2, s1_1_0, 0xF404FC09, 0x140110E7, 0xEEF5FDEF, 0xEC07FE03);
	r3 = D(r3, s1_1_0, 0x080501FE, 0x02FE0200, 0xFBE80101, 0x04F9FFFB);
	r4 = D(r4, s1_1_0, 0xF9090404, 0xF90600FA, 0x02010301, 0x0709FDF7);
	r5 = D(r5, s1_1_0, 0xFEF905FF, 0xFA0EFEFC, 0xE115FFFB, 0x00050106);
	r6 = D(r6, s1_1_0, 0xF80B020B, 0x060004FA, 0xFB120CFE, 0x01040301);
	r7 = D(r7, s1_1_0, 0xFEFCFE00, 0x03040101, 0xFF03FDF9, 0xFEFDFEFD);
	r0 = D(r0, s1_1_1, 0xEDDBFAFB, 0xE4CB1EF5, 0x05FC0BE9, 0xF3EA0901);
	r1 = D(r1, s1_1_1, 0x04E90A06, 0xEE04FCEA, 0xFB1F0301, 0x0903EFE9);
	r2 = D(r2, s1_1_1, 0xF70D05DA, 0x1709EEEC, 0xC63107D4, 0xF615050E);
	r3 = D(r3, s1_1_1, 0x110206F2, 0xEAD90E55, 0xF41E01EA, 0xF7020005);
	r4 = D(r4, s1_1_1, 0x04FCFC0B, 0xF32903EA, 0xF701F4FD, 0x00FFFB12);
	r5 = D(r5, s1_1_1, 0xFDE905F8, 0xF70106E8, 0xFD1BFEFC, 0xF422FEE0);
	r6 = D(r6, s1_1_1, 0xF7FA07D5, 0xDD03F80A, 0x000F2006, 0x010D0A05);
	r7 = D(r7, s1_1_1, 0xFD1E05F7, 0x010804F3, 0xEA1505FD, 0x060AF9FE);
	r0 = D(r0, s1_1_2, 0xFA0000F7, 0x1B05F9F0, 0xFBFFFD02, 0x01010003);
	r1 = D(r1, s1_1_2, 0xF318FEFD, 0x04FDFA04, 0xFBF201FD, 0x070802FD);
	r2 = D(r2, s1_1_2, 0xFBFCFF05, 0xFD020A03, 0xEDF90619, 0xFEFFFF04);
	r3 = D(r3, s1_1_2, 0x09F8FEEC, 0x0906020D, 0xF7FDFFF5, 0xFFF6FEF6);
	r4 = D(r4, s1_1_2, 0x070001FF, 0x0C0004FC, 0x01000AFD, 0x020203FE);
	r5 = D(r5, s1_1_2, 0xFF010204, 0x01FEFF09, 0x160FF9F1, 0x02FD000F);
	r6 = D(r6, s1_1_2, 0xF8070210, 0xFC090F1C, 0x10000EF9, 0x02030004);
	r7 = D(r7, s1_1_2, 0xFAFDFFFF, 0xEAFEFAF5, 0x02FDFE07, 0xFDFF01FC);
	r0 = D(r0, s1_2_0, 0x020600FB, 0xF60A0FF9, 0x04F80109, 0xFE080100);
	r1 = D(r1, s1_2_0, 0xFD050000, 0xFFE7FF04, 0xFF050000, 0xFE0B03FB);
	r2 = D(r2, s1_2_0, 0xFF05FEFF, 0xF2090201, 0xFB040004, 0x020702FD);
	r3 = D(r3, s1_2_0, 0xFD01FEFE, 0xFD0404FA, 0x01FD0000, 0x000200FF);
	r4 = D(r4, s1_2_0, 0x00F4FE03, 0xFDFF01FC, 0x00000000, 0x01FC0003);
	r5 = D(r5, s1_2_0, 0x0102FEFE, 0xFEF0FF00, 0x0AEDFF07, 0x01FC01FE);
	r6 = D(r6, s1_2_0, 0x00080102, 0x020702FC, 0x0415FE00, 0x010000FE);
	r7 = D(r7, s1_2_0, 0xFF03FF02, 0x01FB01FC, 0xFD0101FF, 0xFF09FF01);
	r0 = D(r0, s1_2_1, 0xF5FB01FD, 0xFDE0041C, 0x01EE0214, 0x00FDFF00);
	r1 = D(r1, s1_2_1, 0xFA0D0304, 0xFFEC00EF, 0xFC060200, 0x00EE0402);
	r2 = D(r2, s1_2_1, 0x02FDFFFF, 0x010500FC, 0xF41501F9, 0xFCF20300);
	r3 = D(r3, s1_2_1, 0x0008FD07, 0x01120107, 0x000B0100, 0x01E5FD00);
	r4 = D(r4, s1_2_1, 0x0008FF0A, 0x04FEFE01, 0xEB0C04F7, 0xFF04FF00);
	r5 = D(r5, s1_2_1, 0xFF070004, 0xFEFD010C, 0x02FDFFFF, 0x02FB00FC);
	r6 = D(r6, s1_2_1, 0xFF010306, 0xFD0701F0, 0xFA0CF80A, 0x0202FEF9);
	r7 = D(r7, s1_2_1, 0xFBFC0202, 0x000E01E9, 0xFBF1FF06, 0x00FA00FD);
	r0 = D(r0, s1_2_2, 0x0000FEFD, 0xF81DE7FF, 0x01FE0107, 0xFD0001FF);
	r1 = D(r1, s1_2_2, 0x00FD01FD, 0xFCFD01FE, 0xFF0300FB, 0xFE03FE04);
	r2 = D(r2, s1_2_2, 0x01FC0102, 0x04FCFD06, 0x00FC0713, 0x01FF0102);
	r3 = D(r3, s1_2_2, 0xFFFCFDFD, 0xFF00030D, 0xFFFEFF02, 0xF9050307);
	r4 = D(r4, s1_2_2, 0xFEFEFEFB, 0xF7FEFF04, 0xFCFCFDFB, 0x0002FEFC);
	r5 = D(r5, s1_2_2, 0xFFFF00FE, 0xFE000001, 0xFB0104FF, 0x01FC0006);
	r6 = D(r6, s1_2_2, 0xFFFE0001, 0xFFFE0301, 0xFE03010A, 0x00FEFFFD);
	r7 = D(r7, s1_2_2, 0xFB0701FB, 0xFE05FCF4, 0xFF0001FF, 0x020200FC);
	s0_0_0 = G[2][xy.y+0][xy.x+0]; s0_0_1 = G[2][xy.y+0][xy.x+1];
	s0_0_2 = G[2][xy.y+0][xy.x+2]; s0_1_0 = G[2][xy.y+1][xy.x+0];
	s0_1_1 = G[2][xy.y+1][xy.x+1]; s0_1_2 = G[2][xy.y+1][xy.x+2];
	s0_2_0 = G[2][xy.y+2][xy.x+0]; s0_2_1 = G[2][xy.y+2][xy.x+1];
	s0_2_2 = G[2][xy.y+2][xy.x+2]; s1_0_0 = G[3][xy.y+0][xy.x+0];
	s1_0_1 = G[3][xy.y+0][xy.x+1]; s1_0_2 = G[3][xy.y+0][xy.x+2];
	s1_1_0 = G[3][xy.y+1][xy.x+0]; s1_1_1 = G[3][xy.y+1][xy.x+1];
	s1_1_2 = G[3][xy.y+1][xy.x+2]; s1_2_0 = G[3][xy.y+2][xy.x+0];
	s1_2_1 = G[3][xy.y+2][xy.x+1]; s1_2_2 = G[3][xy.y+2][xy.x+2];
	r0 = D(r0, s0_0_0, 0x04FD01FF, 0xF0FCCB13, 0x04FBFDFE, 0x04FCFEFF);
	r1 = D(r1, s0_0_0, 0x030001FD, 0x0608FFFB, 0x01FFFF01, 0x01010000);
	r2 = D(r2, s0_0_0, 0x0200FF03, 0x0006FB01, 0xF9FBF508, 0x00F9020A);
	r3 = D(r3, s0_0_0, 0xFF02FE03, 0xFA070602, 0xFF010002, 0xFF02FFFD);
	r4 = D(r4, s0_0_0, 0x01020103, 0xFE02FF07, 0x01FF00FF, 0x0703FCF3);
	r5 = D(r5, s0_0_0, 0x010AFCFD, 0x00060301, 0x0D0E0309, 0xFFFD0304);
	r6 = D(r6, s0_0_0, 0x00FB0200, 0x010501F9, 0x010800FE, 0x00FFFFFE);
	r7 = D(r7, s0_0_0, 0x04010201, 0x00FE0100, 0x01FD0101, 0x04FD0003);
	r0 = D(r0, s0_0_1, 0x03EEFBFB, 0xBA26B00F, 0xFFFCFEF9, 0x01FF0008);
	r1 = D(r1, s0_0_1, 0x0104F8FC, 0x0AF800F1, 0x0201FB01, 0xFC04FF03);
	r2 = D(r2, s0_0_1, 0xFA06FF06, 0xD812FDF6, 0xD3120701, 0xE5040105);
	r3 = D(r3, s0_0_1, 0xFF030006, 0xF3FEFF18, 0x0202FF06, 0xFEF80203);
	r4 = D(r4, s0_0_1, 0xFE0A0100, 0x09FAFB03, 0x00FF00FF, 0x06F3010C);
	r5 = D(r5, s0_0_1, 0xDE11FC19, 0x0DFB0105, 0x0D0F05F5, 0x090201FF);
	r6 = D(r6, s0_0_1, 0xFF040207, 0xFAFFF801, 0x13FE0504, 0xFE0900FD);
	r7 = D(r7, s0_0_1, 0xFEFAFCFF, 0x01020006, 0x040F0102, 0x01F4FFF7);
	r0 = D(r0, s0_0_2, 0xFF1002FE, 0xD3EF1A09, 0x02FD0004, 0xFEFE01FC);
	r1 = D(r1, s0_0_2, 0x0CE40108, 0xFE0000FF, 0xFCFAFF04, 0x03F3FC00);
	r2 = D(r2, s0_0_2, 0x02FAFF00, 0xFF0E0903, 0xFBD8FD04, 0xFF010002);
	r3 = D(r3, s0_0_2, 0xF50FFE04, 0xF9F1FFF8, 0xF9FD00FB, 0xFDFF0100);
	r4 = D(r4, s0_0_2, 0x03F9FFFE, 0x03020104, 0x01020101, 0xFF03FEFE);
	r5 = D(r5, s0_0_2, 0x000704FD, 0xFC0200FF, 0x0D0C0800, 0x04F5FF02);
	r6 = D(r6, s0_0_2, 0xFB0201FF, 0xF6FE0101, 0x02FE0001, 0x01060002);
	r7 = D(r7, s0_0_2, 0xFB040006, 0xFEFFFDF5, 0x05F10103, 0x02FDFF00);
	r0 = D(r0, s0_1_0, 0x0305E2FB, 0xF50888F7, 0x00FCDF02, 0x08FAF701);
	r1 = D(r1, s0_1_0, 0x03FE0207, 0xFB000101, 0x03FF0104, 0x000504FE);
	r2 = D(r2, s0_1_0, 0x01FF0709, 0xFD18E3DF, 0xF50412F4, 0x04FE0EF2);
	r3 = D(r3, s0_1_0, 0x0204FC00, 0xF60718F1, 0x000101F8, 0xFD0101FD);
	r4 = D(r4, s0_1_0, 0x04020DFC, 0x04FC0211, 0x01FFFFFE, 0x0AFCE5FF);
	r5 = D(r5, s0_1_0, 0x0105F1E0, 0x00FF05F7, 0xF609DBD5, 0xFEFFF600);
	r6 = D(r6, s0_1_0, 0x04F9F8FC, 0xFFFC0310, 0xF70AF9FA, 0x00FF0005);
	r7 = D(r7, s0_1_0, 0xFFFF0007, 0x03FFF8FD, 0x0503FA10, 0x0401000C);
	r0 = D(r0, s0_1_1, 0xDD09E3E8, 0xA735C5B8, 0xD62AF9FD, 0xF118E9EF);
	r1 = D(r1, s0_1_1, 0x0604F8FE, 0xF70E01FE, 0x0302D6FA, 0xFB08FF11);
	r2 = D(r2, s0_1_1, 0xFB0106FB, 0xC540F8BF, 0x9FD3FF0B, 0xDB13F9E8);
	r3 = D(r3, s0_1_1, 0xFB03FCFA, 0x1EFCD5FC, 0x05068CE9, 0xF90B0001);
	r4 = D(r4, s0_1_1, 0x06D70405, 0xDEF3EECD, 0xF9060004, 0xF6E8F6E4);
	r5 = D(r5, s0_1_1, 0xE6F3E4E1, 0xD2E70009, 0xAFFCF6CB, 0x01F50DCD);
	r6 = D(r6, s0_1_1, 0xFB1308E2, 0xE900F3D7, 0xC52FEFE1, 0xF9FA0004);
	r7 = D(r7, s0_1_1, 0x1003EEDF, 0x0E0503F8, 0xF2FDFFBF, 0xF422FF0B);
	r0 = D(r0, s0_1_2, 0x00F6000A, 0xB7ADFF09, 0x02030103, 0x03FD02FF);
	r1 = D(r1, s0_1_2, 0xE005FDE9, 0xFF230011, 0x09F2F8F4, 0xF30203FE);
	r2 = D(r2, s0_1_2, 0x000A0105, 0x021604F0, 0x050FFF0C, 0x05020006);
	r3 = D(r3, s0_1_2, 0xF417FD07, 0xFF03F9FF, 0xFC0CFF02, 0xFA090101);
	r4 = D(r4, s0_1_2, 0xF9FC03FA, 0xF2FAFF0C, 0x0207FFFB, 0x00FE01FB);
	r5 = D(r5, s0_1_2, 0xFBF90003, 0x040B0002, 0xF70CF906, 0x0303020A);
	r6 = D(r6, s0_1_2, 0x0006FFFA, 0xD6FE031A, 0xEF15F8F7, 0x020900FD);
	r7 = D(r7, s0_1_2, 0xF7F2FE04, 0xE1F40900, 0xF707010D, 0x000500FE);
	r0 = D(r0, s0_2_0, 0x0101F7FF, 0xFEFA031B, 0x03FD0207, 0x04FFFC02);
	r1 = D(r1, s0_2_0, 0x01FEFE01, 0x020302FF, 0x01FFFF02, 0x0301EEF9);
	r2 = D(r2, s0_2_0, 0x01FE0101, 0x09F7E201, 0x0501F9EB, 0xFF01FE04);
	r3 = D(r3, s0_2_0, 0xFEFFF901, 0xFF00F602, 0x02000003, 0x01FCFB04);
	r4 = D(r4, s0_2_0, 0x010304F8, 0x00FFFBF8, 0x01010101, 0x00FFFF04);
	r5 = D(r5, s0_2_0, 0x03FE0401, 0xFFFDFC01, 0xFD07FDF6, 0x01FE03FD);
	r6 = D(r6, s0_2_0, 0x02010100, 0x0000FE00, 0x0402DC01, 0x02FF0001);
	r7 = D(r7, s0_2_0, 0x01FFFD00, 0x0200FF04, 0x02FF0104, 0x0100FEEE);
	r0 = D(r0, s0_2_1, 0x05FDFB06, 0xFCFFF1FE, 0x05F4020C, 0x04FCFFFD);
	r1 = D(r1, s0_2_1, 0x06FCEBFF, 0xF413FEFA, 0x03FEFBF9, 0x03F8E712);
	r2 = D(r2, s0_2_1, 0x02FF00FB, 0x0400F706, 0xEE080904, 0x08FB0006);
	r3 = D(r3, s0_2_1, 0x02FDFBFE, 0xFF00F1F0, 0xFF02FFF6, 0x04FCEC00);
	r4 = D(r4, s0_2_1, 0xFC09FB05, 0x0503EDF7, 0xF9001502, 0xFE03FC06);
	r5 = D(r5, s0_2_1, 0xFAFF01FC, 0x0106F900, 0xF803FEFF, 0xFE070201);
	r6 = D(r6, s0_2_1, 0x01FCFD0A, 0x0608FDF4, 0x10F2FDF4, 0x0602FFFD);
	r7 = D(r7, s0_2_1, 0x02FFFDFE, 0xFF0505F4, 0x05000203, 0xFCFD0103);
	r0 = D(r0, s0_2_2, 0xFD0104FF, 0xFB0D0BF7, 0x04F80100, 0xFFFFFF00);
	r1 = D(r1, s0_2_2, 0x0901EA01, 0x01F400FE, 0x010400FE, 0xF9FCFC00);
	r2 = D(r2, s0_2_2, 0xFFFFFF03, 0x00F80805, 0xF502FE0C, 0x00FC0100);
	r3 = D(r3, s0_2_2, 0x09FA02FD, 0xFB040203, 0x02020005, 0xFB00FE00);
	r4 = D(r4, s0_2_2, 0x00020000, 0x0205FF02, 0xFAFF0302, 0x010300FF);
	r5 = D(r5, s0_2_2, 0x020101FF, 0x020001FE, 0x0504FD05, 0xFFFEFE01);
	r6 = D(r6, s0_2_2, 0x04FD0202, 0xF902000A, 0xFFFE060A, 0x01FC0000);
	r7 = D(r7, s0_2_2, 0xF90302FE, 0xEF000BF7, 0xFE00FF00, 0xFE0301FA);
	r0 = D(r0, s1_0_0, 0x0503EDFF, 0x0A18DFF9, 0x000402FB, 0xFC0401FF);
	r1 = D(r1, s1_0_0, 0xFDFFFF00, 0x00FD0301, 0xFE00FFFF, 0x0200FE01);
	r2 = D(r2, s1_0_0, 0xFDFD0AFF, 0x09F7FAF8, 0xFDFFECF9, 0xFF00FF00);
	r3 = D(r3, s1_0_0, 0x01FF0101, 0xFCF11E04, 0x0001FCFE, 0x02020100);
	r4 = D(r4, s1_0_0, 0x01FF05F9, 0x0200FEFC, 0x0101FFFF, 0x0404F103);
	r5 = D(r5, s1_0_0, 0xFCFED6FC, 0x040500FF, 0xF203FD0E, 0x04FCFDF9);
	r6 = D(r6, s1_0_0, 0xFF010200, 0x00FE0701, 0x01010F07, 0x03030200);
	r7 = D(r7, s1_0_0, 0x0000FAFF, 0x00030103, 0xFEFE07FB, 0x0101F900);
	r0 = D(r0, s1_0_1, 0x0A0406F8, 0xFFFBD3D3, 0xFF0A0BF5, 0x0DFD0801);
	r1 = D(r1, s1_0_1, 0xFB020002, 0xFB020B00, 0x0600DD01, 0x0A040802);
	r2 = D(r2, s1_0_1, 0xFFF7FDFA, 0x080BF4FC, 0x2F07FF06, 0x110000F6);
	r3 = D(r3, s1_0_1, 0x04FF1501, 0x0FDF19F7, 0xF403F500, 0x0202FD03);
	r4 = D(r4, s1_0_1, 0x0605F302, 0xF606FA03, 0x0201FA00, 0xFB10FE00);
	r5 = D(r5, s1_0_1, 0xEFFFFCFA, 0xF405FFFC, 0xDF0106FB, 0xF005E60C);
	r6 = D(r6, s1_0_1, 0x06FEFAFA, 0x08FBE3F3, 0xF5FF0109, 0xFB020002);
	r7 = D(r7, s1_0_1, 0xE709EF04, 0xFCF8FDFB, 0xFF03010A, 0x0001FB00);
	r0 = D(r0, s1_0_2, 0xF800FF07, 0xFC2D0405, 0xFA000302, 0xFEFBFEFE);
	r1 = D(r1, s1_0_2, 0x04FFFCFE, 0xFB010001, 0x12010BF2, 0x0300FC01);
	r2 = D(r2, s1_0_2, 0x04FE00FE, 0x03040A05, 0x0C0600FD, 0x03FFFCFF);
	r3 = D(r3, s1_0_2, 0xF2FA0309, 0xFBF502FF, 0x01030208, 0x00FEFD00);
	r4 = D(r4, s1_0_2, 0x0403FF01, 0x0C010003, 0xFF01FF01, 0xFE02FDFE);
	r5 = D(r5, s1_0_2, 0x0901FD01, 0xFB020000, 0x07FE0001, 0x12060500);
	r6 = D(r6, s1_0_2, 0xFDFDFBFF, 0x0601FE06, 0x0001FE02, 0xFE000000);
	r7 = D(r7, s1_0_2, 0x0A000000, 0x08060206, 0x080505FD, 0x0101FE00);
	r0 = D(r0, s1_1_0, 0x0308F6FB, 0xF908F2EA, 0x04FEF7F3, 0x040901FA);
	r1 = D(r1, s1_1_0, 0xFE000101, 0x02FCEEF7, 0xFFFDFF00, 0xFEFFFC02);
	r2 = D(r2, s1_1_0, 0xFDFBFF07, 0xF707F5CA, 0x0009E6F3, 0xFE03FEFD);
	r3 = D(r3, s1_1_0, 0xFE0001FF, 0xFEE6EE1A, 0xFE000000, 0x02070300);
	r4 = D(r4, s1_1_0, 0xFCF6F900, 0x02FAFC02, 0x0002FF00, 0x0106FCF8);
	r5 = D(r5, s1_1_0, 0x00090EF3, 0xFBFBEAFF, 0xFC05E7F8, 0xFEF50C02);
	r6 = D(r6, s1_1_0, 0x0203F800, 0x040510FE, 0x00FDD3FB, 0xFE03F304);
	r7 = D(r7, s1_1_0, 0xFB0100FF, 0x020201FF, 0x0101F101, 0x0201FB00);
	r0 = D(r0, s1_1_1, 0xFDFE06E5, 0xFD10F8D4, 0xF31CFCFF, 0xEF0804F4);
	r1 = D(r1, s1_1_1, 0x1003DDF6, 0x1507F2FB, 0xF701F5F8, 0xDFFEE401);
	r2 = D(r2, s1_1_1, 0x0AF9FD03, 0xE80CFDFF, 0x18FEE4FB, 0x09FDF7FE);
	r3 = D(r3, s1_1_1, 0xF607E5F1, 0x0BD70FC4, 0xFF0BE5FB, 0xF9FB1DF9);
	r4 = D(r4, s1_1_1, 0x1CEFFFEC, 0xF3F8F1EE, 0x01FBF004, 0xF5050100);
	r5 = D(r5, s1_1_1, 0x0CF70105, 0x2BF0FBFA, 0x16FF06F1, 0x0900FE0B);
	r6 = D(r6, s1_1_1, 0xF404E5D7, 0xF2F6ECF2, 0xFBF9F0E9, 0x09F5F6EE);
	r7 = D(r7, s1_1_1, 0xE90FEFED, 0xFAF905FF, 0xFBF700ED, 0xFB0F05FE);
	r0 = D(r0, s1_1_2, 0xF4F8F902, 0x0623F006, 0xFE020307, 0xFFFF0103);
	r1 = D(r1, s1_1_2, 0x120503E9, 0x0E0400F1, 0x0302FDF9, 0x0602FFFB);
	r2 = D(r2, s1_1_2, 0xFF0801FE, 0x16FBFC09, 0x090705E9, 0xFC0304FB);
	r3 = D(r3, s1_1_2, 0x04FAFDEF, 0x06F00508, 0x23FF05FC, 0xE601040C);
	r4 = D(r4, s1_1_2, 0x0306FE03, 0xF0FFFFFC, 0x0201FC04, 0xFFF90005);
	r5 = D(r5, s1_1_2, 0x04000204, 0x080304F8, 0xF601FBFE, 0xFC0A02FA);
	r6 = D(r6, s1_1_2, 0x09060804, 0xF40F01FE, 0x00F7FA01, 0xFEFE0001);
	r7 = D(r7, s1_1_2, 0x19F6FDFD, 0x0401D211, 0xFA0202F8, 0xF705FC03);
	r0 = D(r0, s1_2_0, 0xFE04F9FD, 0xFF05FBF5, 0xFFFDFB03, 0xFFFEFF06);
	r1 = D(r1, s1_2_0, 0x0101F8FF, 0x01050201, 0xFF00FCFF, 0x04040000);
	r2 = D(r2, s1_2_0, 0xFD0001FB, 0x0408FC0D, 0xF8FC04F7, 0x0002FFFD);
	r3 = D(r3, s1_2_0, 0x00FFFF01, 0xFCF6F8FD, 0xFF0100FF, 0xFF03FF06);
	r4 = D(r4, s1_2_0, 0xFE03FFFE, 0x0002FDFC, 0x0103FF02, 0xFFFF0000);
	r5 = D(r5, s1_2_0, 0xFF00FD05, 0x010701ED, 0x040001EB, 0x00FE0101);
	r6 = D(r6, s1_2_0, 0xFFFF00FD, 0x0104FD00, 0xFAFA01E9, 0xFF0102FB);
	r7 = D(r7, s1_2_0, 0x000200FB, 0x0300FF00, 0x0103FE02, 0x0004FBFD);
	r0 = D(r0, s1_2_1, 0x05030209, 0x03FF11FB, 0xFE04FFFA, 0x040A0002);
	r1 = D(r1, s1_2_1, 0xF50006FC, 0xF7F5FFF9, 0xFA0102FB, 0x01FF05EB);
	r2 = D(r2, s1_2_1, 0xFB03FE0A, 0x060204F5, 0x1104F9FF, 0xFDFF06F5);
	r3 = D(r3, s1_2_1, 0x03020000, 0xFDF1FB01, 0xFE030007, 0xFE12FFF7);
	r4 = D(r4, s1_2_1, 0x02F80203, 0x0105FEFF, 0xF9F8F7EF, 0x03FB03F9);
	r5 = D(r5, s1_2_1, 0xFE00FEFC, 0xF8FFFC05, 0xF80904FB, 0x00F70001);
	r6 = D(r6, s1_2_1, 0x06010107, 0xFD0201F8, 0xF3170BFB, 0xFC0AFD07);
	r7 = D(r7, s1_2_1, 0xFD0101FB, 0xF8FD02F6, 0xFD0402F7, 0x02F7FFFF);
	r0 = D(r0, s1_2_2, 0x03F9FC02, 0x2BF3F0FC, 0x00FF00FC, 0x00020000);
	r1 = D(r1, s1_2_2, 0xFB0000FE, 0x04FEFEFE, 0xFD00FD06, 0x02FEFFFF);
	r2 = D(r2, s1_2_2, 0xFE0200FD, 0xF700FDF4, 0xF904FDF6, 0x0501FE02);
	r3 = D(r3, s1_2_2, 0xFE060306, 0x000002F9, 0x03000200, 0x0BFDFEFB);
	r4 = D(r4, s1_2_2, 0x07FE00FF, 0x09FE00FF, 0x0C040212, 0x01FE0103);
	r5 = D(r5, s1_2_2, 0xFAFFFEFD, 0x05FE00FF, 0x00FEFF03, 0x03FEFF00);
	r6 = D(r6, s1_2_2, 0xFF0004F5, 0x0AFD02F7, 0xFDFF01F6, 0xFF0401FE);
	r7 = D(r7, s1_2_2, 0xFDFFFE09, 0x0408F8FC, 0x02FB00FE, 0x09FCFF01);
	s0_0_0 = G[4][xy.y+0][xy.x+0]; s0_0_1 = G[4][xy.y+0][xy.x+1];
	s0_0_2 = G[4][xy.y+0][xy.x+2]; s0_1_0 = G[4][xy.y+1][xy.x+0];
	s0_1_1 = G[4][xy.y+1][xy.x+1]; s0_1_2 = G[4][xy.y+1][xy.x+2];
	s0_2_0 = G[4][xy.y+2][xy.x+0]; s0_2_1 = G[4][xy.y+2][xy.x+1];
	s0_2_2 = G[4][xy.y+2][xy.x+2]; s1_0_0 = G[5][xy.y+0][xy.x+0];
	s1_0_1 = G[5][xy.y+0][xy.x+1]; s1_0_2 = G[5][xy.y+0][xy.x+2];
	s1_1_0 = G[5][xy.y+1][xy.x+0]; s1_1_1 = G[5][xy.y+1][xy.x+1];
	s1_1_2 = G[5][xy.y+1][xy.x+2]; s1_2_0 = G[5][xy.y+2][xy.x+0];
	s1_2_1 = G[5][xy.y+2][xy.x+1]; s1_2_2 = G[5][xy.y+2][xy.x+2];
	r0 = D(r0, s0_0_0, 0x0203F9FE, 0x26FDED07, 0x0002FEFE, 0x0302FA01);
	r1 = D(r1, s0_0_0, 0x0301FE00, 0xFFFFFBFF, 0x00010001, 0x010001FF);
	r2 = D(r2, s0_0_0, 0x00000402, 0x03F90EFF, 0x040B07FB, 0xFBFB0200);
	r3 = D(r3, s0_0_0, 0x02FF0000, 0x010102FE, 0xFEFE0200, 0x00000000);
	r4 = D(r4, s0_0_0, 0xFF00FDFF, 0xFE01FEFF, 0xFF00FFFF, 0x03F8FE01);
	r5 = D(r5, s0_0_0, 0xFAFBF9FA, 0xFFF9FA00, 0x0B01ED00, 0x00FCFFFB);
	r6 = D(r6, s0_0_0, 0x00FC0100, 0x02FCFBFE, 0x05FDFEFF, 0xFEFCFF00);
	r7 = D(r7, s0_0_0, 0x0101FE00, 0x0001FEFF, 0x0000FEFF, 0x00020100);
	r0 = D(r0, s0_0_1, 0x09FA0B02, 0x0BC20400, 0x03FEFB01, 0xFF0AFF00);
	r1 = D(r1, s0_0_1, 0xFEFEFA00, 0xFFFEF800, 0xFEFFF2FE, 0x000000FF);
	r2 = D(r2, s0_0_1, 0xFF0704FD, 0xFAFD0007, 0x0CF9E904, 0x030E03FC);
	r3 = D(r3, s0_0_1, 0x05040801, 0x010D0502, 0x0505F800, 0x04F8FE01);
	r4 = D(r4, s0_0_1, 0x00F9FC01, 0xFF07F603, 0xFF00FFFF, 0x03FEFFFE);
	r5 = D(r5, s0_0_1, 0x05F402FD, 0xFF00FBFD, 0x0902F8F4, 0x0103F6FD);
	r6 = D(r6, s0_0_1, 0xFF0107FE, 0x02070200, 0x03F90201, 0xFFFF0201);
	r7 = D(r7, s0_0_1, 0x09FDFE00, 0x020601FF, 0x00FDF3FE, 0x0103FA00);
	r0 = D(r0, s0_0_2, 0xFD01F6FF, 0x0001CCA6, 0xFEFA05FC, 0x02000200);
	r1 = D(r1, s0_0_2, 0x040500FF, 0xFF00FD00, 0x04FE0501, 0x010100FF);
	r2 = D(r2, s0_0_2, 0xFF0705FE, 0x0003EA02, 0xFFF907FF, 0x0400FB00);
	r3 = D(r3, s0_0_2, 0x02FF0100, 0x0203F007, 0x0103FE02, 0x01FD0100);
	r4 = D(r4, s0_0_2, 0x00FD0200, 0x03040304, 0x00000100, 0x01FB0300);
	r5 = D(r5, s0_0_2, 0x0000FC01, 0x0001FF00, 0x03F80BF6, 0xFDFDFCF9);
	r6 = D(r6, s0_0_2, 0x04FFF8FB, 0x06F2F6FE, 0x03F8FC01, 0x0000FFFF);
	r7 = D(r7, s0_0_2, 0x03040404, 0xFEFFF804, 0xFD03FDFA, 0x01FE0100);
	r0 = D(r0, s0_1_0, 0x0103FCFE, 0xFC0FF10F, 0xF90E00FE, 0xF106FCFF);
	r1 = D(r1, s0_1_0, 0x03FD01FF, 0x00050000, 0x0401FFFF, 0x0A02FB00);
	r2 = D(r2, s0_1_0, 0x050401FE, 0x0805DDFF, 0x080D0006, 0x070BFB01);
	r3 = D(r3, s0_1_0, 0xFB00FBFF, 0x0AF4F801, 0x03030101, 0xFF05FF01);
	r4 = D(r4, s0_1_0, 0xFB0C07FF, 0xFD0606FF, 0x00000200, 0xDDFA05FF);
	r5 = D(r5, s0_1_0, 0xFEFFF70F, 0xF3040A00, 0xD6050506, 0x06F8FEFE);
	r6 = D(r6, s0_1_0, 0xFBFDFB03, 0xF4F7FCFF, 0x01050201, 0x0000FE00);
	r7 = D(r7, s0_1_0, 0x0C00FDFE, 0xFCFCFD00, 0x0202F8FF, 0xF7FE0000);
	r0 = D(r0, s0_1_1, 0x23C9150D, 0x57E91A2F, 0x10EBFE21, 0xF3DAF902);
	r1 = D(r1, s0_1_1, 0xE80CEFFC, 0xFBEBF801, 0xCD0F02FD, 0xEE0B05F7);
	r2 = D(r2, s0_1_1, 0xF0E704E1, 0xD9BFF200, 0xFCCFE1DD, 0xF1B2FEDD);
	r3 = D(r3, s0_1_1, 0x0506F2FD, 0x0208F8D4, 0x11FDFA01, 0x06071203);
	r4 = D(r4, s0_1_1, 0xF6D9E8E9, 0x110C0BFC, 0xFE0204FF, 0x0EFF0110);
	r5 = D(r5, s0_1_1, 0xFAF1E9F9, 0x0D00F2F9, 0x0CD4F904, 0xF7FF02FD);
	r6 = D(r6, s0_1_1, 0xFE12F500, 0x0B11FB01, 0x000FF5F4, 0x03120001);
	r7 = D(r7, s0_1_1, 0x20FC0604, 0xFD090403, 0xF2EAFCF8, 0x04ED0BFF);
	r0 = D(r0, s0_1_2, 0x0707FC06, 0x1A18F086, 0xFAFEFBF1, 0x0108FCFB);
	r1 = D(r1, s0_1_2, 0x11FA0105, 0xFEF700FE, 0x09E5FA03, 0x010EFE05);
	r2 = D(r2, s0_1_2, 0x000106F7, 0xF2FF10E8, 0x06E001CD, 0x040AFEE7);
	r3 = D(r3, s0_1_2, 0xF8E700F9, 0x1AF6F60E, 0xF40FF609, 0xFD0AF6FF);
	r4 = D(r4, s0_1_2, 0x0001FDF8, 0xF2FFFA05, 0xFD09FDFE, 0x00FB0301);
	r5 = D(r5, s0_1_2, 0x02FBFFF8, 0xFCFC02F0, 0x07F3E5F5, 0x01F1FAF1);
	r6 = D(r6, s0_1_2, 0x00FC00CB, 0x12E6F2D0, 0xFF03FF06, 0x010600FF);
	r7 = D(r7, s0_1_2, 0x01FB0202, 0x0902EDF1, 0x05F2F8F5, 0xFF000100);
	r0 = D(r0, s0_2_0, 0xFF0703FF, 0xFA0BFFFD, 0xFDF40100, 0xF5FE00FD);
	r1 = D(r1, s0_2_0, 0x05030100, 0x03FFFE00, 0x0203FEFF, 0xF4FD0002);
	r2 = D(r2, s0_2_0, 0xFF030000, 0xF8F7FD0A, 0x000FF603, 0xF7FFFFFF);
	r3 = D(r3, s0_2_0, 0x030105FF, 0xF3FBFC03, 0xFE020000, 0xF2FC0301);
	r4 = D(r4, s0_2_0, 0xFC09FD03, 0xFC02FD03, 0xFBFE03FF, 0x0402FFFE);
	r5 = D(r5, s0_2_0, 0x01020100, 0xFC05FA04, 0x03FDFF02, 0x03FEFEFF);
	r6 = D(r6, s0_2_0, 0x000100FD, 0xFEFCF9FC, 0xFAF9F800, 0xFF08FF00);
	r7 = D(r7, s0_2_0, 0x000201FF, 0xFC0102FE, 0xFE010000, 0xFE030200);
	r0 = D(r0, s0_2_1, 0x11F90309, 0x0CF3F7FB, 0x1504F80C, 0x08FE0006);
	r1 = D(r1, s0_2_1, 0x020300FB, 0x0A03F600, 0x0B00FD01, 0x19FBF708);
	r2 = D(r2, s0_2_1, 0x0D020503, 0x1E03010F, 0x0EF6FAF0, 0xFF0900FF);
	r3 = D(r3, s0_2_1, 0xF6F90303, 0x09F300F8, 0x01FBFF01, 0x1AF3F100);
	r4 = D(r4, s0_2_1, 0xF9FCF5F6, 0xECFAFB03, 0x1A15FB02, 0xF30103FE);
	r5 = D(r5, s0_2_1, 0x07070103, 0xFE0805ED, 0xE506FCF3, 0xFCFFFCFE);
	r6 = D(r6, s0_2_1, 0x09F000FC, 0x08FFFE03, 0x00E4FC07, 0xFCEA07FF);
	r7 = D(r7, s0_2_1, 0x10FBFF00, 0xFEFFFE04, 0x0B06FEFE, 0xFB01FFFF);
	r0 = D(r0, s0_2_2, 0x060201FA, 0xEC0DE6F4, 0xFBF8FF02, 0xFB03FEFD);
	r1 = D(r1, s0_2_2, 0x00F50103, 0x05F8FCFD, 0x0002FFFE, 0xF7FB06FD);
	r2 = D(r2, s0_2_2, 0x02FF0103, 0x0C05FC01, 0x03FCFDF4, 0xFE0002FC);
	r3 = D(r3, s0_2_2, 0x0A04FF02, 0x08F30307, 0xFB0100FF, 0x08000113);
	r4 = D(r4, s0_2_2, 0x040306FF, 0xFE0703FB, 0x05E60981, 0x02020301);
	r5 = D(r5, s0_2_2, 0x0103FF02, 0x01FB00FE, 0xF900FFEF, 0x02FCFEFB);
	r6 = D(r6, s0_2_2, 0xF5FE04F6, 0x03F700F0, 0x06ECF3D3, 0xFE06FF01);
	r7 = D(r7, s0_2_2, 0x020405F9, 0x26EBEEE5, 0x06FAFBF3, 0x02040300);
	r0 = D(r0, s1_0_0, 0x0607F406, 0x13FFF30F, 0xF4000006, 0xFE04F903);
	r1 = D(r1, s1_0_0, 0x00FFFF00, 0x00FFFC02, 0x00F90100, 0x05FEFEFE);
	r2 = D(r2, s1_0_0, 0xFBF602FE, 0xF90AF702, 0x0201F905, 0x08F7FB01);
	r3 = D(r3, s1_0_0, 0x020102FF, 0x02EB0208, 0x01FE02FE, 0x01FA00FC);
	r4 = D(r4, s1_0_0, 0x02FF01F9, 0x0506FF01, 0x00FEFF02, 0x090FFB05);
	r5 = D(r5, s1_0_0, 0x0C06F301, 0x0FFDFD00, 0x0C0DEB08, 0x06020404);
	r6 = D(r6, s1_0_0, 0xFAFDFE04, 0xF9FBFC06, 0x0400FDFD, 0x03F90103);
	r7 = D(r7, s1_0_0, 0x06000000, 0x03FF0104, 0xFD030000, 0x0302FF03);
	r0 = D(r0, s1_0_1, 0x0212FF05, 0x27F6E704, 0x050004F8, 0x04050205);
	r1 = D(r1, s1_0_1, 0x0109FC07, 0xF90903FC, 0x0111EE03, 0xF9010103);
	r2 = D(r2, s1_0_1, 0xFD0E0101, 0x20180A07, 0x0E01EB0C, 0xF01702FA);
	r3 = D(r3, s1_0_1, 0x00F106FB, 0xED060B05, 0xFAFEFD07, 0x08FBFF05);
	r4 = D(r4, s1_0_1, 0xF900F9FA, 0xFFECF500, 0x06FE0002, 0xFD04F7FF);
	r5 = D(r5, s1_0_1, 0xF8FFF90D, 0xFE09FDF9, 0xDEE80005, 0xF2F3F9FF);
	r6 = D(r6, s1_0_1, 0x000F01FC, 0x1407F206, 0x06F5FAFF, 0xFC050001);
	r7 = D(r7, s1_0_1, 0x05FCF204, 0x03FDFD04, 0xE9F4FFFD, 0x03010201);
	r0 = D(r0, s1_0_2, 0xFAFCFE01, 0xFFEA1113, 0xFE0002FE, 0x0101FE01);
	r1 = D(r1, s1_0_2, 0x040001FE, 0x04010100, 0x020CFDFB, 0x0301FD02);
	r2 = D(r2, s1_0_2, 0xFC02FF00, 0x0A08FB07, 0x0D0A01FD, 0xFE030003);
	r3 = D(r3, s1_0_2, 0x02FF01FF, 0xFDFFF7FB, 0xFFF80106, 0xFEFC0001);
	r4 = D(r4, s1_0_2, 0x0202FFFF, 0x03FDFB00, 0x03FDFF01, 0x02FEFC01);
	r5 = D(r5, s1_0_2, 0x03FDF700, 0x0003FF03, 0x0305FBFF, 0x03080700);
	r6 = D(r6, s1_0_2, 0x00FEFF01, 0x05ED00FD, 0x0705FC04, 0x00FC01FF);
	r7 = D(r7, s1_0_2, 0x000201FE, 0x0E0AF9FC, 0x03050300, 0x01FFFF00);
	r0 = D(r0, s1_1_0, 0x02FCF8F8, 0xFBE8F908, 0x0CF5F915, 0x0CF9FEFF);
	r1 = D(r1, s1_1_0, 0xFFFAFDFB, 0xF3040DFF, 0xFDFBFF02, 0x0109F8FC);
	r2 = D(r2, s1_1_0, 0xEB09FF07, 0x0EFAD808, 0xF10FE9F1, 0xE60DEF06);
	r3 = D(r3, s1_1_0, 0xFE000000, 0xED04EC0D, 0x000A0304, 0x0606FE04);
	r4 = D(r4, s1_1_0, 0xDC0C0C09, 0xFAFBFC03, 0xFD000102, 0x01010003);
	r5 = D(r5, s1_1_0, 0xEDF9F509, 0xE10D050C, 0xE80C010B, 0xF4FD0D05);
	r6 = D(r6, s1_1_0, 0xFA09FBFE, 0x17F4EB01, 0xF701F504, 0xF80C0603);
	r7 = D(r7, s1_1_0, 0xF9020307, 0x1201FC02, 0xFEF2FD03, 0x0400FBFF);
	r0 = D(r0, s1_1_1, 0x0C10F716, 0x1008E9FD, 0xF3170306, 0xFE00F616);
	r1 = D(r1, s1_1_1, 0x0BFCF4FC, 0xFBF2F303, 0x00FC0C06, 0x0D02EA0F);
	r2 = D(r2, s1_1_1, 0x00D7F70E, 0xCFEAE50F, 0x00DADF15, 0x00FF0206);
	r3 = D(r3, s1_1_1, 0x06020701, 0xE4000132, 0x05E6F61C, 0x00110301);
	r4 = D(r4, s1_1_1, 0x06F11713, 0x02160722, 0x13140100, 0x03FFFD0F);
	r5 = D(r5, s1_1_1, 0x05F8F6EB, 0xE1ECF70C, 0x1314190E, 0xF9E9FA08);
	r6 = D(r6, s1_1_1, 0xF2DFF020, 0x0F17FEFE, 0x0C00F9EF, 0xF9030A0A);
	r7 = D(r7, s1_1_1, 0x0209F9FF, 0xFBFC0A0A, 0x06FC0310, 0xFE0BFC0E);
	r0 = D(r0, s1_1_2, 0x00FD060A, 0x08FBDEF8, 0x090006FE, 0xFAFE0200);
	r1 = D(r1, s1_1_2, 0xFF02FD0A, 0x06060503, 0xF7F9F315, 0x00F8F9FF);
	r2 = D(r2, s1_1_2, 0x0805F7FF, 0x04FFF90D, 0x120EF3FA, 0x0000FD02);
	r3 = D(r3, s1_1_2, 0xF5060200, 0xFD070503, 0x09F604D9, 0xFDFEFE01);
	r4 = D(r4, s1_1_2, 0xFFFEFF02, 0xF6FAFC01, 0xFFFCFDFB, 0xFFFD0705);
	r5 = D(r5, s1_1_2, 0xFE04FF01, 0x0304FF03, 0x06FE0212, 0x05FFFFFC);
	r6 = D(r6, s1_1_2, 0xFE07FEF8, 0xE610F4F1, 0x03FBF904, 0xFE000303);
	r7 = D(r7, s1_1_2, 0x02F50109, 0x0FE5E70F, 0x02010205, 0x00FD00FD);
	r0 = D(r0, s1_2_0, 0x02000407, 0x1BFAFD0C, 0x02FE0006, 0xFFFD0103);
	r1 = D(r1, s1_2_0, 0xFB01FDFF, 0x0CFB04FE, 0x0001FC02, 0x0304F501);
	r2 = D(r2, s1_2_0, 0xFCFD0002, 0x13FDFC07, 0xEF0EEB09, 0x08FC0200);
	r3 = D(r3, s1_2_0, 0xFEFF0100, 0x0B0006FB, 0xFD000100, 0x09F6FA03);
	r4 = D(r4, s1_2_0, 0xFF03FAFD, 0xFF04FC00, 0xFCF9F902, 0xFFFFF800);
	r5 = D(r5, s1_2_0, 0xFEFF0100, 0xFAFFF802, 0x03FBFF06, 0xFF0202FE);
	r6 = D(r6, s1_2_0, 0xFD010000, 0xFB06FFFE, 0x15FAFC02, 0x05FA07FD);
	r7 = D(r7, s1_2_0, 0x0200FE00, 0x0BF7FC04, 0x02FD0106, 0xF605FE01);
	r0 = D(r0, s1_2_1, 0x0501F005, 0x0C03ED0D, 0xF104FAF6, 0xFE01FE02);
	r1 = D(r1, s1_2_1, 0xFE0804FB, 0x03010E02, 0xFC04FD00, 0xFEFEF6FA);
	r2 = D(r2, s1_2_1, 0x0203FDFD, 0xEE0F06F8, 0x10F4030D, 0xFD05FF05);
	r3 = D(r3, s1_2_1, 0x04FF03FE, 0x07FFFAFE, 0x09040100, 0xF9F3FC0D);
	r4 = D(r4, s1_2_1, 0x0AFBFD04, 0x02F8EE01, 0x13061705, 0x04000309);
	r5 = D(r5, s1_2_1, 0xFCFFFF04, 0x0BFEFA08, 0x0102F805, 0x07FA0703);
	r6 = D(r6, s1_2_1, 0x030106FB, 0x0BFEFD03, 0xFA09FBF5, 0x060001FE);
	r7 = D(r7, s1_2_1, 0x0003F704, 0xF702FC00, 0xFF01FB00, 0x03FD0407);
	r0 = D(r0, s1_2_2, 0xFDFDFEFF, 0xF9F7001D, 0x01FEFD00, 0x00FFFF05);
	r1 = D(r1, s1_2_2, 0x0600F503, 0xFB02FFF2, 0x07FFFF03, 0x0000FEFD);
	r2 = D(r2, s1_2_2, 0xFF000102, 0x04FF000A, 0xFB02F705, 0x02FEFD05);
	r3 = D(r3, s1_2_2, 0x040301FF, 0x0100F7FD, 0xFF00FB08, 0x00FF05F3);
	r4 = D(r4, s1_2_2, 0xFAFF04FF, 0x03000008, 0xE801F401, 0xFF0102FE);
	r5 = D(r5, s1_2_2, 0xFEFFFF07, 0xFB00FEFD, 0x06FFF60A, 0xFD0005FE);
	r6 = D(r6, s1_2_2, 0x0200FD03, 0xFC010607, 0x0402FD09, 0x01FFFFFE);
	r7 = D(r7, s1_2_2, 0x0700FDFF, 0xFF0801FB, 0xFC01FFFF, 0x01FE0401);
	s0_0_0 = G[6][xy.y+0][xy.x+0]; s0_0_1 = G[6][xy.y+0][xy.x+1];
	s0_0_2 = G[6][xy.y+0][xy.x+2]; s0_1_0 = G[6][xy.y+1][xy.x+0];
	s0_1_1 = G[6][xy.y+1][xy.x+1]; s0_1_2 = G[6][xy.y+1][xy.x+2];
	s0_2_0 = G[6][xy.y+2][xy.x+0]; s0_2_1 = G[6][xy.y+2][xy.x+1];
	s0_2_2 = G[6][xy.y+2][xy.x+2]; s1_0_0 = G[7][xy.y+0][xy.x+0];
	s1_0_1 = G[7][xy.y+0][xy.x+1]; s1_0_2 = G[7][xy.y+0][xy.x+2];
	s1_1_0 = G[7][xy.y+1][xy.x+0]; s1_1_1 = G[7][xy.y+1][xy.x+1];
	s1_1_2 = G[7][xy.y+1][xy.x+2]; s1_2_0 = G[7][xy.y+2][xy.x+0];
	s1_2_1 = G[7][xy.y+2][xy.x+1]; s1_2_2 = G[7][xy.y+2][xy.x+2];
	r0 = D(r0, s0_0_0, 0xFC0403FF, 0xF41EEBFE, 0xF800FDFE, 0xFCFEFC02);
	r1 = D(r1, s0_0_0, 0x01FF0101, 0x010003FE, 0xFF000001, 0x00000100);
	r2 = D(r2, s0_0_0, 0xFE00FC01, 0xF3FA0405, 0x0000FA02, 0xFDFCFD01);
	r3 = D(r3, s0_0_0, 0x03FD0200, 0x09FE0709, 0xFFFFFE00, 0xFF01FDFE);
	r4 = D(r4, s0_0_0, 0x01030100, 0xFF000102, 0x000000FF, 0xFE0301FC);
	r5 = D(r5, s0_0_0, 0xFFFF0105, 0x0002FEFF, 0xF20401FB, 0xFCFF0000);
	r6 = D(r6, s0_0_0, 0xFEFC0000, 0x0004FE01, 0x07FF03FF, 0x010000FF);
	r7 = D(r7, s0_0_0, 0xFE010300, 0xFF00FD00, 0xFFFBFD02, 0xFF000000);
	r0 = D(r0, s0_0_1, 0xD7FBEFFD, 0xA9B51607, 0x81FDF6FA, 0xE8FEF303);
	r1 = D(r1, s0_0_1, 0xFCFF0100, 0x03FF00FF, 0xFD000501, 0x02020202);
	r2 = D(r2, s0_0_1, 0xE9FF0703, 0x0BFDFA0A, 0xF108000F, 0xE8F4FE05);
	r3 = D(r3, s0_0_1, 0x0501F102, 0x8108070F, 0xFE01FCFF, 0x0000FD00);
	r4 = D(r4, s0_0_1, 0xF70609FE, 0xFE05FEFF, 0x01FE0100, 0xE3FEFAFA);
	r5 = D(r5, s0_0_1, 0xDA0302FF, 0xF501FFFD, 0xDA01F5F1, 0xCD0813F9);
	r6 = D(r6, s0_0_1, 0xEBF5F805, 0x02F6F605, 0xFDFF0200, 0x0100FE00);
	r7 = D(r7, s0_0_1, 0xFBFF02FE, 0x01FF0103, 0xF00909FB, 0x0100FFFD);
	r0 = D(r0, s0_0_2, 0x04030102, 0x1227F6E5, 0x00020200, 0xFC0002FF);
	r1 = D(r1, s0_0_2, 0xDAFFF800, 0xFEFE0201, 0xE101F301, 0xFFFDFFFE);
	r2 = D(r2, s0_0_2, 0x03FD0802, 0x02F7FF06, 0xF8FA03FA, 0x06FD0200);
	r3 = D(r3, s0_0_2, 0xF8FDFA02, 0x1305F5F9, 0x00FEF902, 0x02010100);
	r4 = D(r4, s0_0_2, 0x04FFFDFF, 0x02FFF7FF, 0xFF000201, 0x0600F9FE);
	r5 = D(r5, s0_0_2, 0x0101FA02, 0x03FEFD02, 0x020202FE, 0xF700F9FD);
	r6 = D(r6, s0_0_2, 0xFB00FE02, 0xF7FF0107, 0x04030200, 0x00FF0000);
	r7 = D(r7, s0_0_2, 0x0003F101, 0xF40A05FC, 0xFAFFFEFE, 0x0200FEFF);
	r0 = D(r0, s0_1_0, 0xFD040804, 0xFFFFFD1C, 0xFB040006, 0x02FE0116);
	r1 = D(r1, s0_1_0, 0xFDFEFB01, 0xFF02FE02, 0xFC00FF02, 0x0402FE02);
	r2 = D(r2, s0_1_0, 0xFDFCF5FB, 0xFD190B0C, 0x02EEFF17, 0x03F00006);
	r3 = D(r3, s0_1_0, 0x0205FD07, 0x09F50CFC, 0x00020003, 0x04FE0503);
	r4 = D(r4, s0_1_0, 0xF6FAFBFE, 0x0003FDFF, 0x0000FEFF, 0x00020303);
	r5 = D(r5, s0_1_0, 0x03FBFD09, 0xFCF6FE01, 0x00F3F704, 0x02FDF3F8);
	r6 = D(r6, s0_1_0, 0x01F5F90B, 0x0002050E, 0x03FBFFFD, 0x0002FF01);
	r7 = D(r7, s0_1_0, 0x0000FDF7, 0x000602FA, 0x0304FC01, 0x0101FEFF);
	r0 = D(r0, s0_1_1, 0xF3F2FFFC, 0xF9D834FE, 0xDD1106F4, 0x01FC11F0);
	r1 = D(r1, s0_1_1, 0xFD060AFF, 0xC4FF0A09, 0x01FEFE03, 0xE5050304);
	r2 = D(r2, s0_1_1, 0xFC0D3504, 0xFF0526EE, 0xEA122717, 0xFC031709);
	r3 = D(r3, s0_1_1, 0x030A1A09, 0xF20714F0, 0xFEF90606, 0xE4FDE9FE);
	r4 = D(r4, s0_1_1, 0xDC041D04, 0xE7E30115, 0xFFFCFD01, 0xEFFCE1FC);
	r5 = D(r5, s0_1_1, 0x04010F0A, 0xECF11113, 0xFEEC1427, 0xF5F81E0C);
	r6 = D(r6, s0_1_1, 0xFEFA1F0D, 0x00F517ED, 0xFCF600FE, 0x01F7FDFE);
	r7 = D(r7, s0_1_1, 0x01FF0115, 0xFCF2E802, 0xFBEE0802, 0xC805F1FE);
	r0 = D(r0, s0_1_2, 0x0100FB03, 0x15F70715, 0xFC02FD08, 0x040001FE);
	r1 = D(r1, s0_1_2, 0x03F7FCFD, 0xFC05F9FB, 0xFEF90703, 0x00FFFA01);
	r2 = D(r2, s0_1_2, 0x06030303, 0x05150A0B, 0xFDF111F9, 0x00F9FC09);
	r3 = D(r3, s0_1_2, 0x040D1008, 0x07FCF5F9, 0x02F7F5FD, 0xF7FF0004);
	r4 = D(r4, s0_1_2, 0x03F9FEFB, 0xF9040200, 0x04010804, 0x00FFFFFD);
	r5 = D(r5, s0_1_2, 0x05F9080A, 0x0001FCFE, 0x02F3F309, 0xFDFCFBFD);
	r6 = D(r6, s0_1_2, 0x02F70109, 0xFC002801, 0x0AFDFF01, 0x00000101);
	r7 = D(r7, s0_1_2, 0x0505FEF3, 0xF11330F6, 0xFDF90601, 0x01FEF900);
	r0 = D(r0, s0_2_0, 0x0100FAFF, 0x001CF6FF, 0x00FC00F8, 0xFFFEFFF4);
	r1 = D(r1, s0_2_0, 0xFEFD0106, 0x000401FD, 0xFF000002, 0x0100FFFC);
	r2 = D(r2, s0_2_0, 0xFF01FF01, 0xFFFCF219, 0x01FCFF00, 0xFEFDFC01);
	r3 = D(r3, s0_2_0, 0x00FD0001, 0x01FD0004, 0x00FF0001, 0x0303FEFB);
	r4 = D(r4, s0_2_0, 0x02FE0003, 0x00FF01FD, 0x00FEFEFF, 0x000200FC);
	r5 = D(r5, s0_2_0, 0x00FE00FF, 0x01FE0202, 0x050A0308, 0xFDFF0200);
	r6 = D(r6, s0_2_0, 0xFFFFFF02, 0x00FFFB01, 0xFB070015, 0x00040209);
	r7 = D(r7, s0_2_0, 0xFF0000FD, 0x02050005, 0xFFFC01F9, 0x00010100);
	r0 = D(r0, s0_2_1, 0x0003F902, 0xFBE5F3EB, 0xFFE4F90B, 0x01F5FA14);
	r1 = D(r1, s0_2_1, 0x00FB01F9, 0x010AFA05, 0xFEFB01F8, 0x0102FEF7);
	r2 = D(r2, s0_2_1, 0x01FD020E, 0x04EFF71A, 0xFE170003, 0xFFF3FB14);
	r3 = D(r3, s0_2_1, 0xFF01FA0F, 0xFE1804E0, 0x0001FEFE, 0x010F0C01);
	r4 = D(r4, s0_2_1, 0x02060605, 0x0303FB04, 0xFEFA09FD, 0xFF040206);
	r5 = D(r5, s0_2_1, 0xFEFFFE00, 0x04FFFE01, 0x01FCFD0D, 0xFF0602FF);
	r6 = D(r6, s0_2_1, 0xFE01FB08, 0x0302F709, 0x010CFE49, 0x0100FA4F);
	r7 = D(r7, s0_2_1, 0x01FE0000, 0x00F8F901, 0x00F8FA07, 0x0207FE01);
	r0 = D(r0, s0_2_2, 0xFE050004, 0xFF14FE00, 0x02FD0404, 0xFF00FF05);
	r1 = D(r1, s0_2_2, 0x0004FB07, 0xFF0301FC, 0x0104FC00, 0x03060006);
	r2 = D(r2, s0_2_2, 0x02FFFEF8, 0xFFF1F613, 0x02EFFDFE, 0x0001FD02);
	r3 = D(r3, s0_2_2, 0x02FCF11B, 0xFE08F70B, 0x00FEFF0A, 0xFFFD00FC);
	r4 = D(r4, s0_2_2, 0x00020201, 0x04FFFF09, 0x01021714, 0x00030301);
	r5 = D(r5, s0_2_2, 0x00FDFF03, 0x00FE0202, 0x0409FE0F, 0xFEFC03FC);
	r6 = D(r6, s0_2_2, 0xFEF3FB07, 0xFFF60CF5, 0xFBFE0212, 0x0004FD06);
	r7 = D(r7, s0_2_2, 0x0108FEFF, 0xFE031406, 0xFF0403FB, 0xFF030002);
	r0 = D(r0, s1_0_0, 0xEB0DFE07, 0xF401D6FB, 0xFE0EFF0C, 0x09FFFD08);
	r1 = D(r1, s1_0_0, 0x06010002, 0xFC03FD01, 0x040001FF, 0x08FF02FF);
	r2 = D(r2, s1_0_0, 0x010003FF, 0xFEFEFCF6, 0x0CFB01F1, 0x02040601);
	r3 = D(r3, s1_0_0, 0x0BFDFF03, 0xFFF5F7FA, 0xFC050105, 0xF9000003);
	r4 = D(r4, s1_0_0, 0xFEFE0201, 0x01000104, 0xFF010004, 0xF606F5F5);
	r5 = D(r5, s1_0_0, 0x06F4030F, 0xFE06FF08, 0xFDF4FAFB, 0x01060403);
	r6 = D(r6, s1_0_0, 0x080600FF, 0xF301FB00, 0xF5FAFEFB, 0xF8FFFF09);
	r7 = D(r7, s1_0_0, 0x01040302, 0xFF0200FF, 0x08FB0401, 0x10FBFFFC);
	r0 = D(r0, s1_0_1, 0xF5F5000D, 0x28CE15B0, 0xFF0B090D, 0xF7FF0804);
	r1 = D(r1, s1_0_1, 0xFCFDFDFC, 0x0205FFFC, 0xF300FD01, 0x07FEF8FC);
	r2 = D(r2, s1_0_1, 0xF7FC09FB, 0xEA0507F2, 0x0EFFFCE4, 0x01FDFCF9);
	r3 = D(r3, s1_0_1, 0x00FB0010, 0xEDE4EA15, 0xFF0CFC1B, 0xFDFF05F8);
	r4 = D(r4, s1_0_1, 0x0B06F9EA, 0x0304F6F7, 0xFFFEFFFE, 0x070CF10C);
	r5 = D(r5, s1_0_1, 0xFD0305F4, 0x0C04FA02, 0x12FBFCFD, 0x150AF3E8);
	r6 = D(r6, s1_0_1, 0x020C0203, 0x06F50C08, 0x05010CF5, 0x030003FF);
	r7 = D(r7, s1_0_1, 0x04FDEB01, 0x05F50011, 0x0EFCFEE8, 0x0104F602);
	r0 = D(r0, s1_0_2, 0xFF010404, 0xFC02E107, 0xFC0304FC, 0x0102FFFE);
	r1 = D(r1, s1_0_2, 0x0006FF03, 0xFCFBFBFF, 0x05070409, 0x000001FA);
	r2 = D(r2, s1_0_2, 0x03FFF604, 0xFFFDFEFE, 0x0202F7F6, 0x0200FB01);
	r3 = D(r3, s1_0_2, 0xF905080B, 0x0400040F, 0x02FC04FD, 0x02010100);
	r4 = D(r4, s1_0_2, 0x00030200, 0x02000906, 0x0100FFFC, 0xFF000D00);
	r5 = D(r5, s1_0_2, 0x05020701, 0xFC0002FF, 0x0202FAFD, 0xFBFFF604);
	r6 = D(r6, s1_0_2, 0x0202FAFF, 0x080CEFF4, 0x0401FC01, 0x01FDFD01);
	r7 = D(r7, s1_0_2, 0xF4FF11F9, 0x07FDF4F6, 0xFAFEF9FF, 0x010003FD);
	r0 = D(r0, s1_1_0, 0x0305F7FD, 0x0F02F30A, 0x02EFF700, 0xFE01FAFF);
	r1 = D(r1, s1_1_0, 0x050002FE, 0x100A05F2, 0x00FFFF01, 0xFB02F800);
	r2 = D(r2, s1_1_0, 0xFC03FC00, 0xE6DBF70E, 0xEC04FB05, 0xFDF7F703);
	r3 = D(r3, s1_1_0, 0xF9FC03FE, 0xFFF6ECFD, 0xFF09FFFF, 0x08F4F9FE);
	r4 = D(r4, s1_1_0, 0xFEF503FB, 0xFCFEFEFD, 0x0602FDF9, 0xFB060FFC);
	r5 = D(r5, s1_1_0, 0xF1FD00FC, 0x10F50603, 0x0BF904F1, 0x020F02FC);
	r6 = D(r6, s1_1_0, 0x0809FBFC, 0xF7FD05FF, 0x17F9F8FC, 0x0403000D);
	r7 = D(r7, s1_1_0, 0x0A08FE00, 0xFC01FC03, 0xFF0AFC08, 0xF1F900F3);
	r0 = D(r0, s1_1_1, 0x09EE160A, 0xFCCFFCE5, 0xFB18EDFF, 0x15F6FB0C);
	r1 = D(r1, s1_1_1, 0xF1F1F10C, 0xDFF8131D, 0x0408FD09, 0xF3EC120D);
	r2 = D(r2, s1_1_1, 0xF0E8F4FE, 0x08BE0C18, 0xE1D216D9, 0x191EF20F);
	r3 = D(r3, s1_1_1, 0xE4DFEE03, 0x00FB25FA, 0xF6D5F71B, 0x05FD0D26);
	r4 = D(r4, s1_1_1, 0xF8F13A01, 0x13E52002, 0xE5070F17, 0xFA083DF8);
	r5 = D(r5, s1_1_1, 0x1BFE0F0D, 0xFC031510, 0xFEFD1AE9, 0x0A012F15);
	r6 = D(r6, s1_1_1, 0xF9B6FA04, 0x01E0F5EF, 0x13F9EA04, 0x0C0AF80E);
	r7 = D(r7, s1_1_1, 0xF0F50216, 0x04F608F5, 0x1AFE1321, 0xF1031800);
	r0 = D(r0, s1_1_2, 0xF2070501, 0x0A132109, 0xFB0404FE, 0xFEFE02FF);
	r1 = D(r1, s1_1_2, 0xFD0D1404, 0x0204FAFC, 0x0806110B, 0x06FE0C01);
	r2 = D(r2, s1_1_2, 0x0802F7FE, 0x1401E9F9, 0x0EFEFDF5, 0xF7F80701);
	r3 = D(r3, s1_1_2, 0xFEEEED00, 0xFF050BFB, 0x0D0703F9, 0xFFFB0806);
	r4 = D(r4, s1_1_2, 0xFFFE03FE, 0xF7FA0602, 0x0801F2FD, 0xF90007FF);
	r5 = D(r5, s1_1_2, 0x01F9FB00, 0x03FBFDFD, 0xF0010EFC, 0xFA0406FF);
	r6 = D(r6, s1_1_2, 0x0D0D0207, 0xFC0503DC, 0xFA03FE09, 0xF8FFFB01);
	r7 = D(r7, s1_1_2, 0xFD071003, 0xEDE7FAD9, 0xFF06FFFF, 0xFEFB08FF);
	r0 = D(r0, s1_2_0, 0x0008FD02, 0x0A12F6FD, 0xFD060505, 0xFEFE0301);
	r1 = D(r1, s1_2_0, 0x0102FC01, 0x0002FB02, 0x02FFFF02, 0xF8FE00FF);
	r2 = D(r2, s1_2_0, 0xFDFF0400, 0x091000F4, 0xFCF805FA, 0xFEFE0101);
	r3 = D(r3, s1_2_0, 0xFE02FF03, 0x060706FC, 0x01040000, 0x0206FC01);
	r4 = D(r4, s1_2_0, 0xFFFBFA02, 0xFFFA0105, 0xFD03FD05, 0xFFFCFFFF);
	r5 = D(r5, s1_2_0, 0x02000200, 0xFEFFFE00, 0xFB05FA05, 0xFD0400FE);
	r6 = D(r6, s1_2_0, 0xFD000103, 0x04040001, 0x0CFC03F8, 0xFDFA00FF);
	r7 = D(r7, s1_2_0, 0xFF02FE01, 0xFE00FB03, 0xFE0100FF, 0xF8FD0205);
	r0 = D(r0, s1_2_1, 0xF8FA0402, 0xDFF1F6D8, 0x01080307, 0x0306FE04);
	r1 = D(r1, s1_2_1, 0xF90500FB, 0x0303FAFD, 0xFB0102FF, 0xFFFD0FFE);
	r2 = D(r2, s1_2_1, 0x0401FF02, 0x02F4FEFD, 0x0F0CEF02, 0xF8020501);
	r3 = D(r3, s1_2_1, 0x09080402, 0xFC051304, 0x0103FFFF, 0x05E60E0B);
	r4 = D(r4, s1_2_1, 0xF300FBFE, 0xFB06F907, 0x02F80104, 0xFFFEF8FD);
	r5 = D(r5, s1_2_1, 0xFFFAFE02, 0x04F4F701, 0xF102FA01, 0x03FEF801);
	r6 = D(r6, s1_2_1, 0x060EFDFF, 0x05F8F9F5, 0xEB220904, 0xFBF3F502);
	r7 = D(r7, s1_2_1, 0xF50602FD, 0xF50300FF, 0xFE00FAFF, 0xFB0204FF);
	r0 = D(r0, s1_2_2, 0x05040508, 0x1107FF06, 0x01000501, 0x01FD01FD);
	r1 = D(r1, s1_2_2, 0x07010404, 0x0B040603, 0x0504FCFE, 0x07FDF904);
	r2 = D(r2, s1_2_2, 0xF9FF00FF, 0xEE04FFF5, 0x0303FDFF, 0x02FEFF00);
	r3 = D(r3, s1_2_2, 0xFE0703FC, 0x00030CFD, 0xFEF9FEFD, 0xFE020504);
	r4 = D(r4, s1_2_2, 0xFCFFFF03, 0x06FBF9FF, 0x16FEF402, 0x0100FCFE);
	r5 = D(r5, s1_2_2, 0xFEFCFEFE, 0x0A020006, 0x06FBFB04, 0xFE010100);
	r6 = D(r6, s1_2_2, 0xFFFEFEFF, 0xFC05F9FC, 0xF70103F2, 0x0601FF00);
	r7 = D(r7, s1_2_2, 0x0A0000FF, 0xFDFD0705, 0x07020302, 0x0402FF02);
	f0 = vec4(r0) * 6.2000124e-05;
	f0 += vec4(-4.646e-03, -3.907e-02, -4.308e-04, 1.803e-03);
	f0 = clamp(f0, vec4(0.0), vec4(1.0));
	imageStore(out_image, opos + ivec2(0, 0), f0);
	f1 = vec4(r1) * 6.2000124e-05;
	f1 += vec4(-3.115e-03, 1.774e-04, -1.634e-03, -1.580e-02);
	f1 = clamp(f1, vec4(0.0), vec4(1.0));
	imageStore(out_image, opos + ivec2(1, 0), f1);
	f2 = vec4(r2) * 6.2000124e-05;
	f2 += vec4(-5.265e-03, -2.813e-02, -2.514e-02, -6.291e-04);
	f2 = clamp(f2, vec4(0.0), vec4(1.0));
	imageStore(out_image, opos + ivec2(0, 1), f2);
	f3 = vec4(r3) * 6.2000124e-05;
	f3 += vec4(-2.370e-03, -1.400e-02, 9.449e-03, -1.118e-03);
	f3 = clamp(f3, vec4(0.0), vec4(1.0));
	imageStore(out_image, opos + ivec2(1, 1), f3);
	f4 = vec4(r4) * 6.2000124e-05;
	f4 += vec4(-1.361e-02, -7.264e-03, 3.045e-05, -9.125e-03);
	f4 = clamp(f4, vec4(0.0), vec4(1.0));
	imageStore(out_image, opos + ivec2(2, 0), f4);
	f5 = vec4(r5) * 6.2000124e-05;
	f5 += vec4(-1.561e-02, -4.502e-03, -1.180e-02, -9.856e-03);
	f5 = clamp(f5, vec4(0.0), vec4(1.0));
	imageStore(out_image, opos + ivec2(3, 0), f5);
	f6 = vec4(r6) * 6.2000124e-05;
	f6 += vec4(1.299e-03, -1.874e-02, -1.788e-02, 8.514e-03);
	f6 = clamp(f6, vec4(0.0), vec4(1.0));
	imageStore(out_image, opos + ivec2(2, 1), f6);
	f7 = vec4(r7) * 6.2000124e-05;
	f7 += vec4(-3.376e-03, -1.915e-02, -3.391e-03, -2.199e-03);
	f7 = clamp(f7, vec4(0.0), vec4(1.0));
	imageStore(out_image, opos + ivec2(3, 1), f7);
}

//!DESC CuNNy-8x32-out-shuffle
//!HOOK LUMA
//!COMPUTE 16 16 8 8
//!BIND conv8
//!BIND LUMA
//!WIDTH LUMA.w 2 *
//!HEIGHT LUMA.h 2 *
//!COMPONENTS 1
//!WHEN OUTPUT.w LUMA.w / 1.3 > OUTPUT.h LUMA.h / 1.3 > *
#extension GL_EXT_shader_explicit_arithmetic_types_float16 : enable
#ifdef GL_EXT_shader_explicit_arithmetic_types_float16
#	define V4 f16vec4
#	define M4 f16mat4
#	define F float16_t
#else
#	define V4 vec4
#	define M4 mat4
#	define F float
#endif
shared V4 G[8][10][10];
void hook() {
	ivec2 xy = ivec2(gl_LocalInvocationID.xy);
	ivec2 pos = ivec2(gl_WorkGroupID.xy) * ivec2(8, 8) + xy;
	ivec2 opos = pos * ivec2(2, 2);
	ivec2 sz = ivec2(LUMA_size) - ivec2(1);
	for (int y = 0; y < 10; y += 8) {
		int ay = xy.y + y;
		if (ay >= 10) break;
		for (int x = 0; x < 10; x += 8) {
			int ax = xy.x + x;
			if (ax >= 10) break;
			vec2 p;
			p = vec2(clamp(pos + ivec2(x - 1, y - 1), ivec2(0), sz) * ivec2(4, 2) + ivec2(1, 1)) * conv8_pt;
			V4 sr0 = V4(conv8_gather(p, 0));
			V4 sg0 = V4(conv8_gather(p, 1));
			V4 sb0 = V4(conv8_gather(p, 2));
			V4 sa0 = V4(conv8_gather(p, 3));
			G[0][ay][ax] = V4(sr0.w, sg0.w, sb0.w, sa0.w);
			G[1][ay][ax] = V4(sr0.z, sg0.z, sb0.z, sa0.z);
			G[2][ay][ax] = V4(sr0.x, sg0.x, sb0.x, sa0.x);
			G[3][ay][ax] = V4(sr0.y, sg0.y, sb0.y, sa0.y);
			p = vec2(clamp(pos + ivec2(x - 1, y - 1), ivec2(0), sz) * ivec2(4, 2) + ivec2(3, 1)) * conv8_pt;
			V4 sr1 = V4(conv8_gather(p, 0));
			V4 sg1 = V4(conv8_gather(p, 1));
			V4 sb1 = V4(conv8_gather(p, 2));
			V4 sa1 = V4(conv8_gather(p, 3));
			G[4][ay][ax] = V4(sr1.w, sg1.w, sb1.w, sa1.w);
			G[5][ay][ax] = V4(sr1.z, sg1.z, sb1.z, sa1.z);
			G[6][ay][ax] = V4(sr1.x, sg1.x, sb1.x, sa1.x);
			G[7][ay][ax] = V4(sr1.y, sg1.y, sb1.y, sa1.y);
		}
	}
	barrier();
	V4 s0_0_0, s0_0_1, s0_0_2, s0_1_0, s0_1_1, s0_1_2, s0_2_0, s0_2_1, s0_2_2, s1_0_0, s1_0_1, s1_0_2, s1_1_0, s1_1_1, s1_1_2, s1_2_0, s1_2_1, s1_2_2;
	V4 r0;
	r0 = V4(0.0);
	s0_0_0 = G[0][xy.y+0][xy.x+0]; s0_0_1 = G[0][xy.y+0][xy.x+1];
	s0_0_2 = G[0][xy.y+0][xy.x+2]; s0_1_0 = G[0][xy.y+1][xy.x+0];
	s0_1_1 = G[0][xy.y+1][xy.x+1]; s0_1_2 = G[0][xy.y+1][xy.x+2];
	s0_2_0 = G[0][xy.y+2][xy.x+0]; s0_2_1 = G[0][xy.y+2][xy.x+1];
	s0_2_2 = G[0][xy.y+2][xy.x+2]; s1_0_0 = G[1][xy.y+0][xy.x+0];
	s1_0_1 = G[1][xy.y+0][xy.x+1]; s1_0_2 = G[1][xy.y+0][xy.x+2];
	s1_1_0 = G[1][xy.y+1][xy.x+0]; s1_1_1 = G[1][xy.y+1][xy.x+1];
	s1_1_2 = G[1][xy.y+1][xy.x+2]; s1_2_0 = G[1][xy.y+2][xy.x+0];
	s1_2_1 = G[1][xy.y+2][xy.x+1]; s1_2_2 = G[1][xy.y+2][xy.x+2];
	r0 += M4(-1.313e-03, 5.710e-04, -3.766e-04, 3.202e-04, -5.404e-03, 7.541e-05, -2.264e-03, 1.156e-04, 6.739e-03, 1.510e-05, 1.607e-05, 1.860e-05, -2.803e-03, -3.803e-04, -2.842e-04, -9.315e-05) * s0_0_0;
	r0 += M4(1.838e-02, -2.936e-02, -1.415e-03, 2.518e-03, 9.025e-03, -1.756e-03, 2.323e-03, -3.436e-03, 3.699e-02, 2.978e-02, 6.258e-05, 6.872e-05, 4.732e-02, 5.711e-02, -9.470e-05, 3.008e-04) * s0_0_1;
	r0 += M4(2.145e-04, 2.315e-03, 1.915e-05, 1.161e-03, -1.841e-05, 4.553e-04, -3.800e-05, 3.877e-03, -6.930e-05, 1.209e-02, 1.762e-05, -1.063e-04, -7.373e-04, 8.698e-03, -1.013e-04, 2.073e-05) * s0_0_2;
	r0 += M4(-2.843e-02, -4.603e-04, -1.650e-02, 1.663e-03, -2.036e-03, 3.999e-04, -7.189e-03, 6.456e-05, 2.261e-03, 5.111e-04, 9.618e-03, 3.466e-04, -4.162e-02, -3.122e-04, -7.573e-02, -1.563e-03) * s0_1_0;
	r0 += M4(1.023e-01, -1.614e-01, 1.072e-01, -2.086e-01, 1.145e-01, -1.342e-01, 4.444e-02, -4.215e-02, 8.059e-02, 4.644e-02, 1.093e-01, 7.178e-02, -7.104e-02, -2.406e-01, 2.134e-01, -1.154e-01) * s0_1_1;
	r0 += M4(-2.853e-04, 1.953e-02, -1.018e-04, 2.346e-02, -5.759e-05, 6.654e-03, 1.286e-05, -1.551e-03, 1.697e-04, 2.986e-02, -3.781e-05, 3.365e-02, 1.213e-03, 9.594e-02, -1.417e-03, 4.254e-02) * s0_1_2;
	r0 += M4(-2.533e-03, -7.679e-05, -9.976e-03, 1.366e-04, -7.383e-03, -1.720e-04, -4.055e-03, -1.887e-04, -9.049e-04, -1.125e-04, -1.069e-03, -3.711e-05, 2.817e-03, 1.996e-04, -3.076e-03, 3.026e-04) * s0_2_0;
	r0 += M4(9.770e-04, 1.304e-03, 1.652e-02, -2.156e-02, 5.261e-02, -3.018e-02, 1.095e-01, -1.124e-01, 1.103e-05, -5.898e-04, 1.695e-02, 4.677e-03, -2.300e-03, -4.224e-04, -7.532e-02, -2.307e-02) * s0_2_1;
	r0 += M4(-6.647e-05, 4.081e-04, -1.083e-05, 8.148e-03, -1.064e-04, -2.429e-03, -8.966e-05, 2.764e-03, -3.293e-05, -7.127e-04, 2.342e-05, 6.774e-03, 4.294e-04, -3.657e-03, 8.759e-05, 4.204e-03) * s0_2_2;
	r0 += M4(2.218e-03, -4.845e-02, -1.748e-03, -1.835e-04, 8.788e-03, 2.463e-04, 1.947e-04, -2.761e-05, -1.754e-02, 7.333e-03, 1.132e-03, -2.268e-04, -4.258e-02, -2.850e-03, 1.103e-03, 7.197e-04) * s1_0_0;
	r0 += M4(6.321e-04, 3.346e-02, -1.542e-04, -4.567e-03, -8.745e-02, -7.236e-02, 2.833e-03, 1.979e-04, 8.806e-04, -2.007e-03, -1.501e-05, -6.272e-04, 6.305e-02, -1.870e-01, -1.855e-02, -1.190e-03) * s1_0_1;
	r0 += M4(-1.250e-06, -2.555e-05, 4.096e-06, -1.631e-04, 1.906e-05, -2.043e-02, 1.428e-04, -5.320e-05, 1.716e-07, -2.660e-07, 1.805e-07, 1.701e-07, -1.540e-04, 1.792e-02, -1.279e-04, 8.255e-03) * s1_0_2;
	r0 += M4(-2.386e-02, 6.006e-02, 2.898e-01, -9.989e-02, -1.504e-03, -5.292e-05, 3.308e-02, -7.549e-04, 3.098e-01, -8.960e-02, -7.202e-02, 3.128e-02, -2.736e-03, 1.597e-04, 1.919e-02, -7.969e-03) * s1_1_0;
	r0 += M4(-7.937e-04, -2.148e-02, -1.377e-03, 1.951e-02, 2.633e-03, -3.370e-03, 2.878e-02, 1.159e-01, -1.364e-03, -6.470e-02, 1.422e-03, -4.394e-03, -1.952e-03, -8.672e-04, 6.211e-02, 2.070e-01) * s1_1_1;
	r0 += M4(4.248e-07, 2.410e-06, 9.337e-06, 4.980e-05, 1.349e-06, -2.847e-03, 1.456e-03, -4.900e-03, 5.253e-07, 3.058e-05, -5.276e-06, 1.251e-04, 5.491e-05, -1.350e-03, 1.602e-04, 3.086e-04) * s1_1_2;
	r0 += M4(1.175e-04, 1.355e-03, -7.252e-03, 6.660e-04, 5.289e-06, 3.363e-07, -3.982e-05, -6.598e-06, -7.367e-04, 2.741e-04, 3.247e-03, -9.730e-03, -8.252e-06, 1.386e-06, 2.871e-04, 1.122e-05) * s1_2_0;
	r0 += M4(5.863e-05, 1.714e-04, -1.911e-04, -2.519e-03, -1.430e-05, -2.816e-06, -2.496e-04, -1.914e-04, 1.488e-04, 3.943e-03, 2.381e-04, -2.317e-02, 2.681e-05, 2.866e-06, -1.407e-04, -2.468e-04) * s1_2_1;
	r0 += M4(6.034e-08, 2.084e-07, -9.204e-07, 2.119e-06, -2.320e-06, -6.102e-07, 7.486e-05, 4.446e-05, -5.193e-07, -1.604e-06, -6.342e-06, -2.825e-05, -7.739e-07, 9.069e-07, 2.951e-05, 1.629e-05) * s1_2_2;
	s0_0_0 = G[2][xy.y+0][xy.x+0]; s0_0_1 = G[2][xy.y+0][xy.x+1];
	s0_0_2 = G[2][xy.y+0][xy.x+2]; s0_1_0 = G[2][xy.y+1][xy.x+0];
	s0_1_1 = G[2][xy.y+1][xy.x+1]; s0_1_2 = G[2][xy.y+1][xy.x+2];
	s0_2_0 = G[2][xy.y+2][xy.x+0]; s0_2_1 = G[2][xy.y+2][xy.x+1];
	s0_2_2 = G[2][xy.y+2][xy.x+2]; s1_0_0 = G[3][xy.y+0][xy.x+0];
	s1_0_1 = G[3][xy.y+0][xy.x+1]; s1_0_2 = G[3][xy.y+0][xy.x+2];
	s1_1_0 = G[3][xy.y+1][xy.x+0]; s1_1_1 = G[3][xy.y+1][xy.x+1];
	s1_1_2 = G[3][xy.y+1][xy.x+2]; s1_2_0 = G[3][xy.y+2][xy.x+0];
	s1_2_1 = G[3][xy.y+2][xy.x+1]; s1_2_2 = G[3][xy.y+2][xy.x+2];
	r0 += M4(2.033e-02, -2.828e-05, -1.369e-04, -7.159e-06, 5.261e-03, 1.146e-03, -6.207e-05, 1.770e-06, 6.840e-03, 3.345e-04, 3.555e-04, 1.399e-04, -4.931e-03, -2.002e-04, 4.334e-05, 5.484e-06) * s0_0_0;
	r0 += M4(4.768e-02, 5.422e-02, 1.145e-03, 2.758e-04, -1.642e-04, -7.397e-04, -1.773e-04, -9.074e-05, -1.177e-03, 2.675e-02, 9.195e-03, -4.118e-04, -3.356e-03, -1.792e-02, -1.286e-03, -1.269e-04) * s0_0_1;
	r0 += M4(-1.175e-03, 1.632e-03, -2.110e-05, 3.930e-04, 1.752e-03, -5.982e-04, 4.137e-05, -8.895e-05, -3.816e-06, -1.612e-03, 3.068e-05, -2.385e-04, 9.150e-04, -8.270e-05, -1.445e-04, 7.743e-04) * s0_0_2;
	r0 += M4(5.573e-02, 4.884e-04, 5.745e-02, -4.038e-04, -1.460e-02, 4.115e-03, 2.266e-02, 1.390e-03, 1.583e-02, -8.551e-04, 1.100e-02, -3.278e-04, 9.849e-03, -1.286e-03, -1.381e-02, 4.205e-04) * s0_1_0;
	r0 += M4(-1.910e-01, 5.429e-02, -4.638e-02, 1.642e-01, -1.940e-01, -1.344e-01, 1.569e-01, 9.869e-02, -1.767e-01, 1.296e-01, -1.474e-01, 1.209e-01, -2.964e-01, 1.392e-01, 1.772e-01, -5.093e-02) * s0_1_1;
	r0 += M4(2.537e-04, -5.261e-02, -2.683e-03, -4.066e-02, -9.368e-03, -9.080e-02, 9.654e-03, 7.689e-02, -3.148e-04, 1.456e-02, 1.158e-03, 7.221e-03, 8.095e-04, -1.251e-03, 8.973e-04, -2.070e-02) * s0_1_2;
	r0 += M4(-5.333e-04, -2.417e-04, 7.412e-03, 7.305e-05, 9.664e-04, 1.354e-04, -2.444e-03, -3.940e-03, -4.678e-04, 2.705e-04, 8.844e-03, 1.689e-05, 7.068e-04, -1.395e-04, -5.469e-04, 1.385e-03) * s0_2_0;
	r0 += M4(-6.433e-04, -2.845e-03, -5.310e-02, -2.581e-02, 1.043e-03, 1.385e-03, -5.635e-03, 4.260e-03, 3.209e-03, 3.074e-03, -2.970e-02, 3.455e-02, 1.584e-03, -8.021e-05, -9.886e-03, -2.497e-02) * s0_2_1;
	r0 += M4(2.227e-04, -3.751e-04, -1.794e-04, -1.825e-02, 7.669e-05, 6.955e-04, -4.453e-03, -4.166e-03, 2.956e-04, -1.533e-03, -1.429e-03, 3.954e-03, 5.288e-05, -3.676e-04, 2.191e-03, 7.587e-03) * s0_2_2;
	r0 += M4(1.595e-02, 1.164e-02, -1.265e-04, 5.695e-06, -5.902e-03, 4.730e-06, 7.993e-06, -2.085e-07, -2.071e-03, 1.772e-05, -1.524e-04, 1.129e-06, -7.350e-02, 1.660e-03, -3.382e-02, -2.891e-03) * s1_0_0;
	r0 += M4(4.618e-03, 1.453e-02, -5.548e-05, -3.880e-04, -1.677e-02, -1.764e-02, -4.170e-05, 3.860e-05, -8.844e-05, 5.736e-03, 1.900e-05, 5.179e-07, 1.178e-02, -1.323e-01, 1.993e-03, 1.725e-03) * s1_0_1;
	r0 += M4(8.035e-07, 1.066e-03, -2.795e-06, 1.628e-04, -1.671e-05, -4.878e-03, 8.075e-07, -2.142e-06, 1.207e-06, -1.677e-06, 7.832e-07, 3.718e-07, -4.129e-05, 1.394e-02, 1.990e-05, 2.675e-03) * s1_0_2;
	r0 += M4(-1.366e-01, -5.098e-02, 1.327e-01, 4.480e-02, -1.984e-02, -2.596e-05, -1.935e-02, 3.115e-06, -9.253e-02, 1.249e-05, -7.984e-02, -1.717e-04, -3.979e-03, -2.959e-04, -4.040e-02, 1.720e-04) * s1_1_0;
	r0 += M4(-1.385e-02, -9.265e-02, 7.843e-03, 8.989e-02, -6.470e-02, -6.184e-02, -5.719e-02, -6.060e-02, 4.204e-05, 8.813e-02, 1.441e-04, 8.325e-02, -2.538e-03, -7.718e-04, -1.382e-02, -8.031e-02) * s1_1_1;
	r0 += M4(1.435e-04, 2.859e-03, -7.740e-06, -8.140e-04, 4.393e-05, -2.098e-02, -1.417e-05, -1.910e-02, -1.154e-06, -1.093e-05, 1.450e-06, -4.007e-06, 5.449e-05, 6.272e-04, 1.596e-04, 5.658e-04) * s1_1_2;
	r0 += M4(2.604e-03, 2.620e-04, -2.216e-02, -1.270e-02, 5.508e-07, 7.611e-06, -6.729e-03, 8.529e-07, -9.006e-04, -2.748e-05, -1.505e-02, 1.678e-04, 2.197e-05, -1.067e-05, 1.783e-04, -2.151e-06) * s1_2_0;
	r0 += M4(-3.938e-04, 9.215e-04, -1.036e-02, -1.874e-02, -1.783e-06, -2.655e-05, -2.240e-02, -2.155e-02, 4.837e-05, 7.285e-04, -2.224e-04, 1.257e-02, 1.485e-06, 2.226e-05, 1.832e-04, -8.453e-05) * s1_2_1;
	r0 += M4(-1.043e-04, 2.826e-06, 2.865e-04, 4.612e-04, 1.369e-06, 3.274e-05, 1.360e-05, -6.920e-03, -6.735e-07, 1.039e-05, -1.488e-06, 3.061e-07, 5.231e-06, -9.204e-06, -3.079e-05, 5.301e-05) * s1_2_2;
	s0_0_0 = G[4][xy.y+0][xy.x+0]; s0_0_1 = G[4][xy.y+0][xy.x+1];
	s0_0_2 = G[4][xy.y+0][xy.x+2]; s0_1_0 = G[4][xy.y+1][xy.x+0];
	s0_1_1 = G[4][xy.y+1][xy.x+1]; s0_1_2 = G[4][xy.y+1][xy.x+2];
	s0_2_0 = G[4][xy.y+2][xy.x+0]; s0_2_1 = G[4][xy.y+2][xy.x+1];
	s0_2_2 = G[4][xy.y+2][xy.x+2]; s1_0_0 = G[5][xy.y+0][xy.x+0];
	s1_0_1 = G[5][xy.y+0][xy.x+1]; s1_0_2 = G[5][xy.y+0][xy.x+2];
	s1_1_0 = G[5][xy.y+1][xy.x+0]; s1_1_1 = G[5][xy.y+1][xy.x+1];
	s1_1_2 = G[5][xy.y+1][xy.x+2]; s1_2_0 = G[5][xy.y+2][xy.x+0];
	s1_2_1 = G[5][xy.y+2][xy.x+1]; s1_2_2 = G[5][xy.y+2][xy.x+2];
	r0 += M4(-6.843e-03, -5.131e-05, 1.878e-03, -8.457e-06, 1.923e-02, -1.698e-03, -4.275e-04, 2.135e-04, 9.058e-02, 1.289e-05, 8.053e-02, 1.482e-04, -1.052e-02, -1.768e-04, 4.389e-04, 6.546e-06) * s0_0_0;
	r0 += M4(-5.349e-02, -4.138e-02, -6.482e-04, -5.087e-04, -3.168e-02, -5.628e-03, -9.829e-04, 1.622e-03, -6.627e-05, -9.009e-02, -5.854e-04, -7.898e-02, -3.816e-02, -3.096e-02, -3.258e-03, -5.448e-04) * s0_0_1;
	r0 += M4(5.483e-04, -1.932e-02, -5.306e-05, 1.452e-04, 3.847e-04, -5.544e-03, -2.192e-04, 8.611e-04, 4.550e-06, 2.174e-06, 3.426e-06, -9.674e-07, -1.012e-03, -1.357e-02, 1.787e-04, 8.196e-05) * s0_0_2;
	r0 += M4(5.697e-03, 4.052e-04, -2.434e-03, 4.513e-04, -5.508e-02, -2.424e-03, -1.728e-02, 2.253e-03, 8.733e-04, -6.139e-06, 1.446e-02, -1.350e-04, -1.503e-02, -2.353e-03, -3.625e-02, -3.751e-05) * s0_1_0;
	r0 += M4(-5.985e-02, -4.395e-04, -1.513e-01, -7.878e-02, 6.613e-04, 6.926e-02, 1.847e-02, -3.248e-01, -3.014e-05, -9.641e-04, 1.999e-04, -1.486e-02, 1.687e-01, 4.417e-02, -2.843e-02, -1.120e-01) * s0_1_1;
	r0 += M4(-9.730e-04, -3.967e-02, 1.901e-04, -4.729e-02, 2.245e-05, -2.088e-03, -1.064e-04, 4.219e-03, 2.501e-06, -5.672e-06, -2.825e-06, 4.542e-06, 1.021e-03, 7.660e-02, 1.261e-03, 3.148e-02) * s0_1_2;
	r0 += M4(1.803e-04, -3.825e-05, 4.624e-03, -2.635e-05, 2.202e-04, -1.166e-04, -9.067e-03, 1.736e-03, 2.105e-06, -4.585e-07, 1.529e-04, 5.732e-06, -3.707e-04, 4.177e-05, 1.650e-04, -1.000e-03) * s0_2_0;
	r0 += M4(2.565e-04, -8.044e-05, -5.347e-03, 4.348e-03, -1.281e-04, -3.442e-04, -1.080e-03, 1.236e-02, 3.813e-06, -3.808e-06, 5.614e-05, -1.041e-05, -1.546e-04, 5.963e-04, 3.575e-02, 2.592e-02) * s0_2_1;
	r0 += M4(9.460e-05, 4.662e-04, -3.640e-05, -6.937e-03, -1.603e-05, 7.213e-05, 6.348e-05, 4.428e-05, -7.538e-07, 5.295e-07, -3.792e-06, -9.641e-06, -5.790e-05, -3.213e-04, 1.176e-04, 1.740e-02) * s0_2_2;
	r0 += M4(-9.039e-05, -1.701e-04, -5.649e-05, -4.467e-06, -9.247e-03, 1.850e-04, -5.679e-04, -2.943e-04, -5.741e-03, -1.231e-03, -5.802e-05, 1.292e-04, 7.578e-03, -1.035e-04, 8.069e-04, 5.707e-05) * s1_0_0;
	r0 += M4(5.111e-04, 1.239e-03, 5.703e-06, 2.420e-05, 3.112e-02, -1.235e-02, 4.632e-03, 1.325e-03, -3.680e-03, -1.000e-02, 1.184e-03, 1.252e-04, -1.471e-02, -1.057e-03, -1.176e-03, -4.177e-04) * s1_0_1;
	r0 += M4(-3.513e-05, -4.057e-04, -9.710e-06, -1.976e-05, -1.132e-03, 5.475e-04, 2.426e-04, -1.598e-03, -2.596e-03, -3.132e-03, 2.721e-04, 3.484e-05, -9.837e-05, 7.469e-04, -1.823e-04, -9.529e-05) * s1_0_2;
	r0 += M4(9.186e-03, 3.794e-04, 3.371e-03, -2.016e-04, -4.735e-03, -3.955e-04, 1.169e-02, -3.267e-04, 4.323e-02, 1.188e-03, -1.165e-02, -1.374e-03, 5.652e-02, -1.658e-04, 5.159e-02, 2.293e-04) * s1_1_0;
	r0 += M4(-2.377e-01, 1.477e-03, 1.156e-02, 1.698e-03, 1.077e-01, -6.904e-04, -3.110e-01, 9.573e-02, 1.811e-01, 1.508e-01, -1.440e-01, -1.125e-01, 7.797e-02, 1.691e-01, 2.812e-03, 9.930e-02) * s1_1_1;
	r0 += M4(4.104e-03, -4.771e-02, -8.087e-04, -7.216e-03, 1.339e-03, -9.639e-03, -2.767e-03, 2.960e-04, 6.856e-04, 3.550e-02, -9.384e-04, -1.823e-02, -7.883e-04, -7.233e-03, 6.291e-04, -6.507e-03) * s1_1_2;
	r0 += M4(7.240e-04, 8.821e-05, 8.689e-03, -9.624e-05, -1.525e-04, 2.415e-05, -3.300e-03, 2.624e-05, -3.474e-05, -1.733e-05, 9.551e-03, 1.268e-04, 1.820e-05, 3.724e-05, 1.874e-02, -3.852e-05) * s1_2_0;
	r0 += M4(3.186e-03, 1.007e-03, 1.211e-01, 3.523e-02, 2.084e-04, 1.607e-04, 2.097e-02, -4.397e-03, -4.078e-04, -1.331e-03, 1.125e-02, 1.127e-02, 7.751e-04, -2.393e-04, 4.045e-02, 5.065e-02) * s1_2_1;
	r0 += M4(-4.705e-04, 1.470e-03, 1.547e-03, 7.714e-04, -2.257e-04, -4.157e-05, 2.035e-04, 1.514e-03, -1.595e-04, -5.698e-04, 1.588e-03, 3.968e-03, -4.544e-05, -3.808e-08, -6.015e-04, 5.505e-03) * s1_2_2;
	s0_0_0 = G[6][xy.y+0][xy.x+0]; s0_0_1 = G[6][xy.y+0][xy.x+1];
	s0_0_2 = G[6][xy.y+0][xy.x+2]; s0_1_0 = G[6][xy.y+1][xy.x+0];
	s0_1_1 = G[6][xy.y+1][xy.x+1]; s0_1_2 = G[6][xy.y+1][xy.x+2];
	s0_2_0 = G[6][xy.y+2][xy.x+0]; s0_2_1 = G[6][xy.y+2][xy.x+1];
	s0_2_2 = G[6][xy.y+2][xy.x+2]; s1_0_0 = G[7][xy.y+0][xy.x+0];
	s1_0_1 = G[7][xy.y+0][xy.x+1]; s1_0_2 = G[7][xy.y+0][xy.x+2];
	s1_1_0 = G[7][xy.y+1][xy.x+0]; s1_1_1 = G[7][xy.y+1][xy.x+1];
	s1_1_2 = G[7][xy.y+1][xy.x+2]; s1_2_0 = G[7][xy.y+2][xy.x+0];
	s1_2_1 = G[7][xy.y+2][xy.x+1]; s1_2_2 = G[7][xy.y+2][xy.x+2];
	r0 += M4(-2.250e-03, 8.551e-04, 6.654e-04, 1.219e-05, 2.861e-02, -2.724e-04, -1.363e-03, 3.731e-04, 2.528e-02, -1.452e-03, 2.965e-04, 2.263e-04, 2.784e-02, 1.004e-05, -9.453e-05, 4.026e-06) * s0_0_0;
	r0 += M4(-1.849e-04, -3.357e-03, -4.161e-04, -1.013e-03, -2.267e-03, -1.573e-02, 8.772e-05, 6.990e-03, 1.104e-01, 1.168e-01, -8.688e-04, -1.023e-03, 8.618e-02, 8.813e-02, 2.024e-04, 6.983e-05) * s0_0_1;
	r0 += M4(-1.591e-04, 4.461e-03, 1.516e-04, 2.487e-04, 8.684e-06, -7.735e-04, 2.414e-05, -5.590e-04, -3.228e-03, 2.174e-02, 4.843e-04, 7.107e-04, 1.030e-04, 2.264e-02, -5.704e-06, 1.663e-06) * s0_0_2;
	r0 += M4(5.039e-02, 9.273e-03, 2.322e-03, 4.001e-05, 1.294e-01, 3.008e-04, 1.255e-01, -7.350e-04, -1.334e-03, -1.064e-03, -2.047e-02, 6.299e-03, 1.144e-03, 3.106e-05, -1.004e-02, -1.811e-04) * s0_1_0;
	r0 += M4(2.330e-02, -2.603e-01, -1.485e-02, 2.884e-01, 2.999e-03, -1.403e-01, 5.361e-04, -1.262e-01, 2.742e-03, 3.396e-03, -1.228e-01, -1.199e-01, -1.195e-03, -1.394e-03, -1.013e-01, -9.831e-02) * s0_1_1;
	r0 += M4(1.047e-03, 2.642e-02, 2.642e-04, -2.345e-03, -1.425e-05, 1.638e-03, 6.798e-05, 4.942e-04, -1.210e-03, -2.094e-03, 3.300e-03, -2.458e-02, 3.425e-05, 1.118e-03, -1.822e-04, -1.284e-02) * s0_1_2;
	r0 += M4(2.757e-04, 4.234e-04, 1.395e-02, -7.094e-05, -4.430e-04, -2.467e-05, 2.996e-02, 3.623e-04, -9.707e-05, 9.677e-06, -1.590e-03, -1.951e-04, 1.144e-06, -8.917e-07, 3.878e-07, 7.712e-07) * s0_2_0;
	r0 += M4(2.963e-04, 3.420e-03, 5.309e-03, -1.313e-02, -1.120e-03, 6.980e-03, -8.074e-04, -2.948e-02, 6.271e-05, -3.904e-05, 2.815e-03, 4.969e-04, -3.275e-07, 1.872e-06, -7.405e-05, -1.751e-05) * s0_2_1;
	r0 += M4(-9.995e-05, 1.145e-03, 1.757e-03, 3.665e-03, -1.124e-07, -8.413e-04, -8.074e-05, 1.526e-04, 3.371e-05, 2.988e-05, -1.072e-03, -1.510e-04, -3.609e-06, -1.396e-06, -7.096e-05, 4.851e-06) * s0_2_2;
	r0 += M4(-2.473e-02, 4.116e-03, 3.317e-04, -1.247e-05, -1.707e-01, 8.732e-02, -2.603e-02, 4.308e-03, -1.730e-02, -1.552e-03, -5.337e-03, -2.477e-04, -3.845e-02, -1.816e-04, 1.117e-04, 1.961e-05) * s1_0_0;
	r0 += M4(-4.099e-04, 7.887e-03, 4.801e-07, -2.491e-03, 2.495e-03, -1.626e-02, 3.811e-05, -9.368e-03, 1.741e-02, -1.688e-02, 1.006e-03, 9.669e-04, -6.105e-02, -7.792e-02, -2.590e-03, -6.240e-04) * s1_0_1;
	r0 += M4(-1.051e-06, -5.690e-06, 2.600e-06, -1.092e-05, -1.542e-05, 4.291e-05, 3.862e-07, 1.107e-04, 1.105e-04, 2.425e-03, 1.419e-04, 1.478e-05, -1.265e-04, -1.992e-02, -1.126e-04, 5.808e-05) * s1_0_2;
	r0 += M4(-1.203e-01, -4.871e-03, -1.178e-01, -5.808e-04, 2.473e-02, 8.509e-03, -1.365e-01, 1.026e-01, 4.439e-02, 5.763e-04, 7.680e-02, 4.221e-03, -2.897e-04, -2.887e-06, -4.838e-03, 6.771e-04) * s1_1_0;
	r0 += M4(5.322e-04, 1.538e-01, 5.774e-04, 1.165e-01, -3.845e-04, -1.740e-02, 3.100e-03, -2.096e-02, -8.727e-02, 1.752e-01, -6.465e-03, -1.761e-01, 5.405e-05, 4.035e-03, 1.262e-01, 6.217e-02) * s1_1_1;
	r0 += M4(1.399e-06, -1.943e-05, -8.525e-06, 5.272e-06, 8.159e-06, -4.486e-05, -1.754e-05, -2.722e-04, 5.393e-04, -2.790e-03, -4.205e-04, 1.778e-02, -8.411e-05, 7.037e-04, -3.713e-04, 2.262e-02) * s1_1_2;
	r0 += M4(2.157e-03, -2.181e-04, -2.666e-02, 3.971e-04, 6.619e-04, -1.459e-04, 1.341e-02, 8.238e-04, -5.826e-04, 1.762e-05, 3.352e-03, -3.678e-04, -1.557e-06, 6.922e-07, -1.080e-04, -8.869e-06) * s1_2_0;
	r0 += M4(2.668e-05, -2.538e-03, -1.842e-04, 4.285e-02, -2.994e-04, -5.281e-04, 3.689e-04, -4.034e-03, 2.360e-04, -4.978e-04, 1.688e-02, 3.586e-02, 5.848e-07, -5.496e-07, 1.718e-04, 1.589e-04) * s1_2_1;
	r0 += M4(2.543e-07, 9.881e-07, 5.555e-06, -1.587e-05, 4.501e-06, 7.025e-07, 1.618e-05, 1.506e-04, 4.899e-04, -1.030e-03, -2.857e-04, -2.594e-03, 3.903e-07, -2.935e-07, -3.689e-05, -2.557e-05) * s1_2_2;
	r0 += V4(1.008e-11, -5.429e-12, 6.005e-13, 2.265e-11);
	r0 = r0;
	vec2 opt = 0.5 * LUMA_pt;
	vec2 fpos = (vec2(opos) + vec2(0.5)) * opt;
	imageStore(out_image, opos + ivec2(0, 0), vec4(r0.x + LUMA_tex(fpos + vec2(0.0, 0.0) * opt).r, 0.0, 0.0, 1.0));
	imageStore(out_image, opos + ivec2(1, 0), vec4(r0.y + LUMA_tex(fpos + vec2(1.0, 0.0) * opt).r, 0.0, 0.0, 1.0));
	imageStore(out_image, opos + ivec2(0, 1), vec4(r0.z + LUMA_tex(fpos + vec2(0.0, 1.0) * opt).r, 0.0, 0.0, 1.0));
	imageStore(out_image, opos + ivec2(1, 1), vec4(r0.w + LUMA_tex(fpos + vec2(1.0, 1.0) * opt).r, 0.0, 0.0, 1.0));
}
