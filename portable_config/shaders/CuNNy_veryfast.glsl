// CuNNy veryfast
// Copyright (c) 2024 funnyplanter

// This program is free software; you can redistribute it and/or
// modify it under the terms of the GNU Lesser General Public
// License as published by the Free Software Foundation; either
// version 3.0 of the License, or (at your option) any later version.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
// Lesser General Public License for more details.
//
// You should have received a copy of the GNU Lesser General Public
// License along with this program.  If not, see <https://www.gnu.org/licenses/>.
/* ------------------------------------------------------------------- */


//!DESC CuNNy-veryfast-in
//!HOOK LUMA
//!COMPUTE 16 8 8 8
//!BIND LUMA
//!SAVE in
//!WIDTH LUMA.w 2 *
//!HEIGHT LUMA.h
//!COMPONENTS 4
//!WHEN OUTPUT.w LUMA.w / 1.3 > OUTPUT.h LUMA.h / 1.3 > *
#extension GL_EXT_shader_explicit_arithmetic_types_float16 : enable
#ifdef GL_EXT_shader_explicit_arithmetic_types_float16
#	define V4 f16vec4
#	define M4 f16mat4
#	define F float16_t
#else
#	define V4 vec4
#	define M4 mat4
#	define F float
#endif
#define l0(x, y) F((LUMA_mul * texelFetch(LUMA_raw, clamp(pos + ivec2(x, y), ivec2(0), sz) * ivec2(1, 1) + ivec2(0, 0), 0)).r)
shared F G[1][10][10];
void hook() {
	ivec2 xy = ivec2(gl_LocalInvocationID.xy);
	ivec2 pos = ivec2(gl_WorkGroupID.xy) * ivec2(8, 8) + xy;
	ivec2 opos = pos * ivec2(2, 1);
	ivec2 sz = ivec2(LUMA_size) - ivec2(1);
	for (int y = 0; y < 10; y += 8) {
		int ay = xy.y + y;
		if (ay >= 10) break;
		for (int x = 0; x < 10; x += 8) {
			int ax = xy.x + x;
			if (ax >= 10) break;
			G[0][ay][ax] = l0(x - 1, y - 1);
		}
	}
	barrier();
	F s0_0_0, s0_0_1, s0_0_2, s0_1_0, s0_1_1, s0_1_2, s0_2_0, s0_2_1, s0_2_2;
	V4 r0, r1;
	r0 = V4(0.0); r1 = V4(0.0);
	s0_0_0 = G[0][xy.y+0][xy.x+0]; s0_0_1 = G[0][xy.y+0][xy.x+1];
	s0_0_2 = G[0][xy.y+0][xy.x+2]; s0_1_0 = G[0][xy.y+1][xy.x+0];
	s0_1_1 = G[0][xy.y+1][xy.x+1]; s0_1_2 = G[0][xy.y+1][xy.x+2];
	s0_2_0 = G[0][xy.y+2][xy.x+0]; s0_2_1 = G[0][xy.y+2][xy.x+1];
	s0_2_2 = G[0][xy.y+2][xy.x+2];
	r0 += V4(-3.490e-02, -2.327e-03, -4.335e-02, -1.038e-01) * s0_0_0;
	r1 += V4(-7.606e-02, -3.918e-02, 1.111e-02, -8.156e-02) * s0_0_0;
	r0 += V4(-5.681e-02, -1.062e-02, 4.028e-02, 6.191e-01) * s0_0_1;
	r1 += V4(-3.161e-02, -6.199e-01, 1.837e-01, -2.437e-02) * s0_0_1;
	r0 += V4(6.122e-02, 1.186e-02, -5.239e-02, 6.399e-01) * s0_0_2;
	r1 += V4(-2.403e-01, -1.795e-01, 1.499e-01, -1.624e-01) * s0_0_2;
	r0 += V4(1.352e-01, 7.567e-02, -4.924e-04, 9.323e-02) * s0_1_0;
	r1 += V4(2.397e-01, 3.254e-01, -2.510e-01, 2.449e-01) * s0_1_0;
	r0 += V4(-6.106e-01, -1.371e+00, -1.059e+00, -1.348e+00) * s0_1_1;
	r1 += V4(-3.190e-01, 1.124e+00, 7.758e-01, 7.635e-01) * s0_1_1;
	r0 += V4(-1.511e-03, 5.994e-01, 7.213e-02, 1.172e-01) * s0_1_2;
	r1 += V4(4.048e-01, 3.163e-01, 4.235e-02, -2.339e-01) * s0_1_2;
	r0 += V4(-5.257e-02, -7.134e-02, 1.052e+00, 1.147e-02) * s0_2_0;
	r1 += V4(-1.106e-01, -1.577e-01, -6.367e-02, -6.794e-02) * s0_2_0;
	r0 += V4(1.223e-01, 3.202e-01, 2.425e-02, -1.602e-02) * s0_2_1;
	r1 += V4(5.288e-01, -6.030e-01, -2.161e-01, 1.121e-01) * s0_2_1;
	r0 += V4(7.949e-01, 4.495e-01, -3.955e-02, -1.260e-02) * s0_2_2;
	r1 += V4(-2.553e-03, -1.697e-01, -1.033e-01, -1.802e-01) * s0_2_2;
	r0 += V4(1.351e-02, -9.726e-05, -3.942e-03, -3.301e-03);
	r0 = max(r0, V4(0.0));
	imageStore(out_image, opos + ivec2(0, 0), vec4(r0));
	r1 += V4(1.017e-02, 2.121e-03, 1.418e-02, 5.905e-03);
	r1 = max(r1, V4(0.0));
	imageStore(out_image, opos + ivec2(1, 0), vec4(r1));
}

//!DESC CuNNy-veryfast-conv1
//!HOOK LUMA
//!COMPUTE 16 8 8 8
//!BIND in
//!BIND LUMA
//!SAVE conv1
//!WIDTH LUMA.w 2 *
//!HEIGHT LUMA.h
//!COMPONENTS 4
//!WHEN OUTPUT.w LUMA.w / 1.3 > OUTPUT.h LUMA.h / 1.3 > *
#extension GL_EXT_shader_explicit_arithmetic_types_float16 : enable
#ifdef GL_EXT_shader_explicit_arithmetic_types_float16
#	define V4 f16vec4
#	define M4 f16mat4
#	define F float16_t
#else
#	define V4 vec4
#	define M4 mat4
#	define F float
#endif
#define l0(x, y) V4((in_mul * texelFetch(in_raw, clamp(pos + ivec2(x, y), ivec2(0), sz) * ivec2(2, 1) + ivec2(0, 0), 0)))
#define l1(x, y) V4((in_mul * texelFetch(in_raw, clamp(pos + ivec2(x, y), ivec2(0), sz) * ivec2(2, 1) + ivec2(1, 0), 0)))
shared V4 G[2][10][10];
void hook() {
	ivec2 xy = ivec2(gl_LocalInvocationID.xy);
	ivec2 pos = ivec2(gl_WorkGroupID.xy) * ivec2(8, 8) + xy;
	ivec2 opos = pos * ivec2(2, 1);
	ivec2 sz = ivec2(LUMA_size) - ivec2(1);
	for (int y = 0; y < 10; y += 8) {
		int ay = xy.y + y;
		if (ay >= 10) break;
		for (int x = 0; x < 10; x += 8) {
			int ax = xy.x + x;
			if (ax >= 10) break;
			G[0][ay][ax] = l0(x - 1, y - 1);
			G[1][ay][ax] = l1(x - 1, y - 1);
		}
	}
	barrier();
	V4 s0_0_0, s0_0_1, s0_0_2, s0_1_0, s0_1_1, s0_1_2, s0_2_0, s0_2_1, s0_2_2, s1_0_0, s1_0_1, s1_0_2, s1_1_0, s1_1_1, s1_1_2, s1_2_0, s1_2_1, s1_2_2;
	V4 r0, r1;
	r0 = V4(0.0); r1 = V4(0.0);
	s0_0_0 = G[0][xy.y+0][xy.x+0]; s0_0_1 = G[0][xy.y+0][xy.x+1];
	s0_0_2 = G[0][xy.y+0][xy.x+2]; s0_1_0 = G[0][xy.y+1][xy.x+0];
	s0_1_1 = G[0][xy.y+1][xy.x+1]; s0_1_2 = G[0][xy.y+1][xy.x+2];
	s0_2_0 = G[0][xy.y+2][xy.x+0]; s0_2_1 = G[0][xy.y+2][xy.x+1];
	s0_2_2 = G[0][xy.y+2][xy.x+2]; s1_0_0 = G[1][xy.y+0][xy.x+0];
	s1_0_1 = G[1][xy.y+0][xy.x+1]; s1_0_2 = G[1][xy.y+0][xy.x+2];
	s1_1_0 = G[1][xy.y+1][xy.x+0]; s1_1_1 = G[1][xy.y+1][xy.x+1];
	s1_1_2 = G[1][xy.y+1][xy.x+2]; s1_2_0 = G[1][xy.y+2][xy.x+0];
	s1_2_1 = G[1][xy.y+2][xy.x+1]; s1_2_2 = G[1][xy.y+2][xy.x+2];
	r0 += M4(1.523e+00, 9.831e-02, 1.268e+00, -4.251e-01, -9.032e-01, 1.580e-01, -1.778e+00, 4.711e-01, 3.936e-01, -9.621e-02, -2.310e-01, -7.524e-03, -1.549e-01, -8.292e-02, -5.992e-01, -3.314e-02) * s0_0_0;
	r1 += M4(-4.249e-01, -3.645e-01, 5.113e-01, -4.292e-01, 2.063e-01, 3.815e-01, -2.069e-01, 3.076e-01, 1.426e-02, 2.038e-01, 4.359e-02, 5.419e-03, -3.628e-03, 2.025e-02, -1.154e-03, -6.191e-01) * s0_0_0;
	r0 += M4(-8.608e-01, -2.299e-03, 1.449e-01, -4.452e-04, -2.091e-02, 4.697e-01, -1.002e+00, 2.996e-01, -8.770e-01, -2.744e-01, -7.956e-01, 4.834e-01, -9.269e-02, -2.231e-01, -1.563e-01, -2.186e-01) * s0_0_1;
	r1 += M4(-1.710e-01, 2.238e-01, -1.326e-01, -2.127e-02, -8.124e-02, 3.447e-01, 8.123e-02, -4.187e+00, -1.121e-01, 2.787e-01, -7.981e-02, -2.096e-01, 1.182e-02, -3.939e-02, -3.699e-02, -3.008e+00) * s0_0_1;
	r0 += M4(5.078e-02, -3.347e-01, 1.669e-01, 9.640e-02, 4.929e-01, 4.799e-01, -1.841e-01, 2.881e-01, 7.618e-02, 3.131e-01, 1.284e-01, 5.012e-01, 6.173e-02, -2.569e-01, -2.183e-01, -1.433e-01) * s0_0_2;
	r1 += M4(-4.114e-02, -8.705e-02, -3.818e-01, 4.486e-01, -5.309e-02, 6.372e-02, 2.368e-01, -1.413e-01, -4.715e-01, -1.489e-01, 1.429e-01, 6.660e-01, 6.568e-02, -6.054e-02, -1.616e-01, -5.446e-01) * s0_0_2;
	r0 += M4(3.801e-01, -6.078e-01, 3.684e-01, 1.825e-01, -1.137e+00, 3.596e-01, 4.533e-01, 4.508e-01, 1.489e-01, -3.327e-01, 1.909e-01, -7.902e-02, 1.135e-01, -7.871e-01, -9.717e-02, 1.507e-01) * s0_1_0;
	r1 += M4(-1.999e-01, -7.157e-02, 2.031e-01, -1.691e-01, 1.129e+00, 7.054e-01, -1.229e-01, 6.652e-01, 2.479e-02, 1.696e-01, -9.399e-02, 5.408e-02, 2.419e-01, 4.503e-01, -1.320e-01, -2.354e-01) * s0_1_0;
	r0 += M4(5.188e-02, -5.080e-01, 6.515e-02, -9.407e-02, -9.215e-02, 7.866e-01, 3.643e-01, -1.359e+00, -4.172e-01, -5.755e-01, -1.920e-01, 9.844e-02, 7.977e-02, -1.039e+00, -7.630e-01, -7.121e-01) * s0_1_1;
	r1 += M4(4.381e-01, -2.993e-02, -7.033e-01, 2.171e-01, 5.699e-01, 1.105e+00, 4.268e-01, -2.054e-01, 6.721e-01, 1.059e+00, -3.043e-02, -1.513e-01, 1.403e-01, 9.507e-01, 2.912e-01, -1.112e+00) * s0_1_1;
	r0 += M4(-4.103e-01, -1.735e-01, -2.836e-01, 3.266e-01, 6.562e-01, 3.663e-01, 2.398e-01, -5.369e-01, 2.895e-01, -6.035e-01, -1.757e-01, -3.195e-01, 7.298e-02, -2.745e-01, 3.017e-02, 6.579e-02) * s0_1_2;
	r1 += M4(-1.096e-01, 2.124e-01, 1.503e-01, 3.949e-02, 1.420e-01, 6.949e-02, 2.384e-01, 3.060e-02, -1.274e-01, 1.397e-01, 1.389e-01, -5.879e-01, -5.728e-02, 1.644e-01, -1.934e-02, -6.264e-02) * s0_1_2;
	r0 += M4(1.401e-01, 1.903e-02, -7.949e-01, 4.759e-01, -2.900e-01, 6.659e-01, 1.863e-01, -2.458e-01, 1.003e-01, -9.052e-02, -8.135e-02, -2.318e-03, -1.936e-02, -3.663e-01, 1.207e+00, 8.544e-01) * s0_2_0;
	r1 += M4(-2.508e-01, -4.153e-01, -5.975e-02, -3.897e-01, 2.764e-01, 1.499e-01, -5.813e-02, 2.627e-01, -4.526e-02, -4.759e-02, -3.318e-02, 1.795e-02, 5.137e-01, -8.322e-02, -7.700e-02, 4.658e-01) * s0_2_0;
	r0 += M4(-2.295e-01, -1.869e-01, -2.607e-01, -2.395e-01, 1.119e-01, 7.157e-01, 1.699e-01, -1.099e+00, -6.468e-02, -9.993e-02, 2.759e-01, -2.279e+00, -4.248e-01, -1.467e-01, 5.912e-01, -4.301e-01) * s0_2_1;
	r1 += M4(4.390e-02, 2.711e-03, 3.928e-02, 1.496e-01, -3.776e-02, 6.446e-02, 1.162e-01, -2.628e-01, 1.694e-01, 1.364e-01, -6.743e-02, 1.310e-02, 8.965e-01, 9.750e-01, 9.548e-01, 5.474e-01) * s0_2_1;
	r0 += M4(5.073e-02, 2.757e-02, -8.529e-02, 2.012e-01, 7.785e-02, 1.165e-02, 5.836e-02, -1.997e-01, 1.067e-01, -3.351e-01, 2.035e-01, -1.899e+00, 3.855e-01, -2.434e-01, 1.284e-01, -1.763e-01) * s0_2_2;
	r1 += M4(5.677e-02, 3.236e-02, -3.031e-02, 2.753e-01, -6.763e-02, -6.211e-02, -2.807e-02, -3.089e-01, -1.909e-02, -8.375e-02, -1.047e-02, -2.059e-01, -6.897e-02, 3.807e-01, 9.121e-01, 1.538e-01) * s0_2_2;
	r0 += M4(-1.155e-01, -2.140e-01, -3.036e-01, -9.157e-02, -3.944e-02, 1.460e-01, 4.041e-01, 3.039e-01, 6.891e-02, 2.899e-01, -2.874e-02, 1.137e-01, -2.019e-01, 2.858e-01, -2.238e-01, -3.987e-01) * s1_0_0;
	r1 += M4(3.831e-01, 4.696e-02, -3.062e-01, 9.516e-01, -1.880e-01, 1.816e-02, 1.608e-01, 1.500e-01, -2.046e-01, -2.618e-02, 1.197e-01, 2.163e-01, -1.215e-01, 3.753e-01, 2.293e-01, -4.143e-01) * s1_0_0;
	r0 += M4(-3.999e-02, -5.307e-02, 5.027e-01, -1.120e+00, 2.535e-01, 1.918e-01, -4.932e-01, 2.247e-01, -3.085e-01, 9.973e-01, 1.997e-01, 1.424e-01, -5.303e-01, -3.480e-01, 1.600e-01, 2.844e-02) * s1_0_1;
	r1 += M4(-3.966e-02, -4.958e-01, -2.680e-02, 5.591e-02, -6.018e-02, -5.529e-02, 2.401e-02, -6.387e-01, -2.559e-01, 1.910e-01, 1.695e-01, 3.446e-01, 1.380e-01, 3.127e-01, -5.528e-01, 1.070e+00) * s1_0_1;
	r0 += M4(3.174e-01, 1.497e-01, -1.843e-01, -6.868e-01, -8.375e-02, 5.608e-01, 2.456e-01, 4.522e-01, 1.714e-01, 4.290e-01, 4.979e-01, 3.482e-02, -6.015e-02, -4.027e-01, -2.930e-02, 3.084e-01) * s1_0_2;
	r1 += M4(1.841e-01, -7.029e-02, 2.701e-01, 6.694e-03, -9.418e-02, 2.672e-02, 1.899e-01, 1.460e-01, -7.477e-02, 2.267e-02, 1.041e-01, 1.167e+00, -1.731e-01, 5.992e-02, -3.454e-01, 7.055e-01) * s1_0_2;
	r0 += M4(6.542e-01, 9.316e-01, 2.648e-01, -1.014e-02, 8.912e-02, 1.207e-01, 3.343e-01, 3.111e-01, -1.150e-01, -4.070e-01, 2.923e-01, 7.632e-02, -7.397e-01, 1.912e-01, -5.512e-01, 7.713e-02) * s1_1_0;
	r1 += M4(-7.298e-01, -3.802e-01, 2.126e-01, 2.607e-01, -9.963e-02, 3.858e-01, 2.783e-01, 4.928e-01, 3.232e-01, 2.130e-01, 6.030e-02, -2.042e-01, 8.447e-01, 1.378e-01, -6.368e-04, -4.514e-01) * s1_1_0;
	r0 += M4(-1.232e+00, -8.807e-01, 2.786e-01, -1.327e-01, 1.631e-01, 3.401e-01, -4.093e-01, -1.534e+00, 5.459e-01, 5.283e-01, -4.541e-01, -1.446e+00, 7.060e-02, -1.313e-01, -6.511e-02, -1.351e+00) * s1_1_1;
	r1 += M4(4.266e-01, 8.538e-01, -2.952e-01, 6.973e-01, -1.450e-01, -3.236e-01, -5.181e-01, -1.439e+00, 3.886e-01, -2.919e-01, 9.739e-01, -1.875e-01, -8.153e-01, -4.035e-01, 7.278e-01, -8.290e-01) * s1_1_1;
	r0 += M4(5.607e-01, 5.403e-01, -2.374e-01, 4.685e-01, -6.590e-02, 3.023e-02, -8.706e-02, 4.309e-01, -2.952e-01, -8.189e-01, 1.355e-01, 7.457e-01, 1.894e-01, -6.121e-01, -6.645e-02, -2.108e-01) * s1_1_2;
	r1 += M4(5.476e-02, -3.345e-01, 2.289e-02, -2.729e-01, -3.485e-03, 1.548e-01, 7.401e-02, 4.523e-01, 1.528e-01, 4.583e-01, -7.780e-01, 1.855e-01, 3.037e-01, -2.649e-01, -1.230e-01, -9.368e-01) * s1_1_2;
	r0 += M4(2.597e-01, 2.988e-01, 7.000e-02, -2.291e-01, 1.626e-01, -4.727e-02, 7.492e-01, -1.714e-01, 2.065e-01, 3.888e-01, -2.351e-02, -1.516e-01, -1.134e-01, 3.661e-01, 1.222e-01, 6.122e-01) * s1_2_0;
	r1 += M4(-2.163e-01, 3.767e-02, 2.045e-01, 1.330e-01, 5.642e-03, 1.518e-01, 1.049e-01, 4.066e-01, -6.401e-02, -1.400e-01, -1.333e-02, -2.582e-01, 1.261e-01, 4.774e-03, 7.972e-02, -7.285e-01) * s1_2_0;
	r0 += M4(1.859e-01, -2.344e-01, 7.285e-01, 2.271e-01, 8.367e-02, -1.122e-01, -3.728e-01, -2.283e-01, 8.464e-02, -4.835e-03, -1.296e+00, 1.149e+00, -2.743e-01, -6.697e-01, 5.917e-02, -9.461e-02) * s1_2_1;
	r1 += M4(7.518e-02, 4.155e-01, 1.458e-01, -2.087e-01, -2.185e-02, 5.622e-02, -7.791e-02, -1.807e-01, -5.020e-01, -2.274e-01, 1.716e-01, -1.435e+00, 7.037e-01, 3.040e-01, -3.953e-01, 6.525e-01) * s1_2_1;
	r0 += M4(5.394e-02, -3.095e-02, 1.529e-01, 4.777e-01, 2.727e-03, 1.266e-01, 2.685e-01, -4.661e-02, -2.276e-01, -3.053e-01, -2.231e-01, 1.702e-01, 1.124e-01, 8.131e-01, -3.119e-02, 4.893e-01) * s1_2_2;
	r1 += M4(1.778e-01, -1.819e-02, -4.600e-01, -1.847e-01, 2.036e-01, 1.194e-01, -2.315e-02, 6.309e-01, -2.259e-01, -4.923e-01, -3.969e-01, -7.480e-01, -4.103e-02, 2.765e-01, 4.189e-01, 6.699e-01) * s1_2_2;
	r0 += V4(-9.901e-03, -5.259e-03, -1.900e-02, -2.667e-02);
	r0 = max(r0, V4(0.0));
	imageStore(out_image, opos + ivec2(0, 0), vec4(r0));
	r1 += V4(1.727e-02, 5.859e-02, -4.061e-04, -3.580e-02);
	r1 = max(r1, V4(0.0));
	imageStore(out_image, opos + ivec2(1, 0), vec4(r1));
}

//!DESC CuNNy-veryfast-conv2
//!HOOK LUMA
//!COMPUTE 8 8 8 8
//!BIND conv1
//!BIND LUMA
//!SAVE conv2
//!WIDTH LUMA.w
//!HEIGHT LUMA.h
//!COMPONENTS 4
//!WHEN OUTPUT.w LUMA.w / 1.3 > OUTPUT.h LUMA.h / 1.3 > *
#extension GL_EXT_shader_explicit_arithmetic_types_float16 : enable
#ifdef GL_EXT_shader_explicit_arithmetic_types_float16
#	define V4 f16vec4
#	define M4 f16mat4
#	define F float16_t
#else
#	define V4 vec4
#	define M4 mat4
#	define F float
#endif
#define l0(x, y) V4((conv1_mul * texelFetch(conv1_raw, clamp(pos + ivec2(x, y), ivec2(0), sz) * ivec2(2, 1) + ivec2(0, 0), 0)))
#define l1(x, y) V4((conv1_mul * texelFetch(conv1_raw, clamp(pos + ivec2(x, y), ivec2(0), sz) * ivec2(2, 1) + ivec2(1, 0), 0)))
shared V4 G[2][10][10];
void hook() {
	ivec2 xy = ivec2(gl_LocalInvocationID.xy);
	ivec2 pos = ivec2(gl_WorkGroupID.xy) * ivec2(8, 8) + xy;
	ivec2 opos = pos * ivec2(1, 1);
	ivec2 sz = ivec2(LUMA_size) - ivec2(1);
	for (int y = 0; y < 10; y += 8) {
		int ay = xy.y + y;
		if (ay >= 10) break;
		for (int x = 0; x < 10; x += 8) {
			int ax = xy.x + x;
			if (ax >= 10) break;
			G[0][ay][ax] = l0(x - 1, y - 1);
			G[1][ay][ax] = l1(x - 1, y - 1);
		}
	}
	barrier();
	V4 s0_0_0, s0_0_1, s0_0_2, s0_1_0, s0_1_1, s0_1_2, s0_2_0, s0_2_1, s0_2_2, s1_0_0, s1_0_1, s1_0_2, s1_1_0, s1_1_1, s1_1_2, s1_2_0, s1_2_1, s1_2_2;
	V4 r0;
	r0 = V4(0.0);
	s0_0_0 = G[0][xy.y+0][xy.x+0]; s0_0_1 = G[0][xy.y+0][xy.x+1];
	s0_0_2 = G[0][xy.y+0][xy.x+2]; s0_1_0 = G[0][xy.y+1][xy.x+0];
	s0_1_1 = G[0][xy.y+1][xy.x+1]; s0_1_2 = G[0][xy.y+1][xy.x+2];
	s0_2_0 = G[0][xy.y+2][xy.x+0]; s0_2_1 = G[0][xy.y+2][xy.x+1];
	s0_2_2 = G[0][xy.y+2][xy.x+2]; s1_0_0 = G[1][xy.y+0][xy.x+0];
	s1_0_1 = G[1][xy.y+0][xy.x+1]; s1_0_2 = G[1][xy.y+0][xy.x+2];
	s1_1_0 = G[1][xy.y+1][xy.x+0]; s1_1_1 = G[1][xy.y+1][xy.x+1];
	s1_1_2 = G[1][xy.y+1][xy.x+2]; s1_2_0 = G[1][xy.y+2][xy.x+0];
	s1_2_1 = G[1][xy.y+2][xy.x+1]; s1_2_2 = G[1][xy.y+2][xy.x+2];
	r0 += M4(7.629e-02, -1.101e-01, 1.739e-02, -7.324e-02, -2.392e-01, -2.068e-02, 2.241e-01, -8.906e-02, -8.585e-02, -5.182e-03, 3.479e-02, 1.564e-02, -1.930e-01, -1.023e-01, 2.381e-02, -6.946e-02) * s0_0_0;
	r0 += M4(-5.934e-02, -8.682e-02, 1.094e-02, -1.379e-02, 9.295e-03, 1.872e-01, -1.617e-01, 3.791e-02, -2.648e-01, -2.230e-02, 3.551e-02, -3.048e-02, 1.256e-02, -1.721e-01, -3.114e-01, -3.381e-02) * s0_0_1;
	r0 += M4(4.382e-03, 4.894e-02, 6.298e-02, 2.948e-02, -7.544e-02, -5.434e-02, 3.786e-02, 4.247e-03, 1.756e-01, 4.578e-02, -3.750e-02, 2.355e-02, -8.569e-02, -1.400e-02, -2.177e-02, -1.143e-03) * s0_0_2;
	r0 += M4(-1.532e-01, 2.051e-01, -2.951e-01, 1.003e-01, 3.981e-02, -8.032e-02, 4.122e-02, 3.015e-02, 7.072e-02, -1.067e-01, -3.413e-02, -4.224e-02, 9.439e-02, 5.301e-03, -2.814e-03, -8.848e-02) * s0_1_0;
	r0 += M4(-1.205e-01, 3.291e-01, 2.920e-01, 1.714e-01, -2.286e-01, -2.949e-02, 1.027e-02, 1.238e-01, 6.638e-02, -1.685e-01, -1.665e-01, -3.213e-01, -2.307e-01, 8.508e-02, -4.406e-02, -4.814e-01) * s0_1_1;
	r0 += M4(-1.514e-01, 4.222e-02, 1.094e-01, 4.975e-02, 1.315e-01, 4.949e-02, 2.497e-02, -5.890e-03, -1.066e-01, -3.857e-01, -1.536e-01, -1.035e-01, -2.015e-01, 9.985e-02, 1.409e-02, 6.284e-02) * s0_1_2;
	r0 += M4(-2.354e-01, -3.595e-04, 1.772e-01, 9.645e-02, 4.907e-03, 1.195e-02, -5.670e-02, -4.407e-02, -7.029e-02, -1.373e-02, -1.189e-01, -6.860e-02, -3.812e-02, -1.468e-02, 1.858e-02, 2.337e-02) * s0_2_0;
	r0 += M4(-1.129e-01, 3.869e-03, 9.313e-02, 1.666e-01, -3.021e-02, -2.167e-02, -1.741e-02, -4.383e-02, 1.167e-01, -4.612e-02, -9.177e-02, -4.002e-02, -1.662e-01, -1.430e-01, -7.413e-02, -4.467e-02) * s0_2_1;
	r0 += M4(-5.315e-02, 2.056e-03, 2.565e-02, 1.666e-02, 1.198e-01, -2.759e-02, -3.186e-02, 2.035e-03, -2.012e-02, -2.941e-03, -1.037e-01, -9.106e-02, 1.157e-03, -3.610e-02, -6.380e-03, 1.066e-02) * s0_2_2;
	r0 += M4(-6.834e-02, 1.639e-02, -1.899e-01, 1.755e-02, -6.787e-02, -6.116e-02, -3.785e-03, -6.323e-02, 3.284e-02, 3.207e-02, -2.666e-01, 1.203e-01, -2.944e-02, 1.583e-02, 4.087e-02, -1.413e-02) * s1_0_0;
	r0 += M4(-2.664e-01, -7.107e-02, 6.673e-02, -1.705e-01, -7.868e-02, 4.160e-03, 1.426e-02, 6.422e-03, -4.137e-02, -8.063e-02, 9.232e-02, 4.877e-03, 8.068e-02, 3.469e-02, 1.523e-02, -6.838e-02) * s1_0_1;
	r0 += M4(3.704e-02, -1.083e-01, -9.644e-02, -7.318e-02, -8.053e-02, 3.430e-02, 2.564e-02, 1.774e-03, -1.768e-01, -1.372e-02, -9.155e-02, -3.056e-03, 7.963e-02, 1.779e-02, 6.017e-02, -1.192e-03) * s1_0_2;
	r0 += M4(-3.353e-01, 8.733e-02, -2.147e-01, 8.577e-02, -2.201e-01, -4.353e-02, 1.242e-01, -4.700e-02, 1.628e-01, 3.604e-01, -9.986e-02, 2.333e-01, -1.911e-02, -9.505e-04, 7.844e-03, 4.491e-02) * s1_1_0;
	r0 += M4(-1.057e-01, -5.374e-01, 1.123e-01, -2.563e-01, -4.470e-02, 6.352e-01, 4.814e-01, 5.098e-01, -1.457e-01, -1.312e-01, -7.349e-02, -1.783e-01, -1.120e-01, -3.491e-01, -2.173e-01, 3.042e-01) * s1_1_1;
	r0 += M4(-1.467e-01, -2.095e-01, -1.538e-01, -1.828e-01, -1.034e-01, 1.315e-01, 5.750e-02, 1.011e-01, -1.633e-01, -6.169e-02, -7.249e-02, -4.280e-02, -6.841e-02, -9.678e-02, 1.219e-01, 2.638e-02) * s1_1_2;
	r0 += M4(-8.233e-02, 8.960e-05, 3.674e-02, 3.347e-02, -3.734e-03, 8.384e-03, 1.096e-01, -6.038e-03, -2.387e-01, -4.601e-02, 3.743e-02, 1.343e-01, 3.655e-03, -1.054e-02, 5.242e-03, -4.812e-02) * s1_2_0;
	r0 += M4(-8.018e-02, 1.045e-01, -4.028e-02, -1.714e-01, -1.971e-01, -6.032e-02, 4.578e-03, 1.578e-01, -2.609e-02, 1.462e-02, 2.317e-02, -4.870e-02, -2.133e-01, 3.802e-02, -1.539e-01, -1.359e-01) * s1_2_1;
	r0 += M4(-1.037e-01, 4.123e-02, -2.156e-02, -8.032e-02, -2.258e-01, -3.022e-02, -8.178e-03, 3.637e-02, 8.691e-03, 1.767e-02, 5.265e-03, -2.053e-02, 3.439e-02, 3.917e-03, 1.271e-01, -8.781e-02) * s1_2_2;
	r0 += V4(-3.615e-01, -2.819e-02, -4.016e-02, -3.137e-02);
	r0 = max(r0, V4(0.0));
	imageStore(out_image, opos + ivec2(0, 0), vec4(r0));
}

//!DESC CuNNy-veryfast-out-shuffle
//!HOOK LUMA
//!COMPUTE 16 16 8 8
//!BIND conv2
//!BIND LUMA
//!WIDTH LUMA.w 2 *
//!HEIGHT LUMA.h 2 *
//!COMPONENTS 1
//!WHEN OUTPUT.w LUMA.w / 1.3 > OUTPUT.h LUMA.h / 1.3 > *
#extension GL_EXT_shader_explicit_arithmetic_types_float16 : enable
#ifdef GL_EXT_shader_explicit_arithmetic_types_float16
#	define V4 f16vec4
#	define M4 f16mat4
#	define F float16_t
#else
#	define V4 vec4
#	define M4 mat4
#	define F float
#endif
#define l0(x, y) V4((conv2_mul * texelFetch(conv2_raw, clamp(pos + ivec2(x, y), ivec2(0), sz) * ivec2(1, 1) + ivec2(0, 0), 0)))
shared V4 G[1][10][10];
void hook() {
	ivec2 xy = ivec2(gl_LocalInvocationID.xy);
	ivec2 pos = ivec2(gl_WorkGroupID.xy) * ivec2(8, 8) + xy;
	ivec2 opos = pos * ivec2(2, 2);
	ivec2 sz = ivec2(LUMA_size) - ivec2(1);
	for (int y = 0; y < 10; y += 8) {
		int ay = xy.y + y;
		if (ay >= 10) break;
		for (int x = 0; x < 10; x += 8) {
			int ax = xy.x + x;
			if (ax >= 10) break;
			G[0][ay][ax] = l0(x - 1, y - 1);
		}
	}
	barrier();
	V4 s0_0_0, s0_0_1, s0_0_2, s0_1_0, s0_1_1, s0_1_2, s0_2_0, s0_2_1, s0_2_2;
	V4 r0;
	r0 = V4(0.0);
	s0_0_0 = G[0][xy.y+0][xy.x+0]; s0_0_1 = G[0][xy.y+0][xy.x+1];
	s0_0_2 = G[0][xy.y+0][xy.x+2]; s0_1_0 = G[0][xy.y+1][xy.x+0];
	s0_1_1 = G[0][xy.y+1][xy.x+1]; s0_1_2 = G[0][xy.y+1][xy.x+2];
	s0_2_0 = G[0][xy.y+2][xy.x+0]; s0_2_1 = G[0][xy.y+2][xy.x+1];
	s0_2_2 = G[0][xy.y+2][xy.x+2];
	r0 += M4(-9.825e-02, -8.365e-02, -9.764e-02, -6.970e-02, -5.493e-03, -1.746e-02, 1.277e-03, -3.764e-03, 2.569e-02, 3.956e-03, -1.001e-02, 5.282e-03, -1.183e-02, -5.477e-03, -6.029e-03, -6.179e-03) * s0_0_0;
	r0 += M4(1.965e-01, 2.111e-01, 2.372e-01, 1.992e-01, -1.814e-02, -1.996e-02, -3.853e-02, -1.469e-02, 1.122e-01, 1.067e-01, 3.381e-02, -1.604e-03, -2.338e-02, -2.289e-02, 2.947e-02, 3.094e-02) * s0_0_1;
	r0 += M4(-9.069e-02, -6.446e-02, -7.985e-02, -3.991e-02, -2.704e-02, -1.057e-02, 5.942e-03, -1.456e-02, 5.364e-02, 7.427e-02, -1.235e-02, 1.116e-02, -1.154e-02, -1.390e-02, 2.186e-03, 2.113e-03) * s0_0_2;
	r0 += M4(1.421e-02, 1.671e-02, -1.220e-02, 1.189e-03, -8.594e-02, 7.544e-02, 9.350e-02, -3.589e-03, 8.716e-02, -3.676e-02, 7.885e-02, -2.537e-02, 6.274e-02, 1.974e-02, -1.205e-01, 6.408e-02) * s0_1_0;
	r0 += M4(9.424e-02, 9.555e-02, 7.870e-02, 8.714e-02, -1.877e-01, -4.678e-01, 2.549e-01, 1.685e-01, -3.623e-01, 5.021e-02, -1.673e-01, 1.275e-01, 2.485e-01, 1.667e-01, -3.037e-01, -4.775e-01) * s0_1_1;
	r0 += M4(-1.295e-02, 1.223e-03, -2.454e-02, -6.319e-02, 9.787e-03, 1.072e-01, -8.597e-02, 8.231e-02, 9.546e-02, -1.802e-01, 9.520e-02, -8.785e-02, -2.914e-02, 9.595e-02, 6.274e-02, 5.602e-02) * s0_1_2;
	r0 += M4(3.898e-02, 5.685e-02, 4.047e-02, 4.839e-02, 6.939e-03, -1.156e-02, 3.033e-02, 1.483e-02, 5.508e-03, 4.791e-04, 4.871e-02, -1.346e-02, -1.788e-02, -5.272e-04, 4.618e-03, -2.483e-03) * s0_2_0;
	r0 += M4(-1.318e-01, -1.319e-01, -1.250e-01, -1.219e-01, 1.646e-02, 2.913e-02, 9.590e-02, 2.044e-02, 1.849e-02, 5.630e-03, -1.294e-01, 2.422e-02, -1.157e-03, -4.913e-03, 1.101e-01, 8.618e-02) * s0_2_1;
	r0 += M4(-8.356e-02, -7.569e-02, -8.216e-02, -7.639e-02, 7.693e-04, -5.753e-03, -3.162e-02, 4.604e-02, -2.313e-02, -3.606e-04, 1.438e-02, -7.446e-02, 5.662e-03, -2.223e-03, -6.714e-03, 2.914e-02) * s0_2_2;
	r0 += V4(2.458e-09, 5.137e-09, 8.543e-10, 6.504e-10);
	r0 = r0;
	vec2 opt = 0.5 * LUMA_pt;
	vec2 fpos = (vec2(opos) + vec2(0.5)) * opt;
	imageStore(out_image, opos + ivec2(0, 0), vec4(r0.x + LUMA_tex(fpos + vec2(0.0, 0.0) * opt).r, 0.0, 0.0, 1.0));
	imageStore(out_image, opos + ivec2(1, 0), vec4(r0.y + LUMA_tex(fpos + vec2(1.0, 0.0) * opt).r, 0.0, 0.0, 1.0));
	imageStore(out_image, opos + ivec2(0, 1), vec4(r0.z + LUMA_tex(fpos + vec2(0.0, 1.0) * opt).r, 0.0, 0.0, 1.0));
	imageStore(out_image, opos + ivec2(1, 1), vec4(r0.w + LUMA_tex(fpos + vec2(1.0, 1.0) * opt).r, 0.0, 0.0, 1.0));
}
