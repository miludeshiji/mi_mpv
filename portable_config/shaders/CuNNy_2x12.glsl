// CuNNy 2x12
// Copyright (c) 2024 funnyplanter

// This program is free software; you can redistribute it and/or
// modify it under the terms of the GNU Lesser General Public
// License as published by the Free Software Foundation; either
// version 3.0 of the License, or (at your option) any later version.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
// Lesser General Public License for more details.
//
// You should have received a copy of the GNU Lesser General Public
// License along with this program.  If not, see <https://www.gnu.org/licenses/>.
/* ------------------------------------------------------------------- */


//!DESC CuNNy-2x12-in
//!HOOK LUMA
//!COMPUTE 24 8 8 8
//!BIND LUMA
//!SAVE in
//!WIDTH LUMA.w 3 *
//!HEIGHT LUMA.h
//!COMPONENTS 4
//!WHEN OUTPUT.w LUMA.w / 1.3 > OUTPUT.h LUMA.h / 1.3 > *
#extension GL_EXT_shader_explicit_arithmetic_types_float16 : enable
#ifdef GL_EXT_shader_explicit_arithmetic_types_float16
#	define V4 f16vec4
#	define M4 f16mat4
#	define F float16_t
#else
#	define V4 vec4
#	define M4 mat4
#	define F float
#endif
#define l0(x, y) F((LUMA_mul * texelFetch(LUMA_raw, clamp(pos + ivec2(x, y), ivec2(0), sz) * ivec2(1, 1) + ivec2(0, 0), 0)).r)
shared F G[1][10][10];
void hook() {
	ivec2 xy = ivec2(gl_LocalInvocationID.xy);
	ivec2 pos = ivec2(gl_WorkGroupID.xy) * ivec2(8, 8) + xy;
	ivec2 opos = pos * ivec2(3, 1);
	ivec2 sz = ivec2(LUMA_size) - ivec2(1);
	for (int y = 0; y < 10; y += 8) {
		int ay = xy.y + y;
		if (ay >= 10) break;
		for (int x = 0; x < 10; x += 8) {
			int ax = xy.x + x;
			if (ax >= 10) break;
			G[0][ay][ax] = l0(x - 1, y - 1);
		}
	}
	barrier();
	F s0_0_0, s0_0_1, s0_0_2, s0_1_0, s0_1_1, s0_1_2, s0_2_0, s0_2_1, s0_2_2;
	V4 r0, r1, r2;
	r0 = V4(0.0); r1 = V4(0.0); r2 = V4(0.0);
	s0_0_0 = G[0][xy.y+0][xy.x+0]; s0_0_1 = G[0][xy.y+0][xy.x+1];
	s0_0_2 = G[0][xy.y+0][xy.x+2]; s0_1_0 = G[0][xy.y+1][xy.x+0];
	s0_1_1 = G[0][xy.y+1][xy.x+1]; s0_1_2 = G[0][xy.y+1][xy.x+2];
	s0_2_0 = G[0][xy.y+2][xy.x+0]; s0_2_1 = G[0][xy.y+2][xy.x+1];
	s0_2_2 = G[0][xy.y+2][xy.x+2];
	r0 += V4(7.315e-03, 5.401e-03, 1.281e-01, -2.964e-02) * s0_0_0;
	r1 += V4(2.961e-01, 7.742e-01, 3.199e-02, 3.482e-02) * s0_0_0;
	r2 += V4(-5.165e-02, -3.623e-05, 3.405e-02, -4.994e-02) * s0_0_0;
	r0 += V4(-1.225e-02, 1.345e-02, 2.691e-01, 2.403e-02) * s0_0_1;
	r1 += V4(-3.072e-02, 2.129e-02, -6.025e-04, 4.915e-01) * s0_0_1;
	r2 += V4(-1.371e-01, -9.316e-01, -2.433e-02, -3.154e-01) * s0_0_1;
	r0 += V4(1.274e-02, 7.363e-01, 1.546e-01, 2.194e-01) * s0_0_2;
	r1 += V4(-2.294e-01, -3.471e-02, -4.476e-02, -9.545e-02) * s0_0_2;
	r2 += V4(-7.446e-02, -1.856e-02, -1.176e-02, 3.784e-01) * s0_0_2;
	r0 += V4(-1.900e-02, -1.322e-02, 6.366e-02, -1.492e-02) * s0_1_0;
	r1 += V4(-8.564e-02, -2.505e-02, 8.871e-01, 1.133e-02) * s0_1_0;
	r2 += V4(-1.902e-01, 9.372e-04, -2.995e-01, -7.672e-03) * s0_1_0;
	r0 += V4(-9.277e-01, -5.367e-04, -9.800e-01, -2.079e-01) * s0_1_1;
	r1 += V4(-7.655e-01, -7.871e-01, -8.963e-01, -2.243e-01) * s0_1_1;
	r2 += V4(7.676e-01, 9.365e-01, -5.675e-01, -5.030e-01) * s0_1_1;
	r0 += V4(9.365e-01, -7.240e-01, 2.313e-01, 2.630e-01) * s0_1_2;
	r1 += V4(3.098e-01, 5.136e-02, 1.776e-02, -6.428e-02) * s0_1_2;
	r2 += V4(2.588e-03, 1.187e-02, 3.163e-02, 4.720e-01) * s0_1_2;
	r0 += V4(-6.112e-04, 8.155e-03, 2.568e-01, 3.888e-02) * s0_2_0;
	r1 += V4(-1.350e-01, -1.682e-02, 4.016e-02, -1.248e-02) * s0_2_0;
	r2 += V4(-4.821e-02, -5.645e-04, 8.441e-01, 5.609e-02) * s0_2_0;
	r0 += V4(-1.057e-02, -1.157e-02, -1.183e-01, -1.610e-03) * s0_2_1;
	r1 += V4(2.927e-01, 3.797e-02, -1.084e-02, 2.228e-02) * s0_2_1;
	r2 += V4(1.094e-03, -5.460e-03, 2.365e-02, 6.995e-01) * s0_2_1;
	r0 += V4(8.942e-03, -1.605e-02, -5.720e-03, -1.519e-01) * s0_2_2;
	r1 += V4(3.369e-01, -1.632e-02, -2.436e-02, 3.102e-02) * s0_2_2;
	r2 += V4(-9.254e-02, 5.732e-03, -2.602e-02, -7.288e-01) * s0_2_2;
	r0 += V4(3.272e-03, 7.733e-04, 5.477e-03, 8.162e-03);
	r0 = clamp(r0, V4(0.0), V4(1.0));
	imageStore(out_image, opos + ivec2(0, 0), vec4(r0));
	r1 += V4(6.159e-03, 2.032e-03, 3.369e-03, 3.483e-03);
	r1 = clamp(r1, V4(0.0), V4(1.0));
	imageStore(out_image, opos + ivec2(1, 0), vec4(r1));
	r2 += V4(1.347e-02, 8.294e-04, 8.525e-04, 1.231e-03);
	r2 = clamp(r2, V4(0.0), V4(1.0));
	imageStore(out_image, opos + ivec2(2, 0), vec4(r2));
}

//!DESC CuNNy-2x12-conv1
//!HOOK LUMA
//!COMPUTE 24 8 8 8
//!BIND in
//!BIND LUMA
//!SAVE conv1
//!WIDTH LUMA.w 3 *
//!HEIGHT LUMA.h
//!COMPONENTS 4
//!WHEN OUTPUT.w LUMA.w / 1.3 > OUTPUT.h LUMA.h / 1.3 > *
#extension GL_EXT_shader_explicit_arithmetic_types_float16 : enable
#ifdef GL_EXT_shader_explicit_arithmetic_types_float16
#	define V4 f16vec4
#	define M4 f16mat4
#	define F float16_t
#else
#	define V4 vec4
#	define M4 mat4
#	define F float
#endif
#define l0(x, y) V4((in_mul * texelFetch(in_raw, clamp(pos + ivec2(x, y), ivec2(0), sz) * ivec2(3, 1) + ivec2(0, 0), 0)))
#define l1(x, y) V4((in_mul * texelFetch(in_raw, clamp(pos + ivec2(x, y), ivec2(0), sz) * ivec2(3, 1) + ivec2(1, 0), 0)))
#define l2(x, y) V4((in_mul * texelFetch(in_raw, clamp(pos + ivec2(x, y), ivec2(0), sz) * ivec2(3, 1) + ivec2(2, 0), 0)))
shared V4 G[3][10][10];
void hook() {
	ivec2 xy = ivec2(gl_LocalInvocationID.xy);
	ivec2 pos = ivec2(gl_WorkGroupID.xy) * ivec2(8, 8) + xy;
	ivec2 opos = pos * ivec2(3, 1);
	ivec2 sz = ivec2(LUMA_size) - ivec2(1);
	for (int y = 0; y < 10; y += 8) {
		int ay = xy.y + y;
		if (ay >= 10) break;
		for (int x = 0; x < 10; x += 8) {
			int ax = xy.x + x;
			if (ax >= 10) break;
			G[0][ay][ax] = l0(x - 1, y - 1);
			G[1][ay][ax] = l1(x - 1, y - 1);
			G[2][ay][ax] = l2(x - 1, y - 1);
		}
	}
	barrier();
	V4 s0_0_0, s0_0_1, s0_0_2, s0_1_0, s0_1_1, s0_1_2, s0_2_0, s0_2_1, s0_2_2, s1_0_0, s1_0_1, s1_0_2, s1_1_0, s1_1_1, s1_1_2, s1_2_0, s1_2_1, s1_2_2;
	V4 r0, r1, r2;
	r0 = V4(0.0); r1 = V4(0.0); r2 = V4(0.0);
	s0_0_0 = G[0][xy.y+0][xy.x+0]; s0_0_1 = G[0][xy.y+0][xy.x+1];
	s0_0_2 = G[0][xy.y+0][xy.x+2]; s0_1_0 = G[0][xy.y+1][xy.x+0];
	s0_1_1 = G[0][xy.y+1][xy.x+1]; s0_1_2 = G[0][xy.y+1][xy.x+2];
	s0_2_0 = G[0][xy.y+2][xy.x+0]; s0_2_1 = G[0][xy.y+2][xy.x+1];
	s0_2_2 = G[0][xy.y+2][xy.x+2]; s1_0_0 = G[1][xy.y+0][xy.x+0];
	s1_0_1 = G[1][xy.y+0][xy.x+1]; s1_0_2 = G[1][xy.y+0][xy.x+2];
	s1_1_0 = G[1][xy.y+1][xy.x+0]; s1_1_1 = G[1][xy.y+1][xy.x+1];
	s1_1_2 = G[1][xy.y+1][xy.x+2]; s1_2_0 = G[1][xy.y+2][xy.x+0];
	s1_2_1 = G[1][xy.y+2][xy.x+1]; s1_2_2 = G[1][xy.y+2][xy.x+2];
	r0 += M4(3.005e-01, 4.753e-02, 1.812e-01, -2.927e-02, 6.747e-01, 1.518e-01, 2.243e-01, -3.357e-03, -1.958e-01, -1.018e-01, -1.817e-01, 2.436e-01, 8.560e-02, -1.080e-01, 5.239e-01, -3.495e-01) * s0_0_0;
	r1 += M4(-9.460e-02, -1.447e-01, 1.286e-01, 6.810e-01, -1.181e-01, -1.361e-01, 2.627e-01, -3.643e-01, 1.048e-01, 1.665e-01, 1.614e-02, 1.009e-01, -8.959e-02, -1.478e-01, -2.598e-01, 4.486e-02) * s0_0_0;
	r2 += M4(5.813e-01, 1.071e-02, 4.574e-01, -6.978e-02, 1.000e+00, -7.367e-02, -4.835e-03, -1.119e-01, -2.510e-01, 1.787e-02, 1.790e-01, -4.256e-02, -1.004e-01, -1.279e-01, -1.607e-01, 1.359e-01) * s0_0_0;
	r0 += M4(1.000e+00, 1.106e-01, -1.521e-01, -1.121e-01, 4.433e-01, -1.893e-01, -3.245e-02, -1.441e-01, -7.441e-01, -8.167e-03, 1.005e-01, 5.419e-01, -2.805e-01, 1.272e-02, 2.649e-01, -8.483e-02) * s0_0_1;
	r1 += M4(-5.064e-02, -4.209e-01, 1.564e-01, -2.405e-01, -1.264e-01, -2.560e-01, -7.511e-02, 1.598e-01, 8.761e-02, -4.358e-02, -2.605e-01, 1.047e-01, 2.021e-02, 2.378e-01, -8.266e-02, -8.134e-02) * s0_0_1;
	r2 += M4(7.311e-01, -9.582e-02, -3.368e-01, 9.437e-03, 4.132e-01, 5.829e-02, -1.114e-01, -2.066e-01, -8.841e-01, -5.178e-02, 1.422e-01, 1.000e-01, 1.917e-01, 6.400e-02, -1.303e-01, 5.722e-02) * s0_0_1;
	r0 += M4(3.507e-02, -8.964e-02, 1.398e-01, 5.798e-02, -4.155e-02, 1.052e-01, 6.389e-02, -5.850e-04, -1.150e-01, -1.459e-02, -2.231e-01, 2.786e-01, -6.040e-02, 9.158e-02, -2.861e-01, -1.370e-01) * s0_0_2;
	r1 += M4(-7.395e-02, -1.450e-01, -8.979e-02, -2.407e-01, -5.585e-02, -6.712e-02, -4.787e-02, 2.505e-02, 1.033e-01, 2.406e-01, 1.305e-01, 2.553e-01, 1.426e-01, 6.334e-02, 1.319e-01, -1.364e-01) * s0_0_2;
	r2 += M4(6.456e-02, 6.657e-02, -9.107e-02, -5.222e-02, 1.112e-01, -4.415e-02, -7.982e-02, -1.561e-03, -2.006e-01, 8.386e-03, 1.983e-01, 7.968e-02, -1.704e-01, 1.250e-01, -6.733e-02, 7.816e-02) * s0_0_2;
	r0 += M4(-1.186e-01, 3.620e-01, -1.000e+00, 3.040e-01, 4.552e-01, -3.409e-01, -1.000e+00, 5.098e-01, -1.319e-01, -3.834e-01, 3.578e-01, 3.333e-01, -4.496e-01, 6.682e-02, 1.350e-01, 3.235e-01) * s0_1_0;
	r1 += M4(5.963e-01, -7.299e-02, 5.552e-02, 5.360e-01, 2.967e-01, 1.821e-01, -5.342e-02, -1.000e+00, -7.093e-02, -3.085e-02, -2.350e-02, 1.630e-01, 4.676e-01, -6.655e-02, 1.440e-01, -1.000e+00) * s0_1_0;
	r2 += M4(-2.932e-01, -4.220e-02, 4.301e-01, -3.601e-01, -1.830e-01, -1.123e-02, -2.396e-01, -2.600e-01, 1.792e-01, -2.647e-02, 3.919e-01, 8.420e-03, -4.855e-01, -2.183e-01, -2.133e-01, 3.770e-01) * s0_1_0;
	r0 += M4(3.468e-01, 1.000e+00, -1.000e+00, 2.496e-01, 8.798e-01, -1.000e+00, -1.836e-01, -4.453e-01, 3.888e-01, -9.199e-01, 1.000e+00, 6.891e-01, -1.606e-01, 4.459e-01, -2.597e-01, 3.876e-01) * s0_1_1;
	r1 += M4(4.294e-01, 7.730e-01, -3.559e-01, -1.000e+00, 2.064e-01, -2.102e-01, 2.979e-01, -3.522e-01, -2.048e-01, -1.247e-01, -1.941e-01, 9.321e-01, -1.747e-01, 1.716e-01, 2.658e-01, 8.884e-01) * s0_1_1;
	r2 += M4(-1.198e-01, 3.673e-01, 5.384e-01, -5.804e-01, 6.434e-01, 2.598e-01, -2.966e-02, -1.906e-01, -2.184e-01, -3.568e-01, -7.726e-02, -1.169e-01, 2.684e-01, -5.554e-02, 1.973e-01, -4.264e-01) * s0_1_1;
	r0 += M4(-1.352e-01, -1.000e+00, 5.022e-02, -1.249e-01, -1.313e-01, 2.867e-01, -9.156e-02, 9.516e-02, -8.030e-02, 6.127e-01, -5.213e-02, 2.018e-01, 1.868e-01, 5.085e-01, -1.493e-01, 1.581e-01) * s0_1_2;
	r1 += M4(4.751e-02, 2.218e-02, -3.736e-02, -2.322e-01, 2.117e-02, 2.400e-02, -6.038e-02, -4.249e-02, -7.605e-02, 6.551e-02, 1.303e-01, 7.471e-01, -4.533e-02, -7.483e-02, -5.819e-02, 5.449e-01) * s0_1_2;
	r2 += M4(-6.895e-02, -2.371e-01, 3.900e-03, 4.411e-02, -6.001e-02, -8.389e-02, -2.470e-02, -1.106e-01, 1.266e-01, 1.806e-01, 1.023e-01, -5.735e-02, 6.287e-02, 1.642e-01, 7.389e-02, 3.825e-02) * s0_1_2;
	r0 += M4(-5.255e-01, 2.800e-02, -8.211e-02, 1.716e-01, -2.136e-01, 1.000e+00, 2.478e-01, 1.666e-01, -1.217e-01, 6.729e-02, -2.368e-01, 2.703e-01, 5.832e-01, -1.000e+00, 2.415e-02, -1.651e-01) * s0_2_0;
	r1 += M4(1.860e-01, 2.236e-01, -2.448e-02, 3.236e-03, 4.265e-01, 2.127e-01, 6.523e-02, -1.228e-01, 7.332e-03, 4.288e-02, -1.907e-02, 2.372e-01, -1.528e-01, -8.976e-02, 2.876e-02, -6.517e-01) * s0_2_0;
	r2 += M4(-1.931e-01, 2.830e-01, -3.101e-02, 6.306e-01, -2.632e-01, 7.846e-03, -5.607e-02, 5.271e-01, -1.445e-02, -1.406e-01, 9.547e-02, 2.547e-01, 4.043e-02, -7.775e-02, 2.685e-02, -2.524e-01) * s0_2_0;
	r0 += M4(-3.031e-01, -1.000e+00, 1.323e-01, 5.947e-01, -5.594e-01, -1.000e+00, 4.772e-01, -3.788e-02, 4.972e-02, 5.816e-02, -2.554e-01, 3.781e-01, -4.412e-03, -7.711e-01, -3.711e-01, -5.563e-01) * s0_2_1;
	r1 += M4(3.037e-01, 9.323e-02, 3.070e-01, -2.281e-01, 3.284e-01, 2.294e-01, 8.956e-02, -6.519e-02, -7.910e-02, -3.510e-01, -1.131e-01, 7.260e-01, 2.773e-02, -4.091e-02, 2.753e-02, 2.624e-01) * s0_2_1;
	r2 += M4(-6.043e-02, 1.056e-01, 2.163e-01, 2.587e-01, 1.069e-01, -2.783e-01, -2.329e-02, 7.065e-01, 8.532e-02, -3.018e-01, 8.498e-02, -3.180e-01, 3.107e-01, 1.889e-01, -1.012e-01, 2.239e-01) * s0_2_1;
	r0 += M4(4.227e-03, -1.000e+00, -3.714e-02, 4.385e-01, -1.355e-02, 2.444e-01, -6.216e-02, 1.424e-01, -5.221e-02, -2.672e-01, -7.360e-04, -1.398e-01, 2.263e-01, 8.505e-01, 1.711e-01, -7.321e-02) * s0_2_2;
	r1 += M4(3.487e-02, -4.162e-02, 1.124e-01, -2.735e-01, 1.066e-01, 1.559e-01, -9.692e-03, -4.742e-02, -2.385e-02, -1.295e-01, -1.619e-01, 4.951e-01, -3.767e-03, -1.824e-01, 8.228e-02, -1.849e-01) * s0_2_2;
	r2 += M4(-8.784e-02, -1.921e-01, 1.537e-02, -1.783e-01, -1.699e-01, -3.993e-02, 4.170e-04, 8.842e-02, 1.716e-01, 1.519e-01, 5.438e-02, -5.410e-02, 5.410e-02, -5.738e-02, -1.002e-02, 1.643e-01) * s0_2_2;
	r0 += M4(-3.176e-02, 3.749e-02, 2.450e-01, -5.774e-01, 1.422e-01, 1.385e-01, 3.347e-02, -1.032e-01, -8.966e-02, -3.072e-02, 1.921e-02, 7.258e-02, -1.756e-01, 7.960e-02, -5.636e-02, 1.292e-01) * s1_0_0;
	r1 += M4(-4.844e-02, -3.690e-02, -4.674e-02, -1.662e-01, -4.829e-02, -1.304e-02, 1.360e-02, 6.962e-02, 4.671e-02, 7.693e-02, 1.804e-02, -7.973e-02, -1.515e-02, 8.708e-02, 1.019e-02, -2.279e-03) * s1_0_0;
	r2 += M4(-3.254e-02, -2.779e-02, -2.238e-01, 3.754e-02, 1.401e-01, -3.261e-03, -2.401e-02, -1.449e-02, -8.179e-02, 9.062e-02, 1.224e-01, 1.644e-02, -1.288e-01, -4.689e-02, 1.034e-02, -7.314e-02) * s1_0_0;
	r0 += M4(9.354e-03, -2.272e-01, -8.184e-02, -6.217e-01, 1.360e-01, 1.360e-01, 7.294e-02, -2.783e-01, 4.540e-02, -4.356e-02, -1.409e-01, 1.761e-01, -3.290e-01, -3.838e-01, -2.323e-01, 2.675e-02) * s1_0_1;
	r1 += M4(-4.101e-02, -4.190e-01, -1.135e-02, 6.811e-02, -5.614e-02, 6.112e-02, 1.419e-02, -8.992e-02, 2.436e-01, 2.488e-01, 1.031e-01, -3.396e-01, 1.092e-01, -3.219e-02, 8.270e-02, 2.974e-01) * s1_0_1;
	r2 += M4(6.422e-02, -3.413e-02, -1.422e-01, 1.589e-02, 2.650e-01, 2.811e-02, 1.393e-02, 8.646e-03, -2.202e-01, -8.017e-04, 1.441e-01, -4.348e-02, -2.902e-01, 5.677e-02, 9.661e-02, 1.558e-01) * s1_0_1;
	r0 += M4(3.137e-02, 1.825e-01, 3.625e-03, -5.605e-01, -7.012e-03, -5.602e-02, -1.908e-03, -2.374e-01, 2.825e-01, 2.022e-01, 1.532e-02, 3.642e-01, -7.197e-03, 2.566e-01, 4.057e-02, 3.736e-03) * s1_0_2;
	r1 += M4(-3.931e-03, 1.683e-02, 1.275e-01, 2.530e-01, -4.662e-02, -1.105e-01, -1.236e-01, 3.051e-02, 1.043e-01, -5.395e-02, -8.047e-03, 4.059e-01, 1.001e-01, -3.487e-03, 1.649e-01, -6.390e-03) * s1_0_2;
	r2 += M4(1.992e-02, 1.056e-01, -8.674e-02, 7.402e-02, -6.991e-02, -4.812e-02, -4.629e-02, 5.724e-02, 1.478e-01, 5.219e-02, 1.693e-01, -9.550e-02, 3.676e-02, -6.715e-02, -1.238e-01, 9.422e-02) * s1_0_2;
	r0 += M4(1.662e-01, -2.363e-01, 1.569e-01, -5.257e-01, 1.684e-02, 2.529e-01, -1.845e-01, -1.422e-01, 4.578e-02, 2.059e-02, -1.068e-01, -3.729e-02, -3.312e-01, 6.456e-02, 4.395e-01, -1.611e-01) * s1_1_0;
	r1 += M4(-1.665e-01, -1.269e-01, -4.229e-02, -1.513e-01, -5.169e-03, -7.336e-02, -3.634e-02, 9.920e-02, 3.811e-02, 3.146e-02, 6.223e-02, 6.129e-02, -1.182e-01, -7.753e-03, 1.336e-01, 3.400e-02) * s1_1_0;
	r2 += M4(1.684e-01, 3.284e-02, -1.261e-01, 7.348e-02, -1.280e-02, -6.933e-02, -2.206e-01, 1.131e-02, 4.557e-02, -6.281e-02, -9.721e-02, 6.551e-02, 9.066e-02, 1.346e-01, -8.185e-03, -9.424e-02) * s1_1_0;
	r0 += M4(2.530e-01, -7.861e-02, 4.560e-01, -7.646e-01, -9.641e-02, 3.680e-01, -6.676e-01, -3.584e-01, -2.932e-02, -2.438e-01, -1.000e+00, -8.773e-02, 7.278e-01, -2.553e-02, -2.470e-01, -3.813e-01) * s1_1_1;
	r1 += M4(-2.528e-01, -2.248e-01, -1.057e-01, 1.606e-01, -2.042e-03, 1.889e-02, -7.841e-02, 2.420e-01, -2.708e-01, 2.593e-01, -1.586e-03, -5.858e-01, -3.877e-02, 5.908e-01, -1.957e-01, -4.424e-01) * s1_1_1;
	r2 += M4(1.392e-01, -1.230e-01, -5.545e-01, -1.464e-01, 9.269e-02, 1.792e-01, 2.647e-01, -7.068e-02, 2.021e-01, 2.136e-01, -9.665e-02, 1.375e-01, -2.651e-03, -1.502e-03, 1.981e-03, -1.586e-01) * s1_1_1;
	r0 += M4(1.800e-02, 7.948e-01, 2.016e-01, -7.271e-01, 4.745e-01, 9.353e-02, 2.836e-01, -3.749e-01, -6.278e-01, -1.000e+00, 1.614e-01, -4.324e-01, -2.309e-01, 7.087e-01, -2.117e-01, 4.509e-01) * s1_1_2;
	r1 += M4(-1.331e-01, -7.120e-02, -8.130e-02, -4.421e-01, 1.213e-01, 1.373e-01, 1.669e-01, -1.501e-01, 3.118e-01, -2.915e-01, 9.813e-01, 2.903e-01, 9.098e-02, 2.815e-01, -1.741e-01, 4.330e-01) * s1_1_2;
	r2 += M4(5.071e-02, 1.594e-01, -1.337e-01, 1.397e-01, -1.428e-02, -1.363e-01, -1.430e-01, 1.190e-02, 1.017e-01, 4.564e-01, 1.878e-01, 3.502e-01, -2.336e-01, -3.572e-01, 4.422e-01, 9.258e-02) * s1_1_2;
	r0 += M4(1.936e-01, 2.515e-02, 3.455e-02, -4.947e-01, 7.497e-02, -9.529e-02, 1.455e-01, -1.608e-01, 6.692e-02, 1.469e-01, 2.798e-02, -2.045e-01, 5.176e-02, -3.830e-02, 2.310e-02, 2.760e-01) * s1_2_0;
	r1 += M4(-7.355e-03, -1.242e-01, -1.807e-02, -3.797e-02, 2.648e-02, -8.799e-03, -4.474e-03, 2.417e-02, -1.267e-02, 4.376e-02, 3.692e-02, 1.100e-01, 3.383e-02, 5.380e-03, 3.780e-02, 2.285e-01) * s1_2_0;
	r2 += M4(7.936e-02, -9.303e-02, -9.494e-02, -6.516e-02, 2.876e-04, -1.632e-02, -3.508e-02, -6.534e-02, 3.860e-02, 9.706e-02, 2.742e-02, -1.529e-01, -1.243e-01, -1.913e-01, 4.556e-01, -7.041e-01) * s1_2_0;
	r0 += M4(-3.197e-02, 5.075e-02, 8.374e-02, -6.309e-01, -2.486e-01, 1.637e-01, -2.051e-01, -3.082e-01, 5.472e-01, -3.950e-02, 4.035e-01, -6.350e-01, 3.945e-02, -8.499e-01, -1.101e-01, -1.107e-01) * s1_2_1;
	r1 += M4(-9.981e-02, -3.062e-02, -7.907e-02, -2.125e-01, 1.072e-01, 4.088e-02, -3.254e-03, -5.338e-01, -2.037e-01, -2.803e-01, -4.040e-02, -1.990e-02, 2.492e-02, -5.465e-01, -1.574e-01, 1.000e+00) * s1_2_1;
	r2 += M4(8.660e-02, 9.485e-02, -5.707e-02, -1.295e-01, -1.693e-01, 6.013e-02, -1.718e-01, 4.009e-01, 2.805e-01, -1.911e-01, 7.776e-02, -1.431e-02, 1.000e+00, 4.140e-01, -5.142e-01, 8.279e-01) * s1_2_1;
	r0 += M4(-1.009e-02, -5.037e-02, 9.690e-02, -8.350e-02, -1.737e-01, -1.000e+00, -1.291e-01, 7.066e-03, 3.096e-01, -3.501e-01, -1.742e-01, -4.576e-01, 4.762e-01, 8.582e-01, 9.309e-02, 3.052e-01) * s1_2_2;
	r1 += M4(-2.276e-02, 3.304e-02, -1.244e-01, 1.572e-02, 2.866e-02, 5.017e-02, 7.374e-02, -1.000e+00, -1.799e-01, -5.454e-02, -2.406e-01, -1.260e-01, -2.864e-02, -9.799e-02, 6.017e-02, -7.516e-01) * s1_2_2;
	r2 += M4(-4.089e-02, 1.514e-02, -7.395e-02, 2.154e-01, -2.619e-01, 1.884e-01, 7.287e-02, -2.357e-01, 5.204e-03, -2.124e-01, -1.353e-01, -1.512e-01, -2.326e-01, -4.005e-01, 4.368e-03, -1.449e-01) * s1_2_2;
	s0_0_0 = G[2][xy.y+0][xy.x+0]; s0_0_1 = G[2][xy.y+0][xy.x+1];
	s0_0_2 = G[2][xy.y+0][xy.x+2]; s0_1_0 = G[2][xy.y+1][xy.x+0];
	s0_1_1 = G[2][xy.y+1][xy.x+1]; s0_1_2 = G[2][xy.y+1][xy.x+2];
	s0_2_0 = G[2][xy.y+2][xy.x+0]; s0_2_1 = G[2][xy.y+2][xy.x+1];
	s0_2_2 = G[2][xy.y+2][xy.x+2];
	r0 += M4(-1.413e-02, 1.444e-01, -1.966e-02, 1.801e-01, 5.433e-03, -2.446e-02, 1.275e-01, -1.835e-02, -3.357e-02, -4.183e-02, 1.561e-01, 2.044e-02, -7.119e-02, 3.208e-01, -3.189e-01, -1.545e-02) * s0_0_0;
	r1 += M4(-6.149e-02, -6.675e-02, 3.723e-02, 4.928e-01, -5.373e-02, -1.176e-01, -1.513e-02, -1.365e-01, -2.251e-02, -1.674e-01, 2.987e-02, -9.053e-02, 9.202e-02, 1.072e-01, 1.149e-01, 2.151e-02) * s0_0_0;
	r2 += M4(1.635e-01, -9.535e-02, -2.046e-01, 1.241e-01, 1.172e-03, -2.731e-02, 1.738e-02, -3.494e-02, 2.934e-02, -2.096e-02, 5.803e-03, 4.534e-02, 1.625e-02, 3.323e-02, 5.895e-02, -9.420e-03) * s0_0_0;
	r0 += M4(-5.290e-01, -1.057e-01, -4.313e-01, -3.791e-01, 9.401e-02, -1.531e-01, -1.210e-01, 6.142e-03, -2.088e-02, 2.319e-01, -1.053e-01, 1.426e-01, -1.753e-01, 2.092e-01, 1.433e-01, -3.977e-02) * s0_0_1;
	r1 += M4(-8.373e-02, 6.599e-01, -4.179e-02, -7.901e-01, 1.289e-01, -4.016e-02, 7.731e-02, 4.816e-01, 2.994e-02, -5.741e-03, 1.160e-01, 9.746e-01, 7.546e-02, 3.808e-01, -6.494e-02, -2.179e-01) * s0_0_1;
	r2 += M4(-7.173e-01, 3.672e-01, 1.661e-01, -2.368e-01, 4.609e-02, -2.032e-02, -3.940e-02, 6.904e-02, 2.915e-01, -4.690e-02, 6.782e-02, 9.215e-02, -2.007e-01, -1.515e-02, 3.572e-01, 1.082e-01) * s0_0_1;
	r0 += M4(-1.829e-01, -3.555e-01, 2.986e-02, -4.203e-01, -1.031e-02, 2.819e-01, 1.568e-01, 1.184e-01, 3.245e-01, 2.566e-02, -1.446e-01, 5.727e-01, 6.012e-02, -3.534e-02, 2.463e-01, -9.562e-02) * s0_0_2;
	r1 += M4(9.943e-02, 1.489e-01, 5.699e-03, 1.306e-01, -1.182e-02, -1.107e-02, -3.593e-02, -2.330e-01, 2.803e-01, -5.381e-01, 2.231e-01, -1.822e-01, -4.293e-02, 1.604e-02, -1.100e-01, 8.903e-02) * s0_0_2;
	r2 += M4(-2.523e-01, 1.035e-01, -6.487e-02, 1.690e-01, 1.353e-01, -6.404e-02, -5.471e-03, 2.517e-02, 2.395e-01, -2.909e-02, -1.212e-01, -1.666e-01, 1.323e-03, -9.402e-02, 3.407e-02, 3.405e-02) * s0_0_2;
	r0 += M4(1.625e-01, 4.422e-03, 2.348e-01, -6.643e-02, -5.388e-02, -1.048e-02, -1.043e-01, 1.985e-02, -4.414e-02, 3.514e-02, -8.125e-02, 1.304e-01, -4.356e-01, 2.618e-01, -2.911e-01, 6.554e-02) * s0_1_0;
	r1 += M4(-1.792e-01, -4.011e-02, -8.960e-02, -8.087e-01, 4.427e-02, 6.220e-02, -4.308e-02, -1.831e-01, 1.777e-02, -7.814e-02, -4.071e-02, 8.640e-03, 1.101e-01, 2.329e-01, 5.633e-02, -8.505e-02) * s0_1_0;
	r2 += M4(-4.702e-02, 1.722e-01, 2.263e-01, -3.116e-01, -2.349e-01, -7.329e-02, -1.604e-01, 4.331e-02, -9.689e-02, -6.740e-02, -1.674e-01, 1.208e-01, -2.125e-01, 2.744e-01, 2.191e-01, 1.758e-03) * s0_1_0;
	r0 += M4(3.662e-01, -1.000e+00, 6.275e-01, -4.766e-01, 4.940e-01, 4.912e-01, -2.842e-01, -3.116e-01, -3.122e-01, 1.130e-01, -7.220e-01, 5.001e-01, -2.738e-01, -8.468e-01, 1.081e-01, 1.955e-01) * s0_1_1;
	r1 += M4(9.649e-02, -7.706e-01, 1.802e-02, 3.197e-01, 9.112e-02, 2.829e-01, 3.740e-01, 4.539e-01, 1.801e-01, 1.983e-01, 1.685e-01, -3.735e-01, -4.332e-02, -1.111e-01, 5.844e-02, 1.231e-02) * s0_1_1;
	r2 += M4(4.487e-01, -5.945e-01, -1.377e-01, 4.346e-01, 6.842e-01, 3.506e-01, 6.387e-01, -1.304e-01, -1.048e-01, 3.729e-01, 1.306e-01, -1.421e-01, -1.004e-01, -3.511e-02, 5.822e-03, -1.222e-01) * s0_1_1;
	r0 += M4(3.350e-01, -1.899e-01, -2.607e-01, 2.733e-01, -3.446e-01, 1.402e-01, 1.960e-01, 3.287e-01, -8.753e-02, 2.016e-01, 2.335e-01, 2.981e-01, -3.828e-02, -4.623e-01, 2.384e-01, -4.045e-02) * s0_1_2;
	r1 += M4(-1.867e-01, -1.821e-01, 5.368e-02, -3.931e-01, 6.440e-03, 2.935e-01, -2.990e-01, 5.413e-02, 1.290e-01, 8.986e-02, -6.714e-02, 4.203e-01, -6.894e-02, -5.758e-02, -2.916e-02, -3.043e-01) * s0_1_2;
	r2 += M4(3.486e-01, 5.226e-01, -1.200e-01, -2.703e-01, -2.018e-01, -3.694e-01, -8.340e-02, 1.492e-01, -7.278e-02, 2.263e-01, 2.041e-01, 6.179e-02, -5.238e-02, -1.816e-01, -9.327e-03, -1.231e-01) * s0_1_2;
	r0 += M4(-2.316e-01, -1.227e-01, -5.542e-02, -7.574e-02, 1.970e-01, 1.340e-01, 7.984e-02, -2.324e-01, -4.298e-02, 2.874e-02, 1.117e-01, 1.705e-02, 6.813e-02, 2.417e-01, 1.852e-01, -1.196e-01) * s0_2_0;
	r1 += M4(1.411e-01, 1.479e-01, 5.605e-02, 2.706e-01, -8.129e-02, -1.150e-01, -5.919e-02, -1.043e-01, 4.837e-03, -1.729e-03, -2.722e-02, -1.045e-01, -2.337e-02, -7.204e-03, -8.730e-03, 3.475e-02) * s0_2_0;
	r2 += M4(-1.591e-01, -6.267e-02, -3.942e-02, 1.051e-01, 1.770e-02, -2.709e-01, -2.685e-01, -4.709e-02, -5.612e-02, 8.142e-03, -5.026e-02, -8.806e-02, -3.570e-02, 4.616e-02, -2.297e-02, 1.304e-01) * s0_2_0;
	r0 += M4(-9.682e-02, 5.218e-01, 6.288e-02, 1.000e+00, -1.875e-01, -5.806e-02, -1.000e+00, -1.606e-01, -1.709e-01, -1.509e-01, -1.343e-01, 1.317e-02, 3.441e-02, -1.930e-01, 1.792e-01, -1.562e-01) * s0_2_1;
	r1 += M4(-9.011e-02, 7.344e-02, 6.188e-02, -2.939e-02, -1.701e-02, 7.117e-01, 4.606e-02, -1.000e+00, 6.289e-02, 1.247e-01, 3.129e-02, -2.162e-01, -3.838e-02, -2.493e-02, 3.069e-03, -1.305e-01) * s0_2_1;
	r2 += M4(-1.207e-01, 3.895e-03, 1.450e-01, -6.116e-01, 1.637e-01, 1.000e+00, 3.776e-01, 1.321e-01, -7.327e-02, 1.179e-01, 2.200e-02, 5.984e-02, -3.252e-02, 5.740e-02, -1.775e-02, -1.824e-02) * s0_2_1;
	r0 += M4(-1.919e-01, 3.962e-01, 1.970e-01, -3.553e-01, 2.801e-01, -1.000e+00, -3.908e-01, 3.829e-01, -9.251e-02, -8.353e-01, 5.127e-02, 4.248e-01, -9.922e-03, -1.212e-01, 3.749e-02, -1.156e-01) * s0_2_2;
	r1 += M4(-7.926e-02, -1.665e-01, -3.061e-01, 2.713e-01, -1.002e-01, 1.129e-01, 1.078e-01, -3.741e-01, 6.081e-02, 5.012e-02, 1.303e-01, -9.155e-02, -1.862e-02, -1.773e-02, -6.133e-02, 9.322e-02) * s0_2_2;
	r2 += M4(1.249e-02, 5.264e-02, -1.124e-01, 2.569e-01, -5.354e-02, -1.161e-01, 7.592e-02, -3.390e-01, -9.351e-02, -8.751e-02, -3.888e-03, 9.996e-02, -4.154e-02, -4.967e-02, -5.916e-03, 5.372e-03) * s0_2_2;
	r0 += V4(1.392e-02, -2.496e-03, -8.737e-04, 1.580e-02);
	r0 = clamp(r0, V4(0.0), V4(1.0));
	imageStore(out_image, opos + ivec2(0, 0), vec4(r0));
	r1 += V4(7.678e-03, 1.043e-02, 9.204e-03, -1.333e-02);
	r1 = clamp(r1, V4(0.0), V4(1.0));
	imageStore(out_image, opos + ivec2(1, 0), vec4(r1));
	r2 += V4(1.174e-02, -1.491e-03, 3.968e-03, 1.929e-03);
	r2 = clamp(r2, V4(0.0), V4(1.0));
	imageStore(out_image, opos + ivec2(2, 0), vec4(r2));
}

//!DESC CuNNy-2x12-conv2
//!HOOK LUMA
//!COMPUTE 24 8 8 8
//!BIND conv1
//!BIND LUMA
//!SAVE conv2
//!WIDTH LUMA.w 3 *
//!HEIGHT LUMA.h
//!COMPONENTS 4
//!WHEN OUTPUT.w LUMA.w / 1.3 > OUTPUT.h LUMA.h / 1.3 > *
#extension GL_EXT_shader_explicit_arithmetic_types_float16 : enable
#ifdef GL_EXT_shader_explicit_arithmetic_types_float16
#	define V4 f16vec4
#	define M4 f16mat4
#	define F float16_t
#else
#	define V4 vec4
#	define M4 mat4
#	define F float
#endif
#define l0(x, y) V4((conv1_mul * texelFetch(conv1_raw, clamp(pos + ivec2(x, y), ivec2(0), sz) * ivec2(3, 1) + ivec2(0, 0), 0)))
#define l1(x, y) V4((conv1_mul * texelFetch(conv1_raw, clamp(pos + ivec2(x, y), ivec2(0), sz) * ivec2(3, 1) + ivec2(1, 0), 0)))
#define l2(x, y) V4((conv1_mul * texelFetch(conv1_raw, clamp(pos + ivec2(x, y), ivec2(0), sz) * ivec2(3, 1) + ivec2(2, 0), 0)))
shared V4 G[3][10][10];
void hook() {
	ivec2 xy = ivec2(gl_LocalInvocationID.xy);
	ivec2 pos = ivec2(gl_WorkGroupID.xy) * ivec2(8, 8) + xy;
	ivec2 opos = pos * ivec2(3, 1);
	ivec2 sz = ivec2(LUMA_size) - ivec2(1);
	for (int y = 0; y < 10; y += 8) {
		int ay = xy.y + y;
		if (ay >= 10) break;
		for (int x = 0; x < 10; x += 8) {
			int ax = xy.x + x;
			if (ax >= 10) break;
			G[0][ay][ax] = l0(x - 1, y - 1);
			G[1][ay][ax] = l1(x - 1, y - 1);
			G[2][ay][ax] = l2(x - 1, y - 1);
		}
	}
	barrier();
	V4 s0_0_0, s0_0_1, s0_0_2, s0_1_0, s0_1_1, s0_1_2, s0_2_0, s0_2_1, s0_2_2, s1_0_0, s1_0_1, s1_0_2, s1_1_0, s1_1_1, s1_1_2, s1_2_0, s1_2_1, s1_2_2;
	V4 r0, r1, r2;
	r0 = V4(0.0); r1 = V4(0.0); r2 = V4(0.0);
	s0_0_0 = G[0][xy.y+0][xy.x+0]; s0_0_1 = G[0][xy.y+0][xy.x+1];
	s0_0_2 = G[0][xy.y+0][xy.x+2]; s0_1_0 = G[0][xy.y+1][xy.x+0];
	s0_1_1 = G[0][xy.y+1][xy.x+1]; s0_1_2 = G[0][xy.y+1][xy.x+2];
	s0_2_0 = G[0][xy.y+2][xy.x+0]; s0_2_1 = G[0][xy.y+2][xy.x+1];
	s0_2_2 = G[0][xy.y+2][xy.x+2]; s1_0_0 = G[1][xy.y+0][xy.x+0];
	s1_0_1 = G[1][xy.y+0][xy.x+1]; s1_0_2 = G[1][xy.y+0][xy.x+2];
	s1_1_0 = G[1][xy.y+1][xy.x+0]; s1_1_1 = G[1][xy.y+1][xy.x+1];
	s1_1_2 = G[1][xy.y+1][xy.x+2]; s1_2_0 = G[1][xy.y+2][xy.x+0];
	s1_2_1 = G[1][xy.y+2][xy.x+1]; s1_2_2 = G[1][xy.y+2][xy.x+2];
	r0 += M4(-6.251e-02, 1.922e-02, -5.043e-02, 2.071e-02, 3.599e-03, -7.492e-02, -5.216e-02, 9.168e-02, -2.156e-02, 1.371e-01, 1.656e-01, 8.483e-02, 8.431e-02, -8.076e-02, -1.196e-01, -7.561e-02) * s0_0_0;
	r1 += M4(-8.639e-02, -3.553e-02, -4.393e-02, -3.387e-03, -1.810e-01, -1.730e-01, -1.127e-02, 6.570e-03, 1.192e-02, 2.580e-01, 1.011e-01, 2.953e-02, 9.917e-02, 1.212e-01, 7.833e-02, -2.250e-02) * s0_0_0;
	r2 += M4(-9.500e-02, 3.052e-02, -4.913e-02, -9.077e-02, -1.977e-01, 9.204e-02, -1.679e-01, -1.844e-02, 2.437e-02, 1.934e-02, -4.481e-01, -6.094e-02, 5.237e-02, 1.451e-01, 9.590e-02, -8.087e-03) * s0_0_0;
	r0 += M4(5.357e-02, -1.064e-01, -1.861e-02, 5.530e-02, -7.310e-02, -9.161e-01, -1.873e-02, 1.203e-02, 2.503e-01, -5.154e-03, -2.642e-02, -2.919e-02, -4.265e-01, 1.272e-01, 1.234e-02, -4.633e-02) * s0_0_1;
	r1 += M4(-5.652e-02, -6.145e-02, -1.096e-01, -2.582e-02, 1.140e-01, -2.416e-01, -3.990e-01, -1.784e-02, -6.452e-02, -6.911e-01, -8.184e-02, 2.403e-02, -2.979e-01, -5.276e-02, -1.238e-01, -9.542e-03) * s0_0_1;
	r2 += M4(-9.194e-02, 2.306e-02, 6.141e-03, -9.201e-02, -4.642e-01, -1.361e-01, 2.039e-01, -2.444e-01, -3.841e-01, 8.130e-02, -1.926e-01, -4.312e-01, 1.475e-01, -6.149e-02, -8.969e-02, 1.117e-01) * s0_0_1;
	r0 += M4(-9.892e-03, 3.225e-02, 4.931e-02, -1.044e-03, -3.015e-01, 1.473e-01, 2.071e-01, 5.272e-02, 6.953e-02, -5.254e-01, -2.665e-01, 2.629e-05, -1.581e-02, -2.566e-01, -1.274e-01, -2.925e-02) * s0_0_2;
	r1 += M4(2.855e-02, 1.217e-02, 1.678e-02, -8.691e-03, -8.550e-02, 4.599e-02, 1.228e-01, 1.809e-02, 1.034e-01, -2.408e-01, 8.645e-02, 2.950e-03, 9.556e-02, -3.666e-02, -4.323e-03, -1.044e-02) * s0_0_2;
	r2 += M4(1.715e-02, 9.172e-03, -2.525e-03, 4.627e-02, -6.015e-02, 2.958e-02, -4.587e-03, -1.721e-01, -3.142e-01, 2.555e-02, 4.720e-02, -3.239e-01, -7.446e-02, -9.910e-03, 2.040e-02, -1.296e-02) * s0_0_2;
	r0 += M4(-2.518e-01, 6.565e-02, -1.848e-01, -1.604e-01, -2.828e-01, -1.785e-01, -2.874e-01, -3.486e-01, 1.668e-01, 6.643e-02, 3.182e-01, 1.200e-01, -2.577e-01, 1.145e-02, -3.838e-01, 2.567e-01) * s0_1_0;
	r1 += M4(-2.037e-01, -1.987e-01, -7.114e-02, -1.345e-02, -3.977e-01, 3.988e-02, 3.606e-02, -5.390e-02, -4.429e-01, -4.975e-01, 5.555e-03, 3.729e-02, -3.323e-02, -3.716e-01, -1.408e-01, -7.464e-03) * s0_1_0;
	r2 += M4(-2.105e-01, 5.872e-03, 1.370e-01, -6.224e-02, -7.882e-02, -2.790e-01, 1.090e-01, -7.740e-02, 1.382e-01, 5.033e-02, -1.000e+00, -2.811e-02, -1.847e-01, -3.553e-02, -1.136e-01, -2.630e-02) * s0_1_0;
	r0 += M4(-1.000e+00, -1.588e-01, -1.676e-01, -1.809e-01, -6.426e-01, -1.000e+00, -5.489e-01, -3.336e-01, -5.845e-01, -5.068e-01, -6.251e-01, -4.510e-01, 2.344e-01, -5.950e-02, 1.837e-01, 1.275e-01) * s0_1_1;
	r1 += M4(-5.193e-01, -1.991e-02, -4.678e-01, 3.012e-01, 4.292e-01, 2.593e-01, -5.885e-01, -4.572e-02, -5.223e-01, -5.807e-01, -1.000e+00, -9.726e-02, -1.386e-01, -2.515e-01, 1.208e-01, 4.400e-02) * s0_1_1;
	r2 += M4(-4.116e-01, -8.584e-02, -1.869e-01, -3.883e-01, 1.707e-01, 3.325e-01, -4.389e-02, 1.685e-01, -9.993e-01, -2.472e-01, -3.770e-01, 6.733e-02, -2.550e-01, -3.629e-02, 3.530e-02, -8.296e-02) * s0_1_1;
	r0 += M4(-1.764e-01, -1.392e-01, -1.298e-01, -5.847e-02, 1.460e-01, 1.998e-01, 1.899e-01, 9.204e-02, -1.000e+00, -1.000e+00, -5.903e-01, -3.452e-01, 9.882e-03, -1.091e-01, -1.742e-01, -4.799e-02) * s0_1_2;
	r1 += M4(-3.961e-02, -2.149e-02, -1.456e-01, -8.530e-02, -3.023e-01, 5.998e-02, 4.474e-02, -8.821e-03, -2.530e-01, -2.450e-01, -2.384e-01, 6.304e-03, 7.269e-02, 1.902e-03, -2.153e-01, -1.048e-02) * s0_1_2;
	r2 += M4(-6.802e-02, -2.536e-02, 2.900e-02, 1.472e-01, 1.255e-01, -6.030e-02, 2.104e-01, 5.845e-02, -2.622e-01, -8.424e-02, 7.882e-02, -1.000e+00, 7.378e-03, -1.013e-01, -1.577e-02, 4.287e-02) * s0_1_2;
	r0 += M4(6.918e-02, -1.043e-03, -8.667e-02, -1.120e-01, 2.671e-01, -1.136e-02, -1.477e-01, 2.164e-01, -1.005e-01, 9.312e-02, 1.598e-01, -1.848e-01, -2.488e-02, 5.330e-02, 8.162e-03, -2.683e-01) * s0_2_0;
	r1 += M4(3.484e-02, -3.778e-02, -9.086e-03, -2.428e-02, -2.240e-02, -4.859e-02, -2.101e-01, 7.653e-03, 9.745e-02, 6.661e-02, 1.560e-01, -1.015e-02, -2.746e-02, 4.925e-02, 5.680e-02, 8.746e-03) * s0_2_0;
	r2 += M4(7.348e-02, -5.164e-02, 2.442e-04, 5.144e-02, -5.658e-02, 1.027e-01, 1.538e-01, 4.536e-02, -1.212e-02, 5.641e-02, -2.202e-01, -7.559e-02, 7.161e-02, -1.170e-01, -2.181e-02, -2.561e-02) * s0_2_0;
	r0 += M4(3.904e-02, -1.255e-01, -2.538e-01, -7.819e-02, 6.106e-02, 1.026e-01, 1.230e-01, 2.377e-01, -3.540e-01, -6.572e-02, -4.324e-01, -5.493e-01, -4.576e-01, -8.666e-02, -2.344e-01, -3.143e-01) * s0_2_1;
	r1 += M4(-1.478e-01, -1.900e-01, -2.864e-02, -8.358e-02, 1.428e-01, -2.020e-01, 5.622e-02, -1.886e-02, -1.826e-01, 1.484e-01, -4.338e-01, 1.473e-02, -5.380e-02, 1.056e-01, 5.064e-02, 2.083e-02) * s0_2_1;
	r2 += M4(-2.522e-01, 2.625e-01, -7.890e-02, -1.101e-01, -2.367e-01, -1.945e-01, -9.550e-02, -3.774e-01, 2.945e-01, -1.021e-01, -3.372e-02, 3.311e-01, 1.441e-01, -1.248e-01, -2.075e-02, 8.711e-02) * s0_2_1;
	r0 += M4(5.829e-02, -1.038e-01, -1.318e-01, -3.420e-02, -1.311e-01, 2.029e-02, -5.187e-02, -9.569e-02, -1.529e-01, -7.542e-02, 1.191e-02, -6.103e-02, -7.643e-02, 1.966e-02, 1.949e-02, 5.434e-02) * s0_2_2;
	r1 += M4(-6.134e-03, -2.095e-02, -1.694e-01, -4.055e-02, -4.678e-02, 8.445e-03, 2.790e-02, 4.312e-02, -1.752e-01, 1.229e-01, -1.346e-01, -2.858e-02, -1.473e-02, -5.131e-02, -7.774e-02, -1.701e-02) * s0_2_2;
	r2 += M4(-1.742e-02, -3.612e-02, 9.468e-03, -1.805e-01, -6.239e-02, 2.400e-02, 6.926e-02, -1.301e-01, 9.131e-02, -4.216e-01, -2.293e-02, 5.262e-02, 1.879e-02, 4.186e-02, 4.452e-02, -1.725e-02) * s0_2_2;
	r0 += M4(-5.848e-02, 2.130e-02, -1.742e-01, 1.645e-01, 3.102e-03, 4.886e-02, 3.522e-02, -6.959e-02, 2.697e-02, -1.282e-01, 2.242e-01, -1.261e-01, 3.353e-02, -1.442e-02, 1.494e-02, 2.011e-02) * s1_0_0;
	r1 += M4(-1.590e-03, 3.049e-01, 2.328e-02, 2.985e-02, 8.516e-02, 1.238e-02, 4.403e-02, -1.404e-03, -4.242e-02, -5.603e-01, 9.543e-02, 7.787e-02, -8.826e-02, -2.080e-01, -2.723e-02, -2.524e-02) * s1_0_0;
	r2 += M4(3.210e-02, 2.779e-02, -9.818e-02, 7.277e-02, 8.476e-02, 2.522e-02, 1.219e-01, 7.337e-02, -1.629e-01, -1.229e-01, -3.133e-02, -1.201e-01, 3.317e-02, -1.008e-02, -3.125e-01, -3.798e-02) * s1_0_0;
	r0 += M4(1.821e-01, -2.241e-01, -5.205e-02, -6.027e-02, -3.311e-01, 5.338e-02, 2.321e-02, -1.028e-01, 1.174e-01, 2.804e-01, 1.072e-01, 9.896e-02, -8.374e-02, -1.271e-01, -9.837e-02, -2.407e-02) * s1_0_1;
	r1 += M4(1.919e-01, -5.296e-02, 2.416e-01, 1.685e-01, -2.304e-02, 2.785e-01, -6.869e-02, -7.007e-02, 2.392e-02, -1.237e-01, -5.861e-02, -1.862e-02, -8.940e-02, -5.818e-02, -1.753e-01, -5.001e-02) * s1_0_1;
	r2 += M4(3.658e-01, -9.205e-03, 3.226e-02, 1.035e-01, 5.289e-02, -2.579e-02, -9.815e-02, 4.285e-02, -4.205e-01, 3.482e-02, -4.411e-02, -6.779e-02, -1.251e-01, 8.131e-02, -1.329e-01, -7.656e-02) * s1_0_1;
	r0 += M4(1.077e-01, 1.598e-01, 1.346e-01, -1.372e-02, -8.179e-02, -2.923e-02, 4.046e-02, 4.034e-02, -5.423e-02, -1.284e-01, -2.786e-02, 4.321e-02, 1.065e-02, 4.351e-02, 2.114e-02, -1.881e-02) * s1_0_2;
	r1 += M4(-4.310e-02, -4.008e-02, 4.449e-03, 2.612e-02, -7.748e-02, 7.399e-02, -1.284e-01, 1.384e-02, 3.901e-02, 6.197e-02, -1.539e-02, -1.744e-02, 3.039e-02, -8.428e-02, -1.093e-02, -8.413e-03) * s1_0_2;
	r2 += M4(-8.912e-02, -2.994e-02, -1.077e-03, 1.073e-03, 7.882e-02, 1.879e-02, 1.360e-02, -5.512e-03, 5.494e-02, -5.556e-02, 4.297e-02, 5.797e-03, 3.108e-02, -3.194e-03, -2.395e-03, 1.241e-02) * s1_0_2;
	r0 += M4(1.831e-01, 7.447e-03, 2.687e-01, 1.538e-01, 1.652e-01, -1.468e-01, 2.135e-02, 2.483e-01, -2.967e-01, -1.356e-01, -1.330e-01, -4.090e-01, -3.878e-01, 7.192e-02, -2.715e-01, -3.345e-01) * s1_1_0;
	r1 += M4(-4.159e-01, -4.464e-01, 5.667e-02, -1.050e-02, 9.135e-02, 2.301e-01, 1.040e-01, -3.954e-02, 5.579e-02, 3.976e-01, 6.719e-03, 3.451e-01, -3.573e-02, -1.947e-01, -6.100e-02, -3.649e-02) * s1_1_0;
	r2 += M4(2.222e-02, 1.863e-02, -5.114e-01, -2.164e-01, 2.437e-01, -1.220e-01, -2.666e-01, 6.656e-03, 9.541e-02, -3.268e-01, -1.974e-01, 4.446e-02, -7.797e-02, -2.400e-02, 7.581e-02, -6.327e-02) * s1_1_0;
	r0 += M4(1.891e-01, -1.564e-01, -6.062e-01, -2.175e-01, 3.491e-01, -1.025e-01, -4.640e-01, 2.346e-01, 8.013e-02, 5.662e-01, 2.753e-01, -1.295e-01, -4.899e-01, 1.219e-01, -4.761e-01, -1.618e-01) * s1_1_1;
	r1 += M4(7.893e-01, -3.896e-01, -2.427e-01, -5.544e-01, 2.329e-02, -2.440e-02, 1.036e-01, 4.677e-01, -6.738e-01, 5.683e-02, -1.137e-01, -2.051e-01, -4.621e-01, -6.452e-01, -3.391e-01, 1.764e-01) * s1_1_1;
	r2 += M4(-8.027e-01, -1.499e-01, 6.959e-01, -1.856e-01, -2.095e-01, 3.947e-02, -2.145e-01, -5.334e-02, 5.215e-01, 2.722e-01, -2.533e-01, 3.466e-01, -4.398e-01, -1.753e-01, -5.716e-02, -7.928e-02) * s1_1_1;
	r0 += M4(3.220e-02, 9.481e-02, 3.133e-01, 1.169e-01, 1.577e-01, -7.152e-02, 1.568e-01, 3.629e-02, -5.200e-02, -4.562e-01, -2.510e-01, -1.263e-02, -3.622e-01, -2.846e-01, -3.324e-01, -1.753e-01) * s1_1_2;
	r1 += M4(-2.207e-02, -5.433e-02, 4.114e-01, 2.278e-01, -1.498e-01, -4.582e-02, -4.845e-01, -7.881e-02, 8.096e-02, -8.819e-03, -2.331e-01, -8.889e-02, -1.194e-02, -1.117e-01, 1.369e-01, 5.553e-03) * s1_1_2;
	r2 += M4(6.071e-02, 2.976e-02, -1.003e-01, -5.210e-01, -3.211e-03, 5.505e-02, 1.016e-01, -5.542e-03, -2.114e-01, 1.011e-01, 3.730e-02, 1.743e-01, -7.778e-02, -1.880e-01, -1.103e-02, -7.094e-03) * s1_1_2;
	r0 += M4(-2.943e-01, 5.899e-02, 2.136e-01, -3.127e-01, 1.906e-02, 1.053e-02, 1.577e-01, 1.736e-01, 2.573e-01, -2.911e-02, 7.914e-02, 9.804e-02, 1.482e-01, -5.120e-02, -1.597e-01, -1.432e-02) * s1_2_0;
	r1 += M4(-1.142e-01, 1.372e-01, 1.023e-01, -4.304e-02, -4.085e-02, 1.060e-01, -1.278e-02, -4.308e-03, 2.218e-01, -1.223e-01, 1.865e-02, 7.274e-03, 6.447e-02, 1.906e-02, 1.803e-02, 6.793e-03) * s1_2_0;
	r2 += M4(4.039e-02, 6.408e-03, 3.230e-01, -3.544e-04, -3.160e-02, 9.890e-02, 8.494e-02, -2.885e-02, -7.093e-02, -1.243e-02, -1.469e-01, -6.296e-02, 5.664e-02, -1.802e-01, -2.447e-01, 1.222e-01) * s1_2_0;
	r0 += M4(-4.744e-01, -1.597e-01, -4.300e-01, -1.059e-01, -4.300e-02, -2.952e-02, 3.512e-02, 2.550e-01, -1.300e-02, 1.846e-01, 1.855e-01, -5.179e-02, -7.780e-02, -3.110e-02, 4.819e-02, -3.447e-01) * s1_2_1;
	r1 += M4(-9.738e-02, 1.895e-01, -1.561e-01, 1.763e-03, -7.987e-02, 3.668e-02, -1.116e-01, -1.503e-01, -1.675e-01, -6.434e-02, 1.593e-01, -4.741e-02, -6.552e-02, 1.364e-01, 3.866e-02, -7.916e-03) * s1_2_1;
	r2 += M4(3.250e-01, -3.048e-01, -1.749e-01, 2.825e-01, 1.835e-01, 1.965e-01, -4.126e-02, 1.096e-01, -1.008e-01, 3.421e-01, 1.086e-01, -4.752e-01, 4.630e-02, -1.886e-01, -3.872e-02, -6.750e-02) * s1_2_1;
	r0 += M4(-3.990e-02, 1.532e-02, 1.732e-01, -1.925e-01, 5.521e-02, 7.425e-03, -1.090e-01, -4.398e-02, 4.349e-02, -1.231e-01, -1.583e-01, 2.915e-02, 2.468e-02, -3.588e-02, 7.397e-02, -6.994e-02) * s1_2_2;
	r1 += M4(-4.988e-03, 1.853e-02, -9.895e-02, 1.209e-01, -2.485e-02, 8.395e-02, -1.688e-02, -2.583e-02, -3.291e-02, 2.468e-02, -1.082e-01, -6.847e-02, 5.670e-02, 1.091e-01, -4.612e-02, -3.347e-02) * s1_2_2;
	r2 += M4(2.502e-04, -8.524e-02, 2.664e-02, -8.595e-02, 1.558e-01, 2.260e-02, 5.605e-02, 1.733e-01, 1.143e-01, -1.394e-02, -2.275e-02, 1.479e-01, 9.968e-02, -2.166e-01, 2.236e-02, 3.351e-02) * s1_2_2;
	s0_0_0 = G[2][xy.y+0][xy.x+0]; s0_0_1 = G[2][xy.y+0][xy.x+1];
	s0_0_2 = G[2][xy.y+0][xy.x+2]; s0_1_0 = G[2][xy.y+1][xy.x+0];
	s0_1_1 = G[2][xy.y+1][xy.x+1]; s0_1_2 = G[2][xy.y+1][xy.x+2];
	s0_2_0 = G[2][xy.y+2][xy.x+0]; s0_2_1 = G[2][xy.y+2][xy.x+1];
	s0_2_2 = G[2][xy.y+2][xy.x+2];
	r0 += M4(-4.065e-03, 3.324e-03, -5.639e-02, -2.486e-02, -1.611e-01, -3.580e-02, -2.437e-01, 1.001e-01, 3.186e-02, -8.877e-02, 1.997e-02, -2.390e-02, 4.499e-02, -1.640e-02, -7.014e-02, -9.934e-02) * s0_0_0;
	r1 += M4(1.019e-01, 2.299e-01, -1.702e-03, -8.110e-03, -1.120e-01, 1.632e-01, -2.001e-01, -1.295e-01, 4.675e-02, -4.542e-02, 1.554e-02, -1.067e-02, 2.098e-01, 1.724e-01, -4.076e-02, 9.521e-02) * s0_0_0;
	r2 += M4(1.350e-01, 2.514e-02, 8.875e-02, 1.323e-01, -1.141e-01, -6.168e-04, 5.663e-02, -7.975e-02, 4.563e-02, 2.542e-02, -3.722e-02, 1.151e-02, 6.279e-02, 8.604e-02, 5.405e-02, 6.664e-02) * s0_0_0;
	r0 += M4(-7.938e-02, -8.447e-02, 8.687e-03, -6.540e-02, -1.741e-01, -3.778e-01, 1.798e-01, -5.684e-02, 5.924e-02, 1.864e-01, 1.692e-01, 3.920e-02, 3.124e-01, 4.631e-01, 3.524e-01, 8.098e-02) * s0_0_1;
	r1 += M4(6.104e-02, 1.519e-01, 1.542e-01, 2.460e-02, 7.331e-02, 5.182e-01, 1.307e-01, -1.984e-01, -3.968e-02, -3.702e-01, -3.541e-02, 4.158e-03, 1.571e-01, 4.304e-01, 1.334e-01, 1.307e-02) * s0_0_1;
	r2 += M4(2.008e-01, -9.385e-02, 3.307e-02, 9.530e-02, 4.925e-01, 5.214e-02, 5.260e-02, 2.010e-01, -1.428e-01, -5.858e-02, 3.258e-02, -3.476e-02, 7.104e-02, -1.953e-01, 3.629e-01, 5.357e-03) * s0_0_1;
	r0 += M4(4.554e-02, -7.457e-04, -1.898e-02, 3.145e-02, 1.480e-01, 1.401e-01, -2.012e-02, -1.265e-03, -1.944e-02, 2.349e-01, 3.809e-02, -2.902e-02, 3.565e-01, -7.543e-02, 4.840e-02, 6.285e-02) * s0_0_2;
	r1 += M4(-5.066e-02, -2.021e-02, -2.765e-02, 3.577e-03, -5.225e-02, 1.266e-02, -5.649e-03, -2.769e-02, 6.366e-03, -4.507e-02, 4.405e-02, 6.584e-03, 1.269e-01, 9.592e-02, 4.005e-01, 7.588e-02) * s0_0_2;
	r2 += M4(-5.406e-02, 1.861e-02, -3.145e-02, 2.949e-03, 4.602e-02, 4.587e-02, -1.103e-02, 2.706e-02, -6.599e-02, 1.250e-02, -3.549e-02, -7.565e-02, 1.708e-01, 1.606e-01, -1.723e-01, -1.725e-01) * s0_0_2;
	r0 += M4(2.705e-01, 5.604e-02, 2.597e-01, 2.825e-01, -3.499e-01, -9.179e-02, -1.000e+00, 1.600e-01, 1.719e-02, 6.639e-02, 1.319e-01, -5.493e-02, 1.878e-01, -3.732e-02, -1.648e-01, 2.056e-01) * s0_1_0;
	r1 += M4(1.354e-02, -2.261e-01, 9.916e-02, -2.183e-02, -3.671e-01, -9.372e-02, -1.922e-01, 9.449e-02, 8.882e-02, -9.334e-02, -6.807e-02, 3.430e-02, 3.467e-01, 7.830e-02, -8.437e-02, 1.184e-02) * s0_1_0;
	r2 += M4(1.054e-01, -5.528e-02, -3.141e-01, 2.318e-02, -2.515e-01, 1.971e-01, 2.446e-01, -7.718e-02, -1.215e-01, -4.097e-02, 1.334e-01, 5.571e-03, -1.358e-01, 1.260e-01, -1.156e-02, 1.037e-01) * s0_1_0;
	r0 += M4(9.563e-01, -2.647e-02, -2.788e-01, 1.856e-01, -4.924e-02, 1.179e-01, 3.397e-01, 6.426e-01, -1.460e-01, -3.006e-01, 3.355e-01, -2.463e-01, -1.703e-01, 2.063e-01, 6.746e-02, -4.497e-02) * s0_1_1;
	r1 += M4(5.374e-01, -1.695e-01, 2.636e-01, -1.389e-01, 2.705e-01, -4.235e-01, 2.459e-02, 1.189e-01, 2.783e-01, 8.691e-01, -3.408e-02, -5.647e-02, -4.089e-01, 1.541e-01, 1.587e-01, -2.520e-01) * s0_1_1;
	r2 += M4(-1.829e-01, 6.547e-02, 2.666e-01, 5.125e-02, -1.580e-01, 7.877e-04, -2.511e-02, -1.924e-01, 6.369e-01, 8.141e-02, 2.534e-01, 2.040e-01, 1.400e-01, 7.828e-01, 3.462e-02, -1.576e-01) * s0_1_1;
	r0 += M4(1.893e-01, 2.009e-02, 1.513e-01, 6.148e-02, -9.891e-02, -1.148e-01, -1.565e-01, 2.505e-02, -1.675e-01, 6.186e-01, 7.514e-03, -1.991e-02, -9.535e-02, -2.980e-02, 3.946e-02, 2.758e-03) * s0_1_2;
	r1 += M4(-1.946e-02, 1.632e-01, 1.271e-01, 4.264e-02, 2.050e-02, -7.049e-02, -3.502e-02, 1.433e-02, -2.124e-02, 2.251e-01, 4.338e-01, -5.587e-02, 1.749e-01, 1.966e-02, 1.529e-01, -3.450e-02) * s0_1_2;
	r2 += M4(2.607e-01, 8.763e-02, -1.393e-02, -1.441e-01, -1.024e-01, -5.844e-02, -1.066e-02, -6.085e-02, 2.894e-01, -3.482e-02, -1.210e-01, 3.084e-01, -6.717e-02, -4.101e-02, -1.030e-01, 3.944e-01) * s0_1_2;
	r0 += M4(-1.570e-02, 2.035e-01, 4.500e-01, -1.061e-01, -3.166e-02, -5.189e-02, -2.110e-01, -1.533e-01, 1.384e-04, -1.154e-02, 1.563e-01, -1.749e-01, 1.740e-01, -3.531e-02, 4.081e-03, 1.652e-01) * s0_2_0;
	r1 += M4(-4.552e-02, 2.419e-01, 7.427e-03, -1.139e-02, 4.110e-02, -8.619e-02, -7.040e-02, -1.935e-03, -7.920e-02, -7.829e-02, 8.733e-02, -2.529e-02, 1.734e-02, -4.510e-02, -1.013e-01, 2.846e-02) * s0_2_0;
	r2 += M4(1.656e-01, 6.885e-02, 2.306e-01, 8.564e-02, -3.845e-02, -6.145e-02, -3.980e-02, 7.135e-02, 8.232e-02, -8.007e-02, -8.287e-02, 1.357e-02, -6.300e-03, 7.347e-02, -2.075e-01, -3.945e-02) * s0_2_0;
	r0 += M4(-1.812e-01, -2.174e-01, 1.266e-01, 2.357e-01, -9.155e-02, 1.836e-02, -7.202e-02, -6.881e-01, 2.630e-01, -1.153e-01, 1.886e-01, 5.141e-01, 2.674e-01, 4.042e-02, -5.557e-05, 1.323e-01) * s0_2_1;
	r1 += M4(-1.704e-01, 2.959e-01, 3.070e-02, 2.193e-01, -3.314e-02, -2.065e-02, 1.607e-01, 1.058e-01, 3.631e-01, -2.780e-01, -3.580e-01, 4.593e-02, 3.804e-02, -1.634e-01, -4.257e-02, -3.917e-02) * s0_2_1;
	r2 += M4(4.456e-01, -2.026e-01, -4.248e-01, 2.890e-01, -1.120e-01, -1.344e-01, 9.481e-03, -9.133e-02, -4.922e-01, -3.532e-02, 6.200e-02, -8.901e-02, -2.114e-01, 9.106e-02, 5.005e-02, -5.746e-02) * s0_2_1;
	r0 += M4(-3.816e-02, 1.050e-01, 1.690e-02, 6.858e-02, -7.540e-02, -2.656e-02, 9.269e-02, -1.188e-01, 7.226e-03, 1.685e-01, -2.936e-02, 1.525e-01, 1.757e-01, 1.989e-02, -1.461e-02, 4.395e-02) * s0_2_2;
	r1 += M4(1.437e-02, -3.518e-02, -1.852e-01, -2.939e-02, 9.004e-03, -4.268e-02, -1.002e-01, 4.760e-02, 1.308e-01, -1.245e-01, 4.693e-01, 4.064e-02, 7.839e-02, -4.838e-02, 1.298e-01, 3.431e-02) * s0_2_2;
	r2 += M4(-6.761e-02, 4.851e-02, 9.669e-02, 2.960e-01, -6.730e-02, -1.058e-01, -3.957e-02, -1.701e-01, -1.552e-01, 1.802e-01, -3.751e-02, -9.937e-02, -8.277e-02, -4.680e-02, -1.889e-02, -8.625e-02) * s0_2_2;
	r0 += V4(-9.881e-03, -2.724e-03, -7.480e-03, -8.730e-03);
	r0 = clamp(r0, V4(0.0), V4(1.0));
	imageStore(out_image, opos + ivec2(0, 0), vec4(r0));
	r1 += V4(-7.611e-04, -9.225e-03, -5.303e-03, 2.560e-02);
	r1 = clamp(r1, V4(0.0), V4(1.0));
	imageStore(out_image, opos + ivec2(1, 0), vec4(r1));
	r2 += V4(-9.954e-03, -1.309e-02, -4.595e-03, -7.603e-03);
	r2 = clamp(r2, V4(0.0), V4(1.0));
	imageStore(out_image, opos + ivec2(2, 0), vec4(r2));
}

//!DESC CuNNy-2x12-out-shuffle
//!HOOK LUMA
//!COMPUTE 16 16 8 8
//!BIND conv2
//!BIND LUMA
//!WIDTH LUMA.w 2 *
//!HEIGHT LUMA.h 2 *
//!COMPONENTS 1
//!WHEN OUTPUT.w LUMA.w / 1.3 > OUTPUT.h LUMA.h / 1.3 > *
#extension GL_EXT_shader_explicit_arithmetic_types_float16 : enable
#ifdef GL_EXT_shader_explicit_arithmetic_types_float16
#	define V4 f16vec4
#	define M4 f16mat4
#	define F float16_t
#else
#	define V4 vec4
#	define M4 mat4
#	define F float
#endif
#define l0(x, y) V4((conv2_mul * texelFetch(conv2_raw, clamp(pos + ivec2(x, y), ivec2(0), sz) * ivec2(3, 1) + ivec2(0, 0), 0)))
#define l1(x, y) V4((conv2_mul * texelFetch(conv2_raw, clamp(pos + ivec2(x, y), ivec2(0), sz) * ivec2(3, 1) + ivec2(1, 0), 0)))
#define l2(x, y) V4((conv2_mul * texelFetch(conv2_raw, clamp(pos + ivec2(x, y), ivec2(0), sz) * ivec2(3, 1) + ivec2(2, 0), 0)))
shared V4 G[3][10][10];
void hook() {
	ivec2 xy = ivec2(gl_LocalInvocationID.xy);
	ivec2 pos = ivec2(gl_WorkGroupID.xy) * ivec2(8, 8) + xy;
	ivec2 opos = pos * ivec2(2, 2);
	ivec2 sz = ivec2(LUMA_size) - ivec2(1);
	for (int y = 0; y < 10; y += 8) {
		int ay = xy.y + y;
		if (ay >= 10) break;
		for (int x = 0; x < 10; x += 8) {
			int ax = xy.x + x;
			if (ax >= 10) break;
			G[0][ay][ax] = l0(x - 1, y - 1);
			G[1][ay][ax] = l1(x - 1, y - 1);
			G[2][ay][ax] = l2(x - 1, y - 1);
		}
	}
	barrier();
	V4 s0_0_0, s0_0_1, s0_0_2, s0_1_0, s0_1_1, s0_1_2, s0_2_0, s0_2_1, s0_2_2, s1_0_0, s1_0_1, s1_0_2, s1_1_0, s1_1_1, s1_1_2, s1_2_0, s1_2_1, s1_2_2;
	V4 r0;
	r0 = V4(0.0);
	s0_0_0 = G[0][xy.y+0][xy.x+0]; s0_0_1 = G[0][xy.y+0][xy.x+1];
	s0_0_2 = G[0][xy.y+0][xy.x+2]; s0_1_0 = G[0][xy.y+1][xy.x+0];
	s0_1_1 = G[0][xy.y+1][xy.x+1]; s0_1_2 = G[0][xy.y+1][xy.x+2];
	s0_2_0 = G[0][xy.y+2][xy.x+0]; s0_2_1 = G[0][xy.y+2][xy.x+1];
	s0_2_2 = G[0][xy.y+2][xy.x+2]; s1_0_0 = G[1][xy.y+0][xy.x+0];
	s1_0_1 = G[1][xy.y+0][xy.x+1]; s1_0_2 = G[1][xy.y+0][xy.x+2];
	s1_1_0 = G[1][xy.y+1][xy.x+0]; s1_1_1 = G[1][xy.y+1][xy.x+1];
	s1_1_2 = G[1][xy.y+1][xy.x+2]; s1_2_0 = G[1][xy.y+2][xy.x+0];
	s1_2_1 = G[1][xy.y+2][xy.x+1]; s1_2_2 = G[1][xy.y+2][xy.x+2];
	r0 += M4(-4.556e-02, -1.541e-02, 1.278e-02, 8.207e-03, 3.263e-02, 3.553e-03, 7.443e-03, 5.034e-03, -2.704e-02, 1.812e-02, -1.996e-02, 3.040e-03, 5.981e-02, 1.151e-02, -6.906e-03, 3.236e-04) * s0_0_0;
	r0 += M4(-3.442e-02, -6.959e-02, -3.019e-03, 8.627e-03, 6.639e-03, 5.706e-03, -3.299e-03, 1.150e-02, 1.077e-01, -1.121e-01, -4.725e-03, 1.538e-02, 1.506e-01, 1.694e-01, 1.862e-02, -2.027e-03) * s0_0_1;
	r0 += M4(-6.985e-03, -1.026e-02, 3.284e-03, 9.389e-03, 9.706e-04, 2.857e-03, 7.921e-04, -6.898e-04, -8.278e-03, 3.746e-02, -1.368e-03, 1.434e-02, 8.146e-03, 3.337e-02, 1.522e-03, 8.967e-03) * s0_0_2;
	r0 += M4(1.126e-01, -1.405e-02, -1.772e-01, 2.062e-02, -2.939e-01, 6.517e-02, -8.642e-02, 1.384e-02, -5.997e-02, 2.693e-02, -1.360e-02, 2.524e-02, -2.968e-02, 1.342e-02, 5.644e-02, -2.026e-03) * s0_1_0;
	r0 += M4(1.479e-01, 2.789e-01, -3.675e-02, -3.194e-01, -6.826e-02, 2.549e-01, -9.505e-04, 8.471e-02, 2.192e-01, -2.290e-01, 3.311e-01, -3.467e-01, 7.202e-02, -1.185e-02, -2.881e-01, -1.224e-01) * s0_1_1;
	r0 += M4(-7.644e-04, 1.621e-02, -1.730e-02, 1.466e-03, 1.080e-03, -1.703e-02, 3.683e-03, -2.601e-03, -1.740e-02, 4.515e-02, -1.763e-02, 5.115e-02, -6.533e-03, 2.311e-02, 2.826e-02, -5.457e-02) * s0_1_2;
	r0 += M4(1.269e-03, -5.137e-03, 2.966e-02, 3.265e-04, 4.594e-03, -2.711e-02, -1.718e-01, 2.239e-02, 4.639e-03, 1.216e-03, -4.742e-02, 6.007e-03, -2.708e-03, 1.388e-03, -9.709e-03, -4.626e-04) * s0_2_0;
	r0 += M4(-1.481e-02, -9.009e-03, 9.483e-03, 1.826e-02, 3.917e-02, 2.741e-02, -2.954e-02, 1.086e-01, 4.497e-03, 3.122e-03, 2.105e-02, -3.321e-02, 2.846e-03, 1.475e-03, 1.198e-02, 3.736e-03) * s0_2_1;
	r0 += M4(1.077e-03, -3.147e-03, -1.143e-03, 9.409e-03, -2.813e-04, 7.007e-03, 1.907e-04, -7.062e-03, -1.135e-03, 5.196e-03, -8.209e-03, 1.500e-02, -1.186e-03, -1.188e-03, 7.101e-05, -1.289e-03) * s0_2_2;
	r0 += M4(1.936e-02, -1.221e-02, 7.250e-03, -3.828e-03, 7.426e-03, -1.395e-03, 1.493e-03, 2.734e-03, -8.160e-02, -1.195e-02, -2.825e-03, -2.124e-03, -3.509e-03, -1.536e-03, -7.323e-04, -2.258e-03) * s1_0_0;
	r0 += M4(-1.382e-01, 5.481e-02, 3.144e-02, 1.196e-02, 1.654e-02, 1.834e-02, -1.234e-03, 1.386e-04, 9.152e-02, -1.474e-01, -4.088e-03, -8.695e-03, -1.194e-02, -8.781e-03, -7.956e-03, -6.552e-03) * s1_0_1;
	r0 += M4(1.389e-02, -3.060e-02, 7.928e-03, -2.308e-03, 1.954e-03, 4.411e-03, 8.415e-03, 5.323e-03, -9.859e-04, 1.004e-02, -1.483e-03, 2.284e-03, 5.581e-04, -7.696e-04, 2.869e-04, 3.455e-04) * s1_0_2;
	r0 += M4(7.153e-02, -1.363e-02, 6.763e-02, -1.139e-02, 3.723e-02, -1.905e-02, 3.796e-02, 5.780e-03, 1.584e-01, -1.560e-02, 7.886e-02, 1.557e-02, -6.533e-03, -3.586e-03, -2.874e-03, -3.348e-03) * s1_1_0;
	r0 += M4(-7.533e-02, 2.627e-01, -3.603e-01, 2.379e-01, -4.567e-01, -2.802e-02, 1.779e-01, 1.255e-01, 6.088e-02, 8.121e-03, 1.606e-01, -3.476e-01, -6.306e-02, -6.366e-02, -6.454e-02, -6.185e-02) * s1_1_1;
	r0 += M4(1.269e-02, -7.962e-02, 4.841e-03, -7.490e-02, -4.888e-03, -1.470e-01, 1.535e-02, 2.631e-02, -2.026e-03, 9.237e-03, 6.025e-04, 7.747e-03, -4.373e-03, -3.130e-03, -4.293e-03, -4.373e-03) * s1_1_2;
	r0 += M4(-5.314e-03, -5.498e-04, 1.403e-02, -2.847e-03, -3.908e-03, 1.175e-02, -3.908e-03, 4.345e-03, -8.512e-03, -4.549e-03, 3.735e-03, -1.169e-02, 2.319e-03, -5.392e-04, 1.586e-03, 1.358e-03) * s1_2_0;
	r0 += M4(-3.235e-02, -5.836e-03, 6.423e-02, 4.294e-02, -2.029e-02, -2.264e-02, 1.421e-01, -2.741e-02, 7.076e-04, -1.557e-02, 2.501e-02, 6.910e-02, -3.719e-03, -6.014e-03, -5.942e-03, -6.484e-03) * s1_2_1;
	r0 += M4(1.344e-03, -8.437e-03, 1.481e-02, -2.043e-02, 1.405e-02, -1.486e-02, -2.540e-02, 1.923e-02, 1.651e-03, -2.739e-03, -1.441e-03, 6.870e-03, -5.874e-04, 9.071e-04, -1.485e-04, -6.597e-05) * s1_2_2;
	s0_0_0 = G[2][xy.y+0][xy.x+0]; s0_0_1 = G[2][xy.y+0][xy.x+1];
	s0_0_2 = G[2][xy.y+0][xy.x+2]; s0_1_0 = G[2][xy.y+1][xy.x+0];
	s0_1_1 = G[2][xy.y+1][xy.x+1]; s0_1_2 = G[2][xy.y+1][xy.x+2];
	s0_2_0 = G[2][xy.y+2][xy.x+0]; s0_2_1 = G[2][xy.y+2][xy.x+1];
	s0_2_2 = G[2][xy.y+2][xy.x+2];
	r0 += M4(4.942e-02, 1.476e-02, -4.208e-03, -3.561e-03, -5.850e-02, -8.324e-03, -1.917e-02, 1.632e-03, 1.705e-03, 2.277e-03, 1.921e-03, 2.232e-03, 1.106e-01, 9.348e-02, -2.887e-03, -2.314e-03) * s0_0_0;
	r0 += M4(1.125e-02, 4.734e-02, -1.702e-02, -1.440e-02, 1.149e-01, -8.228e-02, -4.540e-02, -5.226e-02, 2.319e-02, -1.720e-03, 6.195e-03, -3.009e-03, -5.240e-03, 2.563e-02, -1.435e-03, 9.100e-04) * s0_0_1;
	r0 += M4(1.412e-03, 9.615e-03, -1.598e-03, -5.781e-03, -3.329e-03, 2.753e-02, -1.306e-02, 5.419e-03, -7.488e-02, 8.166e-02, 1.972e-02, 1.212e-02, -4.945e-04, -3.039e-03, 1.972e-03, 1.444e-03) * s0_0_2;
	r0 += M4(-6.948e-02, 4.229e-02, -4.451e-02, -2.077e-03, 4.675e-02, -1.802e-02, -6.673e-03, -2.520e-02, 9.761e-04, 2.871e-03, 1.350e-03, 1.977e-03, -2.134e-01, -6.275e-02, 2.437e-01, -1.357e-01) * s0_1_0;
	r0 += M4(1.091e-01, -4.443e-01, 1.037e-01, 2.312e-01, -3.454e-02, 5.320e-02, 1.499e-01, 2.241e-01, 2.251e-01, 1.669e-02, 9.565e-02, -7.237e-03, 3.478e-02, 1.027e-01, 2.780e-03, 1.478e-01) * s0_1_1;
	r0 += M4(-1.996e-02, 6.860e-02, -5.570e-03, 1.740e-02, 4.070e-03, -1.107e-02, 7.745e-03, 2.313e-02, -6.634e-02, -1.761e-01, -1.496e-01, 1.577e-01, 3.704e-03, -1.874e-03, 4.036e-03, -1.247e-03) * s0_1_2;
	r0 += M4(-6.817e-04, 8.313e-03, 1.544e-02, 7.570e-03, 2.954e-03, -3.075e-03, 2.710e-03, -2.726e-03, 9.740e-05, -3.118e-05, -2.370e-03, -4.282e-05, 2.759e-02, 7.557e-03, -9.178e-02, -5.339e-03) * s0_2_0;
	r0 += M4(3.600e-02, 2.944e-02, -1.556e-01, -1.211e-02, -2.038e-03, 4.485e-03, -4.009e-03, 6.530e-03, -5.981e-02, 2.878e-02, 7.153e-02, 1.807e-02, 3.106e-02, 3.412e-02, 2.727e-03, -5.028e-02) * s0_2_1;
	r0 += M4(-3.417e-03, 2.619e-02, 1.697e-02, -6.750e-03, 4.747e-03, 3.792e-03, 4.838e-03, 4.935e-04, 9.446e-03, -8.613e-03, -2.962e-02, -1.204e-01, -3.024e-03, 5.117e-03, -2.931e-03, -2.010e-02) * s0_2_2;
	r0 += V4(2.357e-03, 2.258e-03, 2.205e-03, 2.159e-03);
	r0 = r0;
	vec2 opt = 0.5 * LUMA_pt;
	vec2 fpos = (vec2(opos) + vec2(0.5)) * opt;
	imageStore(out_image, opos + ivec2(0, 0), vec4(r0.x + LUMA_tex(fpos + vec2(0.0, 0.0) * opt).r, 0.0, 0.0, 1.0));
	imageStore(out_image, opos + ivec2(1, 0), vec4(r0.y + LUMA_tex(fpos + vec2(1.0, 0.0) * opt).r, 0.0, 0.0, 1.0));
	imageStore(out_image, opos + ivec2(0, 1), vec4(r0.z + LUMA_tex(fpos + vec2(0.0, 1.0) * opt).r, 0.0, 0.0, 1.0));
	imageStore(out_image, opos + ivec2(1, 1), vec4(r0.w + LUMA_tex(fpos + vec2(1.0, 1.0) * opt).r, 0.0, 0.0, 1.0));
}
