// CuNNy fast
// Copyright (c) 2024 funnyplanter

// This program is free software; you can redistribute it and/or
// modify it under the terms of the GNU Lesser General Public
// License as published by the Free Software Foundation; either
// version 3.0 of the License, or (at your option) any later version.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
// Lesser General Public License for more details.
//
// You should have received a copy of the GNU Lesser General Public
// License along with this program.  If not, see <https://www.gnu.org/licenses/>.
/* ------------------------------------------------------------------- */


//!DESC CuNNy-fast-in
//!HOOK LUMA
//!COMPUTE 24 8 8 8
//!BIND LUMA
//!SAVE in
//!WIDTH LUMA.w 3 *
//!HEIGHT LUMA.h
//!COMPONENTS 4
//!WHEN OUTPUT.w LUMA.w / 1.3 > OUTPUT.h LUMA.h / 1.3 > *
#extension GL_EXT_shader_explicit_arithmetic_types_float16 : enable
#ifdef GL_EXT_shader_explicit_arithmetic_types_float16
#	define V4 f16vec4
#	define M4 f16mat4
#	define F float16_t
#else
#	define V4 vec4
#	define M4 mat4
#	define F float
#endif
#define l0(x, y) F((LUMA_mul * texelFetch(LUMA_raw, clamp(pos + ivec2(x, y), ivec2(0), sz) * ivec2(1, 1) + ivec2(0, 0), 0)).r)
shared F G[1][10][10];
void hook() {
	ivec2 xy = ivec2(gl_LocalInvocationID.xy);
	ivec2 pos = ivec2(gl_WorkGroupID.xy) * ivec2(8, 8) + xy;
	ivec2 opos = pos * ivec2(3, 1);
	ivec2 sz = ivec2(LUMA_size) - ivec2(1);
	for (int y = 0; y < 10; y += 8) {
		int ay = xy.y + y;
		if (ay >= 10) break;
		for (int x = 0; x < 10; x += 8) {
			int ax = xy.x + x;
			if (ax >= 10) break;
			G[0][ay][ax] = l0(x - 1, y - 1);
		}
	}
	barrier();
	F s0_0_0, s0_0_1, s0_0_2, s0_1_0, s0_1_1, s0_1_2, s0_2_0, s0_2_1, s0_2_2;
	V4 r0, r1, r2;
	r0 = V4(0.0); r1 = V4(0.0); r2 = V4(0.0);
	s0_0_0 = G[0][xy.y+0][xy.x+0]; s0_0_1 = G[0][xy.y+0][xy.x+1];
	s0_0_2 = G[0][xy.y+0][xy.x+2]; s0_1_0 = G[0][xy.y+1][xy.x+0];
	s0_1_1 = G[0][xy.y+1][xy.x+1]; s0_1_2 = G[0][xy.y+1][xy.x+2];
	s0_2_0 = G[0][xy.y+2][xy.x+0]; s0_2_1 = G[0][xy.y+2][xy.x+1];
	s0_2_2 = G[0][xy.y+2][xy.x+2];
	r0 += V4(5.260e-02, -1.179e-01, -7.555e-05, -5.115e-02) * s0_0_0;
	r1 += V4(-5.580e-03, 7.352e-02, 5.794e-02, -4.637e-02) * s0_0_0;
	r2 += V4(3.197e-03, -1.876e-01, 1.786e-02, 2.663e-02) * s0_0_0;
	r0 += V4(1.435e-01, -8.794e-02, -1.167e-01, 8.325e-01) * s0_0_1;
	r1 += V4(1.519e-02, -7.500e-02, -8.258e-03, 6.748e-02) * s0_0_1;
	r2 += V4(6.038e-04, 4.395e-01, 9.075e-02, 6.025e-02) * s0_0_1;
	r0 += V4(-2.056e-01, 2.173e-01, -3.263e-02, -8.371e-02) * s0_0_2;
	r1 += V4(-2.541e-02, 2.768e-03, -9.411e-02, -9.125e-02) * s0_0_2;
	r2 += V4(-5.270e-03, 8.590e-02, -1.227e-01, 9.244e-02) * s0_0_2;
	r0 += V4(-8.220e-01, -2.078e-01, -4.850e-02, 8.321e-02) * s0_1_0;
	r1 += V4(-7.861e-03, 9.551e-01, 1.645e-01, -3.294e-02) * s0_1_0;
	r2 += V4(-1.814e-03, -6.115e-02, -7.650e-02, 1.151e-01) * s0_1_0;
	r0 += V4(6.768e-01, 8.613e-01, 1.052e+00, -7.559e-01) * s0_1_1;
	r1 += V4(-5.937e-02, -9.552e-01, -9.728e-01, -2.845e-01) * s0_1_1;
	r2 += V4(-1.139e+00, -8.604e-02, 1.250e-01, -1.553e+00) * s0_1_1;
	r0 += V4(1.153e-01, 1.510e-01, -1.675e-01, -6.326e-01) * s0_1_2;
	r1 += V4(-1.074e+00, -2.925e-03, 4.140e-01, -8.102e-03) * s0_1_2;
	r2 += V4(1.145e+00, -5.877e-03, 9.076e-01, 2.259e-01) * s0_1_2;
	r0 += V4(7.488e-01, 3.193e-01, -1.215e-01, -3.288e-02) * s0_2_0;
	r1 += V4(1.718e-02, 5.795e-03, 2.857e-01, 2.426e-02) * s0_2_0;
	r2 += V4(-8.516e-03, 5.607e-03, 5.932e-02, 1.324e-01) * s0_2_0;
	r0 += V4(-8.053e-01, -7.649e-01, -1.899e-01, -7.680e-02) * s0_2_1;
	r1 += V4(4.071e-02, -8.215e-04, -6.113e-02, -1.690e-01) * s0_2_1;
	r2 += V4(-5.425e-03, 1.204e-02, -9.199e-01, 3.535e-01) * s0_2_1;
	r0 += V4(9.253e-02, -3.714e-01, -8.005e-02, 7.161e-01) * s0_2_2;
	r1 += V4(1.099e+00, -3.331e-03, 2.115e-01, 6.895e-01) * s0_2_2;
	r2 += V4(1.563e-02, -2.647e-02, -8.211e-02, 1.131e-01) * s0_2_2;
	r0 += V4(9.752e-07, -1.088e-03, 6.615e-03, -9.720e-04);
	r0 = max(r0, V4(0.0));
	imageStore(out_image, opos + ivec2(0, 0), vec4(r0));
	r1 += V4(-5.049e-04, -3.090e-06, 9.144e-03, 3.772e-02);
	r1 = max(r1, V4(0.0));
	imageStore(out_image, opos + ivec2(1, 0), vec4(r1));
	r2 += V4(9.328e-05, 1.597e-03, -1.356e-03, -6.963e-03);
	r2 = max(r2, V4(0.0));
	imageStore(out_image, opos + ivec2(2, 0), vec4(r2));
}

//!DESC CuNNy-fast-conv1
//!HOOK LUMA
//!COMPUTE 24 8 8 8
//!BIND in
//!BIND LUMA
//!SAVE conv1
//!WIDTH LUMA.w 3 *
//!HEIGHT LUMA.h
//!COMPONENTS 4
//!WHEN OUTPUT.w LUMA.w / 1.3 > OUTPUT.h LUMA.h / 1.3 > *
#extension GL_EXT_shader_explicit_arithmetic_types_float16 : enable
#ifdef GL_EXT_shader_explicit_arithmetic_types_float16
#	define V4 f16vec4
#	define M4 f16mat4
#	define F float16_t
#else
#	define V4 vec4
#	define M4 mat4
#	define F float
#endif
#define l0(x, y) V4((in_mul * texelFetch(in_raw, clamp(pos + ivec2(x, y), ivec2(0), sz) * ivec2(3, 1) + ivec2(0, 0), 0)))
#define l1(x, y) V4((in_mul * texelFetch(in_raw, clamp(pos + ivec2(x, y), ivec2(0), sz) * ivec2(3, 1) + ivec2(1, 0), 0)))
#define l2(x, y) V4((in_mul * texelFetch(in_raw, clamp(pos + ivec2(x, y), ivec2(0), sz) * ivec2(3, 1) + ivec2(2, 0), 0)))
shared V4 G[3][10][10];
void hook() {
	ivec2 xy = ivec2(gl_LocalInvocationID.xy);
	ivec2 pos = ivec2(gl_WorkGroupID.xy) * ivec2(8, 8) + xy;
	ivec2 opos = pos * ivec2(3, 1);
	ivec2 sz = ivec2(LUMA_size) - ivec2(1);
	for (int y = 0; y < 10; y += 8) {
		int ay = xy.y + y;
		if (ay >= 10) break;
		for (int x = 0; x < 10; x += 8) {
			int ax = xy.x + x;
			if (ax >= 10) break;
			G[0][ay][ax] = l0(x - 1, y - 1);
			G[1][ay][ax] = l1(x - 1, y - 1);
			G[2][ay][ax] = l2(x - 1, y - 1);
		}
	}
	barrier();
	V4 s0_0_0, s0_0_1, s0_0_2, s0_1_0, s0_1_1, s0_1_2, s0_2_0, s0_2_1, s0_2_2, s1_0_0, s1_0_1, s1_0_2, s1_1_0, s1_1_1, s1_1_2, s1_2_0, s1_2_1, s1_2_2;
	V4 r0, r1, r2;
	r0 = V4(0.0); r1 = V4(0.0); r2 = V4(0.0);
	s0_0_0 = G[0][xy.y+0][xy.x+0]; s0_0_1 = G[0][xy.y+0][xy.x+1];
	s0_0_2 = G[0][xy.y+0][xy.x+2]; s0_1_0 = G[0][xy.y+1][xy.x+0];
	s0_1_1 = G[0][xy.y+1][xy.x+1]; s0_1_2 = G[0][xy.y+1][xy.x+2];
	s0_2_0 = G[0][xy.y+2][xy.x+0]; s0_2_1 = G[0][xy.y+2][xy.x+1];
	s0_2_2 = G[0][xy.y+2][xy.x+2]; s1_0_0 = G[1][xy.y+0][xy.x+0];
	s1_0_1 = G[1][xy.y+0][xy.x+1]; s1_0_2 = G[1][xy.y+0][xy.x+2];
	s1_1_0 = G[1][xy.y+1][xy.x+0]; s1_1_1 = G[1][xy.y+1][xy.x+1];
	s1_1_2 = G[1][xy.y+1][xy.x+2]; s1_2_0 = G[1][xy.y+2][xy.x+0];
	s1_2_1 = G[1][xy.y+2][xy.x+1]; s1_2_2 = G[1][xy.y+2][xy.x+2];
	r0 += M4(2.074e-01, -2.742e-01, 2.632e-01, -3.652e-02, -2.368e-01, 1.880e-01, 1.058e-01, 7.055e-02, 4.528e-01, -4.279e-01, -1.600e-01, -4.787e-01, 3.701e-01, 1.462e-01, 2.229e-02, -8.511e-02) * s0_0_0;
	r1 += M4(6.131e-01, -3.032e-01, 7.362e-02, -8.275e-02, -6.777e-01, 2.074e-01, -2.340e-01, 2.579e-01, 2.785e-01, -1.731e-01, 1.882e-01, -2.783e-01, 2.004e-01, -8.534e-02, 5.147e-02, 1.204e-01) * s0_0_0;
	r2 += M4(8.381e-02, 1.577e-03, 2.322e-01, 1.435e-02, 4.815e-03, -1.398e-01, 8.265e-02, -1.078e-01, -5.617e-02, -2.486e-01, -1.545e-01, 1.438e-01, -6.644e-02, -5.996e-03, 4.494e-02, 6.048e-02) * s0_0_0;
	r0 += M4(6.816e-01, -6.855e-01, -4.291e-01, -3.172e-02, -5.190e-01, 4.105e-01, 6.388e-02, -3.792e-01, -5.338e-01, -3.817e-01, -1.392e-01, 4.926e-01, -6.805e-02, 1.167e-01, 6.017e-02, -1.285e-01) * s0_0_1;
	r1 += M4(3.333e-01, -2.154e-01, 9.036e-02, -6.223e-02, 4.560e-01, -6.236e-01, -2.419e-01, -1.519e+00, -7.556e-01, 2.148e-01, -1.784e-01, 3.032e-01, -1.224e-01, 1.521e-01, 7.706e-02, 1.344e-01) * s0_0_1;
	r2 += M4(2.634e-01, -2.323e-02, 1.401e-01, 9.577e-02, -5.234e-03, -9.365e-02, 2.494e-02, -2.055e-01, -3.411e-01, -2.400e-01, 2.073e-01, -7.467e-01, 2.778e-01, 1.087e-01, 9.002e-03, 1.402e-01) * s0_0_1;
	r0 += M4(7.839e-01, 6.752e-02, -5.171e-01, -1.095e-01, 6.612e-01, 3.105e-01, -5.531e-01, 1.186e-01, -5.566e-01, 4.748e-02, 1.647e-01, 1.948e-01, 2.766e-01, 1.733e-01, -1.447e-01, 1.872e-02) * s0_0_2;
	r1 += M4(8.301e-01, 3.485e-01, 1.721e-02, 7.398e-01, 3.378e-01, -5.397e-02, -3.577e-02, -5.496e-02, -1.912e-01, -3.879e-01, -1.079e-01, -1.192e-01, -3.103e-01, 1.945e-01, 1.122e-01, 2.145e-01) * s0_0_2;
	r2 += M4(2.928e-02, -1.676e-01, 1.704e-01, 1.290e-01, -2.219e-01, -3.139e-02, 7.606e-02, 1.352e-01, 2.430e-01, 3.527e-01, -6.422e-02, 2.808e-01, -1.809e-02, -1.371e-01, 2.991e-03, 1.858e-02) * s0_0_2;
	r0 += M4(1.594e-01, -6.282e-02, 2.218e-01, -6.889e-02, 9.461e-02, 4.521e-01, -3.779e-01, -1.220e-01, 7.690e-02, 3.675e-02, -5.613e-01, 1.618e-01, 2.339e-01, 3.721e-01, 2.529e-01, 5.835e-02) * s0_1_0;
	r1 += M4(3.704e-01, -2.515e-01, 2.251e-02, -1.202e-01, -5.449e-01, 5.613e-01, -1.432e-01, 2.192e-01, 5.084e-01, -2.417e-01, -2.445e-01, -7.805e-01, 3.223e-01, -7.606e-02, 2.444e-01, 4.687e-02) * s0_1_0;
	r2 += M4(-1.149e-02, 8.403e-02, 5.866e-02, -1.108e-01, -4.355e-01, -7.442e-02, -1.997e-01, -6.109e-02, -1.917e-01, -1.013e-01, 8.066e-01, -3.769e-01, -2.494e-01, 3.240e-02, -2.010e-01, -1.786e-01) * s0_1_0;
	r0 += M4(5.371e-01, -2.313e-01, -7.425e-02, 4.502e-01, -2.009e+00, 5.908e-01, -8.945e-02, 2.712e-01, -1.594e-01, 2.723e-01, 3.079e-02, 3.428e-01, 2.093e-01, 6.074e-01, -1.800e-01, 4.209e-01) * s0_1_1;
	r1 += M4(5.263e-01, -2.606e-01, -2.646e-01, -3.413e-01, -1.048e-01, -1.724e-01, -2.503e-01, 5.673e-01, -1.540e-01, 3.257e-01, 6.931e-01, 3.877e-01, 6.738e-01, 4.997e-01, -1.983e-01, 3.270e-01) * s0_1_1;
	r2 += M4(4.604e-01, -1.101e-01, 3.057e-01, 3.829e-01, -6.212e-01, -1.948e-01, -1.053e-01, -9.422e-02, 9.434e-01, 1.032e+00, -1.186e+00, 5.916e-01, 1.135e-01, 1.041e-01, 3.597e-02, 2.540e-01) * s0_1_1;
	r0 += M4(1.696e+00, -7.287e-01, -2.352e-01, -3.822e-02, 3.530e-01, 2.400e-01, 9.978e-01, 1.428e-01, -6.763e-02, -3.933e-01, 7.287e-01, -2.083e-01, 1.936e-01, 1.418e-01, 3.016e-02, 4.501e-02) * s0_1_2;
	r1 += M4(1.069e-02, 3.644e-01, -1.045e-01, 4.248e-01, 4.912e-01, -2.113e-02, -9.229e-02, -1.643e-01, 1.066e-01, 6.982e-01, 2.628e-01, -1.210e-01, -8.666e-01, 3.625e-01, -2.879e-01, 3.767e-01) * s0_1_2;
	r2 += M4(2.901e-01, -6.801e-01, -9.001e-03, 2.890e-01, -5.645e-01, 8.853e-02, 5.011e-02, 9.120e-02, -8.353e-01, -1.343e-01, 6.308e-02, -4.506e-01, 6.374e-02, 1.753e-01, -9.368e-02, -6.867e-02) * s0_1_2;
	r0 += M4(1.195e-01, 6.412e-02, 3.231e-01, -4.485e-02, 1.962e-01, 1.714e-01, -3.765e-01, 9.922e-02, 4.132e-01, 3.733e-01, 6.570e-01, -1.664e-01, 3.784e-01, 4.005e-01, 2.873e-01, 9.497e-02) * s0_2_0;
	r1 += M4(3.037e-01, -8.884e-02, -2.748e-02, 3.758e-02, -4.170e-01, 2.497e-01, 5.169e-02, 2.375e-01, 3.016e-01, 5.197e-02, -1.861e-01, 4.330e-01, 2.765e-02, -7.137e-02, 8.230e-02, -1.073e-01) * s0_2_0;
	r2 += M4(-1.175e-01, 8.427e-02, -4.077e-02, -5.348e-02, 6.360e-02, 3.982e-02, -6.524e-02, -7.308e-02, -3.545e-01, 2.617e-01, -2.802e-01, -1.638e-01, 4.795e-01, 1.904e-01, 1.449e-01, 6.106e-02) * s0_2_0;
	r0 += M4(-1.585e-01, 6.454e-02, 5.996e-01, 1.104e-01, 3.012e-02, 2.461e-01, -1.130e-02, 8.179e-02, 4.197e-01, -5.131e-01, -1.409e-01, -5.069e-01, -2.692e+00, 3.936e-01, -3.779e-01, 5.757e-01) * s0_2_1;
	r1 += M4(2.228e-01, -1.472e-01, -5.578e-02, 1.796e-01, 1.389e-02, 3.986e-01, 1.241e-01, -2.300e-01, -1.125e-01, -4.380e-02, -1.326e-01, -3.173e-01, -1.149e-01, 3.752e-01, -1.693e-01, 3.330e-01) * s0_2_1;
	r2 += M4(-4.736e-01, 1.665e-01, 5.586e-02, 7.666e-02, 1.780e-01, 6.224e-02, -1.580e-01, -1.144e-01, -3.520e-01, -6.967e-01, 7.949e-01, 3.251e-01, 4.679e-01, 2.768e-01, -2.597e-02, 1.234e-01) * s0_2_1;
	r0 += M4(3.321e-01, -4.686e-01, 9.655e-01, 1.526e-01, -7.432e-02, 3.475e-01, -1.885e-02, -8.835e-02, 5.029e-01, 4.945e-01, -5.162e-01, 1.385e-01, 6.661e-01, 7.319e-03, -1.072e-01, 1.225e-01) * s0_2_2;
	r1 += M4(3.351e-01, 1.217e-01, 3.092e-02, 4.379e-01, -1.201e-01, -1.382e-02, 6.031e-02, -1.404e-01, 6.066e-02, -2.111e-01, -2.006e-01, 2.818e-01, -4.429e-01, 3.213e-01, -9.685e-02, 3.909e-01) * s0_2_2;
	r2 += M4(3.781e-01, -5.911e-02, 1.521e-01, 7.924e-02, -4.736e-01, 2.522e-01, -7.444e-02, -1.091e-01, 2.858e-01, -2.201e-01, -3.378e-02, 2.575e-01, 9.169e-02, 1.934e-01, 2.289e-02, -2.457e-02) * s0_2_2;
	r0 += M4(1.535e-01, -2.003e-01, -7.819e-01, -3.216e-01, -1.243e-01, 5.456e-02, 1.174e-01, -8.312e-02, 4.430e-01, 6.541e-02, 1.052e-01, 8.296e-02, -5.695e-01, 1.512e-01, 3.409e-01, -6.076e-02) * s1_0_0;
	r1 += M4(-1.516e-01, 1.298e-02, 3.213e-01, -2.428e+00, 2.165e-01, -6.144e-02, -5.835e-02, -2.321e-01, -4.117e-02, -2.506e-01, 8.033e-02, 5.203e-01, -4.053e-01, -3.165e-01, -3.037e-01, 6.446e-01) * s1_0_0;
	r2 += M4(1.952e-01, -4.561e-01, 1.519e-01, 4.233e-01, -5.543e-02, -6.985e-02, -7.984e-02, -3.161e-02, -9.898e-02, 9.546e-02, -1.673e-02, 3.355e-01, 1.569e-01, 6.877e-01, -1.673e-02, 4.801e-02) * s1_0_0;
	r0 += M4(9.757e-02, -1.174e-01, -4.672e-01, 1.871e-01, -5.254e-01, 3.545e-01, -2.763e-01, -4.531e-02, 3.104e-01, 1.467e-01, 6.106e-01, -5.837e-02, -2.546e-02, 2.277e-01, 4.925e-01, -6.939e-02) * s1_0_1;
	r1 += M4(-1.895e+00, 3.696e-01, 9.044e-02, 8.548e-01, -1.675e-02, -1.106e-01, -2.211e-01, -1.724e+00, -1.888e-01, 2.890e-01, -9.014e-02, 6.795e-01, 1.628e+00, 1.105e-01, 1.369e-01, -7.388e-01) * s1_0_1;
	r2 += M4(2.560e-01, -3.160e-02, -5.367e-02, 9.655e-02, -4.241e-02, 1.958e-01, 3.858e-01, -6.109e-02, 6.422e-02, 2.417e-01, 2.180e-01, 1.448e-01, 2.384e-01, 2.139e-01, -8.350e-02, 1.316e-01) * s1_0_1;
	r0 += M4(-4.475e-02, -8.807e-02, -9.375e-02, -3.181e-02, 4.385e-01, -1.179e-01, 2.027e-01, -3.837e-02, -4.410e-01, 2.281e-01, -1.851e-01, 9.173e-02, -2.164e-02, -3.099e-03, 6.660e-01, 4.133e-02) * s1_0_2;
	r1 += M4(1.451e-01, 1.648e-01, 8.601e-02, 2.193e-01, -7.274e-02, 2.332e-02, 4.385e-01, 4.441e-01, 2.210e-01, -2.046e-01, 6.931e-02, -8.625e-01, 2.295e-01, -2.110e-01, -1.509e-02, -2.393e-01) * s1_0_2;
	r2 += M4(-7.429e-02, 5.777e-02, 2.359e-02, -7.663e-02, 9.192e-02, -2.489e-02, 3.381e-02, -4.530e-02, 1.787e-01, 3.271e-01, -2.298e-03, 8.087e-02, -2.629e-01, -2.206e-02, 4.321e-02, 6.455e-02) * s1_0_2;
	r0 += M4(-4.393e-01, -2.653e-01, -4.262e-01, -2.799e-02, 9.429e-02, 1.455e-01, -2.133e-01, -5.414e-02, -1.838e-01, -3.464e-01, 1.040e-01, 2.387e-01, 8.919e-02, -1.395e-01, -5.333e-01, 2.156e-02) * s1_1_0;
	r1 += M4(3.976e-02, -2.038e-01, 4.646e-01, -8.537e-01, -4.213e-02, -3.015e-02, -6.189e-02, -4.546e-02, -3.205e-01, 3.495e-03, 1.614e-01, -8.794e-02, -5.436e-01, 8.136e-02, -4.401e-01, 7.572e-01) * s1_1_0;
	r2 += M4(-9.824e-01, 2.779e-01, 2.143e-01, 9.116e-02, 9.057e-02, 5.209e-02, -7.256e-02, 4.696e-02, -1.432e-01, 1.720e-01, 2.104e-01, -3.172e-02, 6.636e-01, -4.446e-01, -1.197e-01, 1.035e-01) * s1_1_0;
	r0 += M4(2.072e-01, -5.632e-01, -1.781e+00, -8.428e-03, -4.769e-02, -4.014e-01, 5.645e-01, 7.618e-02, 2.998e-01, 5.772e-02, 1.518e-01, -3.430e-02, -9.675e-01, 1.102e-02, -5.514e-01, -1.394e-01) * s1_1_1;
	r1 += M4(-1.774e+00, 2.631e-02, -7.363e-01, -1.095e-01, -2.316e-01, 1.545e-01, 1.495e-01, -1.503e+00, -3.327e-01, 3.348e-01, -3.180e-01, 1.356e+00, -5.336e-01, -4.357e-02, 1.524e-01, 2.475e-02) * s1_1_1;
	r2 += M4(4.745e-02, 2.549e-01, 1.166e-02, -8.156e-02, -2.101e-01, -3.525e-01, 5.005e-01, 3.223e-01, -2.533e-01, -2.893e-01, 4.008e-03, -1.741e-01, -1.161e-01, 1.512e-01, 9.061e-02, -1.622e-01) * s1_1_1;
	r0 += M4(2.341e-01, -1.929e-01, -2.418e-01, -1.010e-01, -7.168e-01, 2.003e-01, -7.226e-01, 5.707e-01, -5.645e-01, 6.808e-01, 8.277e-01, -8.897e-02, 6.769e-02, 4.131e-01, 3.159e-01, 2.222e-01) * s1_1_2;
	r1 += M4(2.124e-01, 1.356e-02, -1.694e-01, 1.261e-02, -1.501e+01, -4.175e-01, -6.698e-01, -7.344e-02, 1.080e-01, -4.145e-02, 5.956e-01, -2.303e-01, 4.214e-01, -2.190e-01, -3.321e-02, 5.040e-02) * s1_1_2;
	r2 += M4(-1.741e-02, -1.503e-02, 1.895e-03, -2.960e-02, 3.899e-01, 9.339e-02, -2.983e-01, 2.020e-02, -1.925e-02, -7.521e-02, 8.493e-02, 3.909e-02, -1.221e-01, 5.127e-02, 2.342e-02, 3.656e-02) * s1_1_2;
	r0 += M4(-3.142e+00, 8.457e-02, 2.656e-01, -2.509e-01, 3.271e-01, 4.138e-02, -7.916e-02, -2.775e-02, -5.073e-01, 8.006e-02, 3.276e-01, 1.114e-01, 2.805e-01, -1.145e-01, -5.048e-01, 2.995e-01) * s1_2_0;
	r1 += M4(-6.998e-02, -1.284e-01, -3.095e-01, 2.547e-02, 1.495e-01, -1.189e-01, -1.187e-01, -2.725e-02, 3.289e-01, 3.730e-02, 1.593e-03, -7.786e-03, -7.365e-02, 1.687e-01, 2.750e-01, 4.015e-02) * s1_2_0;
	r2 += M4(-8.226e-01, -1.739e-02, -1.849e-01, 1.830e-02, -8.658e-02, -1.206e-01, 1.477e-02, -2.449e-02, 4.226e-02, -1.558e-02, 1.249e-01, 1.087e-01, 3.091e-01, -2.572e-02, 3.495e-02, 8.363e-03) * s1_2_0;
	r0 += M4(-2.305e+00, -4.561e-01, 4.053e-01, -1.359e-01, -1.571e+00, -1.220e-01, -2.051e-01, -7.732e-03, 8.027e-01, -1.333e-01, -1.025e-01, -1.782e-01, 8.969e-01, 3.229e-01, 2.606e-01, -1.555e-01) * s1_2_1;
	r1 += M4(2.143e-01, -2.368e-01, -2.529e-01, -1.377e-01, 4.744e-02, -3.248e-01, 4.299e-01, -7.402e-01, -8.706e-02, 1.194e-01, -2.973e-02, 1.060e-01, 1.018e-01, 4.936e-02, 4.306e-01, -1.186e-02) * s1_2_1;
	r2 += M4(-5.734e-01, -2.300e-01, 1.542e-02, -9.347e-03, -4.138e-01, -3.037e-01, 4.484e-01, 2.528e-01, 2.508e-01, -6.512e-02, 1.136e-01, -9.428e-02, 3.508e-01, -1.511e-01, 3.014e-02, 6.150e-02) * s1_2_1;
	r0 += M4(-4.788e-01, -2.921e-01, 3.851e-01, 5.543e-03, -3.042e+00, -1.303e-02, -6.970e-01, 8.668e-02, 8.278e-01, 5.333e-01, -2.737e-01, 9.394e-02, -1.395e-01, 2.518e-01, -2.881e-01, -1.166e-01) * s1_2_2;
	r1 += M4(3.868e-01, -4.938e-02, -1.659e-01, 5.810e-02, -5.910e-01, -1.226e-01, -1.421e-01, 4.504e-01, 6.481e-02, 1.436e-01, 3.348e-01, 9.817e-02, -1.656e-01, -1.438e-01, 1.881e-01, -3.512e-01) * s1_2_2;
	r2 += M4(-1.024e-01, -1.210e-01, 2.460e-02, -1.402e-02, -1.243e-01, 3.441e-01, -7.112e-02, -1.143e-01, 8.393e-02, 1.773e-02, 5.917e-02, 1.381e-01, -1.041e-01, 4.553e-03, -7.528e-02, 1.995e-02) * s1_2_2;
	s0_0_0 = G[2][xy.y+0][xy.x+0]; s0_0_1 = G[2][xy.y+0][xy.x+1];
	s0_0_2 = G[2][xy.y+0][xy.x+2]; s0_1_0 = G[2][xy.y+1][xy.x+0];
	s0_1_1 = G[2][xy.y+1][xy.x+1]; s0_1_2 = G[2][xy.y+1][xy.x+2];
	s0_2_0 = G[2][xy.y+2][xy.x+0]; s0_2_1 = G[2][xy.y+2][xy.x+1];
	s0_2_2 = G[2][xy.y+2][xy.x+2];
	r0 += M4(4.238e-01, -4.611e-02, 2.361e-01, -2.920e-01, -5.567e-01, 2.964e-02, 1.486e-01, -2.955e-02, 1.045e-01, -4.142e-01, -5.842e-01, -3.077e-01, -4.815e-01, 2.936e-01, 5.589e-02, 2.562e-01) * s0_0_0;
	r1 += M4(3.769e-01, -2.146e-01, 1.519e-01, -4.455e-01, -1.598e-01, -1.616e-01, -7.398e-02, -5.742e-01, -1.600e-01, -3.466e-01, -4.432e-02, -6.879e-01, -1.824e-01, 2.465e-01, -1.342e-01, 6.215e-01) * s0_0_0;
	r2 += M4(1.636e-01, -2.641e-01, -1.255e-01, 2.568e-01, 3.123e-02, -6.411e-02, -1.876e-01, 4.062e-02, 2.602e-03, -1.502e-01, 1.967e-01, 2.730e-01, 1.697e-01, 1.193e-01, 8.128e-02, -1.358e-01) * s0_0_0;
	r0 += M4(-3.998e-01, -6.719e-02, -5.716e-02, -2.597e-01, 5.480e-02, -1.943e-01, 1.805e-01, 5.019e-02, -1.817e-01, -5.620e-01, -8.401e-01, 7.766e-02, 2.897e-01, 6.546e-02, 1.138e-01, -6.428e-01) * s0_0_1;
	r1 += M4(-2.446e-01, -6.442e-03, -1.655e-01, -7.404e-01, -2.181e-01, -5.140e-01, -1.062e-01, 2.829e-01, -7.981e-01, 2.177e-02, 5.536e-01, -5.446e-01, 2.247e-02, 3.047e-02, 9.193e-02, -1.407e-01) * s0_0_1;
	r2 += M4(-1.452e-02, -1.132e-01, -4.697e-02, -1.924e-01, -2.745e-01, 3.581e-01, 1.365e-01, 4.795e-02, 3.358e-01, -3.879e-01, 8.828e-02, 1.158e-01, 1.089e-01, 4.219e-01, -2.282e-01, 2.996e-01) * s0_0_1;
	r0 += M4(1.097e-01, -2.098e-02, -2.128e-01, -1.378e-02, -2.430e-01, -4.274e-01, 2.395e-01, 4.209e-02, -2.300e-02, -2.367e-01, 4.657e-02, -2.202e-02, 4.463e-01, -6.929e-02, 4.569e-01, -1.421e-01) * s0_0_2;
	r1 += M4(-9.614e-01, 3.985e-01, 1.569e-01, 8.562e-01, 1.732e-01, 1.551e-01, 9.650e-02, -2.404e-01, -2.102e-02, -3.026e-01, -3.041e-02, -3.568e-01, 1.797e+00, -8.958e-02, -6.579e-02, -7.721e-01) * s0_0_2;
	r2 += M4(-8.917e-02, -1.616e-01, 1.419e-03, -6.238e-02, 2.217e-01, 1.644e-01, 1.823e-02, -5.796e-02, 2.476e-01, -5.341e-02, -2.012e-02, 6.525e-02, 1.590e-01, -4.875e-02, 1.902e-01, -3.552e-02) * s0_0_2;
	r0 += M4(9.938e-03, 6.721e-01, -7.226e-02, 5.530e-01, 5.955e-01, 4.650e-01, -2.005e-02, 1.341e-01, 3.069e-01, -6.491e-01, 5.397e-01, 1.701e-01, 3.185e-01, 2.334e-02, 3.751e-01, -2.424e-01) * s0_1_0;
	r1 += M4(5.761e-01, -3.158e-01, 1.226e-01, -6.920e-01, 3.195e-01, 2.026e-01, 1.590e-02, -2.406e-03, -2.868e-02, -6.355e-01, -4.209e-01, 2.418e-02, -3.783e-01, 2.565e-01, 2.337e-01, 4.378e-01) * s0_1_0;
	r2 += M4(-6.308e-01, -1.238e-01, 5.272e-01, 5.450e-01, 3.157e-01, 4.073e-01, -8.446e-02, 2.265e-01, -1.475e-01, 1.268e-01, 4.541e-01, 2.723e-01, 1.493e-01, 1.363e-01, -7.012e-01, 3.101e-02) * s0_1_0;
	r0 += M4(-1.484e-01, -3.866e-03, -2.117e+00, -8.128e-02, 2.329e-01, 2.713e-01, -6.877e-01, -1.857e-01, -6.607e+00, -2.669e-01, -9.371e-01, 2.339e-01, -7.789e-01, -1.078e-02, -2.842e-01, -5.417e-01) * s0_1_1;
	r1 += M4(3.374e-03, 2.775e-02, 1.067e+00, -1.966e+00, 4.705e-01, 1.476e+00, 2.691e-02, -5.650e-01, 2.711e-02, -9.164e-02, -9.215e-02, 2.406e-01, -3.289e-01, 3.075e-01, -5.627e-01, 5.429e-01) * s0_1_1;
	r2 += M4(-5.541e-01, -4.541e-01, 2.282e-01, 1.365e-01, -7.901e-01, -4.482e-01, 1.470e-01, -4.020e-01, 1.161e+00, 7.241e-01, 8.139e-02, 1.519e-01, -1.535e+00, -1.161e+01, 1.989e-01, -5.956e-01) * s0_1_1;
	r0 += M4(1.313e-01, -2.598e-01, -6.538e-01, 1.283e-02, 2.941e-01, 2.103e-01, -7.607e-01, -1.684e-01, -3.108e-01, -2.100e-02, -2.922e-02, 1.228e-01, -4.148e-01, 2.004e-01, 6.953e-01, -1.872e-01) * s0_1_2;
	r1 += M4(-2.122e+00, 3.519e-01, -1.778e-01, 5.840e-01, -1.102e+00, 2.869e-01, 6.330e-01, 9.123e-01, -1.201e-01, -2.781e-01, -4.382e-01, -1.254e-01, 6.065e-01, -6.880e-01, 1.128e-01, -6.933e-01) * s0_1_2;
	r2 += M4(-7.952e-02, 5.959e-02, -1.528e-01, -5.136e-02, 3.300e-01, -3.512e-02, -3.021e-01, -2.954e-01, 3.022e-01, 5.607e-02, 2.602e-02, -4.831e-02, 6.424e-02, -1.923e-01, 1.568e-01, 2.176e-01) * s0_1_2;
	r0 += M4(2.706e-01, 5.879e-01, 2.629e-01, -1.426e-01, -6.368e-01, -5.643e-01, 1.887e-02, 1.771e-01, -4.521e-01, -1.616e-01, 3.018e-01, 2.438e-02, -2.795e-01, -3.971e-01, -4.098e-01, 1.343e-01) * s0_2_0;
	r1 += M4(1.268e-01, 1.647e-01, -2.773e-01, 4.770e-01, -6.959e-01, 2.323e-01, 3.616e-01, 6.216e-01, 3.213e-01, -1.880e-01, 5.501e-02, -2.183e-01, -7.806e-02, 8.040e-02, 4.507e-02, -6.842e-02) * s0_2_0;
	r2 += M4(-2.998e-01, 1.962e-01, -7.894e-01, -2.447e-01, -3.484e-01, -4.054e-01, 7.127e-02, -1.588e-02, 1.614e-02, 1.444e-02, -1.207e-02, 6.096e-02, 4.941e-01, -2.163e-01, 2.244e-01, 2.498e-02) * s0_2_0;
	r0 += M4(-1.447e+00, 1.452e-01, 1.322e+00, 1.028e-02, 7.231e-01, 1.754e-01, 4.014e-01, -3.135e-01, 2.757e-02, -5.404e-01, 3.021e-01, 8.553e-02, -9.312e+00, -2.508e-01, -5.760e-01, 1.130e-01) * s0_2_1;
	r1 += M4(3.935e-01, 2.202e-01, 2.391e-01, -2.595e-01, 3.828e-01, -1.858e+00, -9.383e-01, -6.727e-01, 1.652e-01, -1.416e-01, -5.710e-02, 5.193e-02, -5.890e-02, 1.495e-01, -2.039e-02, 2.072e-01) * s0_2_1;
	r2 += M4(-7.753e-01, -3.514e-01, -1.847e-01, -7.207e-03, 2.811e-01, -1.821e-01, 1.364e-01, 1.768e-01, 1.536e-01, 3.753e-02, 5.310e-02, -2.629e-02, 4.976e-01, 1.821e-01, -2.711e-01, -3.016e-01) * s0_2_1;
	r0 += M4(-8.137e-01, -6.607e-01, 1.400e-01, -8.144e-02, -9.576e-01, -5.831e-02, 2.432e-01, 3.049e-01, -5.743e-02, -2.831e-02, -2.690e-01, 5.583e-02, -1.890e+00, 2.368e-01, -1.347e-01, -1.148e-01) * s0_2_2;
	r1 += M4(-4.208e-01, 1.870e-01, -3.689e-01, 1.623e-01, 3.217e-01, 2.320e-01, -5.033e-01, 4.922e-01, -1.260e-01, -8.921e-02, 2.130e-01, 7.780e-02, -4.170e-01, -1.381e-01, 9.478e-02, -2.959e-01) * s0_2_2;
	r2 += M4(-2.027e-01, 4.087e-02, -4.171e-02, -9.742e-02, 4.005e-01, -1.983e-01, -1.210e-01, 2.510e-01, 2.178e-01, -1.112e-01, 2.475e-02, 6.320e-02, 3.331e-01, 1.679e-01, 1.619e-01, -9.359e-02) * s0_2_2;
	r0 += V4(-1.580e-02, -5.017e-02, -2.899e-02, -2.876e-03);
	r0 = max(r0, V4(0.0));
	imageStore(out_image, opos + ivec2(0, 0), vec4(r0));
	r1 += V4(-4.604e-02, 1.302e-02, -2.325e-02, -2.119e-02);
	r1 = max(r1, V4(0.0));
	imageStore(out_image, opos + ivec2(1, 0), vec4(r1));
	r2 += V4(-4.513e-02, -2.609e-02, -2.517e-03, -1.450e-02);
	r2 = max(r2, V4(0.0));
	imageStore(out_image, opos + ivec2(2, 0), vec4(r2));
}

//!DESC CuNNy-fast-conv2
//!HOOK LUMA
//!COMPUTE 16 8 8 8
//!BIND conv1
//!BIND LUMA
//!SAVE conv2
//!WIDTH LUMA.w 2 *
//!HEIGHT LUMA.h
//!COMPONENTS 4
//!WHEN OUTPUT.w LUMA.w / 1.3 > OUTPUT.h LUMA.h / 1.3 > *
#extension GL_EXT_shader_explicit_arithmetic_types_float16 : enable
#ifdef GL_EXT_shader_explicit_arithmetic_types_float16
#	define V4 f16vec4
#	define M4 f16mat4
#	define F float16_t
#else
#	define V4 vec4
#	define M4 mat4
#	define F float
#endif
#define l0(x, y) V4((conv1_mul * texelFetch(conv1_raw, clamp(pos + ivec2(x, y), ivec2(0), sz) * ivec2(3, 1) + ivec2(0, 0), 0)))
#define l1(x, y) V4((conv1_mul * texelFetch(conv1_raw, clamp(pos + ivec2(x, y), ivec2(0), sz) * ivec2(3, 1) + ivec2(1, 0), 0)))
#define l2(x, y) V4((conv1_mul * texelFetch(conv1_raw, clamp(pos + ivec2(x, y), ivec2(0), sz) * ivec2(3, 1) + ivec2(2, 0), 0)))
shared V4 G[3][10][10];
void hook() {
	ivec2 xy = ivec2(gl_LocalInvocationID.xy);
	ivec2 pos = ivec2(gl_WorkGroupID.xy) * ivec2(8, 8) + xy;
	ivec2 opos = pos * ivec2(2, 1);
	ivec2 sz = ivec2(LUMA_size) - ivec2(1);
	for (int y = 0; y < 10; y += 8) {
		int ay = xy.y + y;
		if (ay >= 10) break;
		for (int x = 0; x < 10; x += 8) {
			int ax = xy.x + x;
			if (ax >= 10) break;
			G[0][ay][ax] = l0(x - 1, y - 1);
			G[1][ay][ax] = l1(x - 1, y - 1);
			G[2][ay][ax] = l2(x - 1, y - 1);
		}
	}
	barrier();
	V4 s0_0_0, s0_0_1, s0_0_2, s0_1_0, s0_1_1, s0_1_2, s0_2_0, s0_2_1, s0_2_2, s1_0_0, s1_0_1, s1_0_2, s1_1_0, s1_1_1, s1_1_2, s1_2_0, s1_2_1, s1_2_2;
	V4 r0, r1;
	r0 = V4(0.0); r1 = V4(0.0);
	s0_0_0 = G[0][xy.y+0][xy.x+0]; s0_0_1 = G[0][xy.y+0][xy.x+1];
	s0_0_2 = G[0][xy.y+0][xy.x+2]; s0_1_0 = G[0][xy.y+1][xy.x+0];
	s0_1_1 = G[0][xy.y+1][xy.x+1]; s0_1_2 = G[0][xy.y+1][xy.x+2];
	s0_2_0 = G[0][xy.y+2][xy.x+0]; s0_2_1 = G[0][xy.y+2][xy.x+1];
	s0_2_2 = G[0][xy.y+2][xy.x+2]; s1_0_0 = G[1][xy.y+0][xy.x+0];
	s1_0_1 = G[1][xy.y+0][xy.x+1]; s1_0_2 = G[1][xy.y+0][xy.x+2];
	s1_1_0 = G[1][xy.y+1][xy.x+0]; s1_1_1 = G[1][xy.y+1][xy.x+1];
	s1_1_2 = G[1][xy.y+1][xy.x+2]; s1_2_0 = G[1][xy.y+2][xy.x+0];
	s1_2_1 = G[1][xy.y+2][xy.x+1]; s1_2_2 = G[1][xy.y+2][xy.x+2];
	r0 += M4(-4.407e-02, -1.593e-01, -1.949e-01, -1.066e-01, 2.293e-03, -1.935e-02, 6.752e-02, -3.058e-02, -5.590e-02, -2.407e-01, -1.381e-01, -8.716e-03, -1.528e-02, -1.367e-02, 1.606e-02, 1.410e-02) * s0_0_0;
	r1 += M4(-2.070e-01, -1.453e-01, -6.984e-03, -6.388e-02, -1.002e-01, -6.146e-02, 6.057e-03, -5.537e-02, -2.273e-01, -7.400e-02, -9.239e-03, -6.550e-02, 1.095e-01, 3.702e-02, -1.817e-02, 1.779e-02) * s0_0_0;
	r0 += M4(-1.577e-01, -2.192e-01, -1.440e-01, -9.405e-02, 9.951e-02, 1.323e-01, -7.934e-02, -1.047e-01, -6.703e-01, -6.111e-01, -3.311e-01, -2.222e-01, 6.439e-02, 1.532e-01, 1.953e-01, 1.059e-01) * s0_0_1;
	r1 += M4(-1.656e-01, -5.872e-01, -4.751e-02, -4.485e-02, -1.117e-01, 1.642e-01, -4.822e-02, 7.023e-02, -1.476e-02, -1.823e-01, -4.323e-02, -1.568e-01, -2.716e-02, 5.758e-02, -5.250e-02, 8.046e-02) * s0_0_1;
	r0 += M4(-2.803e-01, -9.204e-02, 8.253e-03, -6.315e-02, -1.314e-01, -1.187e-01, 4.053e-03, -3.474e-02, -5.090e-02, 3.163e-02, -2.582e-02, -1.328e-02, -1.730e-02, -1.014e-02, 6.133e-03, 7.535e-04) * s0_0_2;
	r1 += M4(-2.046e-03, -2.574e-01, -1.074e-02, -1.047e-01, 4.572e-02, -9.718e-02, -1.594e-02, -5.948e-02, 4.033e-03, 5.553e-02, 5.529e-02, 2.581e-02, -2.704e-03, -6.660e-02, -8.591e-02, 4.758e-03) * s0_0_2;
	r0 += M4(7.410e-02, 1.460e-01, 1.712e-02, -1.400e-01, -2.733e-02, -2.304e-02, -3.406e-02, 1.234e-02, -2.032e-02, -9.111e-02, -1.028e-01, -5.372e-02, -5.138e-02, -8.357e-03, -1.983e-02, 1.699e-02) * s0_1_0;
	r1 += M4(-2.996e-01, -1.725e-01, 3.755e-02, -4.138e-02, 1.734e-01, -3.701e-01, 9.957e-03, -3.581e-02, -4.711e-02, -1.929e-01, -1.343e-01, -5.456e-02, 1.460e-01, 1.536e-01, -5.670e-02, 2.445e-02) * s0_1_0;
	r0 += M4(9.054e-02, 6.004e-02, -2.823e-02, -3.385e-01, -9.476e-02, -1.977e-01, -1.888e-01, 1.557e-01, -4.699e-02, -1.254e-01, -1.909e-01, -1.029e-01, 9.027e-02, -1.519e-01, -5.573e-02, 2.355e-01) * s0_1_1;
	r1 += M4(-7.009e-02, -1.166e-01, -2.559e-01, -1.089e-01, -2.001e-01, 9.634e-03, 1.798e-01, 6.647e-02, -1.887e-01, -7.404e-01, -3.774e-01, 6.535e-03, 1.820e-01, 1.636e-01, 2.911e-02, -1.138e-01) * s0_1_1;
	r0 += M4(1.857e-01, 1.153e-01, 7.727e-02, 1.255e-01, -8.084e-02, 6.101e-03, 3.823e-02, -1.129e-01, -1.441e-01, -8.880e-02, -5.212e-03, -2.669e-02, -2.293e-01, 1.393e-02, 1.077e-01, 1.458e-01) * s0_1_2;
	r1 += M4(5.846e-02, 6.140e-02, -7.553e-02, 2.132e-02, 3.397e-02, -1.312e-01, -1.450e-01, -1.754e-02, 4.844e-02, -1.749e-02, -1.313e-01, -2.225e-02, 3.430e-02, -1.348e-01, 1.729e-02, -8.190e-02) * s0_1_2;
	r0 += M4(-7.339e-03, -2.380e-02, -1.081e-02, 2.784e-02, 1.343e-02, 6.323e-02, 6.604e-03, 6.920e-03, -6.021e-03, -4.046e-03, -1.333e-02, -5.364e-03, -1.392e-02, -1.049e-02, 2.783e-02, 4.155e-02) * s0_2_0;
	r1 += M4(6.412e-02, 4.825e-02, 1.002e-02, 3.699e-02, -1.148e-01, 4.767e-02, -1.093e-02, 2.605e-02, -1.057e-02, 2.017e-03, -3.888e-03, -2.453e-02, 6.458e-02, 1.091e-01, -5.159e-02, 2.114e-02) * s0_2_0;
	r0 += M4(-3.748e-02, -4.776e-02, -5.656e-02, 5.581e-02, 1.436e-02, 4.962e-03, 1.204e-02, -1.284e-01, -1.818e-02, -5.971e-02, -8.862e-02, -5.023e-02, 3.325e-04, 4.817e-02, 1.852e-03, -6.857e-02) * s0_2_1;
	r1 += M4(3.906e-02, -2.366e-02, 1.207e-01, -5.378e-04, 9.176e-03, -6.562e-03, -1.134e-01, -6.376e-03, -7.788e-02, -2.531e-01, -9.600e-02, -6.700e-03, -6.576e-02, -2.456e-01, -1.921e-02, 2.067e-03) * s0_2_1;
	r0 += M4(-2.076e-02, -1.991e-02, -6.184e-03, 3.513e-03, 2.279e-02, -1.128e-02, -2.944e-02, 4.314e-02, -2.945e-02, -1.539e-02, 3.825e-04, -5.017e-02, 8.423e-02, 2.704e-02, 1.396e-02, -6.150e-03) * s0_2_2;
	r1 += M4(-7.238e-03, -5.738e-02, 9.682e-02, 6.762e-03, 1.599e-02, 5.112e-02, 4.772e-02, 1.260e-02, 7.268e-03, -1.159e-02, -1.233e-01, -7.516e-03, -6.246e-03, 7.573e-02, -1.528e-01, 2.721e-02) * s0_2_2;
	r0 += M4(-3.554e-02, -7.853e-02, 2.458e-02, 5.703e-02, -1.697e-02, -4.430e-02, -2.558e-02, 3.258e-02, 9.523e-03, -1.375e-02, 6.918e-02, -2.101e-02, 3.284e-02, 5.924e-02, 1.712e-02, 1.920e-02) * s1_0_0;
	r1 += M4(5.827e-02, -1.714e-02, -1.474e-02, -5.558e-03, -2.515e-02, 4.957e-02, 5.785e-04, -4.276e-03, 1.035e-01, 1.278e-01, 6.762e-02, -1.675e-02, 3.776e-02, 1.134e-02, -8.124e-03, 9.007e-03) * s1_0_0;
	r0 += M4(-2.182e-01, 3.276e-02, 1.408e-01, 1.018e-01, -1.450e-01, -1.401e-01, -6.033e-02, -7.349e-02, 6.931e-02, 1.323e-01, 1.270e-01, 6.710e-02, 3.843e-02, -2.390e-02, -5.353e-02, 1.453e-02) * s1_0_1;
	r1 += M4(6.438e-02, 1.078e-01, 2.522e-02, 2.587e-03, -2.510e-03, 2.621e-02, -1.015e-02, -4.936e-02, -1.185e-02, 2.363e-01, 8.436e-03, 1.343e-01, 1.233e-02, -9.237e-02, 3.267e-02, -2.496e-02) * s1_0_1;
	r0 += M4(1.523e-01, 4.626e-02, 2.833e-04, 8.863e-03, -1.036e-02, -2.333e-03, -1.569e-02, -8.346e-03, 1.677e-02, 2.232e-02, 4.910e-02, 3.407e-02, 7.316e-03, 1.051e-02, -2.602e-02, -2.264e-02) * s1_0_2;
	r1 += M4(-5.166e-03, -3.069e-02, -8.382e-04, 1.887e-02, -1.743e-02, -1.259e-02, 3.313e-02, 2.727e-02, -8.650e-03, 2.960e-02, -3.366e-02, -6.656e-03, 2.603e-04, -1.743e-02, -6.757e-04, -1.856e-03) * s1_0_2;
	r0 += M4(-7.120e-02, -1.472e-01, -1.997e-01, -6.363e-02, -1.542e-02, -1.233e-02, 1.563e-01, -1.108e-01, -1.460e-01, -4.736e-01, -2.686e-01, -1.655e-01, 5.918e-02, -3.023e-02, -1.446e-01, -6.654e-03) * s1_1_0;
	r1 += M4(-2.183e-01, -2.471e-01, -1.066e-01, 4.630e-02, 1.466e-01, -6.835e-01, -5.304e-02, -1.146e-01, -2.192e-01, -4.910e-01, -1.644e-01, 1.284e-01, -2.423e-01, 2.860e-01, 5.314e-02, -6.464e-03) * s1_1_0;
	r0 += M4(-5.402e-01, -5.059e-01, 4.157e-02, -3.344e-01, 3.489e-01, 2.407e-01, -9.401e-02, 1.352e-02, -3.193e-01, 1.052e-01, 1.830e-01, 2.087e-01, -3.640e-01, -3.301e-01, -1.612e-01, -3.450e-01) * s1_1_1;
	r1 += M4(1.120e-01, -5.240e-01, -2.130e-01, -2.940e-01, -1.567e-01, 2.542e-01, -1.436e-02, 1.987e-01, 7.213e-02, -2.591e-02, -4.524e-02, 3.670e-02, -1.362e-01, -1.442e-01, -3.772e-03, -6.165e-02) * s1_1_1;
	r0 += M4(8.519e-03, 1.295e-01, 4.648e-02, 9.851e-02, -8.456e-02, -4.504e-02, -2.741e-03, -1.505e-02, 2.057e-02, -6.511e-02, -8.330e-02, -7.593e-02, -1.704e-01, -1.489e-01, -1.116e-01, -1.154e-01) * s1_1_2;
	r1 += M4(-3.446e-02, 1.763e-01, 1.684e-01, 4.323e-02, 3.333e-02, 6.916e-02, -7.278e-02, -3.902e-02, -9.523e-03, -9.318e-02, 5.704e-02, -2.950e-02, -3.844e-03, -1.025e-01, 3.222e-02, -3.372e-02) * s1_1_2;
	r0 += M4(1.835e-02, -8.958e-03, -1.840e-02, -6.772e-02, 5.379e-03, 2.653e-02, 2.805e-02, 3.115e-02, 3.137e-02, 3.912e-02, 3.282e-02, -1.122e-01, -1.527e-02, -4.131e-03, -5.384e-02, -3.430e-02) * s1_2_0;
	r1 += M4(-1.466e-01, -1.146e-01, -5.510e-03, 1.677e-02, 7.740e-02, 6.846e-03, -1.461e-02, -2.304e-02, 2.914e-02, 1.000e-01, -7.115e-02, -5.550e-02, -2.990e-01, 2.250e-01, 3.703e-02, 2.012e-02) * s1_2_0;
	r0 += M4(-6.996e-02, 5.620e-03, 1.711e-01, -2.861e-01, -3.821e-02, -7.201e-02, -2.034e-02, 1.925e-02, 7.348e-02, 4.185e-02, 4.286e-02, 7.201e-02, -8.920e-02, -2.031e-01, -1.506e-01, -2.374e-01) * s1_2_1;
	r1 += M4(6.742e-02, -2.020e-01, -2.064e-01, -1.376e-02, -1.186e-02, 1.136e-01, 2.247e-01, -4.701e-02, 3.715e-02, 2.588e-01, -1.489e-01, 9.825e-02, -3.610e-02, -1.218e-01, -3.010e-01, -2.805e-02) * s1_2_1;
	r0 += M4(1.130e-02, -4.132e-02, -3.077e-02, 3.429e-02, 2.523e-02, 3.650e-02, 3.824e-02, 2.611e-02, -7.634e-03, 2.650e-02, 3.633e-02, 2.580e-02, -4.525e-02, -2.702e-02, -2.098e-02, -7.283e-02) * s1_2_2;
	r1 += M4(-4.356e-02, 1.075e-01, 5.663e-03, 2.456e-02, 1.035e-02, -4.601e-02, -3.397e-02, 1.582e-02, -2.274e-03, 4.503e-02, -2.202e-03, -5.377e-03, -3.039e-02, -6.586e-02, -1.091e-01, -6.750e-03) * s1_2_2;
	s0_0_0 = G[2][xy.y+0][xy.x+0]; s0_0_1 = G[2][xy.y+0][xy.x+1];
	s0_0_2 = G[2][xy.y+0][xy.x+2]; s0_1_0 = G[2][xy.y+1][xy.x+0];
	s0_1_1 = G[2][xy.y+1][xy.x+1]; s0_1_2 = G[2][xy.y+1][xy.x+2];
	s0_2_0 = G[2][xy.y+2][xy.x+0]; s0_2_1 = G[2][xy.y+2][xy.x+1];
	s0_2_2 = G[2][xy.y+2][xy.x+2];
	r0 += M4(1.206e-02, -1.866e-02, -1.100e-01, -1.882e-02, -3.601e-02, 2.877e-02, 4.193e-02, 4.270e-02, -3.322e-03, 7.425e-03, 1.125e-02, -5.897e-04, 1.391e-03, 3.794e-03, -1.351e-02, 1.896e-03) * s0_0_0;
	r1 += M4(-1.058e-01, 1.123e-01, 3.433e-02, -1.314e-01, 3.809e-01, -7.357e-02, -2.316e-02, 2.417e-01, 2.644e-02, -5.366e-02, -5.772e-03, 3.005e-02, 1.183e-02, 3.339e-02, -1.837e-03, 2.158e-02) * s0_0_0;
	r0 += M4(-1.129e-01, -1.047e-01, 6.949e-03, -2.337e-01, 3.740e-01, 4.611e-01, 1.774e-01, 5.410e-01, 6.458e-02, -1.212e-02, -8.801e-02, -2.765e-02, -7.009e-02, -7.300e-02, 3.663e-02, 6.358e-02) * s0_0_1;
	r1 += M4(-1.623e-01, -1.819e-01, -4.219e-02, -9.416e-03, 3.955e-01, -2.348e-01, 1.105e-01, 1.104e-02, -1.964e-01, 4.247e-02, 2.427e-03, -1.332e-02, 4.041e-02, -3.271e-02, -3.991e-02, -9.244e-03) * s0_0_1;
	r0 += M4(-2.335e-02, -3.235e-02, -7.749e-02, -8.130e-02, 3.992e-01, 2.032e-01, 1.141e-01, 1.656e-01, -2.558e-01, -3.260e-01, -2.822e-01, -2.469e-01, -1.028e-02, 4.949e-02, 5.534e-02, 6.020e-02) * s0_0_2;
	r1 += M4(-3.453e-02, -2.374e-02, -1.359e-01, -3.767e-02, -2.081e-03, 7.472e-02, 1.616e-01, 1.614e-01, 2.284e-02, 1.836e-01, -1.185e-02, -1.216e-01, 1.659e-02, -1.092e-01, 1.469e-02, 5.691e-02) * s0_0_2;
	r0 += M4(-2.661e-02, 5.774e-02, -5.810e-02, 1.222e-02, 1.210e-02, 5.701e-02, 2.475e-02, 6.686e-02, 4.072e-03, -1.864e-02, -2.060e-02, 3.173e-03, 1.693e-02, 2.190e-03, -2.485e-02, -1.297e-02) * s0_1_0;
	r1 += M4(-1.256e-01, -1.957e-01, 3.031e-02, -1.953e-01, 6.960e-02, 1.644e-01, -3.503e-02, 7.278e-02, -3.096e-02, -1.270e-01, 8.898e-03, -6.846e-03, -9.641e-02, 1.396e-01, -1.716e-02, 2.326e-02) * s0_1_0;
	r0 += M4(-1.994e-02, -3.506e-01, -1.985e-01, 5.414e-02, 7.556e-02, 7.251e-02, 5.368e-03, -2.606e-01, -8.520e-02, 4.569e-02, 7.845e-02, 2.265e-02, 8.525e-02, 2.241e-01, 1.372e-01, -1.456e-01) * s0_1_1;
	r1 += M4(1.698e-01, -3.787e-01, -9.325e-02, -8.616e-02, -3.326e-01, -4.601e-01, 7.802e-02, 3.650e-02, 3.585e-01, 3.215e-02, 1.121e-01, 3.801e-01, 1.066e-01, 4.131e-01, -4.979e-02, -9.985e-02) * s0_1_1;
	r0 += M4(-4.033e-01, -2.068e-01, -1.597e-01, -5.603e-02, 5.428e-02, -7.016e-03, -2.290e-02, -5.822e-02, 5.059e-01, 3.650e-01, 5.089e-02, 1.255e-01, 1.929e-01, 2.202e-01, 3.646e-01, 2.906e-01) * s0_1_2;
	r1 += M4(-3.018e-02, -7.786e-03, 1.797e-01, -9.549e-02, 2.907e-02, 1.313e-01, -3.761e-03, 8.792e-03, -1.352e-01, 5.759e-02, 3.311e-02, 1.036e-01, 3.386e-02, -4.015e-01, -1.831e-01, 5.461e-02) * s0_1_2;
	r0 += M4(4.454e-03, -4.336e-02, 5.890e-03, 3.971e-03, 1.074e-02, 2.341e-02, -1.715e-02, -2.384e-03, -5.893e-03, 1.162e-02, -1.796e-03, -7.319e-03, 8.779e-03, 2.315e-02, 3.253e-02, -1.480e-02) * s0_2_0;
	r1 += M4(1.126e-01, -1.365e-01, -2.366e-02, -1.401e-02, -1.928e-02, 4.423e-02, 5.877e-05, 5.113e-03, -7.824e-02, -5.871e-02, -1.937e-02, -1.413e-02, -3.035e-02, -1.450e-01, 5.847e-02, -1.599e-02) * s0_2_0;
	r0 += M4(2.109e-02, 1.421e-01, 3.776e-02, 9.659e-02, -1.520e-02, -1.023e-01, -2.951e-02, 2.207e-03, -3.235e-02, -6.694e-02, -2.998e-02, -4.797e-02, 2.650e-02, 5.820e-02, 1.147e-01, 1.111e-01) * s0_2_1;
	r1 += M4(-1.077e-01, -2.239e-02, 5.100e-02, -5.435e-02, 3.673e-02, 2.193e-02, 1.282e-01, -3.686e-02, 9.637e-02, 1.033e-01, -1.392e-01, 3.151e-02, -1.889e-02, 8.131e-02, 2.725e-01, 1.345e-01) * s0_2_1;
	r0 += M4(5.039e-02, 5.562e-03, 2.609e-02, -6.472e-02, -4.272e-02, 4.307e-02, 3.232e-02, 3.674e-02, -5.332e-02, -9.790e-02, -9.195e-02, -1.748e-02, -1.363e-02, -7.223e-03, -2.472e-02, -6.909e-02) * s0_2_2;
	r1 += M4(2.502e-02, 7.935e-03, -1.205e-01, -3.545e-02, -1.585e-03, -3.406e-02, 4.229e-02, 3.714e-03, -4.285e-02, 1.927e-01, 1.891e-01, 4.104e-02, -1.617e-02, -3.259e-01, 3.643e-01, 1.123e-01) * s0_2_2;
	r0 += V4(-1.463e-03, -1.915e-03, -2.827e-03, -1.845e-03);
	r0 = max(r0, V4(0.0));
	imageStore(out_image, opos + ivec2(0, 0), vec4(r0));
	r1 += V4(-1.362e-03, -6.698e-03, -9.070e-04, -1.551e-03);
	r1 = max(r1, V4(0.0));
	imageStore(out_image, opos + ivec2(1, 0), vec4(r1));
}

//!DESC CuNNy-fast-out-shuffle
//!HOOK LUMA
//!COMPUTE 16 16 8 8
//!BIND conv2
//!BIND LUMA
//!WIDTH LUMA.w 2 *
//!HEIGHT LUMA.h 2 *
//!COMPONENTS 1
//!WHEN OUTPUT.w LUMA.w / 1.3 > OUTPUT.h LUMA.h / 1.3 > *
#extension GL_EXT_shader_explicit_arithmetic_types_float16 : enable
#ifdef GL_EXT_shader_explicit_arithmetic_types_float16
#	define V4 f16vec4
#	define M4 f16mat4
#	define F float16_t
#else
#	define V4 vec4
#	define M4 mat4
#	define F float
#endif
#define l0(x, y) V4((conv2_mul * texelFetch(conv2_raw, clamp(pos + ivec2(x, y), ivec2(0), sz) * ivec2(2, 1) + ivec2(0, 0), 0)))
#define l1(x, y) V4((conv2_mul * texelFetch(conv2_raw, clamp(pos + ivec2(x, y), ivec2(0), sz) * ivec2(2, 1) + ivec2(1, 0), 0)))
shared V4 G[2][10][10];
void hook() {
	ivec2 xy = ivec2(gl_LocalInvocationID.xy);
	ivec2 pos = ivec2(gl_WorkGroupID.xy) * ivec2(8, 8) + xy;
	ivec2 opos = pos * ivec2(2, 2);
	ivec2 sz = ivec2(LUMA_size) - ivec2(1);
	for (int y = 0; y < 10; y += 8) {
		int ay = xy.y + y;
		if (ay >= 10) break;
		for (int x = 0; x < 10; x += 8) {
			int ax = xy.x + x;
			if (ax >= 10) break;
			G[0][ay][ax] = l0(x - 1, y - 1);
			G[1][ay][ax] = l1(x - 1, y - 1);
		}
	}
	barrier();
	V4 s0_0_0, s0_0_1, s0_0_2, s0_1_0, s0_1_1, s0_1_2, s0_2_0, s0_2_1, s0_2_2, s1_0_0, s1_0_1, s1_0_2, s1_1_0, s1_1_1, s1_1_2, s1_2_0, s1_2_1, s1_2_2;
	V4 r0;
	r0 = V4(0.0);
	s0_0_0 = G[0][xy.y+0][xy.x+0]; s0_0_1 = G[0][xy.y+0][xy.x+1];
	s0_0_2 = G[0][xy.y+0][xy.x+2]; s0_1_0 = G[0][xy.y+1][xy.x+0];
	s0_1_1 = G[0][xy.y+1][xy.x+1]; s0_1_2 = G[0][xy.y+1][xy.x+2];
	s0_2_0 = G[0][xy.y+2][xy.x+0]; s0_2_1 = G[0][xy.y+2][xy.x+1];
	s0_2_2 = G[0][xy.y+2][xy.x+2]; s1_0_0 = G[1][xy.y+0][xy.x+0];
	s1_0_1 = G[1][xy.y+0][xy.x+1]; s1_0_2 = G[1][xy.y+0][xy.x+2];
	s1_1_0 = G[1][xy.y+1][xy.x+0]; s1_1_1 = G[1][xy.y+1][xy.x+1];
	s1_1_2 = G[1][xy.y+1][xy.x+2]; s1_2_0 = G[1][xy.y+2][xy.x+0];
	s1_2_1 = G[1][xy.y+2][xy.x+1]; s1_2_2 = G[1][xy.y+2][xy.x+2];
	r0 += M4(6.815e-02, 1.091e-02, -1.110e-02, -1.724e-03, 9.753e-03, 2.867e-03, -5.567e-04, -9.908e-07, 1.740e-02, -1.437e-03, -6.015e-03, -4.676e-08, 1.507e-02, -1.429e-02, -6.680e-03, -7.359e-04) * s0_0_0;
	r0 += M4(6.779e-04, 2.825e-02, -1.894e-03, 2.284e-03, 9.780e-03, 2.899e-02, -5.681e-03, -1.526e-02, 1.569e-02, 4.676e-02, -9.071e-03, -3.829e-03, 6.174e-03, -4.954e-02, 4.214e-03, 1.586e-02) * s0_0_1;
	r0 += M4(7.718e-04, 4.227e-04, 4.171e-05, 1.083e-03, -1.575e-03, 4.466e-03, -8.190e-05, -5.259e-03, 9.659e-03, 5.905e-03, -5.498e-03, -7.608e-03, -9.556e-03, -2.386e-02, -4.921e-04, 2.800e-03) * s0_0_2;
	r0 += M4(-5.105e-01, -4.069e-02, 2.588e-01, -5.113e-03, 1.191e-02, 7.532e-03, 3.626e-02, -8.323e-03, 9.155e-02, 2.964e-04, 8.276e-02, 3.198e-04, 8.165e-02, -2.126e-03, 9.333e-02, 1.801e-02) * s0_1_0;
	r0 += M4(-3.430e-02, 7.137e-02, -1.708e-02, 9.199e-02, 1.496e-01, -5.918e-01, 1.375e-01, 2.094e-01, -3.488e-01, 1.764e-01, -1.353e-01, 2.027e-01, 1.811e-01, 1.587e-01, 5.828e-02, -5.806e-01) * s0_1_1;
	r0 += M4(-7.368e-04, -2.352e-03, 1.029e-03, 6.086e-03, -1.340e-02, -1.077e-02, -1.925e-03, -3.387e-03, 6.193e-03, -4.872e-02, 5.033e-03, -5.696e-02, -1.105e-02, 6.946e-03, -9.127e-03, 4.817e-03) * s0_1_2;
	r0 += M4(-1.715e-02, -1.293e-02, 7.106e-02, 4.432e-02, 1.181e-02, 4.348e-03, 4.864e-03, -6.942e-03, 1.189e-03, 1.655e-03, 3.188e-02, -1.778e-03, 1.575e-03, -2.053e-04, 2.159e-02, 9.956e-04) * s0_2_0;
	r0 += M4(8.220e-03, 6.117e-03, -1.517e-02, 5.674e-02, 1.513e-04, 2.313e-02, 2.885e-02, -1.586e-02, 3.315e-02, 1.127e-02, -5.306e-02, 3.719e-02, -4.780e-03, -1.489e-02, 3.303e-02, 5.725e-02) * s0_2_1;
	r0 += M4(7.272e-04, 3.442e-03, 1.012e-04, 3.058e-03, -2.746e-03, -6.697e-03, 2.788e-04, -1.309e-02, -4.998e-03, -1.933e-02, -7.730e-03, -2.897e-02, -7.349e-04, -5.323e-03, -8.722e-04, 2.665e-03) * s0_2_2;
	r0 += M4(-1.605e-02, -5.113e-03, -7.950e-03, -1.521e-04, -2.679e-02, 2.230e-03, -2.451e-03, -7.403e-04, 1.773e-01, 8.895e-02, 1.605e-02, 8.431e-03, 2.351e-02, 6.364e-03, 1.413e-02, 1.905e-04) * s1_0_0;
	r0 += M4(-1.422e-01, -1.697e-02, 9.922e-03, -1.176e-02, 5.531e-02, -3.949e-02, 2.224e-03, 5.198e-03, 4.645e-02, 1.489e-01, -1.175e-02, 1.645e-03, 3.115e-02, 2.948e-02, 2.165e-02, 2.277e-02) * s1_0_1;
	r0 += M4(-2.850e-02, -6.217e-02, 3.834e-03, -3.846e-03, -3.907e-03, 2.167e-02, -2.552e-03, 8.112e-04, -2.137e-03, -9.073e-03, -3.719e-04, -6.207e-03, 4.165e-03, 2.641e-02, 4.285e-03, 1.161e-02) * s1_0_2;
	r0 += M4(1.507e-02, -3.646e-03, 1.523e-02, -4.886e-04, -3.796e-02, 2.523e-02, -4.848e-02, 3.114e-02, 3.012e-02, 1.316e-02, -2.469e-01, -8.544e-02, -2.349e-02, 3.053e-03, -2.116e-02, -9.812e-04) * s1_1_0;
	r0 += M4(1.014e-01, 1.199e-01, -4.898e-01, 1.354e-01, 1.841e-01, -1.733e-01, 1.821e-01, -2.028e-01, -1.788e-02, 1.119e-02, 7.895e-03, -1.192e-01, -8.024e-02, -1.873e-01, -8.266e-02, -1.977e-01) * s1_1_1;
	r0 += M4(4.528e-03, 7.932e-02, 1.608e-02, 1.211e-01, -1.224e-02, 3.575e-02, -1.029e-02, 3.528e-02, 4.671e-04, -2.187e-04, -3.017e-04, -1.221e-02, 3.211e-02, 8.323e-02, 1.933e-02, 9.008e-02) * s1_1_2;
	r0 += M4(-1.095e-03, 5.798e-07, 8.444e-04, -2.301e-04, 1.899e-03, 4.334e-04, -9.262e-03, 8.393e-03, -2.690e-03, -1.627e-03, -6.173e-03, -2.680e-03, 4.199e-03, -1.380e-03, 4.431e-03, 1.529e-03) * s1_2_0;
	r0 += M4(-1.434e-02, -3.180e-04, 7.935e-02, 4.187e-02, -6.243e-03, 1.005e-02, 4.702e-02, -1.580e-02, -1.638e-03, -7.122e-04, -2.011e-03, -2.543e-03, 7.128e-03, 7.791e-03, 2.351e-02, 1.029e-02) * s1_2_1;
	r0 += M4(3.863e-03, 7.084e-03, 1.078e-03, 2.855e-02, 1.498e-03, 1.363e-03, -1.991e-03, 1.985e-02, 1.006e-03, -1.997e-03, -3.727e-05, -2.701e-03, -3.556e-03, 5.865e-03, 7.004e-04, 2.008e-02) * s1_2_2;
	r0 += V4(-2.137e-08, -2.894e-08, -1.772e-09, -3.214e-09);
	r0 = r0;
	vec2 opt = 0.5 * LUMA_pt;
	vec2 fpos = (vec2(opos) + vec2(0.5)) * opt;
	imageStore(out_image, opos + ivec2(0, 0), vec4(r0.x + LUMA_tex(fpos + vec2(0.0, 0.0) * opt).r, 0.0, 0.0, 1.0));
	imageStore(out_image, opos + ivec2(1, 0), vec4(r0.y + LUMA_tex(fpos + vec2(1.0, 0.0) * opt).r, 0.0, 0.0, 1.0));
	imageStore(out_image, opos + ivec2(0, 1), vec4(r0.z + LUMA_tex(fpos + vec2(0.0, 1.0) * opt).r, 0.0, 0.0, 1.0));
	imageStore(out_image, opos + ivec2(1, 1), vec4(r0.w + LUMA_tex(fpos + vec2(1.0, 1.0) * opt).r, 0.0, 0.0, 1.0));
}
